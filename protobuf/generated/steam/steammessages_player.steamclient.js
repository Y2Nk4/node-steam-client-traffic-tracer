/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
(function(global, factory) { /* global define, require, module */

    /* AMD */ if (typeof define === 'function' && define.amd)
        define(["protobufjs/minimal"], factory);

    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)
        module.exports = factory(require("protobufjs/minimal"));

})(this, function($protobuf) {
    "use strict";

    // Common aliases
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    
    // Exported root namespace
    var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});
    
    /**
     * EProfileCustomizationType enum.
     * @exports EProfileCustomizationType
     * @enum {number}
     * @property {number} k_EProfileCustomizationTypeInvalid=0 k_EProfileCustomizationTypeInvalid value
     * @property {number} k_EProfileCustomizationTypeRareAchievementShowcase=1 k_EProfileCustomizationTypeRareAchievementShowcase value
     * @property {number} k_EProfileCustomizationTypeGameCollector=2 k_EProfileCustomizationTypeGameCollector value
     * @property {number} k_EProfileCustomizationTypeItemShowcase=3 k_EProfileCustomizationTypeItemShowcase value
     * @property {number} k_EProfileCustomizationTypeTradeShowcase=4 k_EProfileCustomizationTypeTradeShowcase value
     * @property {number} k_EProfileCustomizationTypeBadges=5 k_EProfileCustomizationTypeBadges value
     * @property {number} k_EProfileCustomizationTypeFavoriteGame=6 k_EProfileCustomizationTypeFavoriteGame value
     * @property {number} k_EProfileCustomizationTypeScreenshotShowcase=7 k_EProfileCustomizationTypeScreenshotShowcase value
     * @property {number} k_EProfileCustomizationTypeCustomText=8 k_EProfileCustomizationTypeCustomText value
     * @property {number} k_EProfileCustomizationTypeFavoriteGroup=9 k_EProfileCustomizationTypeFavoriteGroup value
     * @property {number} k_EProfileCustomizationTypeRecommendation=10 k_EProfileCustomizationTypeRecommendation value
     * @property {number} k_EProfileCustomizationTypeWorkshopItem=11 k_EProfileCustomizationTypeWorkshopItem value
     * @property {number} k_EProfileCustomizationTypeMyWorkshop=12 k_EProfileCustomizationTypeMyWorkshop value
     * @property {number} k_EProfileCustomizationTypeArtworkShowcase=13 k_EProfileCustomizationTypeArtworkShowcase value
     * @property {number} k_EProfileCustomizationTypeVideoShowcase=14 k_EProfileCustomizationTypeVideoShowcase value
     * @property {number} k_EProfileCustomizationTypeGuides=15 k_EProfileCustomizationTypeGuides value
     * @property {number} k_EProfileCustomizationTypeMyGuides=16 k_EProfileCustomizationTypeMyGuides value
     * @property {number} k_EProfileCustomizationTypeAchievements=17 k_EProfileCustomizationTypeAchievements value
     * @property {number} k_EProfileCustomizationTypeGreenlight=18 k_EProfileCustomizationTypeGreenlight value
     * @property {number} k_EProfileCustomizationTypeMyGreenlight=19 k_EProfileCustomizationTypeMyGreenlight value
     * @property {number} k_EProfileCustomizationTypeSalien=20 k_EProfileCustomizationTypeSalien value
     */
    $root.EProfileCustomizationType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "k_EProfileCustomizationTypeInvalid"] = 0;
        values[valuesById[1] = "k_EProfileCustomizationTypeRareAchievementShowcase"] = 1;
        values[valuesById[2] = "k_EProfileCustomizationTypeGameCollector"] = 2;
        values[valuesById[3] = "k_EProfileCustomizationTypeItemShowcase"] = 3;
        values[valuesById[4] = "k_EProfileCustomizationTypeTradeShowcase"] = 4;
        values[valuesById[5] = "k_EProfileCustomizationTypeBadges"] = 5;
        values[valuesById[6] = "k_EProfileCustomizationTypeFavoriteGame"] = 6;
        values[valuesById[7] = "k_EProfileCustomizationTypeScreenshotShowcase"] = 7;
        values[valuesById[8] = "k_EProfileCustomizationTypeCustomText"] = 8;
        values[valuesById[9] = "k_EProfileCustomizationTypeFavoriteGroup"] = 9;
        values[valuesById[10] = "k_EProfileCustomizationTypeRecommendation"] = 10;
        values[valuesById[11] = "k_EProfileCustomizationTypeWorkshopItem"] = 11;
        values[valuesById[12] = "k_EProfileCustomizationTypeMyWorkshop"] = 12;
        values[valuesById[13] = "k_EProfileCustomizationTypeArtworkShowcase"] = 13;
        values[valuesById[14] = "k_EProfileCustomizationTypeVideoShowcase"] = 14;
        values[valuesById[15] = "k_EProfileCustomizationTypeGuides"] = 15;
        values[valuesById[16] = "k_EProfileCustomizationTypeMyGuides"] = 16;
        values[valuesById[17] = "k_EProfileCustomizationTypeAchievements"] = 17;
        values[valuesById[18] = "k_EProfileCustomizationTypeGreenlight"] = 18;
        values[valuesById[19] = "k_EProfileCustomizationTypeMyGreenlight"] = 19;
        values[valuesById[20] = "k_EProfileCustomizationTypeSalien"] = 20;
        return values;
    })();
    
    /**
     * EProfileCustomizationStyle enum.
     * @exports EProfileCustomizationStyle
     * @enum {number}
     * @property {number} k_EProfileCustomizationStyleDefault=0 k_EProfileCustomizationStyleDefault value
     * @property {number} k_EProfileCustomizationStyleSelected=1 k_EProfileCustomizationStyleSelected value
     * @property {number} k_EProfileCustomizationStyleRarest=2 k_EProfileCustomizationStyleRarest value
     * @property {number} k_EProfileCustomizationStyleMostRecent=3 k_EProfileCustomizationStyleMostRecent value
     * @property {number} k_EProfileCustomizationStyleRandom=4 k_EProfileCustomizationStyleRandom value
     * @property {number} k_EProfileCustomizationStyleHighestRated=5 k_EProfileCustomizationStyleHighestRated value
     */
    $root.EProfileCustomizationStyle = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "k_EProfileCustomizationStyleDefault"] = 0;
        values[valuesById[1] = "k_EProfileCustomizationStyleSelected"] = 1;
        values[valuesById[2] = "k_EProfileCustomizationStyleRarest"] = 2;
        values[valuesById[3] = "k_EProfileCustomizationStyleMostRecent"] = 3;
        values[valuesById[4] = "k_EProfileCustomizationStyleRandom"] = 4;
        values[valuesById[5] = "k_EProfileCustomizationStyleHighestRated"] = 5;
        return values;
    })();
    
    /**
     * ENotificationSetting enum.
     * @exports ENotificationSetting
     * @enum {number}
     * @property {number} k_ENotificationSettingNotifyUseDefault=0 k_ENotificationSettingNotifyUseDefault value
     * @property {number} k_ENotificationSettingAlways=1 k_ENotificationSettingAlways value
     * @property {number} k_ENotificationSettingNever=2 k_ENotificationSettingNever value
     */
    $root.ENotificationSetting = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "k_ENotificationSettingNotifyUseDefault"] = 0;
        values[valuesById[1] = "k_ENotificationSettingAlways"] = 1;
        values[valuesById[2] = "k_ENotificationSettingNever"] = 2;
        return values;
    })();
    
    $root.CPlayer_GetMutualFriendsForIncomingInvites_Request = (function() {
    
        /**
         * Properties of a CPlayer_GetMutualFriendsForIncomingInvites_Request.
         * @exports ICPlayer_GetMutualFriendsForIncomingInvites_Request
         * @interface ICPlayer_GetMutualFriendsForIncomingInvites_Request
         */
    
        /**
         * Constructs a new CPlayer_GetMutualFriendsForIncomingInvites_Request.
         * @exports CPlayer_GetMutualFriendsForIncomingInvites_Request
         * @classdesc Represents a CPlayer_GetMutualFriendsForIncomingInvites_Request.
         * @implements ICPlayer_GetMutualFriendsForIncomingInvites_Request
         * @constructor
         * @param {ICPlayer_GetMutualFriendsForIncomingInvites_Request=} [properties] Properties to set
         */
        function CPlayer_GetMutualFriendsForIncomingInvites_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CPlayer_GetMutualFriendsForIncomingInvites_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetMutualFriendsForIncomingInvites_Request
         * @static
         * @param {ICPlayer_GetMutualFriendsForIncomingInvites_Request=} [properties] Properties to set
         * @returns {CPlayer_GetMutualFriendsForIncomingInvites_Request} CPlayer_GetMutualFriendsForIncomingInvites_Request instance
         */
        CPlayer_GetMutualFriendsForIncomingInvites_Request.create = function create(properties) {
            return new CPlayer_GetMutualFriendsForIncomingInvites_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetMutualFriendsForIncomingInvites_Request message. Does not implicitly {@link CPlayer_GetMutualFriendsForIncomingInvites_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetMutualFriendsForIncomingInvites_Request
         * @static
         * @param {ICPlayer_GetMutualFriendsForIncomingInvites_Request} message CPlayer_GetMutualFriendsForIncomingInvites_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetMutualFriendsForIncomingInvites_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetMutualFriendsForIncomingInvites_Request message, length delimited. Does not implicitly {@link CPlayer_GetMutualFriendsForIncomingInvites_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetMutualFriendsForIncomingInvites_Request
         * @static
         * @param {ICPlayer_GetMutualFriendsForIncomingInvites_Request} message CPlayer_GetMutualFriendsForIncomingInvites_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetMutualFriendsForIncomingInvites_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetMutualFriendsForIncomingInvites_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetMutualFriendsForIncomingInvites_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetMutualFriendsForIncomingInvites_Request} CPlayer_GetMutualFriendsForIncomingInvites_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetMutualFriendsForIncomingInvites_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetMutualFriendsForIncomingInvites_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetMutualFriendsForIncomingInvites_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetMutualFriendsForIncomingInvites_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetMutualFriendsForIncomingInvites_Request} CPlayer_GetMutualFriendsForIncomingInvites_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetMutualFriendsForIncomingInvites_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetMutualFriendsForIncomingInvites_Request message.
         * @function verify
         * @memberof CPlayer_GetMutualFriendsForIncomingInvites_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetMutualFriendsForIncomingInvites_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_GetMutualFriendsForIncomingInvites_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetMutualFriendsForIncomingInvites_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetMutualFriendsForIncomingInvites_Request} CPlayer_GetMutualFriendsForIncomingInvites_Request
         */
        CPlayer_GetMutualFriendsForIncomingInvites_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetMutualFriendsForIncomingInvites_Request)
                return object;
            return new $root.CPlayer_GetMutualFriendsForIncomingInvites_Request();
        };
    
        /**
         * Creates a plain object from a CPlayer_GetMutualFriendsForIncomingInvites_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetMutualFriendsForIncomingInvites_Request
         * @static
         * @param {CPlayer_GetMutualFriendsForIncomingInvites_Request} message CPlayer_GetMutualFriendsForIncomingInvites_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetMutualFriendsForIncomingInvites_Request.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CPlayer_GetMutualFriendsForIncomingInvites_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_GetMutualFriendsForIncomingInvites_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetMutualFriendsForIncomingInvites_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetMutualFriendsForIncomingInvites_Request;
    })();
    
    $root.CPlayer_IncomingInviteMutualFriendList = (function() {
    
        /**
         * Properties of a CPlayer_IncomingInviteMutualFriendList.
         * @exports ICPlayer_IncomingInviteMutualFriendList
         * @interface ICPlayer_IncomingInviteMutualFriendList
         * @property {number|Long|null} [steamid] CPlayer_IncomingInviteMutualFriendList steamid
         * @property {Array.<number>|null} [mutual_friend_account_ids] CPlayer_IncomingInviteMutualFriendList mutual_friend_account_ids
         */
    
        /**
         * Constructs a new CPlayer_IncomingInviteMutualFriendList.
         * @exports CPlayer_IncomingInviteMutualFriendList
         * @classdesc Represents a CPlayer_IncomingInviteMutualFriendList.
         * @implements ICPlayer_IncomingInviteMutualFriendList
         * @constructor
         * @param {ICPlayer_IncomingInviteMutualFriendList=} [properties] Properties to set
         */
        function CPlayer_IncomingInviteMutualFriendList(properties) {
            this.mutual_friend_account_ids = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_IncomingInviteMutualFriendList steamid.
         * @member {number|Long} steamid
         * @memberof CPlayer_IncomingInviteMutualFriendList
         * @instance
         */
        CPlayer_IncomingInviteMutualFriendList.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CPlayer_IncomingInviteMutualFriendList mutual_friend_account_ids.
         * @member {Array.<number>} mutual_friend_account_ids
         * @memberof CPlayer_IncomingInviteMutualFriendList
         * @instance
         */
        CPlayer_IncomingInviteMutualFriendList.prototype.mutual_friend_account_ids = $util.emptyArray;
    
        /**
         * Creates a new CPlayer_IncomingInviteMutualFriendList instance using the specified properties.
         * @function create
         * @memberof CPlayer_IncomingInviteMutualFriendList
         * @static
         * @param {ICPlayer_IncomingInviteMutualFriendList=} [properties] Properties to set
         * @returns {CPlayer_IncomingInviteMutualFriendList} CPlayer_IncomingInviteMutualFriendList instance
         */
        CPlayer_IncomingInviteMutualFriendList.create = function create(properties) {
            return new CPlayer_IncomingInviteMutualFriendList(properties);
        };
    
        /**
         * Encodes the specified CPlayer_IncomingInviteMutualFriendList message. Does not implicitly {@link CPlayer_IncomingInviteMutualFriendList.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_IncomingInviteMutualFriendList
         * @static
         * @param {ICPlayer_IncomingInviteMutualFriendList} message CPlayer_IncomingInviteMutualFriendList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_IncomingInviteMutualFriendList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid != null && Object.hasOwnProperty.call(message, "steamid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
            if (message.mutual_friend_account_ids != null && message.mutual_friend_account_ids.length)
                for (var i = 0; i < message.mutual_friend_account_ids.length; ++i)
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.mutual_friend_account_ids[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_IncomingInviteMutualFriendList message, length delimited. Does not implicitly {@link CPlayer_IncomingInviteMutualFriendList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_IncomingInviteMutualFriendList
         * @static
         * @param {ICPlayer_IncomingInviteMutualFriendList} message CPlayer_IncomingInviteMutualFriendList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_IncomingInviteMutualFriendList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_IncomingInviteMutualFriendList message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_IncomingInviteMutualFriendList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_IncomingInviteMutualFriendList} CPlayer_IncomingInviteMutualFriendList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_IncomingInviteMutualFriendList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_IncomingInviteMutualFriendList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid = reader.fixed64();
                    break;
                case 2:
                    if (!(message.mutual_friend_account_ids && message.mutual_friend_account_ids.length))
                        message.mutual_friend_account_ids = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.mutual_friend_account_ids.push(reader.uint32());
                    } else
                        message.mutual_friend_account_ids.push(reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_IncomingInviteMutualFriendList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_IncomingInviteMutualFriendList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_IncomingInviteMutualFriendList} CPlayer_IncomingInviteMutualFriendList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_IncomingInviteMutualFriendList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_IncomingInviteMutualFriendList message.
         * @function verify
         * @memberof CPlayer_IncomingInviteMutualFriendList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_IncomingInviteMutualFriendList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            if (message.mutual_friend_account_ids != null && message.hasOwnProperty("mutual_friend_account_ids")) {
                if (!Array.isArray(message.mutual_friend_account_ids))
                    return "mutual_friend_account_ids: array expected";
                for (var i = 0; i < message.mutual_friend_account_ids.length; ++i)
                    if (!$util.isInteger(message.mutual_friend_account_ids[i]))
                        return "mutual_friend_account_ids: integer[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CPlayer_IncomingInviteMutualFriendList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_IncomingInviteMutualFriendList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_IncomingInviteMutualFriendList} CPlayer_IncomingInviteMutualFriendList
         */
        CPlayer_IncomingInviteMutualFriendList.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_IncomingInviteMutualFriendList)
                return object;
            var message = new $root.CPlayer_IncomingInviteMutualFriendList();
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
            if (object.mutual_friend_account_ids) {
                if (!Array.isArray(object.mutual_friend_account_ids))
                    throw TypeError(".CPlayer_IncomingInviteMutualFriendList.mutual_friend_account_ids: array expected");
                message.mutual_friend_account_ids = [];
                for (var i = 0; i < object.mutual_friend_account_ids.length; ++i)
                    message.mutual_friend_account_ids[i] = object.mutual_friend_account_ids[i] >>> 0;
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_IncomingInviteMutualFriendList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_IncomingInviteMutualFriendList
         * @static
         * @param {CPlayer_IncomingInviteMutualFriendList} message CPlayer_IncomingInviteMutualFriendList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_IncomingInviteMutualFriendList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.mutual_friend_account_ids = [];
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
            if (message.mutual_friend_account_ids && message.mutual_friend_account_ids.length) {
                object.mutual_friend_account_ids = [];
                for (var j = 0; j < message.mutual_friend_account_ids.length; ++j)
                    object.mutual_friend_account_ids[j] = message.mutual_friend_account_ids[j];
            }
            return object;
        };
    
        /**
         * Converts this CPlayer_IncomingInviteMutualFriendList to JSON.
         * @function toJSON
         * @memberof CPlayer_IncomingInviteMutualFriendList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_IncomingInviteMutualFriendList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_IncomingInviteMutualFriendList;
    })();
    
    $root.CPlayer_GetMutualFriendsForIncomingInvites_Response = (function() {
    
        /**
         * Properties of a CPlayer_GetMutualFriendsForIncomingInvites_Response.
         * @exports ICPlayer_GetMutualFriendsForIncomingInvites_Response
         * @interface ICPlayer_GetMutualFriendsForIncomingInvites_Response
         * @property {Array.<ICPlayer_IncomingInviteMutualFriendList>|null} [incoming_invite_mutual_friends_lists] CPlayer_GetMutualFriendsForIncomingInvites_Response incoming_invite_mutual_friends_lists
         */
    
        /**
         * Constructs a new CPlayer_GetMutualFriendsForIncomingInvites_Response.
         * @exports CPlayer_GetMutualFriendsForIncomingInvites_Response
         * @classdesc Represents a CPlayer_GetMutualFriendsForIncomingInvites_Response.
         * @implements ICPlayer_GetMutualFriendsForIncomingInvites_Response
         * @constructor
         * @param {ICPlayer_GetMutualFriendsForIncomingInvites_Response=} [properties] Properties to set
         */
        function CPlayer_GetMutualFriendsForIncomingInvites_Response(properties) {
            this.incoming_invite_mutual_friends_lists = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetMutualFriendsForIncomingInvites_Response incoming_invite_mutual_friends_lists.
         * @member {Array.<ICPlayer_IncomingInviteMutualFriendList>} incoming_invite_mutual_friends_lists
         * @memberof CPlayer_GetMutualFriendsForIncomingInvites_Response
         * @instance
         */
        CPlayer_GetMutualFriendsForIncomingInvites_Response.prototype.incoming_invite_mutual_friends_lists = $util.emptyArray;
    
        /**
         * Creates a new CPlayer_GetMutualFriendsForIncomingInvites_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetMutualFriendsForIncomingInvites_Response
         * @static
         * @param {ICPlayer_GetMutualFriendsForIncomingInvites_Response=} [properties] Properties to set
         * @returns {CPlayer_GetMutualFriendsForIncomingInvites_Response} CPlayer_GetMutualFriendsForIncomingInvites_Response instance
         */
        CPlayer_GetMutualFriendsForIncomingInvites_Response.create = function create(properties) {
            return new CPlayer_GetMutualFriendsForIncomingInvites_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetMutualFriendsForIncomingInvites_Response message. Does not implicitly {@link CPlayer_GetMutualFriendsForIncomingInvites_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetMutualFriendsForIncomingInvites_Response
         * @static
         * @param {ICPlayer_GetMutualFriendsForIncomingInvites_Response} message CPlayer_GetMutualFriendsForIncomingInvites_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetMutualFriendsForIncomingInvites_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.incoming_invite_mutual_friends_lists != null && message.incoming_invite_mutual_friends_lists.length)
                for (var i = 0; i < message.incoming_invite_mutual_friends_lists.length; ++i)
                    $root.CPlayer_IncomingInviteMutualFriendList.encode(message.incoming_invite_mutual_friends_lists[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetMutualFriendsForIncomingInvites_Response message, length delimited. Does not implicitly {@link CPlayer_GetMutualFriendsForIncomingInvites_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetMutualFriendsForIncomingInvites_Response
         * @static
         * @param {ICPlayer_GetMutualFriendsForIncomingInvites_Response} message CPlayer_GetMutualFriendsForIncomingInvites_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetMutualFriendsForIncomingInvites_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetMutualFriendsForIncomingInvites_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetMutualFriendsForIncomingInvites_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetMutualFriendsForIncomingInvites_Response} CPlayer_GetMutualFriendsForIncomingInvites_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetMutualFriendsForIncomingInvites_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetMutualFriendsForIncomingInvites_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.incoming_invite_mutual_friends_lists && message.incoming_invite_mutual_friends_lists.length))
                        message.incoming_invite_mutual_friends_lists = [];
                    message.incoming_invite_mutual_friends_lists.push($root.CPlayer_IncomingInviteMutualFriendList.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetMutualFriendsForIncomingInvites_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetMutualFriendsForIncomingInvites_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetMutualFriendsForIncomingInvites_Response} CPlayer_GetMutualFriendsForIncomingInvites_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetMutualFriendsForIncomingInvites_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetMutualFriendsForIncomingInvites_Response message.
         * @function verify
         * @memberof CPlayer_GetMutualFriendsForIncomingInvites_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetMutualFriendsForIncomingInvites_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.incoming_invite_mutual_friends_lists != null && message.hasOwnProperty("incoming_invite_mutual_friends_lists")) {
                if (!Array.isArray(message.incoming_invite_mutual_friends_lists))
                    return "incoming_invite_mutual_friends_lists: array expected";
                for (var i = 0; i < message.incoming_invite_mutual_friends_lists.length; ++i) {
                    var error = $root.CPlayer_IncomingInviteMutualFriendList.verify(message.incoming_invite_mutual_friends_lists[i]);
                    if (error)
                        return "incoming_invite_mutual_friends_lists." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CPlayer_GetMutualFriendsForIncomingInvites_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetMutualFriendsForIncomingInvites_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetMutualFriendsForIncomingInvites_Response} CPlayer_GetMutualFriendsForIncomingInvites_Response
         */
        CPlayer_GetMutualFriendsForIncomingInvites_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetMutualFriendsForIncomingInvites_Response)
                return object;
            var message = new $root.CPlayer_GetMutualFriendsForIncomingInvites_Response();
            if (object.incoming_invite_mutual_friends_lists) {
                if (!Array.isArray(object.incoming_invite_mutual_friends_lists))
                    throw TypeError(".CPlayer_GetMutualFriendsForIncomingInvites_Response.incoming_invite_mutual_friends_lists: array expected");
                message.incoming_invite_mutual_friends_lists = [];
                for (var i = 0; i < object.incoming_invite_mutual_friends_lists.length; ++i) {
                    if (typeof object.incoming_invite_mutual_friends_lists[i] !== "object")
                        throw TypeError(".CPlayer_GetMutualFriendsForIncomingInvites_Response.incoming_invite_mutual_friends_lists: object expected");
                    message.incoming_invite_mutual_friends_lists[i] = $root.CPlayer_IncomingInviteMutualFriendList.fromObject(object.incoming_invite_mutual_friends_lists[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetMutualFriendsForIncomingInvites_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetMutualFriendsForIncomingInvites_Response
         * @static
         * @param {CPlayer_GetMutualFriendsForIncomingInvites_Response} message CPlayer_GetMutualFriendsForIncomingInvites_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetMutualFriendsForIncomingInvites_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.incoming_invite_mutual_friends_lists = [];
            if (message.incoming_invite_mutual_friends_lists && message.incoming_invite_mutual_friends_lists.length) {
                object.incoming_invite_mutual_friends_lists = [];
                for (var j = 0; j < message.incoming_invite_mutual_friends_lists.length; ++j)
                    object.incoming_invite_mutual_friends_lists[j] = $root.CPlayer_IncomingInviteMutualFriendList.toObject(message.incoming_invite_mutual_friends_lists[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CPlayer_GetMutualFriendsForIncomingInvites_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_GetMutualFriendsForIncomingInvites_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetMutualFriendsForIncomingInvites_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetMutualFriendsForIncomingInvites_Response;
    })();
    
    $root.CPlayer_GetOwnedGames_Request = (function() {
    
        /**
         * Properties of a CPlayer_GetOwnedGames_Request.
         * @exports ICPlayer_GetOwnedGames_Request
         * @interface ICPlayer_GetOwnedGames_Request
         * @property {number|Long|null} [steamid] CPlayer_GetOwnedGames_Request steamid
         * @property {boolean|null} [include_appinfo] CPlayer_GetOwnedGames_Request include_appinfo
         * @property {boolean|null} [include_played_free_games] CPlayer_GetOwnedGames_Request include_played_free_games
         * @property {Array.<number>|null} [appids_filter] CPlayer_GetOwnedGames_Request appids_filter
         * @property {boolean|null} [include_free_sub] CPlayer_GetOwnedGames_Request include_free_sub
         */
    
        /**
         * Constructs a new CPlayer_GetOwnedGames_Request.
         * @exports CPlayer_GetOwnedGames_Request
         * @classdesc Represents a CPlayer_GetOwnedGames_Request.
         * @implements ICPlayer_GetOwnedGames_Request
         * @constructor
         * @param {ICPlayer_GetOwnedGames_Request=} [properties] Properties to set
         */
        function CPlayer_GetOwnedGames_Request(properties) {
            this.appids_filter = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetOwnedGames_Request steamid.
         * @member {number|Long} steamid
         * @memberof CPlayer_GetOwnedGames_Request
         * @instance
         */
        CPlayer_GetOwnedGames_Request.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CPlayer_GetOwnedGames_Request include_appinfo.
         * @member {boolean} include_appinfo
         * @memberof CPlayer_GetOwnedGames_Request
         * @instance
         */
        CPlayer_GetOwnedGames_Request.prototype.include_appinfo = false;
    
        /**
         * CPlayer_GetOwnedGames_Request include_played_free_games.
         * @member {boolean} include_played_free_games
         * @memberof CPlayer_GetOwnedGames_Request
         * @instance
         */
        CPlayer_GetOwnedGames_Request.prototype.include_played_free_games = false;
    
        /**
         * CPlayer_GetOwnedGames_Request appids_filter.
         * @member {Array.<number>} appids_filter
         * @memberof CPlayer_GetOwnedGames_Request
         * @instance
         */
        CPlayer_GetOwnedGames_Request.prototype.appids_filter = $util.emptyArray;
    
        /**
         * CPlayer_GetOwnedGames_Request include_free_sub.
         * @member {boolean} include_free_sub
         * @memberof CPlayer_GetOwnedGames_Request
         * @instance
         */
        CPlayer_GetOwnedGames_Request.prototype.include_free_sub = false;
    
        /**
         * Creates a new CPlayer_GetOwnedGames_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetOwnedGames_Request
         * @static
         * @param {ICPlayer_GetOwnedGames_Request=} [properties] Properties to set
         * @returns {CPlayer_GetOwnedGames_Request} CPlayer_GetOwnedGames_Request instance
         */
        CPlayer_GetOwnedGames_Request.create = function create(properties) {
            return new CPlayer_GetOwnedGames_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetOwnedGames_Request message. Does not implicitly {@link CPlayer_GetOwnedGames_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetOwnedGames_Request
         * @static
         * @param {ICPlayer_GetOwnedGames_Request} message CPlayer_GetOwnedGames_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetOwnedGames_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid != null && Object.hasOwnProperty.call(message, "steamid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.steamid);
            if (message.include_appinfo != null && Object.hasOwnProperty.call(message, "include_appinfo"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.include_appinfo);
            if (message.include_played_free_games != null && Object.hasOwnProperty.call(message, "include_played_free_games"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.include_played_free_games);
            if (message.appids_filter != null && message.appids_filter.length)
                for (var i = 0; i < message.appids_filter.length; ++i)
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.appids_filter[i]);
            if (message.include_free_sub != null && Object.hasOwnProperty.call(message, "include_free_sub"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.include_free_sub);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetOwnedGames_Request message, length delimited. Does not implicitly {@link CPlayer_GetOwnedGames_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetOwnedGames_Request
         * @static
         * @param {ICPlayer_GetOwnedGames_Request} message CPlayer_GetOwnedGames_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetOwnedGames_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetOwnedGames_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetOwnedGames_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetOwnedGames_Request} CPlayer_GetOwnedGames_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetOwnedGames_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetOwnedGames_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid = reader.uint64();
                    break;
                case 2:
                    message.include_appinfo = reader.bool();
                    break;
                case 3:
                    message.include_played_free_games = reader.bool();
                    break;
                case 4:
                    if (!(message.appids_filter && message.appids_filter.length))
                        message.appids_filter = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.appids_filter.push(reader.uint32());
                    } else
                        message.appids_filter.push(reader.uint32());
                    break;
                case 5:
                    message.include_free_sub = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetOwnedGames_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetOwnedGames_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetOwnedGames_Request} CPlayer_GetOwnedGames_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetOwnedGames_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetOwnedGames_Request message.
         * @function verify
         * @memberof CPlayer_GetOwnedGames_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetOwnedGames_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            if (message.include_appinfo != null && message.hasOwnProperty("include_appinfo"))
                if (typeof message.include_appinfo !== "boolean")
                    return "include_appinfo: boolean expected";
            if (message.include_played_free_games != null && message.hasOwnProperty("include_played_free_games"))
                if (typeof message.include_played_free_games !== "boolean")
                    return "include_played_free_games: boolean expected";
            if (message.appids_filter != null && message.hasOwnProperty("appids_filter")) {
                if (!Array.isArray(message.appids_filter))
                    return "appids_filter: array expected";
                for (var i = 0; i < message.appids_filter.length; ++i)
                    if (!$util.isInteger(message.appids_filter[i]))
                        return "appids_filter: integer[] expected";
            }
            if (message.include_free_sub != null && message.hasOwnProperty("include_free_sub"))
                if (typeof message.include_free_sub !== "boolean")
                    return "include_free_sub: boolean expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_GetOwnedGames_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetOwnedGames_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetOwnedGames_Request} CPlayer_GetOwnedGames_Request
         */
        CPlayer_GetOwnedGames_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetOwnedGames_Request)
                return object;
            var message = new $root.CPlayer_GetOwnedGames_Request();
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = true;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber(true);
            if (object.include_appinfo != null)
                message.include_appinfo = Boolean(object.include_appinfo);
            if (object.include_played_free_games != null)
                message.include_played_free_games = Boolean(object.include_played_free_games);
            if (object.appids_filter) {
                if (!Array.isArray(object.appids_filter))
                    throw TypeError(".CPlayer_GetOwnedGames_Request.appids_filter: array expected");
                message.appids_filter = [];
                for (var i = 0; i < object.appids_filter.length; ++i)
                    message.appids_filter[i] = object.appids_filter[i] >>> 0;
            }
            if (object.include_free_sub != null)
                message.include_free_sub = Boolean(object.include_free_sub);
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetOwnedGames_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetOwnedGames_Request
         * @static
         * @param {CPlayer_GetOwnedGames_Request} message CPlayer_GetOwnedGames_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetOwnedGames_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.appids_filter = [];
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
                object.include_appinfo = false;
                object.include_played_free_games = false;
                object.include_free_sub = false;
            }
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber(true) : message.steamid;
            if (message.include_appinfo != null && message.hasOwnProperty("include_appinfo"))
                object.include_appinfo = message.include_appinfo;
            if (message.include_played_free_games != null && message.hasOwnProperty("include_played_free_games"))
                object.include_played_free_games = message.include_played_free_games;
            if (message.appids_filter && message.appids_filter.length) {
                object.appids_filter = [];
                for (var j = 0; j < message.appids_filter.length; ++j)
                    object.appids_filter[j] = message.appids_filter[j];
            }
            if (message.include_free_sub != null && message.hasOwnProperty("include_free_sub"))
                object.include_free_sub = message.include_free_sub;
            return object;
        };
    
        /**
         * Converts this CPlayer_GetOwnedGames_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_GetOwnedGames_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetOwnedGames_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetOwnedGames_Request;
    })();
    
    $root.CPlayer_GetOwnedGames_Response = (function() {
    
        /**
         * Properties of a CPlayer_GetOwnedGames_Response.
         * @exports ICPlayer_GetOwnedGames_Response
         * @interface ICPlayer_GetOwnedGames_Response
         * @property {number|null} [game_count] CPlayer_GetOwnedGames_Response game_count
         * @property {Array.<CPlayer_GetOwnedGames_Response.IGame>|null} [games] CPlayer_GetOwnedGames_Response games
         */
    
        /**
         * Constructs a new CPlayer_GetOwnedGames_Response.
         * @exports CPlayer_GetOwnedGames_Response
         * @classdesc Represents a CPlayer_GetOwnedGames_Response.
         * @implements ICPlayer_GetOwnedGames_Response
         * @constructor
         * @param {ICPlayer_GetOwnedGames_Response=} [properties] Properties to set
         */
        function CPlayer_GetOwnedGames_Response(properties) {
            this.games = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetOwnedGames_Response game_count.
         * @member {number} game_count
         * @memberof CPlayer_GetOwnedGames_Response
         * @instance
         */
        CPlayer_GetOwnedGames_Response.prototype.game_count = 0;
    
        /**
         * CPlayer_GetOwnedGames_Response games.
         * @member {Array.<CPlayer_GetOwnedGames_Response.IGame>} games
         * @memberof CPlayer_GetOwnedGames_Response
         * @instance
         */
        CPlayer_GetOwnedGames_Response.prototype.games = $util.emptyArray;
    
        /**
         * Creates a new CPlayer_GetOwnedGames_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetOwnedGames_Response
         * @static
         * @param {ICPlayer_GetOwnedGames_Response=} [properties] Properties to set
         * @returns {CPlayer_GetOwnedGames_Response} CPlayer_GetOwnedGames_Response instance
         */
        CPlayer_GetOwnedGames_Response.create = function create(properties) {
            return new CPlayer_GetOwnedGames_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetOwnedGames_Response message. Does not implicitly {@link CPlayer_GetOwnedGames_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetOwnedGames_Response
         * @static
         * @param {ICPlayer_GetOwnedGames_Response} message CPlayer_GetOwnedGames_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetOwnedGames_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.game_count != null && Object.hasOwnProperty.call(message, "game_count"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.game_count);
            if (message.games != null && message.games.length)
                for (var i = 0; i < message.games.length; ++i)
                    $root.CPlayer_GetOwnedGames_Response.Game.encode(message.games[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetOwnedGames_Response message, length delimited. Does not implicitly {@link CPlayer_GetOwnedGames_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetOwnedGames_Response
         * @static
         * @param {ICPlayer_GetOwnedGames_Response} message CPlayer_GetOwnedGames_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetOwnedGames_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetOwnedGames_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetOwnedGames_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetOwnedGames_Response} CPlayer_GetOwnedGames_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetOwnedGames_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetOwnedGames_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.game_count = reader.uint32();
                    break;
                case 2:
                    if (!(message.games && message.games.length))
                        message.games = [];
                    message.games.push($root.CPlayer_GetOwnedGames_Response.Game.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetOwnedGames_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetOwnedGames_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetOwnedGames_Response} CPlayer_GetOwnedGames_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetOwnedGames_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetOwnedGames_Response message.
         * @function verify
         * @memberof CPlayer_GetOwnedGames_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetOwnedGames_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.game_count != null && message.hasOwnProperty("game_count"))
                if (!$util.isInteger(message.game_count))
                    return "game_count: integer expected";
            if (message.games != null && message.hasOwnProperty("games")) {
                if (!Array.isArray(message.games))
                    return "games: array expected";
                for (var i = 0; i < message.games.length; ++i) {
                    var error = $root.CPlayer_GetOwnedGames_Response.Game.verify(message.games[i]);
                    if (error)
                        return "games." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CPlayer_GetOwnedGames_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetOwnedGames_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetOwnedGames_Response} CPlayer_GetOwnedGames_Response
         */
        CPlayer_GetOwnedGames_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetOwnedGames_Response)
                return object;
            var message = new $root.CPlayer_GetOwnedGames_Response();
            if (object.game_count != null)
                message.game_count = object.game_count >>> 0;
            if (object.games) {
                if (!Array.isArray(object.games))
                    throw TypeError(".CPlayer_GetOwnedGames_Response.games: array expected");
                message.games = [];
                for (var i = 0; i < object.games.length; ++i) {
                    if (typeof object.games[i] !== "object")
                        throw TypeError(".CPlayer_GetOwnedGames_Response.games: object expected");
                    message.games[i] = $root.CPlayer_GetOwnedGames_Response.Game.fromObject(object.games[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetOwnedGames_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetOwnedGames_Response
         * @static
         * @param {CPlayer_GetOwnedGames_Response} message CPlayer_GetOwnedGames_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetOwnedGames_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.games = [];
            if (options.defaults)
                object.game_count = 0;
            if (message.game_count != null && message.hasOwnProperty("game_count"))
                object.game_count = message.game_count;
            if (message.games && message.games.length) {
                object.games = [];
                for (var j = 0; j < message.games.length; ++j)
                    object.games[j] = $root.CPlayer_GetOwnedGames_Response.Game.toObject(message.games[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CPlayer_GetOwnedGames_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_GetOwnedGames_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetOwnedGames_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CPlayer_GetOwnedGames_Response.Game = (function() {
    
            /**
             * Properties of a Game.
             * @memberof CPlayer_GetOwnedGames_Response
             * @interface IGame
             * @property {number|null} [appid] Game appid
             * @property {string|null} [name] Game name
             * @property {number|null} [playtime_2weeks] Game playtime_2weeks
             * @property {number|null} [playtime_forever] Game playtime_forever
             * @property {string|null} [img_icon_url] Game img_icon_url
             * @property {string|null} [img_logo_url] Game img_logo_url
             * @property {boolean|null} [has_community_visible_stats] Game has_community_visible_stats
             * @property {number|null} [playtime_windows_forever] Game playtime_windows_forever
             * @property {number|null} [playtime_mac_forever] Game playtime_mac_forever
             * @property {number|null} [playtime_linux_forever] Game playtime_linux_forever
             */
    
            /**
             * Constructs a new Game.
             * @memberof CPlayer_GetOwnedGames_Response
             * @classdesc Represents a Game.
             * @implements IGame
             * @constructor
             * @param {CPlayer_GetOwnedGames_Response.IGame=} [properties] Properties to set
             */
            function Game(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Game appid.
             * @member {number} appid
             * @memberof CPlayer_GetOwnedGames_Response.Game
             * @instance
             */
            Game.prototype.appid = 0;
    
            /**
             * Game name.
             * @member {string} name
             * @memberof CPlayer_GetOwnedGames_Response.Game
             * @instance
             */
            Game.prototype.name = "";
    
            /**
             * Game playtime_2weeks.
             * @member {number} playtime_2weeks
             * @memberof CPlayer_GetOwnedGames_Response.Game
             * @instance
             */
            Game.prototype.playtime_2weeks = 0;
    
            /**
             * Game playtime_forever.
             * @member {number} playtime_forever
             * @memberof CPlayer_GetOwnedGames_Response.Game
             * @instance
             */
            Game.prototype.playtime_forever = 0;
    
            /**
             * Game img_icon_url.
             * @member {string} img_icon_url
             * @memberof CPlayer_GetOwnedGames_Response.Game
             * @instance
             */
            Game.prototype.img_icon_url = "";
    
            /**
             * Game img_logo_url.
             * @member {string} img_logo_url
             * @memberof CPlayer_GetOwnedGames_Response.Game
             * @instance
             */
            Game.prototype.img_logo_url = "";
    
            /**
             * Game has_community_visible_stats.
             * @member {boolean} has_community_visible_stats
             * @memberof CPlayer_GetOwnedGames_Response.Game
             * @instance
             */
            Game.prototype.has_community_visible_stats = false;
    
            /**
             * Game playtime_windows_forever.
             * @member {number} playtime_windows_forever
             * @memberof CPlayer_GetOwnedGames_Response.Game
             * @instance
             */
            Game.prototype.playtime_windows_forever = 0;
    
            /**
             * Game playtime_mac_forever.
             * @member {number} playtime_mac_forever
             * @memberof CPlayer_GetOwnedGames_Response.Game
             * @instance
             */
            Game.prototype.playtime_mac_forever = 0;
    
            /**
             * Game playtime_linux_forever.
             * @member {number} playtime_linux_forever
             * @memberof CPlayer_GetOwnedGames_Response.Game
             * @instance
             */
            Game.prototype.playtime_linux_forever = 0;
    
            /**
             * Creates a new Game instance using the specified properties.
             * @function create
             * @memberof CPlayer_GetOwnedGames_Response.Game
             * @static
             * @param {CPlayer_GetOwnedGames_Response.IGame=} [properties] Properties to set
             * @returns {CPlayer_GetOwnedGames_Response.Game} Game instance
             */
            Game.create = function create(properties) {
                return new Game(properties);
            };
    
            /**
             * Encodes the specified Game message. Does not implicitly {@link CPlayer_GetOwnedGames_Response.Game.verify|verify} messages.
             * @function encode
             * @memberof CPlayer_GetOwnedGames_Response.Game
             * @static
             * @param {CPlayer_GetOwnedGames_Response.IGame} message Game message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Game.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.appid != null && Object.hasOwnProperty.call(message, "appid"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.appid);
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                if (message.playtime_2weeks != null && Object.hasOwnProperty.call(message, "playtime_2weeks"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.playtime_2weeks);
                if (message.playtime_forever != null && Object.hasOwnProperty.call(message, "playtime_forever"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.playtime_forever);
                if (message.img_icon_url != null && Object.hasOwnProperty.call(message, "img_icon_url"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.img_icon_url);
                if (message.img_logo_url != null && Object.hasOwnProperty.call(message, "img_logo_url"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.img_logo_url);
                if (message.has_community_visible_stats != null && Object.hasOwnProperty.call(message, "has_community_visible_stats"))
                    writer.uint32(/* id 7, wireType 0 =*/56).bool(message.has_community_visible_stats);
                if (message.playtime_windows_forever != null && Object.hasOwnProperty.call(message, "playtime_windows_forever"))
                    writer.uint32(/* id 8, wireType 0 =*/64).int32(message.playtime_windows_forever);
                if (message.playtime_mac_forever != null && Object.hasOwnProperty.call(message, "playtime_mac_forever"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.playtime_mac_forever);
                if (message.playtime_linux_forever != null && Object.hasOwnProperty.call(message, "playtime_linux_forever"))
                    writer.uint32(/* id 10, wireType 0 =*/80).int32(message.playtime_linux_forever);
                return writer;
            };
    
            /**
             * Encodes the specified Game message, length delimited. Does not implicitly {@link CPlayer_GetOwnedGames_Response.Game.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CPlayer_GetOwnedGames_Response.Game
             * @static
             * @param {CPlayer_GetOwnedGames_Response.IGame} message Game message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Game.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Game message from the specified reader or buffer.
             * @function decode
             * @memberof CPlayer_GetOwnedGames_Response.Game
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CPlayer_GetOwnedGames_Response.Game} Game
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Game.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetOwnedGames_Response.Game();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.appid = reader.int32();
                        break;
                    case 2:
                        message.name = reader.string();
                        break;
                    case 3:
                        message.playtime_2weeks = reader.int32();
                        break;
                    case 4:
                        message.playtime_forever = reader.int32();
                        break;
                    case 5:
                        message.img_icon_url = reader.string();
                        break;
                    case 6:
                        message.img_logo_url = reader.string();
                        break;
                    case 7:
                        message.has_community_visible_stats = reader.bool();
                        break;
                    case 8:
                        message.playtime_windows_forever = reader.int32();
                        break;
                    case 9:
                        message.playtime_mac_forever = reader.int32();
                        break;
                    case 10:
                        message.playtime_linux_forever = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a Game message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CPlayer_GetOwnedGames_Response.Game
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CPlayer_GetOwnedGames_Response.Game} Game
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Game.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Game message.
             * @function verify
             * @memberof CPlayer_GetOwnedGames_Response.Game
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Game.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.appid != null && message.hasOwnProperty("appid"))
                    if (!$util.isInteger(message.appid))
                        return "appid: integer expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.playtime_2weeks != null && message.hasOwnProperty("playtime_2weeks"))
                    if (!$util.isInteger(message.playtime_2weeks))
                        return "playtime_2weeks: integer expected";
                if (message.playtime_forever != null && message.hasOwnProperty("playtime_forever"))
                    if (!$util.isInteger(message.playtime_forever))
                        return "playtime_forever: integer expected";
                if (message.img_icon_url != null && message.hasOwnProperty("img_icon_url"))
                    if (!$util.isString(message.img_icon_url))
                        return "img_icon_url: string expected";
                if (message.img_logo_url != null && message.hasOwnProperty("img_logo_url"))
                    if (!$util.isString(message.img_logo_url))
                        return "img_logo_url: string expected";
                if (message.has_community_visible_stats != null && message.hasOwnProperty("has_community_visible_stats"))
                    if (typeof message.has_community_visible_stats !== "boolean")
                        return "has_community_visible_stats: boolean expected";
                if (message.playtime_windows_forever != null && message.hasOwnProperty("playtime_windows_forever"))
                    if (!$util.isInteger(message.playtime_windows_forever))
                        return "playtime_windows_forever: integer expected";
                if (message.playtime_mac_forever != null && message.hasOwnProperty("playtime_mac_forever"))
                    if (!$util.isInteger(message.playtime_mac_forever))
                        return "playtime_mac_forever: integer expected";
                if (message.playtime_linux_forever != null && message.hasOwnProperty("playtime_linux_forever"))
                    if (!$util.isInteger(message.playtime_linux_forever))
                        return "playtime_linux_forever: integer expected";
                return null;
            };
    
            /**
             * Creates a Game message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CPlayer_GetOwnedGames_Response.Game
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CPlayer_GetOwnedGames_Response.Game} Game
             */
            Game.fromObject = function fromObject(object) {
                if (object instanceof $root.CPlayer_GetOwnedGames_Response.Game)
                    return object;
                var message = new $root.CPlayer_GetOwnedGames_Response.Game();
                if (object.appid != null)
                    message.appid = object.appid | 0;
                if (object.name != null)
                    message.name = String(object.name);
                if (object.playtime_2weeks != null)
                    message.playtime_2weeks = object.playtime_2weeks | 0;
                if (object.playtime_forever != null)
                    message.playtime_forever = object.playtime_forever | 0;
                if (object.img_icon_url != null)
                    message.img_icon_url = String(object.img_icon_url);
                if (object.img_logo_url != null)
                    message.img_logo_url = String(object.img_logo_url);
                if (object.has_community_visible_stats != null)
                    message.has_community_visible_stats = Boolean(object.has_community_visible_stats);
                if (object.playtime_windows_forever != null)
                    message.playtime_windows_forever = object.playtime_windows_forever | 0;
                if (object.playtime_mac_forever != null)
                    message.playtime_mac_forever = object.playtime_mac_forever | 0;
                if (object.playtime_linux_forever != null)
                    message.playtime_linux_forever = object.playtime_linux_forever | 0;
                return message;
            };
    
            /**
             * Creates a plain object from a Game message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CPlayer_GetOwnedGames_Response.Game
             * @static
             * @param {CPlayer_GetOwnedGames_Response.Game} message Game
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Game.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.appid = 0;
                    object.name = "";
                    object.playtime_2weeks = 0;
                    object.playtime_forever = 0;
                    object.img_icon_url = "";
                    object.img_logo_url = "";
                    object.has_community_visible_stats = false;
                    object.playtime_windows_forever = 0;
                    object.playtime_mac_forever = 0;
                    object.playtime_linux_forever = 0;
                }
                if (message.appid != null && message.hasOwnProperty("appid"))
                    object.appid = message.appid;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.playtime_2weeks != null && message.hasOwnProperty("playtime_2weeks"))
                    object.playtime_2weeks = message.playtime_2weeks;
                if (message.playtime_forever != null && message.hasOwnProperty("playtime_forever"))
                    object.playtime_forever = message.playtime_forever;
                if (message.img_icon_url != null && message.hasOwnProperty("img_icon_url"))
                    object.img_icon_url = message.img_icon_url;
                if (message.img_logo_url != null && message.hasOwnProperty("img_logo_url"))
                    object.img_logo_url = message.img_logo_url;
                if (message.has_community_visible_stats != null && message.hasOwnProperty("has_community_visible_stats"))
                    object.has_community_visible_stats = message.has_community_visible_stats;
                if (message.playtime_windows_forever != null && message.hasOwnProperty("playtime_windows_forever"))
                    object.playtime_windows_forever = message.playtime_windows_forever;
                if (message.playtime_mac_forever != null && message.hasOwnProperty("playtime_mac_forever"))
                    object.playtime_mac_forever = message.playtime_mac_forever;
                if (message.playtime_linux_forever != null && message.hasOwnProperty("playtime_linux_forever"))
                    object.playtime_linux_forever = message.playtime_linux_forever;
                return object;
            };
    
            /**
             * Converts this Game to JSON.
             * @function toJSON
             * @memberof CPlayer_GetOwnedGames_Response.Game
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Game.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Game;
        })();
    
        return CPlayer_GetOwnedGames_Response;
    })();
    
    $root.CPlayer_GetPlayNext_Request = (function() {
    
        /**
         * Properties of a CPlayer_GetPlayNext_Request.
         * @exports ICPlayer_GetPlayNext_Request
         * @interface ICPlayer_GetPlayNext_Request
         * @property {number|null} [max_age_seconds] CPlayer_GetPlayNext_Request max_age_seconds
         * @property {Array.<number>|null} [ignore_appids] CPlayer_GetPlayNext_Request ignore_appids
         */
    
        /**
         * Constructs a new CPlayer_GetPlayNext_Request.
         * @exports CPlayer_GetPlayNext_Request
         * @classdesc Represents a CPlayer_GetPlayNext_Request.
         * @implements ICPlayer_GetPlayNext_Request
         * @constructor
         * @param {ICPlayer_GetPlayNext_Request=} [properties] Properties to set
         */
        function CPlayer_GetPlayNext_Request(properties) {
            this.ignore_appids = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetPlayNext_Request max_age_seconds.
         * @member {number} max_age_seconds
         * @memberof CPlayer_GetPlayNext_Request
         * @instance
         */
        CPlayer_GetPlayNext_Request.prototype.max_age_seconds = 0;
    
        /**
         * CPlayer_GetPlayNext_Request ignore_appids.
         * @member {Array.<number>} ignore_appids
         * @memberof CPlayer_GetPlayNext_Request
         * @instance
         */
        CPlayer_GetPlayNext_Request.prototype.ignore_appids = $util.emptyArray;
    
        /**
         * Creates a new CPlayer_GetPlayNext_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetPlayNext_Request
         * @static
         * @param {ICPlayer_GetPlayNext_Request=} [properties] Properties to set
         * @returns {CPlayer_GetPlayNext_Request} CPlayer_GetPlayNext_Request instance
         */
        CPlayer_GetPlayNext_Request.create = function create(properties) {
            return new CPlayer_GetPlayNext_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetPlayNext_Request message. Does not implicitly {@link CPlayer_GetPlayNext_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetPlayNext_Request
         * @static
         * @param {ICPlayer_GetPlayNext_Request} message CPlayer_GetPlayNext_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetPlayNext_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.max_age_seconds != null && Object.hasOwnProperty.call(message, "max_age_seconds"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.max_age_seconds);
            if (message.ignore_appids != null && message.ignore_appids.length)
                for (var i = 0; i < message.ignore_appids.length; ++i)
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.ignore_appids[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetPlayNext_Request message, length delimited. Does not implicitly {@link CPlayer_GetPlayNext_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetPlayNext_Request
         * @static
         * @param {ICPlayer_GetPlayNext_Request} message CPlayer_GetPlayNext_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetPlayNext_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetPlayNext_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetPlayNext_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetPlayNext_Request} CPlayer_GetPlayNext_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetPlayNext_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetPlayNext_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.max_age_seconds = reader.uint32();
                    break;
                case 2:
                    if (!(message.ignore_appids && message.ignore_appids.length))
                        message.ignore_appids = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.ignore_appids.push(reader.uint32());
                    } else
                        message.ignore_appids.push(reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetPlayNext_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetPlayNext_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetPlayNext_Request} CPlayer_GetPlayNext_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetPlayNext_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetPlayNext_Request message.
         * @function verify
         * @memberof CPlayer_GetPlayNext_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetPlayNext_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.max_age_seconds != null && message.hasOwnProperty("max_age_seconds"))
                if (!$util.isInteger(message.max_age_seconds))
                    return "max_age_seconds: integer expected";
            if (message.ignore_appids != null && message.hasOwnProperty("ignore_appids")) {
                if (!Array.isArray(message.ignore_appids))
                    return "ignore_appids: array expected";
                for (var i = 0; i < message.ignore_appids.length; ++i)
                    if (!$util.isInteger(message.ignore_appids[i]))
                        return "ignore_appids: integer[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CPlayer_GetPlayNext_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetPlayNext_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetPlayNext_Request} CPlayer_GetPlayNext_Request
         */
        CPlayer_GetPlayNext_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetPlayNext_Request)
                return object;
            var message = new $root.CPlayer_GetPlayNext_Request();
            if (object.max_age_seconds != null)
                message.max_age_seconds = object.max_age_seconds >>> 0;
            if (object.ignore_appids) {
                if (!Array.isArray(object.ignore_appids))
                    throw TypeError(".CPlayer_GetPlayNext_Request.ignore_appids: array expected");
                message.ignore_appids = [];
                for (var i = 0; i < object.ignore_appids.length; ++i)
                    message.ignore_appids[i] = object.ignore_appids[i] >>> 0;
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetPlayNext_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetPlayNext_Request
         * @static
         * @param {CPlayer_GetPlayNext_Request} message CPlayer_GetPlayNext_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetPlayNext_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.ignore_appids = [];
            if (options.defaults)
                object.max_age_seconds = 0;
            if (message.max_age_seconds != null && message.hasOwnProperty("max_age_seconds"))
                object.max_age_seconds = message.max_age_seconds;
            if (message.ignore_appids && message.ignore_appids.length) {
                object.ignore_appids = [];
                for (var j = 0; j < message.ignore_appids.length; ++j)
                    object.ignore_appids[j] = message.ignore_appids[j];
            }
            return object;
        };
    
        /**
         * Converts this CPlayer_GetPlayNext_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_GetPlayNext_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetPlayNext_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetPlayNext_Request;
    })();
    
    $root.CPlayer_GetPlayNext_Response = (function() {
    
        /**
         * Properties of a CPlayer_GetPlayNext_Response.
         * @exports ICPlayer_GetPlayNext_Response
         * @interface ICPlayer_GetPlayNext_Response
         * @property {number|null} [last_update_time] CPlayer_GetPlayNext_Response last_update_time
         * @property {Array.<number>|null} [appids] CPlayer_GetPlayNext_Response appids
         */
    
        /**
         * Constructs a new CPlayer_GetPlayNext_Response.
         * @exports CPlayer_GetPlayNext_Response
         * @classdesc Represents a CPlayer_GetPlayNext_Response.
         * @implements ICPlayer_GetPlayNext_Response
         * @constructor
         * @param {ICPlayer_GetPlayNext_Response=} [properties] Properties to set
         */
        function CPlayer_GetPlayNext_Response(properties) {
            this.appids = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetPlayNext_Response last_update_time.
         * @member {number} last_update_time
         * @memberof CPlayer_GetPlayNext_Response
         * @instance
         */
        CPlayer_GetPlayNext_Response.prototype.last_update_time = 0;
    
        /**
         * CPlayer_GetPlayNext_Response appids.
         * @member {Array.<number>} appids
         * @memberof CPlayer_GetPlayNext_Response
         * @instance
         */
        CPlayer_GetPlayNext_Response.prototype.appids = $util.emptyArray;
    
        /**
         * Creates a new CPlayer_GetPlayNext_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetPlayNext_Response
         * @static
         * @param {ICPlayer_GetPlayNext_Response=} [properties] Properties to set
         * @returns {CPlayer_GetPlayNext_Response} CPlayer_GetPlayNext_Response instance
         */
        CPlayer_GetPlayNext_Response.create = function create(properties) {
            return new CPlayer_GetPlayNext_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetPlayNext_Response message. Does not implicitly {@link CPlayer_GetPlayNext_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetPlayNext_Response
         * @static
         * @param {ICPlayer_GetPlayNext_Response} message CPlayer_GetPlayNext_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetPlayNext_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.last_update_time != null && Object.hasOwnProperty.call(message, "last_update_time"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.last_update_time);
            if (message.appids != null && message.appids.length)
                for (var i = 0; i < message.appids.length; ++i)
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.appids[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetPlayNext_Response message, length delimited. Does not implicitly {@link CPlayer_GetPlayNext_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetPlayNext_Response
         * @static
         * @param {ICPlayer_GetPlayNext_Response} message CPlayer_GetPlayNext_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetPlayNext_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetPlayNext_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetPlayNext_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetPlayNext_Response} CPlayer_GetPlayNext_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetPlayNext_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetPlayNext_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.last_update_time = reader.uint32();
                    break;
                case 2:
                    if (!(message.appids && message.appids.length))
                        message.appids = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.appids.push(reader.uint32());
                    } else
                        message.appids.push(reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetPlayNext_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetPlayNext_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetPlayNext_Response} CPlayer_GetPlayNext_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetPlayNext_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetPlayNext_Response message.
         * @function verify
         * @memberof CPlayer_GetPlayNext_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetPlayNext_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.last_update_time != null && message.hasOwnProperty("last_update_time"))
                if (!$util.isInteger(message.last_update_time))
                    return "last_update_time: integer expected";
            if (message.appids != null && message.hasOwnProperty("appids")) {
                if (!Array.isArray(message.appids))
                    return "appids: array expected";
                for (var i = 0; i < message.appids.length; ++i)
                    if (!$util.isInteger(message.appids[i]))
                        return "appids: integer[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CPlayer_GetPlayNext_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetPlayNext_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetPlayNext_Response} CPlayer_GetPlayNext_Response
         */
        CPlayer_GetPlayNext_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetPlayNext_Response)
                return object;
            var message = new $root.CPlayer_GetPlayNext_Response();
            if (object.last_update_time != null)
                message.last_update_time = object.last_update_time >>> 0;
            if (object.appids) {
                if (!Array.isArray(object.appids))
                    throw TypeError(".CPlayer_GetPlayNext_Response.appids: array expected");
                message.appids = [];
                for (var i = 0; i < object.appids.length; ++i)
                    message.appids[i] = object.appids[i] >>> 0;
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetPlayNext_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetPlayNext_Response
         * @static
         * @param {CPlayer_GetPlayNext_Response} message CPlayer_GetPlayNext_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetPlayNext_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.appids = [];
            if (options.defaults)
                object.last_update_time = 0;
            if (message.last_update_time != null && message.hasOwnProperty("last_update_time"))
                object.last_update_time = message.last_update_time;
            if (message.appids && message.appids.length) {
                object.appids = [];
                for (var j = 0; j < message.appids.length; ++j)
                    object.appids[j] = message.appids[j];
            }
            return object;
        };
    
        /**
         * Converts this CPlayer_GetPlayNext_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_GetPlayNext_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetPlayNext_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetPlayNext_Response;
    })();
    
    $root.CPlayer_GetFriendsGameplayInfo_Request = (function() {
    
        /**
         * Properties of a CPlayer_GetFriendsGameplayInfo_Request.
         * @exports ICPlayer_GetFriendsGameplayInfo_Request
         * @interface ICPlayer_GetFriendsGameplayInfo_Request
         * @property {number|null} [appid] CPlayer_GetFriendsGameplayInfo_Request appid
         */
    
        /**
         * Constructs a new CPlayer_GetFriendsGameplayInfo_Request.
         * @exports CPlayer_GetFriendsGameplayInfo_Request
         * @classdesc Represents a CPlayer_GetFriendsGameplayInfo_Request.
         * @implements ICPlayer_GetFriendsGameplayInfo_Request
         * @constructor
         * @param {ICPlayer_GetFriendsGameplayInfo_Request=} [properties] Properties to set
         */
        function CPlayer_GetFriendsGameplayInfo_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetFriendsGameplayInfo_Request appid.
         * @member {number} appid
         * @memberof CPlayer_GetFriendsGameplayInfo_Request
         * @instance
         */
        CPlayer_GetFriendsGameplayInfo_Request.prototype.appid = 0;
    
        /**
         * Creates a new CPlayer_GetFriendsGameplayInfo_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetFriendsGameplayInfo_Request
         * @static
         * @param {ICPlayer_GetFriendsGameplayInfo_Request=} [properties] Properties to set
         * @returns {CPlayer_GetFriendsGameplayInfo_Request} CPlayer_GetFriendsGameplayInfo_Request instance
         */
        CPlayer_GetFriendsGameplayInfo_Request.create = function create(properties) {
            return new CPlayer_GetFriendsGameplayInfo_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetFriendsGameplayInfo_Request message. Does not implicitly {@link CPlayer_GetFriendsGameplayInfo_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetFriendsGameplayInfo_Request
         * @static
         * @param {ICPlayer_GetFriendsGameplayInfo_Request} message CPlayer_GetFriendsGameplayInfo_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetFriendsGameplayInfo_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appid != null && Object.hasOwnProperty.call(message, "appid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetFriendsGameplayInfo_Request message, length delimited. Does not implicitly {@link CPlayer_GetFriendsGameplayInfo_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetFriendsGameplayInfo_Request
         * @static
         * @param {ICPlayer_GetFriendsGameplayInfo_Request} message CPlayer_GetFriendsGameplayInfo_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetFriendsGameplayInfo_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetFriendsGameplayInfo_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetFriendsGameplayInfo_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetFriendsGameplayInfo_Request} CPlayer_GetFriendsGameplayInfo_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetFriendsGameplayInfo_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetFriendsGameplayInfo_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.appid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetFriendsGameplayInfo_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetFriendsGameplayInfo_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetFriendsGameplayInfo_Request} CPlayer_GetFriendsGameplayInfo_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetFriendsGameplayInfo_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetFriendsGameplayInfo_Request message.
         * @function verify
         * @memberof CPlayer_GetFriendsGameplayInfo_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetFriendsGameplayInfo_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_GetFriendsGameplayInfo_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetFriendsGameplayInfo_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetFriendsGameplayInfo_Request} CPlayer_GetFriendsGameplayInfo_Request
         */
        CPlayer_GetFriendsGameplayInfo_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetFriendsGameplayInfo_Request)
                return object;
            var message = new $root.CPlayer_GetFriendsGameplayInfo_Request();
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetFriendsGameplayInfo_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetFriendsGameplayInfo_Request
         * @static
         * @param {CPlayer_GetFriendsGameplayInfo_Request} message CPlayer_GetFriendsGameplayInfo_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetFriendsGameplayInfo_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.appid = 0;
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            return object;
        };
    
        /**
         * Converts this CPlayer_GetFriendsGameplayInfo_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_GetFriendsGameplayInfo_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetFriendsGameplayInfo_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetFriendsGameplayInfo_Request;
    })();
    
    $root.CPlayer_GetFriendsGameplayInfo_Response = (function() {
    
        /**
         * Properties of a CPlayer_GetFriendsGameplayInfo_Response.
         * @exports ICPlayer_GetFriendsGameplayInfo_Response
         * @interface ICPlayer_GetFriendsGameplayInfo_Response
         * @property {CPlayer_GetFriendsGameplayInfo_Response.IOwnGameplayInfo|null} [your_info] CPlayer_GetFriendsGameplayInfo_Response your_info
         * @property {Array.<CPlayer_GetFriendsGameplayInfo_Response.IFriendsGameplayInfo>|null} [in_game] CPlayer_GetFriendsGameplayInfo_Response in_game
         * @property {Array.<CPlayer_GetFriendsGameplayInfo_Response.IFriendsGameplayInfo>|null} [played_recently] CPlayer_GetFriendsGameplayInfo_Response played_recently
         * @property {Array.<CPlayer_GetFriendsGameplayInfo_Response.IFriendsGameplayInfo>|null} [played_ever] CPlayer_GetFriendsGameplayInfo_Response played_ever
         * @property {Array.<CPlayer_GetFriendsGameplayInfo_Response.IFriendsGameplayInfo>|null} [owns] CPlayer_GetFriendsGameplayInfo_Response owns
         * @property {Array.<CPlayer_GetFriendsGameplayInfo_Response.IFriendsGameplayInfo>|null} [in_wishlist] CPlayer_GetFriendsGameplayInfo_Response in_wishlist
         */
    
        /**
         * Constructs a new CPlayer_GetFriendsGameplayInfo_Response.
         * @exports CPlayer_GetFriendsGameplayInfo_Response
         * @classdesc Represents a CPlayer_GetFriendsGameplayInfo_Response.
         * @implements ICPlayer_GetFriendsGameplayInfo_Response
         * @constructor
         * @param {ICPlayer_GetFriendsGameplayInfo_Response=} [properties] Properties to set
         */
        function CPlayer_GetFriendsGameplayInfo_Response(properties) {
            this.in_game = [];
            this.played_recently = [];
            this.played_ever = [];
            this.owns = [];
            this.in_wishlist = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetFriendsGameplayInfo_Response your_info.
         * @member {CPlayer_GetFriendsGameplayInfo_Response.IOwnGameplayInfo|null|undefined} your_info
         * @memberof CPlayer_GetFriendsGameplayInfo_Response
         * @instance
         */
        CPlayer_GetFriendsGameplayInfo_Response.prototype.your_info = null;
    
        /**
         * CPlayer_GetFriendsGameplayInfo_Response in_game.
         * @member {Array.<CPlayer_GetFriendsGameplayInfo_Response.IFriendsGameplayInfo>} in_game
         * @memberof CPlayer_GetFriendsGameplayInfo_Response
         * @instance
         */
        CPlayer_GetFriendsGameplayInfo_Response.prototype.in_game = $util.emptyArray;
    
        /**
         * CPlayer_GetFriendsGameplayInfo_Response played_recently.
         * @member {Array.<CPlayer_GetFriendsGameplayInfo_Response.IFriendsGameplayInfo>} played_recently
         * @memberof CPlayer_GetFriendsGameplayInfo_Response
         * @instance
         */
        CPlayer_GetFriendsGameplayInfo_Response.prototype.played_recently = $util.emptyArray;
    
        /**
         * CPlayer_GetFriendsGameplayInfo_Response played_ever.
         * @member {Array.<CPlayer_GetFriendsGameplayInfo_Response.IFriendsGameplayInfo>} played_ever
         * @memberof CPlayer_GetFriendsGameplayInfo_Response
         * @instance
         */
        CPlayer_GetFriendsGameplayInfo_Response.prototype.played_ever = $util.emptyArray;
    
        /**
         * CPlayer_GetFriendsGameplayInfo_Response owns.
         * @member {Array.<CPlayer_GetFriendsGameplayInfo_Response.IFriendsGameplayInfo>} owns
         * @memberof CPlayer_GetFriendsGameplayInfo_Response
         * @instance
         */
        CPlayer_GetFriendsGameplayInfo_Response.prototype.owns = $util.emptyArray;
    
        /**
         * CPlayer_GetFriendsGameplayInfo_Response in_wishlist.
         * @member {Array.<CPlayer_GetFriendsGameplayInfo_Response.IFriendsGameplayInfo>} in_wishlist
         * @memberof CPlayer_GetFriendsGameplayInfo_Response
         * @instance
         */
        CPlayer_GetFriendsGameplayInfo_Response.prototype.in_wishlist = $util.emptyArray;
    
        /**
         * Creates a new CPlayer_GetFriendsGameplayInfo_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetFriendsGameplayInfo_Response
         * @static
         * @param {ICPlayer_GetFriendsGameplayInfo_Response=} [properties] Properties to set
         * @returns {CPlayer_GetFriendsGameplayInfo_Response} CPlayer_GetFriendsGameplayInfo_Response instance
         */
        CPlayer_GetFriendsGameplayInfo_Response.create = function create(properties) {
            return new CPlayer_GetFriendsGameplayInfo_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetFriendsGameplayInfo_Response message. Does not implicitly {@link CPlayer_GetFriendsGameplayInfo_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetFriendsGameplayInfo_Response
         * @static
         * @param {ICPlayer_GetFriendsGameplayInfo_Response} message CPlayer_GetFriendsGameplayInfo_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetFriendsGameplayInfo_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.your_info != null && Object.hasOwnProperty.call(message, "your_info"))
                $root.CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo.encode(message.your_info, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.in_game != null && message.in_game.length)
                for (var i = 0; i < message.in_game.length; ++i)
                    $root.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.encode(message.in_game[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.played_recently != null && message.played_recently.length)
                for (var i = 0; i < message.played_recently.length; ++i)
                    $root.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.encode(message.played_recently[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.played_ever != null && message.played_ever.length)
                for (var i = 0; i < message.played_ever.length; ++i)
                    $root.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.encode(message.played_ever[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.owns != null && message.owns.length)
                for (var i = 0; i < message.owns.length; ++i)
                    $root.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.encode(message.owns[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.in_wishlist != null && message.in_wishlist.length)
                for (var i = 0; i < message.in_wishlist.length; ++i)
                    $root.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.encode(message.in_wishlist[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetFriendsGameplayInfo_Response message, length delimited. Does not implicitly {@link CPlayer_GetFriendsGameplayInfo_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetFriendsGameplayInfo_Response
         * @static
         * @param {ICPlayer_GetFriendsGameplayInfo_Response} message CPlayer_GetFriendsGameplayInfo_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetFriendsGameplayInfo_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetFriendsGameplayInfo_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetFriendsGameplayInfo_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetFriendsGameplayInfo_Response} CPlayer_GetFriendsGameplayInfo_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetFriendsGameplayInfo_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetFriendsGameplayInfo_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.your_info = $root.CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    if (!(message.in_game && message.in_game.length))
                        message.in_game = [];
                    message.in_game.push($root.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.decode(reader, reader.uint32()));
                    break;
                case 3:
                    if (!(message.played_recently && message.played_recently.length))
                        message.played_recently = [];
                    message.played_recently.push($root.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.decode(reader, reader.uint32()));
                    break;
                case 4:
                    if (!(message.played_ever && message.played_ever.length))
                        message.played_ever = [];
                    message.played_ever.push($root.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.decode(reader, reader.uint32()));
                    break;
                case 5:
                    if (!(message.owns && message.owns.length))
                        message.owns = [];
                    message.owns.push($root.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.decode(reader, reader.uint32()));
                    break;
                case 6:
                    if (!(message.in_wishlist && message.in_wishlist.length))
                        message.in_wishlist = [];
                    message.in_wishlist.push($root.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetFriendsGameplayInfo_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetFriendsGameplayInfo_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetFriendsGameplayInfo_Response} CPlayer_GetFriendsGameplayInfo_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetFriendsGameplayInfo_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetFriendsGameplayInfo_Response message.
         * @function verify
         * @memberof CPlayer_GetFriendsGameplayInfo_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetFriendsGameplayInfo_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.your_info != null && message.hasOwnProperty("your_info")) {
                var error = $root.CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo.verify(message.your_info);
                if (error)
                    return "your_info." + error;
            }
            if (message.in_game != null && message.hasOwnProperty("in_game")) {
                if (!Array.isArray(message.in_game))
                    return "in_game: array expected";
                for (var i = 0; i < message.in_game.length; ++i) {
                    var error = $root.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.verify(message.in_game[i]);
                    if (error)
                        return "in_game." + error;
                }
            }
            if (message.played_recently != null && message.hasOwnProperty("played_recently")) {
                if (!Array.isArray(message.played_recently))
                    return "played_recently: array expected";
                for (var i = 0; i < message.played_recently.length; ++i) {
                    var error = $root.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.verify(message.played_recently[i]);
                    if (error)
                        return "played_recently." + error;
                }
            }
            if (message.played_ever != null && message.hasOwnProperty("played_ever")) {
                if (!Array.isArray(message.played_ever))
                    return "played_ever: array expected";
                for (var i = 0; i < message.played_ever.length; ++i) {
                    var error = $root.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.verify(message.played_ever[i]);
                    if (error)
                        return "played_ever." + error;
                }
            }
            if (message.owns != null && message.hasOwnProperty("owns")) {
                if (!Array.isArray(message.owns))
                    return "owns: array expected";
                for (var i = 0; i < message.owns.length; ++i) {
                    var error = $root.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.verify(message.owns[i]);
                    if (error)
                        return "owns." + error;
                }
            }
            if (message.in_wishlist != null && message.hasOwnProperty("in_wishlist")) {
                if (!Array.isArray(message.in_wishlist))
                    return "in_wishlist: array expected";
                for (var i = 0; i < message.in_wishlist.length; ++i) {
                    var error = $root.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.verify(message.in_wishlist[i]);
                    if (error)
                        return "in_wishlist." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CPlayer_GetFriendsGameplayInfo_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetFriendsGameplayInfo_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetFriendsGameplayInfo_Response} CPlayer_GetFriendsGameplayInfo_Response
         */
        CPlayer_GetFriendsGameplayInfo_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetFriendsGameplayInfo_Response)
                return object;
            var message = new $root.CPlayer_GetFriendsGameplayInfo_Response();
            if (object.your_info != null) {
                if (typeof object.your_info !== "object")
                    throw TypeError(".CPlayer_GetFriendsGameplayInfo_Response.your_info: object expected");
                message.your_info = $root.CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo.fromObject(object.your_info);
            }
            if (object.in_game) {
                if (!Array.isArray(object.in_game))
                    throw TypeError(".CPlayer_GetFriendsGameplayInfo_Response.in_game: array expected");
                message.in_game = [];
                for (var i = 0; i < object.in_game.length; ++i) {
                    if (typeof object.in_game[i] !== "object")
                        throw TypeError(".CPlayer_GetFriendsGameplayInfo_Response.in_game: object expected");
                    message.in_game[i] = $root.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.fromObject(object.in_game[i]);
                }
            }
            if (object.played_recently) {
                if (!Array.isArray(object.played_recently))
                    throw TypeError(".CPlayer_GetFriendsGameplayInfo_Response.played_recently: array expected");
                message.played_recently = [];
                for (var i = 0; i < object.played_recently.length; ++i) {
                    if (typeof object.played_recently[i] !== "object")
                        throw TypeError(".CPlayer_GetFriendsGameplayInfo_Response.played_recently: object expected");
                    message.played_recently[i] = $root.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.fromObject(object.played_recently[i]);
                }
            }
            if (object.played_ever) {
                if (!Array.isArray(object.played_ever))
                    throw TypeError(".CPlayer_GetFriendsGameplayInfo_Response.played_ever: array expected");
                message.played_ever = [];
                for (var i = 0; i < object.played_ever.length; ++i) {
                    if (typeof object.played_ever[i] !== "object")
                        throw TypeError(".CPlayer_GetFriendsGameplayInfo_Response.played_ever: object expected");
                    message.played_ever[i] = $root.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.fromObject(object.played_ever[i]);
                }
            }
            if (object.owns) {
                if (!Array.isArray(object.owns))
                    throw TypeError(".CPlayer_GetFriendsGameplayInfo_Response.owns: array expected");
                message.owns = [];
                for (var i = 0; i < object.owns.length; ++i) {
                    if (typeof object.owns[i] !== "object")
                        throw TypeError(".CPlayer_GetFriendsGameplayInfo_Response.owns: object expected");
                    message.owns[i] = $root.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.fromObject(object.owns[i]);
                }
            }
            if (object.in_wishlist) {
                if (!Array.isArray(object.in_wishlist))
                    throw TypeError(".CPlayer_GetFriendsGameplayInfo_Response.in_wishlist: array expected");
                message.in_wishlist = [];
                for (var i = 0; i < object.in_wishlist.length; ++i) {
                    if (typeof object.in_wishlist[i] !== "object")
                        throw TypeError(".CPlayer_GetFriendsGameplayInfo_Response.in_wishlist: object expected");
                    message.in_wishlist[i] = $root.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.fromObject(object.in_wishlist[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetFriendsGameplayInfo_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetFriendsGameplayInfo_Response
         * @static
         * @param {CPlayer_GetFriendsGameplayInfo_Response} message CPlayer_GetFriendsGameplayInfo_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetFriendsGameplayInfo_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.in_game = [];
                object.played_recently = [];
                object.played_ever = [];
                object.owns = [];
                object.in_wishlist = [];
            }
            if (options.defaults)
                object.your_info = null;
            if (message.your_info != null && message.hasOwnProperty("your_info"))
                object.your_info = $root.CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo.toObject(message.your_info, options);
            if (message.in_game && message.in_game.length) {
                object.in_game = [];
                for (var j = 0; j < message.in_game.length; ++j)
                    object.in_game[j] = $root.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.toObject(message.in_game[j], options);
            }
            if (message.played_recently && message.played_recently.length) {
                object.played_recently = [];
                for (var j = 0; j < message.played_recently.length; ++j)
                    object.played_recently[j] = $root.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.toObject(message.played_recently[j], options);
            }
            if (message.played_ever && message.played_ever.length) {
                object.played_ever = [];
                for (var j = 0; j < message.played_ever.length; ++j)
                    object.played_ever[j] = $root.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.toObject(message.played_ever[j], options);
            }
            if (message.owns && message.owns.length) {
                object.owns = [];
                for (var j = 0; j < message.owns.length; ++j)
                    object.owns[j] = $root.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.toObject(message.owns[j], options);
            }
            if (message.in_wishlist && message.in_wishlist.length) {
                object.in_wishlist = [];
                for (var j = 0; j < message.in_wishlist.length; ++j)
                    object.in_wishlist[j] = $root.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.toObject(message.in_wishlist[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CPlayer_GetFriendsGameplayInfo_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_GetFriendsGameplayInfo_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetFriendsGameplayInfo_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo = (function() {
    
            /**
             * Properties of a FriendsGameplayInfo.
             * @memberof CPlayer_GetFriendsGameplayInfo_Response
             * @interface IFriendsGameplayInfo
             * @property {number|Long|null} [steamid] FriendsGameplayInfo steamid
             * @property {number|null} [minutes_played] FriendsGameplayInfo minutes_played
             * @property {number|null} [minutes_played_forever] FriendsGameplayInfo minutes_played_forever
             */
    
            /**
             * Constructs a new FriendsGameplayInfo.
             * @memberof CPlayer_GetFriendsGameplayInfo_Response
             * @classdesc Represents a FriendsGameplayInfo.
             * @implements IFriendsGameplayInfo
             * @constructor
             * @param {CPlayer_GetFriendsGameplayInfo_Response.IFriendsGameplayInfo=} [properties] Properties to set
             */
            function FriendsGameplayInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * FriendsGameplayInfo steamid.
             * @member {number|Long} steamid
             * @memberof CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
             * @instance
             */
            FriendsGameplayInfo.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
            /**
             * FriendsGameplayInfo minutes_played.
             * @member {number} minutes_played
             * @memberof CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
             * @instance
             */
            FriendsGameplayInfo.prototype.minutes_played = 0;
    
            /**
             * FriendsGameplayInfo minutes_played_forever.
             * @member {number} minutes_played_forever
             * @memberof CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
             * @instance
             */
            FriendsGameplayInfo.prototype.minutes_played_forever = 0;
    
            /**
             * Creates a new FriendsGameplayInfo instance using the specified properties.
             * @function create
             * @memberof CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
             * @static
             * @param {CPlayer_GetFriendsGameplayInfo_Response.IFriendsGameplayInfo=} [properties] Properties to set
             * @returns {CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo} FriendsGameplayInfo instance
             */
            FriendsGameplayInfo.create = function create(properties) {
                return new FriendsGameplayInfo(properties);
            };
    
            /**
             * Encodes the specified FriendsGameplayInfo message. Does not implicitly {@link CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.verify|verify} messages.
             * @function encode
             * @memberof CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
             * @static
             * @param {CPlayer_GetFriendsGameplayInfo_Response.IFriendsGameplayInfo} message FriendsGameplayInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FriendsGameplayInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.steamid != null && Object.hasOwnProperty.call(message, "steamid"))
                    writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
                if (message.minutes_played != null && Object.hasOwnProperty.call(message, "minutes_played"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.minutes_played);
                if (message.minutes_played_forever != null && Object.hasOwnProperty.call(message, "minutes_played_forever"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.minutes_played_forever);
                return writer;
            };
    
            /**
             * Encodes the specified FriendsGameplayInfo message, length delimited. Does not implicitly {@link CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
             * @static
             * @param {CPlayer_GetFriendsGameplayInfo_Response.IFriendsGameplayInfo} message FriendsGameplayInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FriendsGameplayInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a FriendsGameplayInfo message from the specified reader or buffer.
             * @function decode
             * @memberof CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo} FriendsGameplayInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FriendsGameplayInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.steamid = reader.fixed64();
                        break;
                    case 2:
                        message.minutes_played = reader.uint32();
                        break;
                    case 3:
                        message.minutes_played_forever = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a FriendsGameplayInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo} FriendsGameplayInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FriendsGameplayInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a FriendsGameplayInfo message.
             * @function verify
             * @memberof CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FriendsGameplayInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.steamid != null && message.hasOwnProperty("steamid"))
                    if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                        return "steamid: integer|Long expected";
                if (message.minutes_played != null && message.hasOwnProperty("minutes_played"))
                    if (!$util.isInteger(message.minutes_played))
                        return "minutes_played: integer expected";
                if (message.minutes_played_forever != null && message.hasOwnProperty("minutes_played_forever"))
                    if (!$util.isInteger(message.minutes_played_forever))
                        return "minutes_played_forever: integer expected";
                return null;
            };
    
            /**
             * Creates a FriendsGameplayInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo} FriendsGameplayInfo
             */
            FriendsGameplayInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
                    return object;
                var message = new $root.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo();
                if (object.steamid != null)
                    if ($util.Long)
                        (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                    else if (typeof object.steamid === "string")
                        message.steamid = parseInt(object.steamid, 10);
                    else if (typeof object.steamid === "number")
                        message.steamid = object.steamid;
                    else if (typeof object.steamid === "object")
                        message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
                if (object.minutes_played != null)
                    message.minutes_played = object.minutes_played >>> 0;
                if (object.minutes_played_forever != null)
                    message.minutes_played_forever = object.minutes_played_forever >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a FriendsGameplayInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
             * @static
             * @param {CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo} message FriendsGameplayInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FriendsGameplayInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.steamid = options.longs === String ? "0" : 0;
                    object.minutes_played = 0;
                    object.minutes_played_forever = 0;
                }
                if (message.steamid != null && message.hasOwnProperty("steamid"))
                    if (typeof message.steamid === "number")
                        object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                    else
                        object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
                if (message.minutes_played != null && message.hasOwnProperty("minutes_played"))
                    object.minutes_played = message.minutes_played;
                if (message.minutes_played_forever != null && message.hasOwnProperty("minutes_played_forever"))
                    object.minutes_played_forever = message.minutes_played_forever;
                return object;
            };
    
            /**
             * Converts this FriendsGameplayInfo to JSON.
             * @function toJSON
             * @memberof CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FriendsGameplayInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return FriendsGameplayInfo;
        })();
    
        CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo = (function() {
    
            /**
             * Properties of an OwnGameplayInfo.
             * @memberof CPlayer_GetFriendsGameplayInfo_Response
             * @interface IOwnGameplayInfo
             * @property {number|Long|null} [steamid] OwnGameplayInfo steamid
             * @property {number|null} [minutes_played] OwnGameplayInfo minutes_played
             * @property {number|null} [minutes_played_forever] OwnGameplayInfo minutes_played_forever
             * @property {boolean|null} [in_wishlist] OwnGameplayInfo in_wishlist
             * @property {boolean|null} [owned] OwnGameplayInfo owned
             */
    
            /**
             * Constructs a new OwnGameplayInfo.
             * @memberof CPlayer_GetFriendsGameplayInfo_Response
             * @classdesc Represents an OwnGameplayInfo.
             * @implements IOwnGameplayInfo
             * @constructor
             * @param {CPlayer_GetFriendsGameplayInfo_Response.IOwnGameplayInfo=} [properties] Properties to set
             */
            function OwnGameplayInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * OwnGameplayInfo steamid.
             * @member {number|Long} steamid
             * @memberof CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo
             * @instance
             */
            OwnGameplayInfo.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
            /**
             * OwnGameplayInfo minutes_played.
             * @member {number} minutes_played
             * @memberof CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo
             * @instance
             */
            OwnGameplayInfo.prototype.minutes_played = 0;
    
            /**
             * OwnGameplayInfo minutes_played_forever.
             * @member {number} minutes_played_forever
             * @memberof CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo
             * @instance
             */
            OwnGameplayInfo.prototype.minutes_played_forever = 0;
    
            /**
             * OwnGameplayInfo in_wishlist.
             * @member {boolean} in_wishlist
             * @memberof CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo
             * @instance
             */
            OwnGameplayInfo.prototype.in_wishlist = false;
    
            /**
             * OwnGameplayInfo owned.
             * @member {boolean} owned
             * @memberof CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo
             * @instance
             */
            OwnGameplayInfo.prototype.owned = false;
    
            /**
             * Creates a new OwnGameplayInfo instance using the specified properties.
             * @function create
             * @memberof CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo
             * @static
             * @param {CPlayer_GetFriendsGameplayInfo_Response.IOwnGameplayInfo=} [properties] Properties to set
             * @returns {CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo} OwnGameplayInfo instance
             */
            OwnGameplayInfo.create = function create(properties) {
                return new OwnGameplayInfo(properties);
            };
    
            /**
             * Encodes the specified OwnGameplayInfo message. Does not implicitly {@link CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo.verify|verify} messages.
             * @function encode
             * @memberof CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo
             * @static
             * @param {CPlayer_GetFriendsGameplayInfo_Response.IOwnGameplayInfo} message OwnGameplayInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OwnGameplayInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.steamid != null && Object.hasOwnProperty.call(message, "steamid"))
                    writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
                if (message.minutes_played != null && Object.hasOwnProperty.call(message, "minutes_played"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.minutes_played);
                if (message.minutes_played_forever != null && Object.hasOwnProperty.call(message, "minutes_played_forever"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.minutes_played_forever);
                if (message.in_wishlist != null && Object.hasOwnProperty.call(message, "in_wishlist"))
                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.in_wishlist);
                if (message.owned != null && Object.hasOwnProperty.call(message, "owned"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.owned);
                return writer;
            };
    
            /**
             * Encodes the specified OwnGameplayInfo message, length delimited. Does not implicitly {@link CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo
             * @static
             * @param {CPlayer_GetFriendsGameplayInfo_Response.IOwnGameplayInfo} message OwnGameplayInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OwnGameplayInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an OwnGameplayInfo message from the specified reader or buffer.
             * @function decode
             * @memberof CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo} OwnGameplayInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OwnGameplayInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.steamid = reader.fixed64();
                        break;
                    case 2:
                        message.minutes_played = reader.uint32();
                        break;
                    case 3:
                        message.minutes_played_forever = reader.uint32();
                        break;
                    case 4:
                        message.in_wishlist = reader.bool();
                        break;
                    case 5:
                        message.owned = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an OwnGameplayInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo} OwnGameplayInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OwnGameplayInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an OwnGameplayInfo message.
             * @function verify
             * @memberof CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OwnGameplayInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.steamid != null && message.hasOwnProperty("steamid"))
                    if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                        return "steamid: integer|Long expected";
                if (message.minutes_played != null && message.hasOwnProperty("minutes_played"))
                    if (!$util.isInteger(message.minutes_played))
                        return "minutes_played: integer expected";
                if (message.minutes_played_forever != null && message.hasOwnProperty("minutes_played_forever"))
                    if (!$util.isInteger(message.minutes_played_forever))
                        return "minutes_played_forever: integer expected";
                if (message.in_wishlist != null && message.hasOwnProperty("in_wishlist"))
                    if (typeof message.in_wishlist !== "boolean")
                        return "in_wishlist: boolean expected";
                if (message.owned != null && message.hasOwnProperty("owned"))
                    if (typeof message.owned !== "boolean")
                        return "owned: boolean expected";
                return null;
            };
    
            /**
             * Creates an OwnGameplayInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo} OwnGameplayInfo
             */
            OwnGameplayInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
                    return object;
                var message = new $root.CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo();
                if (object.steamid != null)
                    if ($util.Long)
                        (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                    else if (typeof object.steamid === "string")
                        message.steamid = parseInt(object.steamid, 10);
                    else if (typeof object.steamid === "number")
                        message.steamid = object.steamid;
                    else if (typeof object.steamid === "object")
                        message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
                if (object.minutes_played != null)
                    message.minutes_played = object.minutes_played >>> 0;
                if (object.minutes_played_forever != null)
                    message.minutes_played_forever = object.minutes_played_forever >>> 0;
                if (object.in_wishlist != null)
                    message.in_wishlist = Boolean(object.in_wishlist);
                if (object.owned != null)
                    message.owned = Boolean(object.owned);
                return message;
            };
    
            /**
             * Creates a plain object from an OwnGameplayInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo
             * @static
             * @param {CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo} message OwnGameplayInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OwnGameplayInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.steamid = options.longs === String ? "0" : 0;
                    object.minutes_played = 0;
                    object.minutes_played_forever = 0;
                    object.in_wishlist = false;
                    object.owned = false;
                }
                if (message.steamid != null && message.hasOwnProperty("steamid"))
                    if (typeof message.steamid === "number")
                        object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                    else
                        object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
                if (message.minutes_played != null && message.hasOwnProperty("minutes_played"))
                    object.minutes_played = message.minutes_played;
                if (message.minutes_played_forever != null && message.hasOwnProperty("minutes_played_forever"))
                    object.minutes_played_forever = message.minutes_played_forever;
                if (message.in_wishlist != null && message.hasOwnProperty("in_wishlist"))
                    object.in_wishlist = message.in_wishlist;
                if (message.owned != null && message.hasOwnProperty("owned"))
                    object.owned = message.owned;
                return object;
            };
    
            /**
             * Converts this OwnGameplayInfo to JSON.
             * @function toJSON
             * @memberof CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OwnGameplayInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return OwnGameplayInfo;
        })();
    
        return CPlayer_GetFriendsGameplayInfo_Response;
    })();
    
    $root.CPlayer_GetFriendsAppsActivity_Request = (function() {
    
        /**
         * Properties of a CPlayer_GetFriendsAppsActivity_Request.
         * @exports ICPlayer_GetFriendsAppsActivity_Request
         * @interface ICPlayer_GetFriendsAppsActivity_Request
         * @property {string|null} [news_language] CPlayer_GetFriendsAppsActivity_Request news_language
         * @property {number|null} [request_flags] CPlayer_GetFriendsAppsActivity_Request request_flags
         */
    
        /**
         * Constructs a new CPlayer_GetFriendsAppsActivity_Request.
         * @exports CPlayer_GetFriendsAppsActivity_Request
         * @classdesc Represents a CPlayer_GetFriendsAppsActivity_Request.
         * @implements ICPlayer_GetFriendsAppsActivity_Request
         * @constructor
         * @param {ICPlayer_GetFriendsAppsActivity_Request=} [properties] Properties to set
         */
        function CPlayer_GetFriendsAppsActivity_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetFriendsAppsActivity_Request news_language.
         * @member {string} news_language
         * @memberof CPlayer_GetFriendsAppsActivity_Request
         * @instance
         */
        CPlayer_GetFriendsAppsActivity_Request.prototype.news_language = "";
    
        /**
         * CPlayer_GetFriendsAppsActivity_Request request_flags.
         * @member {number} request_flags
         * @memberof CPlayer_GetFriendsAppsActivity_Request
         * @instance
         */
        CPlayer_GetFriendsAppsActivity_Request.prototype.request_flags = 0;
    
        /**
         * Creates a new CPlayer_GetFriendsAppsActivity_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetFriendsAppsActivity_Request
         * @static
         * @param {ICPlayer_GetFriendsAppsActivity_Request=} [properties] Properties to set
         * @returns {CPlayer_GetFriendsAppsActivity_Request} CPlayer_GetFriendsAppsActivity_Request instance
         */
        CPlayer_GetFriendsAppsActivity_Request.create = function create(properties) {
            return new CPlayer_GetFriendsAppsActivity_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetFriendsAppsActivity_Request message. Does not implicitly {@link CPlayer_GetFriendsAppsActivity_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetFriendsAppsActivity_Request
         * @static
         * @param {ICPlayer_GetFriendsAppsActivity_Request} message CPlayer_GetFriendsAppsActivity_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetFriendsAppsActivity_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.news_language != null && Object.hasOwnProperty.call(message, "news_language"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.news_language);
            if (message.request_flags != null && Object.hasOwnProperty.call(message, "request_flags"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.request_flags);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetFriendsAppsActivity_Request message, length delimited. Does not implicitly {@link CPlayer_GetFriendsAppsActivity_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetFriendsAppsActivity_Request
         * @static
         * @param {ICPlayer_GetFriendsAppsActivity_Request} message CPlayer_GetFriendsAppsActivity_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetFriendsAppsActivity_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetFriendsAppsActivity_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetFriendsAppsActivity_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetFriendsAppsActivity_Request} CPlayer_GetFriendsAppsActivity_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetFriendsAppsActivity_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetFriendsAppsActivity_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.news_language = reader.string();
                    break;
                case 2:
                    message.request_flags = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetFriendsAppsActivity_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetFriendsAppsActivity_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetFriendsAppsActivity_Request} CPlayer_GetFriendsAppsActivity_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetFriendsAppsActivity_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetFriendsAppsActivity_Request message.
         * @function verify
         * @memberof CPlayer_GetFriendsAppsActivity_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetFriendsAppsActivity_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.news_language != null && message.hasOwnProperty("news_language"))
                if (!$util.isString(message.news_language))
                    return "news_language: string expected";
            if (message.request_flags != null && message.hasOwnProperty("request_flags"))
                if (!$util.isInteger(message.request_flags))
                    return "request_flags: integer expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_GetFriendsAppsActivity_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetFriendsAppsActivity_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetFriendsAppsActivity_Request} CPlayer_GetFriendsAppsActivity_Request
         */
        CPlayer_GetFriendsAppsActivity_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetFriendsAppsActivity_Request)
                return object;
            var message = new $root.CPlayer_GetFriendsAppsActivity_Request();
            if (object.news_language != null)
                message.news_language = String(object.news_language);
            if (object.request_flags != null)
                message.request_flags = object.request_flags >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetFriendsAppsActivity_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetFriendsAppsActivity_Request
         * @static
         * @param {CPlayer_GetFriendsAppsActivity_Request} message CPlayer_GetFriendsAppsActivity_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetFriendsAppsActivity_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.news_language = "";
                object.request_flags = 0;
            }
            if (message.news_language != null && message.hasOwnProperty("news_language"))
                object.news_language = message.news_language;
            if (message.request_flags != null && message.hasOwnProperty("request_flags"))
                object.request_flags = message.request_flags;
            return object;
        };
    
        /**
         * Converts this CPlayer_GetFriendsAppsActivity_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_GetFriendsAppsActivity_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetFriendsAppsActivity_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetFriendsAppsActivity_Request;
    })();
    
    $root.CPlayer_GetFriendsAppsActivity_Response = (function() {
    
        /**
         * Properties of a CPlayer_GetFriendsAppsActivity_Response.
         * @exports ICPlayer_GetFriendsAppsActivity_Response
         * @interface ICPlayer_GetFriendsAppsActivity_Response
         * @property {Array.<CPlayer_GetFriendsAppsActivity_Response.IAppFriendsInfo>|null} [trending] CPlayer_GetFriendsAppsActivity_Response trending
         * @property {Array.<CPlayer_GetFriendsAppsActivity_Response.IAppFriendsInfo>|null} [recent_purchases] CPlayer_GetFriendsAppsActivity_Response recent_purchases
         * @property {Array.<CPlayer_GetFriendsAppsActivity_Response.IAppFriendsInfo>|null} [unowned] CPlayer_GetFriendsAppsActivity_Response unowned
         * @property {Array.<CPlayer_GetFriendsAppsActivity_Response.IAppFriendsInfo>|null} [popular] CPlayer_GetFriendsAppsActivity_Response popular
         * @property {Array.<CPlayer_GetFriendsAppsActivity_Response.IAppFriendsInfo>|null} [dont_forget] CPlayer_GetFriendsAppsActivity_Response dont_forget
         * @property {Array.<CPlayer_GetFriendsAppsActivity_Response.IAppFriendsInfo>|null} [being_discussed] CPlayer_GetFriendsAppsActivity_Response being_discussed
         * @property {Array.<CPlayer_GetFriendsAppsActivity_Response.IAppFriendsInfo>|null} [new_to_group] CPlayer_GetFriendsAppsActivity_Response new_to_group
         * @property {Array.<CPlayer_GetFriendsAppsActivity_Response.IAppFriendsInfo>|null} [returned_to_group] CPlayer_GetFriendsAppsActivity_Response returned_to_group
         * @property {number|null} [active_friend_count] CPlayer_GetFriendsAppsActivity_Response active_friend_count
         */
    
        /**
         * Constructs a new CPlayer_GetFriendsAppsActivity_Response.
         * @exports CPlayer_GetFriendsAppsActivity_Response
         * @classdesc Represents a CPlayer_GetFriendsAppsActivity_Response.
         * @implements ICPlayer_GetFriendsAppsActivity_Response
         * @constructor
         * @param {ICPlayer_GetFriendsAppsActivity_Response=} [properties] Properties to set
         */
        function CPlayer_GetFriendsAppsActivity_Response(properties) {
            this.trending = [];
            this.recent_purchases = [];
            this.unowned = [];
            this.popular = [];
            this.dont_forget = [];
            this.being_discussed = [];
            this.new_to_group = [];
            this.returned_to_group = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetFriendsAppsActivity_Response trending.
         * @member {Array.<CPlayer_GetFriendsAppsActivity_Response.IAppFriendsInfo>} trending
         * @memberof CPlayer_GetFriendsAppsActivity_Response
         * @instance
         */
        CPlayer_GetFriendsAppsActivity_Response.prototype.trending = $util.emptyArray;
    
        /**
         * CPlayer_GetFriendsAppsActivity_Response recent_purchases.
         * @member {Array.<CPlayer_GetFriendsAppsActivity_Response.IAppFriendsInfo>} recent_purchases
         * @memberof CPlayer_GetFriendsAppsActivity_Response
         * @instance
         */
        CPlayer_GetFriendsAppsActivity_Response.prototype.recent_purchases = $util.emptyArray;
    
        /**
         * CPlayer_GetFriendsAppsActivity_Response unowned.
         * @member {Array.<CPlayer_GetFriendsAppsActivity_Response.IAppFriendsInfo>} unowned
         * @memberof CPlayer_GetFriendsAppsActivity_Response
         * @instance
         */
        CPlayer_GetFriendsAppsActivity_Response.prototype.unowned = $util.emptyArray;
    
        /**
         * CPlayer_GetFriendsAppsActivity_Response popular.
         * @member {Array.<CPlayer_GetFriendsAppsActivity_Response.IAppFriendsInfo>} popular
         * @memberof CPlayer_GetFriendsAppsActivity_Response
         * @instance
         */
        CPlayer_GetFriendsAppsActivity_Response.prototype.popular = $util.emptyArray;
    
        /**
         * CPlayer_GetFriendsAppsActivity_Response dont_forget.
         * @member {Array.<CPlayer_GetFriendsAppsActivity_Response.IAppFriendsInfo>} dont_forget
         * @memberof CPlayer_GetFriendsAppsActivity_Response
         * @instance
         */
        CPlayer_GetFriendsAppsActivity_Response.prototype.dont_forget = $util.emptyArray;
    
        /**
         * CPlayer_GetFriendsAppsActivity_Response being_discussed.
         * @member {Array.<CPlayer_GetFriendsAppsActivity_Response.IAppFriendsInfo>} being_discussed
         * @memberof CPlayer_GetFriendsAppsActivity_Response
         * @instance
         */
        CPlayer_GetFriendsAppsActivity_Response.prototype.being_discussed = $util.emptyArray;
    
        /**
         * CPlayer_GetFriendsAppsActivity_Response new_to_group.
         * @member {Array.<CPlayer_GetFriendsAppsActivity_Response.IAppFriendsInfo>} new_to_group
         * @memberof CPlayer_GetFriendsAppsActivity_Response
         * @instance
         */
        CPlayer_GetFriendsAppsActivity_Response.prototype.new_to_group = $util.emptyArray;
    
        /**
         * CPlayer_GetFriendsAppsActivity_Response returned_to_group.
         * @member {Array.<CPlayer_GetFriendsAppsActivity_Response.IAppFriendsInfo>} returned_to_group
         * @memberof CPlayer_GetFriendsAppsActivity_Response
         * @instance
         */
        CPlayer_GetFriendsAppsActivity_Response.prototype.returned_to_group = $util.emptyArray;
    
        /**
         * CPlayer_GetFriendsAppsActivity_Response active_friend_count.
         * @member {number} active_friend_count
         * @memberof CPlayer_GetFriendsAppsActivity_Response
         * @instance
         */
        CPlayer_GetFriendsAppsActivity_Response.prototype.active_friend_count = 0;
    
        /**
         * Creates a new CPlayer_GetFriendsAppsActivity_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetFriendsAppsActivity_Response
         * @static
         * @param {ICPlayer_GetFriendsAppsActivity_Response=} [properties] Properties to set
         * @returns {CPlayer_GetFriendsAppsActivity_Response} CPlayer_GetFriendsAppsActivity_Response instance
         */
        CPlayer_GetFriendsAppsActivity_Response.create = function create(properties) {
            return new CPlayer_GetFriendsAppsActivity_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetFriendsAppsActivity_Response message. Does not implicitly {@link CPlayer_GetFriendsAppsActivity_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetFriendsAppsActivity_Response
         * @static
         * @param {ICPlayer_GetFriendsAppsActivity_Response} message CPlayer_GetFriendsAppsActivity_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetFriendsAppsActivity_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.trending != null && message.trending.length)
                for (var i = 0; i < message.trending.length; ++i)
                    $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.encode(message.trending[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.recent_purchases != null && message.recent_purchases.length)
                for (var i = 0; i < message.recent_purchases.length; ++i)
                    $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.encode(message.recent_purchases[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.unowned != null && message.unowned.length)
                for (var i = 0; i < message.unowned.length; ++i)
                    $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.encode(message.unowned[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.popular != null && message.popular.length)
                for (var i = 0; i < message.popular.length; ++i)
                    $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.encode(message.popular[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.dont_forget != null && message.dont_forget.length)
                for (var i = 0; i < message.dont_forget.length; ++i)
                    $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.encode(message.dont_forget[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.being_discussed != null && message.being_discussed.length)
                for (var i = 0; i < message.being_discussed.length; ++i)
                    $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.encode(message.being_discussed[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.new_to_group != null && message.new_to_group.length)
                for (var i = 0; i < message.new_to_group.length; ++i)
                    $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.encode(message.new_to_group[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.returned_to_group != null && message.returned_to_group.length)
                for (var i = 0; i < message.returned_to_group.length; ++i)
                    $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.encode(message.returned_to_group[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            if (message.active_friend_count != null && Object.hasOwnProperty.call(message, "active_friend_count"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.active_friend_count);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetFriendsAppsActivity_Response message, length delimited. Does not implicitly {@link CPlayer_GetFriendsAppsActivity_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetFriendsAppsActivity_Response
         * @static
         * @param {ICPlayer_GetFriendsAppsActivity_Response} message CPlayer_GetFriendsAppsActivity_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetFriendsAppsActivity_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetFriendsAppsActivity_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetFriendsAppsActivity_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetFriendsAppsActivity_Response} CPlayer_GetFriendsAppsActivity_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetFriendsAppsActivity_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetFriendsAppsActivity_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.trending && message.trending.length))
                        message.trending = [];
                    message.trending.push($root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.decode(reader, reader.uint32()));
                    break;
                case 2:
                    if (!(message.recent_purchases && message.recent_purchases.length))
                        message.recent_purchases = [];
                    message.recent_purchases.push($root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.decode(reader, reader.uint32()));
                    break;
                case 3:
                    if (!(message.unowned && message.unowned.length))
                        message.unowned = [];
                    message.unowned.push($root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.decode(reader, reader.uint32()));
                    break;
                case 4:
                    if (!(message.popular && message.popular.length))
                        message.popular = [];
                    message.popular.push($root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.decode(reader, reader.uint32()));
                    break;
                case 5:
                    if (!(message.dont_forget && message.dont_forget.length))
                        message.dont_forget = [];
                    message.dont_forget.push($root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.decode(reader, reader.uint32()));
                    break;
                case 6:
                    if (!(message.being_discussed && message.being_discussed.length))
                        message.being_discussed = [];
                    message.being_discussed.push($root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.decode(reader, reader.uint32()));
                    break;
                case 7:
                    if (!(message.new_to_group && message.new_to_group.length))
                        message.new_to_group = [];
                    message.new_to_group.push($root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.decode(reader, reader.uint32()));
                    break;
                case 8:
                    if (!(message.returned_to_group && message.returned_to_group.length))
                        message.returned_to_group = [];
                    message.returned_to_group.push($root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.decode(reader, reader.uint32()));
                    break;
                case 9:
                    message.active_friend_count = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetFriendsAppsActivity_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetFriendsAppsActivity_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetFriendsAppsActivity_Response} CPlayer_GetFriendsAppsActivity_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetFriendsAppsActivity_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetFriendsAppsActivity_Response message.
         * @function verify
         * @memberof CPlayer_GetFriendsAppsActivity_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetFriendsAppsActivity_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.trending != null && message.hasOwnProperty("trending")) {
                if (!Array.isArray(message.trending))
                    return "trending: array expected";
                for (var i = 0; i < message.trending.length; ++i) {
                    var error = $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.verify(message.trending[i]);
                    if (error)
                        return "trending." + error;
                }
            }
            if (message.recent_purchases != null && message.hasOwnProperty("recent_purchases")) {
                if (!Array.isArray(message.recent_purchases))
                    return "recent_purchases: array expected";
                for (var i = 0; i < message.recent_purchases.length; ++i) {
                    var error = $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.verify(message.recent_purchases[i]);
                    if (error)
                        return "recent_purchases." + error;
                }
            }
            if (message.unowned != null && message.hasOwnProperty("unowned")) {
                if (!Array.isArray(message.unowned))
                    return "unowned: array expected";
                for (var i = 0; i < message.unowned.length; ++i) {
                    var error = $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.verify(message.unowned[i]);
                    if (error)
                        return "unowned." + error;
                }
            }
            if (message.popular != null && message.hasOwnProperty("popular")) {
                if (!Array.isArray(message.popular))
                    return "popular: array expected";
                for (var i = 0; i < message.popular.length; ++i) {
                    var error = $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.verify(message.popular[i]);
                    if (error)
                        return "popular." + error;
                }
            }
            if (message.dont_forget != null && message.hasOwnProperty("dont_forget")) {
                if (!Array.isArray(message.dont_forget))
                    return "dont_forget: array expected";
                for (var i = 0; i < message.dont_forget.length; ++i) {
                    var error = $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.verify(message.dont_forget[i]);
                    if (error)
                        return "dont_forget." + error;
                }
            }
            if (message.being_discussed != null && message.hasOwnProperty("being_discussed")) {
                if (!Array.isArray(message.being_discussed))
                    return "being_discussed: array expected";
                for (var i = 0; i < message.being_discussed.length; ++i) {
                    var error = $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.verify(message.being_discussed[i]);
                    if (error)
                        return "being_discussed." + error;
                }
            }
            if (message.new_to_group != null && message.hasOwnProperty("new_to_group")) {
                if (!Array.isArray(message.new_to_group))
                    return "new_to_group: array expected";
                for (var i = 0; i < message.new_to_group.length; ++i) {
                    var error = $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.verify(message.new_to_group[i]);
                    if (error)
                        return "new_to_group." + error;
                }
            }
            if (message.returned_to_group != null && message.hasOwnProperty("returned_to_group")) {
                if (!Array.isArray(message.returned_to_group))
                    return "returned_to_group: array expected";
                for (var i = 0; i < message.returned_to_group.length; ++i) {
                    var error = $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.verify(message.returned_to_group[i]);
                    if (error)
                        return "returned_to_group." + error;
                }
            }
            if (message.active_friend_count != null && message.hasOwnProperty("active_friend_count"))
                if (!$util.isInteger(message.active_friend_count))
                    return "active_friend_count: integer expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_GetFriendsAppsActivity_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetFriendsAppsActivity_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetFriendsAppsActivity_Response} CPlayer_GetFriendsAppsActivity_Response
         */
        CPlayer_GetFriendsAppsActivity_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetFriendsAppsActivity_Response)
                return object;
            var message = new $root.CPlayer_GetFriendsAppsActivity_Response();
            if (object.trending) {
                if (!Array.isArray(object.trending))
                    throw TypeError(".CPlayer_GetFriendsAppsActivity_Response.trending: array expected");
                message.trending = [];
                for (var i = 0; i < object.trending.length; ++i) {
                    if (typeof object.trending[i] !== "object")
                        throw TypeError(".CPlayer_GetFriendsAppsActivity_Response.trending: object expected");
                    message.trending[i] = $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.fromObject(object.trending[i]);
                }
            }
            if (object.recent_purchases) {
                if (!Array.isArray(object.recent_purchases))
                    throw TypeError(".CPlayer_GetFriendsAppsActivity_Response.recent_purchases: array expected");
                message.recent_purchases = [];
                for (var i = 0; i < object.recent_purchases.length; ++i) {
                    if (typeof object.recent_purchases[i] !== "object")
                        throw TypeError(".CPlayer_GetFriendsAppsActivity_Response.recent_purchases: object expected");
                    message.recent_purchases[i] = $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.fromObject(object.recent_purchases[i]);
                }
            }
            if (object.unowned) {
                if (!Array.isArray(object.unowned))
                    throw TypeError(".CPlayer_GetFriendsAppsActivity_Response.unowned: array expected");
                message.unowned = [];
                for (var i = 0; i < object.unowned.length; ++i) {
                    if (typeof object.unowned[i] !== "object")
                        throw TypeError(".CPlayer_GetFriendsAppsActivity_Response.unowned: object expected");
                    message.unowned[i] = $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.fromObject(object.unowned[i]);
                }
            }
            if (object.popular) {
                if (!Array.isArray(object.popular))
                    throw TypeError(".CPlayer_GetFriendsAppsActivity_Response.popular: array expected");
                message.popular = [];
                for (var i = 0; i < object.popular.length; ++i) {
                    if (typeof object.popular[i] !== "object")
                        throw TypeError(".CPlayer_GetFriendsAppsActivity_Response.popular: object expected");
                    message.popular[i] = $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.fromObject(object.popular[i]);
                }
            }
            if (object.dont_forget) {
                if (!Array.isArray(object.dont_forget))
                    throw TypeError(".CPlayer_GetFriendsAppsActivity_Response.dont_forget: array expected");
                message.dont_forget = [];
                for (var i = 0; i < object.dont_forget.length; ++i) {
                    if (typeof object.dont_forget[i] !== "object")
                        throw TypeError(".CPlayer_GetFriendsAppsActivity_Response.dont_forget: object expected");
                    message.dont_forget[i] = $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.fromObject(object.dont_forget[i]);
                }
            }
            if (object.being_discussed) {
                if (!Array.isArray(object.being_discussed))
                    throw TypeError(".CPlayer_GetFriendsAppsActivity_Response.being_discussed: array expected");
                message.being_discussed = [];
                for (var i = 0; i < object.being_discussed.length; ++i) {
                    if (typeof object.being_discussed[i] !== "object")
                        throw TypeError(".CPlayer_GetFriendsAppsActivity_Response.being_discussed: object expected");
                    message.being_discussed[i] = $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.fromObject(object.being_discussed[i]);
                }
            }
            if (object.new_to_group) {
                if (!Array.isArray(object.new_to_group))
                    throw TypeError(".CPlayer_GetFriendsAppsActivity_Response.new_to_group: array expected");
                message.new_to_group = [];
                for (var i = 0; i < object.new_to_group.length; ++i) {
                    if (typeof object.new_to_group[i] !== "object")
                        throw TypeError(".CPlayer_GetFriendsAppsActivity_Response.new_to_group: object expected");
                    message.new_to_group[i] = $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.fromObject(object.new_to_group[i]);
                }
            }
            if (object.returned_to_group) {
                if (!Array.isArray(object.returned_to_group))
                    throw TypeError(".CPlayer_GetFriendsAppsActivity_Response.returned_to_group: array expected");
                message.returned_to_group = [];
                for (var i = 0; i < object.returned_to_group.length; ++i) {
                    if (typeof object.returned_to_group[i] !== "object")
                        throw TypeError(".CPlayer_GetFriendsAppsActivity_Response.returned_to_group: object expected");
                    message.returned_to_group[i] = $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.fromObject(object.returned_to_group[i]);
                }
            }
            if (object.active_friend_count != null)
                message.active_friend_count = object.active_friend_count >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetFriendsAppsActivity_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetFriendsAppsActivity_Response
         * @static
         * @param {CPlayer_GetFriendsAppsActivity_Response} message CPlayer_GetFriendsAppsActivity_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetFriendsAppsActivity_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.trending = [];
                object.recent_purchases = [];
                object.unowned = [];
                object.popular = [];
                object.dont_forget = [];
                object.being_discussed = [];
                object.new_to_group = [];
                object.returned_to_group = [];
            }
            if (options.defaults)
                object.active_friend_count = 0;
            if (message.trending && message.trending.length) {
                object.trending = [];
                for (var j = 0; j < message.trending.length; ++j)
                    object.trending[j] = $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.toObject(message.trending[j], options);
            }
            if (message.recent_purchases && message.recent_purchases.length) {
                object.recent_purchases = [];
                for (var j = 0; j < message.recent_purchases.length; ++j)
                    object.recent_purchases[j] = $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.toObject(message.recent_purchases[j], options);
            }
            if (message.unowned && message.unowned.length) {
                object.unowned = [];
                for (var j = 0; j < message.unowned.length; ++j)
                    object.unowned[j] = $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.toObject(message.unowned[j], options);
            }
            if (message.popular && message.popular.length) {
                object.popular = [];
                for (var j = 0; j < message.popular.length; ++j)
                    object.popular[j] = $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.toObject(message.popular[j], options);
            }
            if (message.dont_forget && message.dont_forget.length) {
                object.dont_forget = [];
                for (var j = 0; j < message.dont_forget.length; ++j)
                    object.dont_forget[j] = $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.toObject(message.dont_forget[j], options);
            }
            if (message.being_discussed && message.being_discussed.length) {
                object.being_discussed = [];
                for (var j = 0; j < message.being_discussed.length; ++j)
                    object.being_discussed[j] = $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.toObject(message.being_discussed[j], options);
            }
            if (message.new_to_group && message.new_to_group.length) {
                object.new_to_group = [];
                for (var j = 0; j < message.new_to_group.length; ++j)
                    object.new_to_group[j] = $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.toObject(message.new_to_group[j], options);
            }
            if (message.returned_to_group && message.returned_to_group.length) {
                object.returned_to_group = [];
                for (var j = 0; j < message.returned_to_group.length; ++j)
                    object.returned_to_group[j] = $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.toObject(message.returned_to_group[j], options);
            }
            if (message.active_friend_count != null && message.hasOwnProperty("active_friend_count"))
                object.active_friend_count = message.active_friend_count;
            return object;
        };
    
        /**
         * Converts this CPlayer_GetFriendsAppsActivity_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_GetFriendsAppsActivity_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetFriendsAppsActivity_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime = (function() {
    
            /**
             * Properties of a FriendPlayTime.
             * @memberof CPlayer_GetFriendsAppsActivity_Response
             * @interface IFriendPlayTime
             * @property {number|Long|null} [steamid] FriendPlayTime steamid
             * @property {number|null} [minutes_played_this_week] FriendPlayTime minutes_played_this_week
             * @property {number|null} [minutes_played_two_weeks] FriendPlayTime minutes_played_two_weeks
             * @property {number|null} [minutes_played_forever] FriendPlayTime minutes_played_forever
             * @property {number|null} [event_count] FriendPlayTime event_count
             */
    
            /**
             * Constructs a new FriendPlayTime.
             * @memberof CPlayer_GetFriendsAppsActivity_Response
             * @classdesc Represents a FriendPlayTime.
             * @implements IFriendPlayTime
             * @constructor
             * @param {CPlayer_GetFriendsAppsActivity_Response.IFriendPlayTime=} [properties] Properties to set
             */
            function FriendPlayTime(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * FriendPlayTime steamid.
             * @member {number|Long} steamid
             * @memberof CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime
             * @instance
             */
            FriendPlayTime.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
            /**
             * FriendPlayTime minutes_played_this_week.
             * @member {number} minutes_played_this_week
             * @memberof CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime
             * @instance
             */
            FriendPlayTime.prototype.minutes_played_this_week = 0;
    
            /**
             * FriendPlayTime minutes_played_two_weeks.
             * @member {number} minutes_played_two_weeks
             * @memberof CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime
             * @instance
             */
            FriendPlayTime.prototype.minutes_played_two_weeks = 0;
    
            /**
             * FriendPlayTime minutes_played_forever.
             * @member {number} minutes_played_forever
             * @memberof CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime
             * @instance
             */
            FriendPlayTime.prototype.minutes_played_forever = 0;
    
            /**
             * FriendPlayTime event_count.
             * @member {number} event_count
             * @memberof CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime
             * @instance
             */
            FriendPlayTime.prototype.event_count = 0;
    
            /**
             * Creates a new FriendPlayTime instance using the specified properties.
             * @function create
             * @memberof CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime
             * @static
             * @param {CPlayer_GetFriendsAppsActivity_Response.IFriendPlayTime=} [properties] Properties to set
             * @returns {CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime} FriendPlayTime instance
             */
            FriendPlayTime.create = function create(properties) {
                return new FriendPlayTime(properties);
            };
    
            /**
             * Encodes the specified FriendPlayTime message. Does not implicitly {@link CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime.verify|verify} messages.
             * @function encode
             * @memberof CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime
             * @static
             * @param {CPlayer_GetFriendsAppsActivity_Response.IFriendPlayTime} message FriendPlayTime message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FriendPlayTime.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.steamid != null && Object.hasOwnProperty.call(message, "steamid"))
                    writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
                if (message.minutes_played_this_week != null && Object.hasOwnProperty.call(message, "minutes_played_this_week"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.minutes_played_this_week);
                if (message.minutes_played_two_weeks != null && Object.hasOwnProperty.call(message, "minutes_played_two_weeks"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.minutes_played_two_weeks);
                if (message.minutes_played_forever != null && Object.hasOwnProperty.call(message, "minutes_played_forever"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.minutes_played_forever);
                if (message.event_count != null && Object.hasOwnProperty.call(message, "event_count"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.event_count);
                return writer;
            };
    
            /**
             * Encodes the specified FriendPlayTime message, length delimited. Does not implicitly {@link CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime
             * @static
             * @param {CPlayer_GetFriendsAppsActivity_Response.IFriendPlayTime} message FriendPlayTime message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FriendPlayTime.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a FriendPlayTime message from the specified reader or buffer.
             * @function decode
             * @memberof CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime} FriendPlayTime
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FriendPlayTime.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.steamid = reader.fixed64();
                        break;
                    case 2:
                        message.minutes_played_this_week = reader.uint32();
                        break;
                    case 3:
                        message.minutes_played_two_weeks = reader.uint32();
                        break;
                    case 4:
                        message.minutes_played_forever = reader.uint32();
                        break;
                    case 5:
                        message.event_count = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a FriendPlayTime message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime} FriendPlayTime
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FriendPlayTime.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a FriendPlayTime message.
             * @function verify
             * @memberof CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FriendPlayTime.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.steamid != null && message.hasOwnProperty("steamid"))
                    if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                        return "steamid: integer|Long expected";
                if (message.minutes_played_this_week != null && message.hasOwnProperty("minutes_played_this_week"))
                    if (!$util.isInteger(message.minutes_played_this_week))
                        return "minutes_played_this_week: integer expected";
                if (message.minutes_played_two_weeks != null && message.hasOwnProperty("minutes_played_two_weeks"))
                    if (!$util.isInteger(message.minutes_played_two_weeks))
                        return "minutes_played_two_weeks: integer expected";
                if (message.minutes_played_forever != null && message.hasOwnProperty("minutes_played_forever"))
                    if (!$util.isInteger(message.minutes_played_forever))
                        return "minutes_played_forever: integer expected";
                if (message.event_count != null && message.hasOwnProperty("event_count"))
                    if (!$util.isInteger(message.event_count))
                        return "event_count: integer expected";
                return null;
            };
    
            /**
             * Creates a FriendPlayTime message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime} FriendPlayTime
             */
            FriendPlayTime.fromObject = function fromObject(object) {
                if (object instanceof $root.CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime)
                    return object;
                var message = new $root.CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime();
                if (object.steamid != null)
                    if ($util.Long)
                        (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                    else if (typeof object.steamid === "string")
                        message.steamid = parseInt(object.steamid, 10);
                    else if (typeof object.steamid === "number")
                        message.steamid = object.steamid;
                    else if (typeof object.steamid === "object")
                        message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
                if (object.minutes_played_this_week != null)
                    message.minutes_played_this_week = object.minutes_played_this_week >>> 0;
                if (object.minutes_played_two_weeks != null)
                    message.minutes_played_two_weeks = object.minutes_played_two_weeks >>> 0;
                if (object.minutes_played_forever != null)
                    message.minutes_played_forever = object.minutes_played_forever >>> 0;
                if (object.event_count != null)
                    message.event_count = object.event_count >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a FriendPlayTime message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime
             * @static
             * @param {CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime} message FriendPlayTime
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FriendPlayTime.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.steamid = options.longs === String ? "0" : 0;
                    object.minutes_played_this_week = 0;
                    object.minutes_played_two_weeks = 0;
                    object.minutes_played_forever = 0;
                    object.event_count = 0;
                }
                if (message.steamid != null && message.hasOwnProperty("steamid"))
                    if (typeof message.steamid === "number")
                        object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                    else
                        object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
                if (message.minutes_played_this_week != null && message.hasOwnProperty("minutes_played_this_week"))
                    object.minutes_played_this_week = message.minutes_played_this_week;
                if (message.minutes_played_two_weeks != null && message.hasOwnProperty("minutes_played_two_weeks"))
                    object.minutes_played_two_weeks = message.minutes_played_two_weeks;
                if (message.minutes_played_forever != null && message.hasOwnProperty("minutes_played_forever"))
                    object.minutes_played_forever = message.minutes_played_forever;
                if (message.event_count != null && message.hasOwnProperty("event_count"))
                    object.event_count = message.event_count;
                return object;
            };
    
            /**
             * Converts this FriendPlayTime to JSON.
             * @function toJSON
             * @memberof CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FriendPlayTime.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return FriendPlayTime;
        })();
    
        CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo = (function() {
    
            /**
             * Properties of an AppFriendsInfo.
             * @memberof CPlayer_GetFriendsAppsActivity_Response
             * @interface IAppFriendsInfo
             * @property {number|null} [appid] AppFriendsInfo appid
             * @property {Array.<CPlayer_GetFriendsAppsActivity_Response.IFriendPlayTime>|null} [friends] AppFriendsInfo friends
             * @property {number|null} [display_order] AppFriendsInfo display_order
             */
    
            /**
             * Constructs a new AppFriendsInfo.
             * @memberof CPlayer_GetFriendsAppsActivity_Response
             * @classdesc Represents an AppFriendsInfo.
             * @implements IAppFriendsInfo
             * @constructor
             * @param {CPlayer_GetFriendsAppsActivity_Response.IAppFriendsInfo=} [properties] Properties to set
             */
            function AppFriendsInfo(properties) {
                this.friends = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * AppFriendsInfo appid.
             * @member {number} appid
             * @memberof CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo
             * @instance
             */
            AppFriendsInfo.prototype.appid = 0;
    
            /**
             * AppFriendsInfo friends.
             * @member {Array.<CPlayer_GetFriendsAppsActivity_Response.IFriendPlayTime>} friends
             * @memberof CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo
             * @instance
             */
            AppFriendsInfo.prototype.friends = $util.emptyArray;
    
            /**
             * AppFriendsInfo display_order.
             * @member {number} display_order
             * @memberof CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo
             * @instance
             */
            AppFriendsInfo.prototype.display_order = 0;
    
            /**
             * Creates a new AppFriendsInfo instance using the specified properties.
             * @function create
             * @memberof CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo
             * @static
             * @param {CPlayer_GetFriendsAppsActivity_Response.IAppFriendsInfo=} [properties] Properties to set
             * @returns {CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo} AppFriendsInfo instance
             */
            AppFriendsInfo.create = function create(properties) {
                return new AppFriendsInfo(properties);
            };
    
            /**
             * Encodes the specified AppFriendsInfo message. Does not implicitly {@link CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.verify|verify} messages.
             * @function encode
             * @memberof CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo
             * @static
             * @param {CPlayer_GetFriendsAppsActivity_Response.IAppFriendsInfo} message AppFriendsInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AppFriendsInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.appid != null && Object.hasOwnProperty.call(message, "appid"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
                if (message.friends != null && message.friends.length)
                    for (var i = 0; i < message.friends.length; ++i)
                        $root.CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime.encode(message.friends[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.display_order != null && Object.hasOwnProperty.call(message, "display_order"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.display_order);
                return writer;
            };
    
            /**
             * Encodes the specified AppFriendsInfo message, length delimited. Does not implicitly {@link CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo
             * @static
             * @param {CPlayer_GetFriendsAppsActivity_Response.IAppFriendsInfo} message AppFriendsInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AppFriendsInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an AppFriendsInfo message from the specified reader or buffer.
             * @function decode
             * @memberof CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo} AppFriendsInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AppFriendsInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.appid = reader.uint32();
                        break;
                    case 2:
                        if (!(message.friends && message.friends.length))
                            message.friends = [];
                        message.friends.push($root.CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.display_order = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an AppFriendsInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo} AppFriendsInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AppFriendsInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an AppFriendsInfo message.
             * @function verify
             * @memberof CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AppFriendsInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.appid != null && message.hasOwnProperty("appid"))
                    if (!$util.isInteger(message.appid))
                        return "appid: integer expected";
                if (message.friends != null && message.hasOwnProperty("friends")) {
                    if (!Array.isArray(message.friends))
                        return "friends: array expected";
                    for (var i = 0; i < message.friends.length; ++i) {
                        var error = $root.CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime.verify(message.friends[i]);
                        if (error)
                            return "friends." + error;
                    }
                }
                if (message.display_order != null && message.hasOwnProperty("display_order"))
                    if (!$util.isInteger(message.display_order))
                        return "display_order: integer expected";
                return null;
            };
    
            /**
             * Creates an AppFriendsInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo} AppFriendsInfo
             */
            AppFriendsInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo)
                    return object;
                var message = new $root.CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo();
                if (object.appid != null)
                    message.appid = object.appid >>> 0;
                if (object.friends) {
                    if (!Array.isArray(object.friends))
                        throw TypeError(".CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.friends: array expected");
                    message.friends = [];
                    for (var i = 0; i < object.friends.length; ++i) {
                        if (typeof object.friends[i] !== "object")
                            throw TypeError(".CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.friends: object expected");
                        message.friends[i] = $root.CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime.fromObject(object.friends[i]);
                    }
                }
                if (object.display_order != null)
                    message.display_order = object.display_order >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from an AppFriendsInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo
             * @static
             * @param {CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo} message AppFriendsInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AppFriendsInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.friends = [];
                if (options.defaults) {
                    object.appid = 0;
                    object.display_order = 0;
                }
                if (message.appid != null && message.hasOwnProperty("appid"))
                    object.appid = message.appid;
                if (message.friends && message.friends.length) {
                    object.friends = [];
                    for (var j = 0; j < message.friends.length; ++j)
                        object.friends[j] = $root.CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime.toObject(message.friends[j], options);
                }
                if (message.display_order != null && message.hasOwnProperty("display_order"))
                    object.display_order = message.display_order;
                return object;
            };
    
            /**
             * Converts this AppFriendsInfo to JSON.
             * @function toJSON
             * @memberof CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AppFriendsInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return AppFriendsInfo;
        })();
    
        return CPlayer_GetFriendsAppsActivity_Response;
    })();
    
    $root.CPlayer_GetGameBadgeLevels_Request = (function() {
    
        /**
         * Properties of a CPlayer_GetGameBadgeLevels_Request.
         * @exports ICPlayer_GetGameBadgeLevels_Request
         * @interface ICPlayer_GetGameBadgeLevels_Request
         * @property {number|null} [appid] CPlayer_GetGameBadgeLevels_Request appid
         */
    
        /**
         * Constructs a new CPlayer_GetGameBadgeLevels_Request.
         * @exports CPlayer_GetGameBadgeLevels_Request
         * @classdesc Represents a CPlayer_GetGameBadgeLevels_Request.
         * @implements ICPlayer_GetGameBadgeLevels_Request
         * @constructor
         * @param {ICPlayer_GetGameBadgeLevels_Request=} [properties] Properties to set
         */
        function CPlayer_GetGameBadgeLevels_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetGameBadgeLevels_Request appid.
         * @member {number} appid
         * @memberof CPlayer_GetGameBadgeLevels_Request
         * @instance
         */
        CPlayer_GetGameBadgeLevels_Request.prototype.appid = 0;
    
        /**
         * Creates a new CPlayer_GetGameBadgeLevels_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetGameBadgeLevels_Request
         * @static
         * @param {ICPlayer_GetGameBadgeLevels_Request=} [properties] Properties to set
         * @returns {CPlayer_GetGameBadgeLevels_Request} CPlayer_GetGameBadgeLevels_Request instance
         */
        CPlayer_GetGameBadgeLevels_Request.create = function create(properties) {
            return new CPlayer_GetGameBadgeLevels_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetGameBadgeLevels_Request message. Does not implicitly {@link CPlayer_GetGameBadgeLevels_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetGameBadgeLevels_Request
         * @static
         * @param {ICPlayer_GetGameBadgeLevels_Request} message CPlayer_GetGameBadgeLevels_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetGameBadgeLevels_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appid != null && Object.hasOwnProperty.call(message, "appid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetGameBadgeLevels_Request message, length delimited. Does not implicitly {@link CPlayer_GetGameBadgeLevels_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetGameBadgeLevels_Request
         * @static
         * @param {ICPlayer_GetGameBadgeLevels_Request} message CPlayer_GetGameBadgeLevels_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetGameBadgeLevels_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetGameBadgeLevels_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetGameBadgeLevels_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetGameBadgeLevels_Request} CPlayer_GetGameBadgeLevels_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetGameBadgeLevels_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetGameBadgeLevels_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.appid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetGameBadgeLevels_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetGameBadgeLevels_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetGameBadgeLevels_Request} CPlayer_GetGameBadgeLevels_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetGameBadgeLevels_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetGameBadgeLevels_Request message.
         * @function verify
         * @memberof CPlayer_GetGameBadgeLevels_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetGameBadgeLevels_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_GetGameBadgeLevels_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetGameBadgeLevels_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetGameBadgeLevels_Request} CPlayer_GetGameBadgeLevels_Request
         */
        CPlayer_GetGameBadgeLevels_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetGameBadgeLevels_Request)
                return object;
            var message = new $root.CPlayer_GetGameBadgeLevels_Request();
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetGameBadgeLevels_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetGameBadgeLevels_Request
         * @static
         * @param {CPlayer_GetGameBadgeLevels_Request} message CPlayer_GetGameBadgeLevels_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetGameBadgeLevels_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.appid = 0;
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            return object;
        };
    
        /**
         * Converts this CPlayer_GetGameBadgeLevels_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_GetGameBadgeLevels_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetGameBadgeLevels_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetGameBadgeLevels_Request;
    })();
    
    $root.CPlayer_GetGameBadgeLevels_Response = (function() {
    
        /**
         * Properties of a CPlayer_GetGameBadgeLevels_Response.
         * @exports ICPlayer_GetGameBadgeLevels_Response
         * @interface ICPlayer_GetGameBadgeLevels_Response
         * @property {number|null} [player_level] CPlayer_GetGameBadgeLevels_Response player_level
         * @property {Array.<CPlayer_GetGameBadgeLevels_Response.IBadge>|null} [badges] CPlayer_GetGameBadgeLevels_Response badges
         */
    
        /**
         * Constructs a new CPlayer_GetGameBadgeLevels_Response.
         * @exports CPlayer_GetGameBadgeLevels_Response
         * @classdesc Represents a CPlayer_GetGameBadgeLevels_Response.
         * @implements ICPlayer_GetGameBadgeLevels_Response
         * @constructor
         * @param {ICPlayer_GetGameBadgeLevels_Response=} [properties] Properties to set
         */
        function CPlayer_GetGameBadgeLevels_Response(properties) {
            this.badges = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetGameBadgeLevels_Response player_level.
         * @member {number} player_level
         * @memberof CPlayer_GetGameBadgeLevels_Response
         * @instance
         */
        CPlayer_GetGameBadgeLevels_Response.prototype.player_level = 0;
    
        /**
         * CPlayer_GetGameBadgeLevels_Response badges.
         * @member {Array.<CPlayer_GetGameBadgeLevels_Response.IBadge>} badges
         * @memberof CPlayer_GetGameBadgeLevels_Response
         * @instance
         */
        CPlayer_GetGameBadgeLevels_Response.prototype.badges = $util.emptyArray;
    
        /**
         * Creates a new CPlayer_GetGameBadgeLevels_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetGameBadgeLevels_Response
         * @static
         * @param {ICPlayer_GetGameBadgeLevels_Response=} [properties] Properties to set
         * @returns {CPlayer_GetGameBadgeLevels_Response} CPlayer_GetGameBadgeLevels_Response instance
         */
        CPlayer_GetGameBadgeLevels_Response.create = function create(properties) {
            return new CPlayer_GetGameBadgeLevels_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetGameBadgeLevels_Response message. Does not implicitly {@link CPlayer_GetGameBadgeLevels_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetGameBadgeLevels_Response
         * @static
         * @param {ICPlayer_GetGameBadgeLevels_Response} message CPlayer_GetGameBadgeLevels_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetGameBadgeLevels_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.player_level != null && Object.hasOwnProperty.call(message, "player_level"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.player_level);
            if (message.badges != null && message.badges.length)
                for (var i = 0; i < message.badges.length; ++i)
                    $root.CPlayer_GetGameBadgeLevels_Response.Badge.encode(message.badges[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetGameBadgeLevels_Response message, length delimited. Does not implicitly {@link CPlayer_GetGameBadgeLevels_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetGameBadgeLevels_Response
         * @static
         * @param {ICPlayer_GetGameBadgeLevels_Response} message CPlayer_GetGameBadgeLevels_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetGameBadgeLevels_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetGameBadgeLevels_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetGameBadgeLevels_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetGameBadgeLevels_Response} CPlayer_GetGameBadgeLevels_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetGameBadgeLevels_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetGameBadgeLevels_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.player_level = reader.uint32();
                    break;
                case 2:
                    if (!(message.badges && message.badges.length))
                        message.badges = [];
                    message.badges.push($root.CPlayer_GetGameBadgeLevels_Response.Badge.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetGameBadgeLevels_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetGameBadgeLevels_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetGameBadgeLevels_Response} CPlayer_GetGameBadgeLevels_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetGameBadgeLevels_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetGameBadgeLevels_Response message.
         * @function verify
         * @memberof CPlayer_GetGameBadgeLevels_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetGameBadgeLevels_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.player_level != null && message.hasOwnProperty("player_level"))
                if (!$util.isInteger(message.player_level))
                    return "player_level: integer expected";
            if (message.badges != null && message.hasOwnProperty("badges")) {
                if (!Array.isArray(message.badges))
                    return "badges: array expected";
                for (var i = 0; i < message.badges.length; ++i) {
                    var error = $root.CPlayer_GetGameBadgeLevels_Response.Badge.verify(message.badges[i]);
                    if (error)
                        return "badges." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CPlayer_GetGameBadgeLevels_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetGameBadgeLevels_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetGameBadgeLevels_Response} CPlayer_GetGameBadgeLevels_Response
         */
        CPlayer_GetGameBadgeLevels_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetGameBadgeLevels_Response)
                return object;
            var message = new $root.CPlayer_GetGameBadgeLevels_Response();
            if (object.player_level != null)
                message.player_level = object.player_level >>> 0;
            if (object.badges) {
                if (!Array.isArray(object.badges))
                    throw TypeError(".CPlayer_GetGameBadgeLevels_Response.badges: array expected");
                message.badges = [];
                for (var i = 0; i < object.badges.length; ++i) {
                    if (typeof object.badges[i] !== "object")
                        throw TypeError(".CPlayer_GetGameBadgeLevels_Response.badges: object expected");
                    message.badges[i] = $root.CPlayer_GetGameBadgeLevels_Response.Badge.fromObject(object.badges[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetGameBadgeLevels_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetGameBadgeLevels_Response
         * @static
         * @param {CPlayer_GetGameBadgeLevels_Response} message CPlayer_GetGameBadgeLevels_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetGameBadgeLevels_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.badges = [];
            if (options.defaults)
                object.player_level = 0;
            if (message.player_level != null && message.hasOwnProperty("player_level"))
                object.player_level = message.player_level;
            if (message.badges && message.badges.length) {
                object.badges = [];
                for (var j = 0; j < message.badges.length; ++j)
                    object.badges[j] = $root.CPlayer_GetGameBadgeLevels_Response.Badge.toObject(message.badges[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CPlayer_GetGameBadgeLevels_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_GetGameBadgeLevels_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetGameBadgeLevels_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CPlayer_GetGameBadgeLevels_Response.Badge = (function() {
    
            /**
             * Properties of a Badge.
             * @memberof CPlayer_GetGameBadgeLevels_Response
             * @interface IBadge
             * @property {number|null} [level] Badge level
             * @property {number|null} [series] Badge series
             * @property {number|null} [border_color] Badge border_color
             */
    
            /**
             * Constructs a new Badge.
             * @memberof CPlayer_GetGameBadgeLevels_Response
             * @classdesc Represents a Badge.
             * @implements IBadge
             * @constructor
             * @param {CPlayer_GetGameBadgeLevels_Response.IBadge=} [properties] Properties to set
             */
            function Badge(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Badge level.
             * @member {number} level
             * @memberof CPlayer_GetGameBadgeLevels_Response.Badge
             * @instance
             */
            Badge.prototype.level = 0;
    
            /**
             * Badge series.
             * @member {number} series
             * @memberof CPlayer_GetGameBadgeLevels_Response.Badge
             * @instance
             */
            Badge.prototype.series = 0;
    
            /**
             * Badge border_color.
             * @member {number} border_color
             * @memberof CPlayer_GetGameBadgeLevels_Response.Badge
             * @instance
             */
            Badge.prototype.border_color = 0;
    
            /**
             * Creates a new Badge instance using the specified properties.
             * @function create
             * @memberof CPlayer_GetGameBadgeLevels_Response.Badge
             * @static
             * @param {CPlayer_GetGameBadgeLevels_Response.IBadge=} [properties] Properties to set
             * @returns {CPlayer_GetGameBadgeLevels_Response.Badge} Badge instance
             */
            Badge.create = function create(properties) {
                return new Badge(properties);
            };
    
            /**
             * Encodes the specified Badge message. Does not implicitly {@link CPlayer_GetGameBadgeLevels_Response.Badge.verify|verify} messages.
             * @function encode
             * @memberof CPlayer_GetGameBadgeLevels_Response.Badge
             * @static
             * @param {CPlayer_GetGameBadgeLevels_Response.IBadge} message Badge message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Badge.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.level != null && Object.hasOwnProperty.call(message, "level"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.level);
                if (message.series != null && Object.hasOwnProperty.call(message, "series"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.series);
                if (message.border_color != null && Object.hasOwnProperty.call(message, "border_color"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.border_color);
                return writer;
            };
    
            /**
             * Encodes the specified Badge message, length delimited. Does not implicitly {@link CPlayer_GetGameBadgeLevels_Response.Badge.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CPlayer_GetGameBadgeLevels_Response.Badge
             * @static
             * @param {CPlayer_GetGameBadgeLevels_Response.IBadge} message Badge message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Badge.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Badge message from the specified reader or buffer.
             * @function decode
             * @memberof CPlayer_GetGameBadgeLevels_Response.Badge
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CPlayer_GetGameBadgeLevels_Response.Badge} Badge
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Badge.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetGameBadgeLevels_Response.Badge();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.level = reader.int32();
                        break;
                    case 2:
                        message.series = reader.int32();
                        break;
                    case 3:
                        message.border_color = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a Badge message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CPlayer_GetGameBadgeLevels_Response.Badge
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CPlayer_GetGameBadgeLevels_Response.Badge} Badge
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Badge.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Badge message.
             * @function verify
             * @memberof CPlayer_GetGameBadgeLevels_Response.Badge
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Badge.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.level != null && message.hasOwnProperty("level"))
                    if (!$util.isInteger(message.level))
                        return "level: integer expected";
                if (message.series != null && message.hasOwnProperty("series"))
                    if (!$util.isInteger(message.series))
                        return "series: integer expected";
                if (message.border_color != null && message.hasOwnProperty("border_color"))
                    if (!$util.isInteger(message.border_color))
                        return "border_color: integer expected";
                return null;
            };
    
            /**
             * Creates a Badge message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CPlayer_GetGameBadgeLevels_Response.Badge
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CPlayer_GetGameBadgeLevels_Response.Badge} Badge
             */
            Badge.fromObject = function fromObject(object) {
                if (object instanceof $root.CPlayer_GetGameBadgeLevels_Response.Badge)
                    return object;
                var message = new $root.CPlayer_GetGameBadgeLevels_Response.Badge();
                if (object.level != null)
                    message.level = object.level | 0;
                if (object.series != null)
                    message.series = object.series | 0;
                if (object.border_color != null)
                    message.border_color = object.border_color >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a Badge message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CPlayer_GetGameBadgeLevels_Response.Badge
             * @static
             * @param {CPlayer_GetGameBadgeLevels_Response.Badge} message Badge
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Badge.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.level = 0;
                    object.series = 0;
                    object.border_color = 0;
                }
                if (message.level != null && message.hasOwnProperty("level"))
                    object.level = message.level;
                if (message.series != null && message.hasOwnProperty("series"))
                    object.series = message.series;
                if (message.border_color != null && message.hasOwnProperty("border_color"))
                    object.border_color = message.border_color;
                return object;
            };
    
            /**
             * Converts this Badge to JSON.
             * @function toJSON
             * @memberof CPlayer_GetGameBadgeLevels_Response.Badge
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Badge.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Badge;
        })();
    
        return CPlayer_GetGameBadgeLevels_Response;
    })();
    
    $root.CPlayer_GetProfileBackground_Request = (function() {
    
        /**
         * Properties of a CPlayer_GetProfileBackground_Request.
         * @exports ICPlayer_GetProfileBackground_Request
         * @interface ICPlayer_GetProfileBackground_Request
         * @property {number|Long|null} [steamid] CPlayer_GetProfileBackground_Request steamid
         * @property {string|null} [language] CPlayer_GetProfileBackground_Request language
         */
    
        /**
         * Constructs a new CPlayer_GetProfileBackground_Request.
         * @exports CPlayer_GetProfileBackground_Request
         * @classdesc Represents a CPlayer_GetProfileBackground_Request.
         * @implements ICPlayer_GetProfileBackground_Request
         * @constructor
         * @param {ICPlayer_GetProfileBackground_Request=} [properties] Properties to set
         */
        function CPlayer_GetProfileBackground_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetProfileBackground_Request steamid.
         * @member {number|Long} steamid
         * @memberof CPlayer_GetProfileBackground_Request
         * @instance
         */
        CPlayer_GetProfileBackground_Request.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CPlayer_GetProfileBackground_Request language.
         * @member {string} language
         * @memberof CPlayer_GetProfileBackground_Request
         * @instance
         */
        CPlayer_GetProfileBackground_Request.prototype.language = "";
    
        /**
         * Creates a new CPlayer_GetProfileBackground_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetProfileBackground_Request
         * @static
         * @param {ICPlayer_GetProfileBackground_Request=} [properties] Properties to set
         * @returns {CPlayer_GetProfileBackground_Request} CPlayer_GetProfileBackground_Request instance
         */
        CPlayer_GetProfileBackground_Request.create = function create(properties) {
            return new CPlayer_GetProfileBackground_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetProfileBackground_Request message. Does not implicitly {@link CPlayer_GetProfileBackground_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetProfileBackground_Request
         * @static
         * @param {ICPlayer_GetProfileBackground_Request} message CPlayer_GetProfileBackground_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetProfileBackground_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid != null && Object.hasOwnProperty.call(message, "steamid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
            if (message.language != null && Object.hasOwnProperty.call(message, "language"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.language);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetProfileBackground_Request message, length delimited. Does not implicitly {@link CPlayer_GetProfileBackground_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetProfileBackground_Request
         * @static
         * @param {ICPlayer_GetProfileBackground_Request} message CPlayer_GetProfileBackground_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetProfileBackground_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetProfileBackground_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetProfileBackground_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetProfileBackground_Request} CPlayer_GetProfileBackground_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetProfileBackground_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetProfileBackground_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid = reader.fixed64();
                    break;
                case 2:
                    message.language = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetProfileBackground_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetProfileBackground_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetProfileBackground_Request} CPlayer_GetProfileBackground_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetProfileBackground_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetProfileBackground_Request message.
         * @function verify
         * @memberof CPlayer_GetProfileBackground_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetProfileBackground_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            if (message.language != null && message.hasOwnProperty("language"))
                if (!$util.isString(message.language))
                    return "language: string expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_GetProfileBackground_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetProfileBackground_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetProfileBackground_Request} CPlayer_GetProfileBackground_Request
         */
        CPlayer_GetProfileBackground_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetProfileBackground_Request)
                return object;
            var message = new $root.CPlayer_GetProfileBackground_Request();
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
            if (object.language != null)
                message.language = String(object.language);
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetProfileBackground_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetProfileBackground_Request
         * @static
         * @param {CPlayer_GetProfileBackground_Request} message CPlayer_GetProfileBackground_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetProfileBackground_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
                object.language = "";
            }
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
            if (message.language != null && message.hasOwnProperty("language"))
                object.language = message.language;
            return object;
        };
    
        /**
         * Converts this CPlayer_GetProfileBackground_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_GetProfileBackground_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetProfileBackground_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetProfileBackground_Request;
    })();
    
    $root.ProfileItem = (function() {
    
        /**
         * Properties of a ProfileItem.
         * @exports IProfileItem
         * @interface IProfileItem
         * @property {number|Long|null} [communityitemid] ProfileItem communityitemid
         * @property {string|null} [image_small] ProfileItem image_small
         * @property {string|null} [image_large] ProfileItem image_large
         * @property {string|null} [name] ProfileItem name
         * @property {string|null} [item_title] ProfileItem item_title
         * @property {string|null} [item_description] ProfileItem item_description
         * @property {number|null} [appid] ProfileItem appid
         * @property {number|null} [item_type] ProfileItem item_type
         * @property {number|null} [item_class] ProfileItem item_class
         * @property {string|null} [movie_webm] ProfileItem movie_webm
         * @property {string|null} [movie_mp4] ProfileItem movie_mp4
         * @property {string|null} [movie_webm_small] ProfileItem movie_webm_small
         * @property {string|null} [movie_mp4_small] ProfileItem movie_mp4_small
         * @property {number|null} [equipped_flags] ProfileItem equipped_flags
         */
    
        /**
         * Constructs a new ProfileItem.
         * @exports ProfileItem
         * @classdesc Represents a ProfileItem.
         * @implements IProfileItem
         * @constructor
         * @param {IProfileItem=} [properties] Properties to set
         */
        function ProfileItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * ProfileItem communityitemid.
         * @member {number|Long} communityitemid
         * @memberof ProfileItem
         * @instance
         */
        ProfileItem.prototype.communityitemid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * ProfileItem image_small.
         * @member {string} image_small
         * @memberof ProfileItem
         * @instance
         */
        ProfileItem.prototype.image_small = "";
    
        /**
         * ProfileItem image_large.
         * @member {string} image_large
         * @memberof ProfileItem
         * @instance
         */
        ProfileItem.prototype.image_large = "";
    
        /**
         * ProfileItem name.
         * @member {string} name
         * @memberof ProfileItem
         * @instance
         */
        ProfileItem.prototype.name = "";
    
        /**
         * ProfileItem item_title.
         * @member {string} item_title
         * @memberof ProfileItem
         * @instance
         */
        ProfileItem.prototype.item_title = "";
    
        /**
         * ProfileItem item_description.
         * @member {string} item_description
         * @memberof ProfileItem
         * @instance
         */
        ProfileItem.prototype.item_description = "";
    
        /**
         * ProfileItem appid.
         * @member {number} appid
         * @memberof ProfileItem
         * @instance
         */
        ProfileItem.prototype.appid = 0;
    
        /**
         * ProfileItem item_type.
         * @member {number} item_type
         * @memberof ProfileItem
         * @instance
         */
        ProfileItem.prototype.item_type = 0;
    
        /**
         * ProfileItem item_class.
         * @member {number} item_class
         * @memberof ProfileItem
         * @instance
         */
        ProfileItem.prototype.item_class = 0;
    
        /**
         * ProfileItem movie_webm.
         * @member {string} movie_webm
         * @memberof ProfileItem
         * @instance
         */
        ProfileItem.prototype.movie_webm = "";
    
        /**
         * ProfileItem movie_mp4.
         * @member {string} movie_mp4
         * @memberof ProfileItem
         * @instance
         */
        ProfileItem.prototype.movie_mp4 = "";
    
        /**
         * ProfileItem movie_webm_small.
         * @member {string} movie_webm_small
         * @memberof ProfileItem
         * @instance
         */
        ProfileItem.prototype.movie_webm_small = "";
    
        /**
         * ProfileItem movie_mp4_small.
         * @member {string} movie_mp4_small
         * @memberof ProfileItem
         * @instance
         */
        ProfileItem.prototype.movie_mp4_small = "";
    
        /**
         * ProfileItem equipped_flags.
         * @member {number} equipped_flags
         * @memberof ProfileItem
         * @instance
         */
        ProfileItem.prototype.equipped_flags = 0;
    
        /**
         * Creates a new ProfileItem instance using the specified properties.
         * @function create
         * @memberof ProfileItem
         * @static
         * @param {IProfileItem=} [properties] Properties to set
         * @returns {ProfileItem} ProfileItem instance
         */
        ProfileItem.create = function create(properties) {
            return new ProfileItem(properties);
        };
    
        /**
         * Encodes the specified ProfileItem message. Does not implicitly {@link ProfileItem.verify|verify} messages.
         * @function encode
         * @memberof ProfileItem
         * @static
         * @param {IProfileItem} message ProfileItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProfileItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.communityitemid != null && Object.hasOwnProperty.call(message, "communityitemid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.communityitemid);
            if (message.image_small != null && Object.hasOwnProperty.call(message, "image_small"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.image_small);
            if (message.image_large != null && Object.hasOwnProperty.call(message, "image_large"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.image_large);
            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.name);
            if (message.item_title != null && Object.hasOwnProperty.call(message, "item_title"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.item_title);
            if (message.item_description != null && Object.hasOwnProperty.call(message, "item_description"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.item_description);
            if (message.appid != null && Object.hasOwnProperty.call(message, "appid"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.appid);
            if (message.item_type != null && Object.hasOwnProperty.call(message, "item_type"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.item_type);
            if (message.item_class != null && Object.hasOwnProperty.call(message, "item_class"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.item_class);
            if (message.movie_webm != null && Object.hasOwnProperty.call(message, "movie_webm"))
                writer.uint32(/* id 10, wireType 2 =*/82).string(message.movie_webm);
            if (message.movie_mp4 != null && Object.hasOwnProperty.call(message, "movie_mp4"))
                writer.uint32(/* id 11, wireType 2 =*/90).string(message.movie_mp4);
            if (message.equipped_flags != null && Object.hasOwnProperty.call(message, "equipped_flags"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.equipped_flags);
            if (message.movie_webm_small != null && Object.hasOwnProperty.call(message, "movie_webm_small"))
                writer.uint32(/* id 13, wireType 2 =*/106).string(message.movie_webm_small);
            if (message.movie_mp4_small != null && Object.hasOwnProperty.call(message, "movie_mp4_small"))
                writer.uint32(/* id 14, wireType 2 =*/114).string(message.movie_mp4_small);
            return writer;
        };
    
        /**
         * Encodes the specified ProfileItem message, length delimited. Does not implicitly {@link ProfileItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ProfileItem
         * @static
         * @param {IProfileItem} message ProfileItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProfileItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a ProfileItem message from the specified reader or buffer.
         * @function decode
         * @memberof ProfileItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ProfileItem} ProfileItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProfileItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProfileItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.communityitemid = reader.uint64();
                    break;
                case 2:
                    message.image_small = reader.string();
                    break;
                case 3:
                    message.image_large = reader.string();
                    break;
                case 4:
                    message.name = reader.string();
                    break;
                case 5:
                    message.item_title = reader.string();
                    break;
                case 6:
                    message.item_description = reader.string();
                    break;
                case 7:
                    message.appid = reader.uint32();
                    break;
                case 8:
                    message.item_type = reader.uint32();
                    break;
                case 9:
                    message.item_class = reader.uint32();
                    break;
                case 10:
                    message.movie_webm = reader.string();
                    break;
                case 11:
                    message.movie_mp4 = reader.string();
                    break;
                case 13:
                    message.movie_webm_small = reader.string();
                    break;
                case 14:
                    message.movie_mp4_small = reader.string();
                    break;
                case 12:
                    message.equipped_flags = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a ProfileItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ProfileItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ProfileItem} ProfileItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProfileItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a ProfileItem message.
         * @function verify
         * @memberof ProfileItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProfileItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.communityitemid != null && message.hasOwnProperty("communityitemid"))
                if (!$util.isInteger(message.communityitemid) && !(message.communityitemid && $util.isInteger(message.communityitemid.low) && $util.isInteger(message.communityitemid.high)))
                    return "communityitemid: integer|Long expected";
            if (message.image_small != null && message.hasOwnProperty("image_small"))
                if (!$util.isString(message.image_small))
                    return "image_small: string expected";
            if (message.image_large != null && message.hasOwnProperty("image_large"))
                if (!$util.isString(message.image_large))
                    return "image_large: string expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.item_title != null && message.hasOwnProperty("item_title"))
                if (!$util.isString(message.item_title))
                    return "item_title: string expected";
            if (message.item_description != null && message.hasOwnProperty("item_description"))
                if (!$util.isString(message.item_description))
                    return "item_description: string expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.item_type != null && message.hasOwnProperty("item_type"))
                if (!$util.isInteger(message.item_type))
                    return "item_type: integer expected";
            if (message.item_class != null && message.hasOwnProperty("item_class"))
                if (!$util.isInteger(message.item_class))
                    return "item_class: integer expected";
            if (message.movie_webm != null && message.hasOwnProperty("movie_webm"))
                if (!$util.isString(message.movie_webm))
                    return "movie_webm: string expected";
            if (message.movie_mp4 != null && message.hasOwnProperty("movie_mp4"))
                if (!$util.isString(message.movie_mp4))
                    return "movie_mp4: string expected";
            if (message.movie_webm_small != null && message.hasOwnProperty("movie_webm_small"))
                if (!$util.isString(message.movie_webm_small))
                    return "movie_webm_small: string expected";
            if (message.movie_mp4_small != null && message.hasOwnProperty("movie_mp4_small"))
                if (!$util.isString(message.movie_mp4_small))
                    return "movie_mp4_small: string expected";
            if (message.equipped_flags != null && message.hasOwnProperty("equipped_flags"))
                if (!$util.isInteger(message.equipped_flags))
                    return "equipped_flags: integer expected";
            return null;
        };
    
        /**
         * Creates a ProfileItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ProfileItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ProfileItem} ProfileItem
         */
        ProfileItem.fromObject = function fromObject(object) {
            if (object instanceof $root.ProfileItem)
                return object;
            var message = new $root.ProfileItem();
            if (object.communityitemid != null)
                if ($util.Long)
                    (message.communityitemid = $util.Long.fromValue(object.communityitemid)).unsigned = true;
                else if (typeof object.communityitemid === "string")
                    message.communityitemid = parseInt(object.communityitemid, 10);
                else if (typeof object.communityitemid === "number")
                    message.communityitemid = object.communityitemid;
                else if (typeof object.communityitemid === "object")
                    message.communityitemid = new $util.LongBits(object.communityitemid.low >>> 0, object.communityitemid.high >>> 0).toNumber(true);
            if (object.image_small != null)
                message.image_small = String(object.image_small);
            if (object.image_large != null)
                message.image_large = String(object.image_large);
            if (object.name != null)
                message.name = String(object.name);
            if (object.item_title != null)
                message.item_title = String(object.item_title);
            if (object.item_description != null)
                message.item_description = String(object.item_description);
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.item_type != null)
                message.item_type = object.item_type >>> 0;
            if (object.item_class != null)
                message.item_class = object.item_class >>> 0;
            if (object.movie_webm != null)
                message.movie_webm = String(object.movie_webm);
            if (object.movie_mp4 != null)
                message.movie_mp4 = String(object.movie_mp4);
            if (object.movie_webm_small != null)
                message.movie_webm_small = String(object.movie_webm_small);
            if (object.movie_mp4_small != null)
                message.movie_mp4_small = String(object.movie_mp4_small);
            if (object.equipped_flags != null)
                message.equipped_flags = object.equipped_flags >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a ProfileItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ProfileItem
         * @static
         * @param {ProfileItem} message ProfileItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProfileItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.communityitemid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.communityitemid = options.longs === String ? "0" : 0;
                object.image_small = "";
                object.image_large = "";
                object.name = "";
                object.item_title = "";
                object.item_description = "";
                object.appid = 0;
                object.item_type = 0;
                object.item_class = 0;
                object.movie_webm = "";
                object.movie_mp4 = "";
                object.equipped_flags = 0;
                object.movie_webm_small = "";
                object.movie_mp4_small = "";
            }
            if (message.communityitemid != null && message.hasOwnProperty("communityitemid"))
                if (typeof message.communityitemid === "number")
                    object.communityitemid = options.longs === String ? String(message.communityitemid) : message.communityitemid;
                else
                    object.communityitemid = options.longs === String ? $util.Long.prototype.toString.call(message.communityitemid) : options.longs === Number ? new $util.LongBits(message.communityitemid.low >>> 0, message.communityitemid.high >>> 0).toNumber(true) : message.communityitemid;
            if (message.image_small != null && message.hasOwnProperty("image_small"))
                object.image_small = message.image_small;
            if (message.image_large != null && message.hasOwnProperty("image_large"))
                object.image_large = message.image_large;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.item_title != null && message.hasOwnProperty("item_title"))
                object.item_title = message.item_title;
            if (message.item_description != null && message.hasOwnProperty("item_description"))
                object.item_description = message.item_description;
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.item_type != null && message.hasOwnProperty("item_type"))
                object.item_type = message.item_type;
            if (message.item_class != null && message.hasOwnProperty("item_class"))
                object.item_class = message.item_class;
            if (message.movie_webm != null && message.hasOwnProperty("movie_webm"))
                object.movie_webm = message.movie_webm;
            if (message.movie_mp4 != null && message.hasOwnProperty("movie_mp4"))
                object.movie_mp4 = message.movie_mp4;
            if (message.equipped_flags != null && message.hasOwnProperty("equipped_flags"))
                object.equipped_flags = message.equipped_flags;
            if (message.movie_webm_small != null && message.hasOwnProperty("movie_webm_small"))
                object.movie_webm_small = message.movie_webm_small;
            if (message.movie_mp4_small != null && message.hasOwnProperty("movie_mp4_small"))
                object.movie_mp4_small = message.movie_mp4_small;
            return object;
        };
    
        /**
         * Converts this ProfileItem to JSON.
         * @function toJSON
         * @memberof ProfileItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProfileItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return ProfileItem;
    })();
    
    $root.CPlayer_GetProfileBackground_Response = (function() {
    
        /**
         * Properties of a CPlayer_GetProfileBackground_Response.
         * @exports ICPlayer_GetProfileBackground_Response
         * @interface ICPlayer_GetProfileBackground_Response
         * @property {IProfileItem|null} [profile_background] CPlayer_GetProfileBackground_Response profile_background
         */
    
        /**
         * Constructs a new CPlayer_GetProfileBackground_Response.
         * @exports CPlayer_GetProfileBackground_Response
         * @classdesc Represents a CPlayer_GetProfileBackground_Response.
         * @implements ICPlayer_GetProfileBackground_Response
         * @constructor
         * @param {ICPlayer_GetProfileBackground_Response=} [properties] Properties to set
         */
        function CPlayer_GetProfileBackground_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetProfileBackground_Response profile_background.
         * @member {IProfileItem|null|undefined} profile_background
         * @memberof CPlayer_GetProfileBackground_Response
         * @instance
         */
        CPlayer_GetProfileBackground_Response.prototype.profile_background = null;
    
        /**
         * Creates a new CPlayer_GetProfileBackground_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetProfileBackground_Response
         * @static
         * @param {ICPlayer_GetProfileBackground_Response=} [properties] Properties to set
         * @returns {CPlayer_GetProfileBackground_Response} CPlayer_GetProfileBackground_Response instance
         */
        CPlayer_GetProfileBackground_Response.create = function create(properties) {
            return new CPlayer_GetProfileBackground_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetProfileBackground_Response message. Does not implicitly {@link CPlayer_GetProfileBackground_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetProfileBackground_Response
         * @static
         * @param {ICPlayer_GetProfileBackground_Response} message CPlayer_GetProfileBackground_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetProfileBackground_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.profile_background != null && Object.hasOwnProperty.call(message, "profile_background"))
                $root.ProfileItem.encode(message.profile_background, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetProfileBackground_Response message, length delimited. Does not implicitly {@link CPlayer_GetProfileBackground_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetProfileBackground_Response
         * @static
         * @param {ICPlayer_GetProfileBackground_Response} message CPlayer_GetProfileBackground_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetProfileBackground_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetProfileBackground_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetProfileBackground_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetProfileBackground_Response} CPlayer_GetProfileBackground_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetProfileBackground_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetProfileBackground_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.profile_background = $root.ProfileItem.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetProfileBackground_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetProfileBackground_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetProfileBackground_Response} CPlayer_GetProfileBackground_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetProfileBackground_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetProfileBackground_Response message.
         * @function verify
         * @memberof CPlayer_GetProfileBackground_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetProfileBackground_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.profile_background != null && message.hasOwnProperty("profile_background")) {
                var error = $root.ProfileItem.verify(message.profile_background);
                if (error)
                    return "profile_background." + error;
            }
            return null;
        };
    
        /**
         * Creates a CPlayer_GetProfileBackground_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetProfileBackground_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetProfileBackground_Response} CPlayer_GetProfileBackground_Response
         */
        CPlayer_GetProfileBackground_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetProfileBackground_Response)
                return object;
            var message = new $root.CPlayer_GetProfileBackground_Response();
            if (object.profile_background != null) {
                if (typeof object.profile_background !== "object")
                    throw TypeError(".CPlayer_GetProfileBackground_Response.profile_background: object expected");
                message.profile_background = $root.ProfileItem.fromObject(object.profile_background);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetProfileBackground_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetProfileBackground_Response
         * @static
         * @param {CPlayer_GetProfileBackground_Response} message CPlayer_GetProfileBackground_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetProfileBackground_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.profile_background = null;
            if (message.profile_background != null && message.hasOwnProperty("profile_background"))
                object.profile_background = $root.ProfileItem.toObject(message.profile_background, options);
            return object;
        };
    
        /**
         * Converts this CPlayer_GetProfileBackground_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_GetProfileBackground_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetProfileBackground_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetProfileBackground_Response;
    })();
    
    $root.CPlayer_SetProfileBackground_Request = (function() {
    
        /**
         * Properties of a CPlayer_SetProfileBackground_Request.
         * @exports ICPlayer_SetProfileBackground_Request
         * @interface ICPlayer_SetProfileBackground_Request
         * @property {number|Long|null} [communityitemid] CPlayer_SetProfileBackground_Request communityitemid
         */
    
        /**
         * Constructs a new CPlayer_SetProfileBackground_Request.
         * @exports CPlayer_SetProfileBackground_Request
         * @classdesc Represents a CPlayer_SetProfileBackground_Request.
         * @implements ICPlayer_SetProfileBackground_Request
         * @constructor
         * @param {ICPlayer_SetProfileBackground_Request=} [properties] Properties to set
         */
        function CPlayer_SetProfileBackground_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_SetProfileBackground_Request communityitemid.
         * @member {number|Long} communityitemid
         * @memberof CPlayer_SetProfileBackground_Request
         * @instance
         */
        CPlayer_SetProfileBackground_Request.prototype.communityitemid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CPlayer_SetProfileBackground_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_SetProfileBackground_Request
         * @static
         * @param {ICPlayer_SetProfileBackground_Request=} [properties] Properties to set
         * @returns {CPlayer_SetProfileBackground_Request} CPlayer_SetProfileBackground_Request instance
         */
        CPlayer_SetProfileBackground_Request.create = function create(properties) {
            return new CPlayer_SetProfileBackground_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_SetProfileBackground_Request message. Does not implicitly {@link CPlayer_SetProfileBackground_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_SetProfileBackground_Request
         * @static
         * @param {ICPlayer_SetProfileBackground_Request} message CPlayer_SetProfileBackground_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetProfileBackground_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.communityitemid != null && Object.hasOwnProperty.call(message, "communityitemid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.communityitemid);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_SetProfileBackground_Request message, length delimited. Does not implicitly {@link CPlayer_SetProfileBackground_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_SetProfileBackground_Request
         * @static
         * @param {ICPlayer_SetProfileBackground_Request} message CPlayer_SetProfileBackground_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetProfileBackground_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_SetProfileBackground_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_SetProfileBackground_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_SetProfileBackground_Request} CPlayer_SetProfileBackground_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetProfileBackground_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_SetProfileBackground_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.communityitemid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_SetProfileBackground_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_SetProfileBackground_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_SetProfileBackground_Request} CPlayer_SetProfileBackground_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetProfileBackground_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_SetProfileBackground_Request message.
         * @function verify
         * @memberof CPlayer_SetProfileBackground_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_SetProfileBackground_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.communityitemid != null && message.hasOwnProperty("communityitemid"))
                if (!$util.isInteger(message.communityitemid) && !(message.communityitemid && $util.isInteger(message.communityitemid.low) && $util.isInteger(message.communityitemid.high)))
                    return "communityitemid: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_SetProfileBackground_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_SetProfileBackground_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_SetProfileBackground_Request} CPlayer_SetProfileBackground_Request
         */
        CPlayer_SetProfileBackground_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_SetProfileBackground_Request)
                return object;
            var message = new $root.CPlayer_SetProfileBackground_Request();
            if (object.communityitemid != null)
                if ($util.Long)
                    (message.communityitemid = $util.Long.fromValue(object.communityitemid)).unsigned = true;
                else if (typeof object.communityitemid === "string")
                    message.communityitemid = parseInt(object.communityitemid, 10);
                else if (typeof object.communityitemid === "number")
                    message.communityitemid = object.communityitemid;
                else if (typeof object.communityitemid === "object")
                    message.communityitemid = new $util.LongBits(object.communityitemid.low >>> 0, object.communityitemid.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_SetProfileBackground_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_SetProfileBackground_Request
         * @static
         * @param {CPlayer_SetProfileBackground_Request} message CPlayer_SetProfileBackground_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_SetProfileBackground_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.communityitemid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.communityitemid = options.longs === String ? "0" : 0;
            if (message.communityitemid != null && message.hasOwnProperty("communityitemid"))
                if (typeof message.communityitemid === "number")
                    object.communityitemid = options.longs === String ? String(message.communityitemid) : message.communityitemid;
                else
                    object.communityitemid = options.longs === String ? $util.Long.prototype.toString.call(message.communityitemid) : options.longs === Number ? new $util.LongBits(message.communityitemid.low >>> 0, message.communityitemid.high >>> 0).toNumber(true) : message.communityitemid;
            return object;
        };
    
        /**
         * Converts this CPlayer_SetProfileBackground_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_SetProfileBackground_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_SetProfileBackground_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_SetProfileBackground_Request;
    })();
    
    $root.CPlayer_SetProfileBackground_Response = (function() {
    
        /**
         * Properties of a CPlayer_SetProfileBackground_Response.
         * @exports ICPlayer_SetProfileBackground_Response
         * @interface ICPlayer_SetProfileBackground_Response
         */
    
        /**
         * Constructs a new CPlayer_SetProfileBackground_Response.
         * @exports CPlayer_SetProfileBackground_Response
         * @classdesc Represents a CPlayer_SetProfileBackground_Response.
         * @implements ICPlayer_SetProfileBackground_Response
         * @constructor
         * @param {ICPlayer_SetProfileBackground_Response=} [properties] Properties to set
         */
        function CPlayer_SetProfileBackground_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CPlayer_SetProfileBackground_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_SetProfileBackground_Response
         * @static
         * @param {ICPlayer_SetProfileBackground_Response=} [properties] Properties to set
         * @returns {CPlayer_SetProfileBackground_Response} CPlayer_SetProfileBackground_Response instance
         */
        CPlayer_SetProfileBackground_Response.create = function create(properties) {
            return new CPlayer_SetProfileBackground_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_SetProfileBackground_Response message. Does not implicitly {@link CPlayer_SetProfileBackground_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_SetProfileBackground_Response
         * @static
         * @param {ICPlayer_SetProfileBackground_Response} message CPlayer_SetProfileBackground_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetProfileBackground_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_SetProfileBackground_Response message, length delimited. Does not implicitly {@link CPlayer_SetProfileBackground_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_SetProfileBackground_Response
         * @static
         * @param {ICPlayer_SetProfileBackground_Response} message CPlayer_SetProfileBackground_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetProfileBackground_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_SetProfileBackground_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_SetProfileBackground_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_SetProfileBackground_Response} CPlayer_SetProfileBackground_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetProfileBackground_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_SetProfileBackground_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_SetProfileBackground_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_SetProfileBackground_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_SetProfileBackground_Response} CPlayer_SetProfileBackground_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetProfileBackground_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_SetProfileBackground_Response message.
         * @function verify
         * @memberof CPlayer_SetProfileBackground_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_SetProfileBackground_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_SetProfileBackground_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_SetProfileBackground_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_SetProfileBackground_Response} CPlayer_SetProfileBackground_Response
         */
        CPlayer_SetProfileBackground_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_SetProfileBackground_Response)
                return object;
            return new $root.CPlayer_SetProfileBackground_Response();
        };
    
        /**
         * Creates a plain object from a CPlayer_SetProfileBackground_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_SetProfileBackground_Response
         * @static
         * @param {CPlayer_SetProfileBackground_Response} message CPlayer_SetProfileBackground_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_SetProfileBackground_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CPlayer_SetProfileBackground_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_SetProfileBackground_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_SetProfileBackground_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_SetProfileBackground_Response;
    })();
    
    $root.CPlayer_GetMiniProfileBackground_Request = (function() {
    
        /**
         * Properties of a CPlayer_GetMiniProfileBackground_Request.
         * @exports ICPlayer_GetMiniProfileBackground_Request
         * @interface ICPlayer_GetMiniProfileBackground_Request
         * @property {number|Long|null} [steamid] CPlayer_GetMiniProfileBackground_Request steamid
         * @property {string|null} [language] CPlayer_GetMiniProfileBackground_Request language
         */
    
        /**
         * Constructs a new CPlayer_GetMiniProfileBackground_Request.
         * @exports CPlayer_GetMiniProfileBackground_Request
         * @classdesc Represents a CPlayer_GetMiniProfileBackground_Request.
         * @implements ICPlayer_GetMiniProfileBackground_Request
         * @constructor
         * @param {ICPlayer_GetMiniProfileBackground_Request=} [properties] Properties to set
         */
        function CPlayer_GetMiniProfileBackground_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetMiniProfileBackground_Request steamid.
         * @member {number|Long} steamid
         * @memberof CPlayer_GetMiniProfileBackground_Request
         * @instance
         */
        CPlayer_GetMiniProfileBackground_Request.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CPlayer_GetMiniProfileBackground_Request language.
         * @member {string} language
         * @memberof CPlayer_GetMiniProfileBackground_Request
         * @instance
         */
        CPlayer_GetMiniProfileBackground_Request.prototype.language = "";
    
        /**
         * Creates a new CPlayer_GetMiniProfileBackground_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetMiniProfileBackground_Request
         * @static
         * @param {ICPlayer_GetMiniProfileBackground_Request=} [properties] Properties to set
         * @returns {CPlayer_GetMiniProfileBackground_Request} CPlayer_GetMiniProfileBackground_Request instance
         */
        CPlayer_GetMiniProfileBackground_Request.create = function create(properties) {
            return new CPlayer_GetMiniProfileBackground_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetMiniProfileBackground_Request message. Does not implicitly {@link CPlayer_GetMiniProfileBackground_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetMiniProfileBackground_Request
         * @static
         * @param {ICPlayer_GetMiniProfileBackground_Request} message CPlayer_GetMiniProfileBackground_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetMiniProfileBackground_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid != null && Object.hasOwnProperty.call(message, "steamid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
            if (message.language != null && Object.hasOwnProperty.call(message, "language"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.language);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetMiniProfileBackground_Request message, length delimited. Does not implicitly {@link CPlayer_GetMiniProfileBackground_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetMiniProfileBackground_Request
         * @static
         * @param {ICPlayer_GetMiniProfileBackground_Request} message CPlayer_GetMiniProfileBackground_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetMiniProfileBackground_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetMiniProfileBackground_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetMiniProfileBackground_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetMiniProfileBackground_Request} CPlayer_GetMiniProfileBackground_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetMiniProfileBackground_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetMiniProfileBackground_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid = reader.fixed64();
                    break;
                case 2:
                    message.language = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetMiniProfileBackground_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetMiniProfileBackground_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetMiniProfileBackground_Request} CPlayer_GetMiniProfileBackground_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetMiniProfileBackground_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetMiniProfileBackground_Request message.
         * @function verify
         * @memberof CPlayer_GetMiniProfileBackground_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetMiniProfileBackground_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            if (message.language != null && message.hasOwnProperty("language"))
                if (!$util.isString(message.language))
                    return "language: string expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_GetMiniProfileBackground_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetMiniProfileBackground_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetMiniProfileBackground_Request} CPlayer_GetMiniProfileBackground_Request
         */
        CPlayer_GetMiniProfileBackground_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetMiniProfileBackground_Request)
                return object;
            var message = new $root.CPlayer_GetMiniProfileBackground_Request();
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
            if (object.language != null)
                message.language = String(object.language);
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetMiniProfileBackground_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetMiniProfileBackground_Request
         * @static
         * @param {CPlayer_GetMiniProfileBackground_Request} message CPlayer_GetMiniProfileBackground_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetMiniProfileBackground_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
                object.language = "";
            }
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
            if (message.language != null && message.hasOwnProperty("language"))
                object.language = message.language;
            return object;
        };
    
        /**
         * Converts this CPlayer_GetMiniProfileBackground_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_GetMiniProfileBackground_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetMiniProfileBackground_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetMiniProfileBackground_Request;
    })();
    
    $root.CPlayer_GetMiniProfileBackground_Response = (function() {
    
        /**
         * Properties of a CPlayer_GetMiniProfileBackground_Response.
         * @exports ICPlayer_GetMiniProfileBackground_Response
         * @interface ICPlayer_GetMiniProfileBackground_Response
         * @property {IProfileItem|null} [profile_background] CPlayer_GetMiniProfileBackground_Response profile_background
         */
    
        /**
         * Constructs a new CPlayer_GetMiniProfileBackground_Response.
         * @exports CPlayer_GetMiniProfileBackground_Response
         * @classdesc Represents a CPlayer_GetMiniProfileBackground_Response.
         * @implements ICPlayer_GetMiniProfileBackground_Response
         * @constructor
         * @param {ICPlayer_GetMiniProfileBackground_Response=} [properties] Properties to set
         */
        function CPlayer_GetMiniProfileBackground_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetMiniProfileBackground_Response profile_background.
         * @member {IProfileItem|null|undefined} profile_background
         * @memberof CPlayer_GetMiniProfileBackground_Response
         * @instance
         */
        CPlayer_GetMiniProfileBackground_Response.prototype.profile_background = null;
    
        /**
         * Creates a new CPlayer_GetMiniProfileBackground_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetMiniProfileBackground_Response
         * @static
         * @param {ICPlayer_GetMiniProfileBackground_Response=} [properties] Properties to set
         * @returns {CPlayer_GetMiniProfileBackground_Response} CPlayer_GetMiniProfileBackground_Response instance
         */
        CPlayer_GetMiniProfileBackground_Response.create = function create(properties) {
            return new CPlayer_GetMiniProfileBackground_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetMiniProfileBackground_Response message. Does not implicitly {@link CPlayer_GetMiniProfileBackground_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetMiniProfileBackground_Response
         * @static
         * @param {ICPlayer_GetMiniProfileBackground_Response} message CPlayer_GetMiniProfileBackground_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetMiniProfileBackground_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.profile_background != null && Object.hasOwnProperty.call(message, "profile_background"))
                $root.ProfileItem.encode(message.profile_background, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetMiniProfileBackground_Response message, length delimited. Does not implicitly {@link CPlayer_GetMiniProfileBackground_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetMiniProfileBackground_Response
         * @static
         * @param {ICPlayer_GetMiniProfileBackground_Response} message CPlayer_GetMiniProfileBackground_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetMiniProfileBackground_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetMiniProfileBackground_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetMiniProfileBackground_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetMiniProfileBackground_Response} CPlayer_GetMiniProfileBackground_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetMiniProfileBackground_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetMiniProfileBackground_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.profile_background = $root.ProfileItem.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetMiniProfileBackground_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetMiniProfileBackground_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetMiniProfileBackground_Response} CPlayer_GetMiniProfileBackground_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetMiniProfileBackground_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetMiniProfileBackground_Response message.
         * @function verify
         * @memberof CPlayer_GetMiniProfileBackground_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetMiniProfileBackground_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.profile_background != null && message.hasOwnProperty("profile_background")) {
                var error = $root.ProfileItem.verify(message.profile_background);
                if (error)
                    return "profile_background." + error;
            }
            return null;
        };
    
        /**
         * Creates a CPlayer_GetMiniProfileBackground_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetMiniProfileBackground_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetMiniProfileBackground_Response} CPlayer_GetMiniProfileBackground_Response
         */
        CPlayer_GetMiniProfileBackground_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetMiniProfileBackground_Response)
                return object;
            var message = new $root.CPlayer_GetMiniProfileBackground_Response();
            if (object.profile_background != null) {
                if (typeof object.profile_background !== "object")
                    throw TypeError(".CPlayer_GetMiniProfileBackground_Response.profile_background: object expected");
                message.profile_background = $root.ProfileItem.fromObject(object.profile_background);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetMiniProfileBackground_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetMiniProfileBackground_Response
         * @static
         * @param {CPlayer_GetMiniProfileBackground_Response} message CPlayer_GetMiniProfileBackground_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetMiniProfileBackground_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.profile_background = null;
            if (message.profile_background != null && message.hasOwnProperty("profile_background"))
                object.profile_background = $root.ProfileItem.toObject(message.profile_background, options);
            return object;
        };
    
        /**
         * Converts this CPlayer_GetMiniProfileBackground_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_GetMiniProfileBackground_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetMiniProfileBackground_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetMiniProfileBackground_Response;
    })();
    
    $root.CPlayer_SetMiniProfileBackground_Request = (function() {
    
        /**
         * Properties of a CPlayer_SetMiniProfileBackground_Request.
         * @exports ICPlayer_SetMiniProfileBackground_Request
         * @interface ICPlayer_SetMiniProfileBackground_Request
         * @property {number|Long|null} [communityitemid] CPlayer_SetMiniProfileBackground_Request communityitemid
         */
    
        /**
         * Constructs a new CPlayer_SetMiniProfileBackground_Request.
         * @exports CPlayer_SetMiniProfileBackground_Request
         * @classdesc Represents a CPlayer_SetMiniProfileBackground_Request.
         * @implements ICPlayer_SetMiniProfileBackground_Request
         * @constructor
         * @param {ICPlayer_SetMiniProfileBackground_Request=} [properties] Properties to set
         */
        function CPlayer_SetMiniProfileBackground_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_SetMiniProfileBackground_Request communityitemid.
         * @member {number|Long} communityitemid
         * @memberof CPlayer_SetMiniProfileBackground_Request
         * @instance
         */
        CPlayer_SetMiniProfileBackground_Request.prototype.communityitemid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CPlayer_SetMiniProfileBackground_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_SetMiniProfileBackground_Request
         * @static
         * @param {ICPlayer_SetMiniProfileBackground_Request=} [properties] Properties to set
         * @returns {CPlayer_SetMiniProfileBackground_Request} CPlayer_SetMiniProfileBackground_Request instance
         */
        CPlayer_SetMiniProfileBackground_Request.create = function create(properties) {
            return new CPlayer_SetMiniProfileBackground_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_SetMiniProfileBackground_Request message. Does not implicitly {@link CPlayer_SetMiniProfileBackground_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_SetMiniProfileBackground_Request
         * @static
         * @param {ICPlayer_SetMiniProfileBackground_Request} message CPlayer_SetMiniProfileBackground_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetMiniProfileBackground_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.communityitemid != null && Object.hasOwnProperty.call(message, "communityitemid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.communityitemid);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_SetMiniProfileBackground_Request message, length delimited. Does not implicitly {@link CPlayer_SetMiniProfileBackground_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_SetMiniProfileBackground_Request
         * @static
         * @param {ICPlayer_SetMiniProfileBackground_Request} message CPlayer_SetMiniProfileBackground_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetMiniProfileBackground_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_SetMiniProfileBackground_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_SetMiniProfileBackground_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_SetMiniProfileBackground_Request} CPlayer_SetMiniProfileBackground_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetMiniProfileBackground_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_SetMiniProfileBackground_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.communityitemid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_SetMiniProfileBackground_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_SetMiniProfileBackground_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_SetMiniProfileBackground_Request} CPlayer_SetMiniProfileBackground_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetMiniProfileBackground_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_SetMiniProfileBackground_Request message.
         * @function verify
         * @memberof CPlayer_SetMiniProfileBackground_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_SetMiniProfileBackground_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.communityitemid != null && message.hasOwnProperty("communityitemid"))
                if (!$util.isInteger(message.communityitemid) && !(message.communityitemid && $util.isInteger(message.communityitemid.low) && $util.isInteger(message.communityitemid.high)))
                    return "communityitemid: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_SetMiniProfileBackground_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_SetMiniProfileBackground_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_SetMiniProfileBackground_Request} CPlayer_SetMiniProfileBackground_Request
         */
        CPlayer_SetMiniProfileBackground_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_SetMiniProfileBackground_Request)
                return object;
            var message = new $root.CPlayer_SetMiniProfileBackground_Request();
            if (object.communityitemid != null)
                if ($util.Long)
                    (message.communityitemid = $util.Long.fromValue(object.communityitemid)).unsigned = true;
                else if (typeof object.communityitemid === "string")
                    message.communityitemid = parseInt(object.communityitemid, 10);
                else if (typeof object.communityitemid === "number")
                    message.communityitemid = object.communityitemid;
                else if (typeof object.communityitemid === "object")
                    message.communityitemid = new $util.LongBits(object.communityitemid.low >>> 0, object.communityitemid.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_SetMiniProfileBackground_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_SetMiniProfileBackground_Request
         * @static
         * @param {CPlayer_SetMiniProfileBackground_Request} message CPlayer_SetMiniProfileBackground_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_SetMiniProfileBackground_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.communityitemid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.communityitemid = options.longs === String ? "0" : 0;
            if (message.communityitemid != null && message.hasOwnProperty("communityitemid"))
                if (typeof message.communityitemid === "number")
                    object.communityitemid = options.longs === String ? String(message.communityitemid) : message.communityitemid;
                else
                    object.communityitemid = options.longs === String ? $util.Long.prototype.toString.call(message.communityitemid) : options.longs === Number ? new $util.LongBits(message.communityitemid.low >>> 0, message.communityitemid.high >>> 0).toNumber(true) : message.communityitemid;
            return object;
        };
    
        /**
         * Converts this CPlayer_SetMiniProfileBackground_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_SetMiniProfileBackground_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_SetMiniProfileBackground_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_SetMiniProfileBackground_Request;
    })();
    
    $root.CPlayer_SetMiniProfileBackground_Response = (function() {
    
        /**
         * Properties of a CPlayer_SetMiniProfileBackground_Response.
         * @exports ICPlayer_SetMiniProfileBackground_Response
         * @interface ICPlayer_SetMiniProfileBackground_Response
         */
    
        /**
         * Constructs a new CPlayer_SetMiniProfileBackground_Response.
         * @exports CPlayer_SetMiniProfileBackground_Response
         * @classdesc Represents a CPlayer_SetMiniProfileBackground_Response.
         * @implements ICPlayer_SetMiniProfileBackground_Response
         * @constructor
         * @param {ICPlayer_SetMiniProfileBackground_Response=} [properties] Properties to set
         */
        function CPlayer_SetMiniProfileBackground_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CPlayer_SetMiniProfileBackground_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_SetMiniProfileBackground_Response
         * @static
         * @param {ICPlayer_SetMiniProfileBackground_Response=} [properties] Properties to set
         * @returns {CPlayer_SetMiniProfileBackground_Response} CPlayer_SetMiniProfileBackground_Response instance
         */
        CPlayer_SetMiniProfileBackground_Response.create = function create(properties) {
            return new CPlayer_SetMiniProfileBackground_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_SetMiniProfileBackground_Response message. Does not implicitly {@link CPlayer_SetMiniProfileBackground_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_SetMiniProfileBackground_Response
         * @static
         * @param {ICPlayer_SetMiniProfileBackground_Response} message CPlayer_SetMiniProfileBackground_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetMiniProfileBackground_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_SetMiniProfileBackground_Response message, length delimited. Does not implicitly {@link CPlayer_SetMiniProfileBackground_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_SetMiniProfileBackground_Response
         * @static
         * @param {ICPlayer_SetMiniProfileBackground_Response} message CPlayer_SetMiniProfileBackground_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetMiniProfileBackground_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_SetMiniProfileBackground_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_SetMiniProfileBackground_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_SetMiniProfileBackground_Response} CPlayer_SetMiniProfileBackground_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetMiniProfileBackground_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_SetMiniProfileBackground_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_SetMiniProfileBackground_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_SetMiniProfileBackground_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_SetMiniProfileBackground_Response} CPlayer_SetMiniProfileBackground_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetMiniProfileBackground_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_SetMiniProfileBackground_Response message.
         * @function verify
         * @memberof CPlayer_SetMiniProfileBackground_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_SetMiniProfileBackground_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_SetMiniProfileBackground_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_SetMiniProfileBackground_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_SetMiniProfileBackground_Response} CPlayer_SetMiniProfileBackground_Response
         */
        CPlayer_SetMiniProfileBackground_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_SetMiniProfileBackground_Response)
                return object;
            return new $root.CPlayer_SetMiniProfileBackground_Response();
        };
    
        /**
         * Creates a plain object from a CPlayer_SetMiniProfileBackground_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_SetMiniProfileBackground_Response
         * @static
         * @param {CPlayer_SetMiniProfileBackground_Response} message CPlayer_SetMiniProfileBackground_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_SetMiniProfileBackground_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CPlayer_SetMiniProfileBackground_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_SetMiniProfileBackground_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_SetMiniProfileBackground_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_SetMiniProfileBackground_Response;
    })();
    
    $root.CPlayer_GetAvatarFrame_Request = (function() {
    
        /**
         * Properties of a CPlayer_GetAvatarFrame_Request.
         * @exports ICPlayer_GetAvatarFrame_Request
         * @interface ICPlayer_GetAvatarFrame_Request
         * @property {number|Long|null} [steamid] CPlayer_GetAvatarFrame_Request steamid
         * @property {string|null} [language] CPlayer_GetAvatarFrame_Request language
         */
    
        /**
         * Constructs a new CPlayer_GetAvatarFrame_Request.
         * @exports CPlayer_GetAvatarFrame_Request
         * @classdesc Represents a CPlayer_GetAvatarFrame_Request.
         * @implements ICPlayer_GetAvatarFrame_Request
         * @constructor
         * @param {ICPlayer_GetAvatarFrame_Request=} [properties] Properties to set
         */
        function CPlayer_GetAvatarFrame_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetAvatarFrame_Request steamid.
         * @member {number|Long} steamid
         * @memberof CPlayer_GetAvatarFrame_Request
         * @instance
         */
        CPlayer_GetAvatarFrame_Request.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CPlayer_GetAvatarFrame_Request language.
         * @member {string} language
         * @memberof CPlayer_GetAvatarFrame_Request
         * @instance
         */
        CPlayer_GetAvatarFrame_Request.prototype.language = "";
    
        /**
         * Creates a new CPlayer_GetAvatarFrame_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetAvatarFrame_Request
         * @static
         * @param {ICPlayer_GetAvatarFrame_Request=} [properties] Properties to set
         * @returns {CPlayer_GetAvatarFrame_Request} CPlayer_GetAvatarFrame_Request instance
         */
        CPlayer_GetAvatarFrame_Request.create = function create(properties) {
            return new CPlayer_GetAvatarFrame_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetAvatarFrame_Request message. Does not implicitly {@link CPlayer_GetAvatarFrame_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetAvatarFrame_Request
         * @static
         * @param {ICPlayer_GetAvatarFrame_Request} message CPlayer_GetAvatarFrame_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetAvatarFrame_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid != null && Object.hasOwnProperty.call(message, "steamid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
            if (message.language != null && Object.hasOwnProperty.call(message, "language"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.language);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetAvatarFrame_Request message, length delimited. Does not implicitly {@link CPlayer_GetAvatarFrame_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetAvatarFrame_Request
         * @static
         * @param {ICPlayer_GetAvatarFrame_Request} message CPlayer_GetAvatarFrame_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetAvatarFrame_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetAvatarFrame_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetAvatarFrame_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetAvatarFrame_Request} CPlayer_GetAvatarFrame_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetAvatarFrame_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetAvatarFrame_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid = reader.fixed64();
                    break;
                case 2:
                    message.language = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetAvatarFrame_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetAvatarFrame_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetAvatarFrame_Request} CPlayer_GetAvatarFrame_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetAvatarFrame_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetAvatarFrame_Request message.
         * @function verify
         * @memberof CPlayer_GetAvatarFrame_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetAvatarFrame_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            if (message.language != null && message.hasOwnProperty("language"))
                if (!$util.isString(message.language))
                    return "language: string expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_GetAvatarFrame_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetAvatarFrame_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetAvatarFrame_Request} CPlayer_GetAvatarFrame_Request
         */
        CPlayer_GetAvatarFrame_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetAvatarFrame_Request)
                return object;
            var message = new $root.CPlayer_GetAvatarFrame_Request();
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
            if (object.language != null)
                message.language = String(object.language);
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetAvatarFrame_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetAvatarFrame_Request
         * @static
         * @param {CPlayer_GetAvatarFrame_Request} message CPlayer_GetAvatarFrame_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetAvatarFrame_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
                object.language = "";
            }
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
            if (message.language != null && message.hasOwnProperty("language"))
                object.language = message.language;
            return object;
        };
    
        /**
         * Converts this CPlayer_GetAvatarFrame_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_GetAvatarFrame_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetAvatarFrame_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetAvatarFrame_Request;
    })();
    
    $root.CPlayer_GetAvatarFrame_Response = (function() {
    
        /**
         * Properties of a CPlayer_GetAvatarFrame_Response.
         * @exports ICPlayer_GetAvatarFrame_Response
         * @interface ICPlayer_GetAvatarFrame_Response
         * @property {IProfileItem|null} [avatar_frame] CPlayer_GetAvatarFrame_Response avatar_frame
         */
    
        /**
         * Constructs a new CPlayer_GetAvatarFrame_Response.
         * @exports CPlayer_GetAvatarFrame_Response
         * @classdesc Represents a CPlayer_GetAvatarFrame_Response.
         * @implements ICPlayer_GetAvatarFrame_Response
         * @constructor
         * @param {ICPlayer_GetAvatarFrame_Response=} [properties] Properties to set
         */
        function CPlayer_GetAvatarFrame_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetAvatarFrame_Response avatar_frame.
         * @member {IProfileItem|null|undefined} avatar_frame
         * @memberof CPlayer_GetAvatarFrame_Response
         * @instance
         */
        CPlayer_GetAvatarFrame_Response.prototype.avatar_frame = null;
    
        /**
         * Creates a new CPlayer_GetAvatarFrame_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetAvatarFrame_Response
         * @static
         * @param {ICPlayer_GetAvatarFrame_Response=} [properties] Properties to set
         * @returns {CPlayer_GetAvatarFrame_Response} CPlayer_GetAvatarFrame_Response instance
         */
        CPlayer_GetAvatarFrame_Response.create = function create(properties) {
            return new CPlayer_GetAvatarFrame_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetAvatarFrame_Response message. Does not implicitly {@link CPlayer_GetAvatarFrame_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetAvatarFrame_Response
         * @static
         * @param {ICPlayer_GetAvatarFrame_Response} message CPlayer_GetAvatarFrame_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetAvatarFrame_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.avatar_frame != null && Object.hasOwnProperty.call(message, "avatar_frame"))
                $root.ProfileItem.encode(message.avatar_frame, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetAvatarFrame_Response message, length delimited. Does not implicitly {@link CPlayer_GetAvatarFrame_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetAvatarFrame_Response
         * @static
         * @param {ICPlayer_GetAvatarFrame_Response} message CPlayer_GetAvatarFrame_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetAvatarFrame_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetAvatarFrame_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetAvatarFrame_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetAvatarFrame_Response} CPlayer_GetAvatarFrame_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetAvatarFrame_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetAvatarFrame_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.avatar_frame = $root.ProfileItem.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetAvatarFrame_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetAvatarFrame_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetAvatarFrame_Response} CPlayer_GetAvatarFrame_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetAvatarFrame_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetAvatarFrame_Response message.
         * @function verify
         * @memberof CPlayer_GetAvatarFrame_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetAvatarFrame_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.avatar_frame != null && message.hasOwnProperty("avatar_frame")) {
                var error = $root.ProfileItem.verify(message.avatar_frame);
                if (error)
                    return "avatar_frame." + error;
            }
            return null;
        };
    
        /**
         * Creates a CPlayer_GetAvatarFrame_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetAvatarFrame_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetAvatarFrame_Response} CPlayer_GetAvatarFrame_Response
         */
        CPlayer_GetAvatarFrame_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetAvatarFrame_Response)
                return object;
            var message = new $root.CPlayer_GetAvatarFrame_Response();
            if (object.avatar_frame != null) {
                if (typeof object.avatar_frame !== "object")
                    throw TypeError(".CPlayer_GetAvatarFrame_Response.avatar_frame: object expected");
                message.avatar_frame = $root.ProfileItem.fromObject(object.avatar_frame);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetAvatarFrame_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetAvatarFrame_Response
         * @static
         * @param {CPlayer_GetAvatarFrame_Response} message CPlayer_GetAvatarFrame_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetAvatarFrame_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.avatar_frame = null;
            if (message.avatar_frame != null && message.hasOwnProperty("avatar_frame"))
                object.avatar_frame = $root.ProfileItem.toObject(message.avatar_frame, options);
            return object;
        };
    
        /**
         * Converts this CPlayer_GetAvatarFrame_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_GetAvatarFrame_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetAvatarFrame_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetAvatarFrame_Response;
    })();
    
    $root.CPlayer_SetAvatarFrame_Request = (function() {
    
        /**
         * Properties of a CPlayer_SetAvatarFrame_Request.
         * @exports ICPlayer_SetAvatarFrame_Request
         * @interface ICPlayer_SetAvatarFrame_Request
         * @property {number|Long|null} [communityitemid] CPlayer_SetAvatarFrame_Request communityitemid
         */
    
        /**
         * Constructs a new CPlayer_SetAvatarFrame_Request.
         * @exports CPlayer_SetAvatarFrame_Request
         * @classdesc Represents a CPlayer_SetAvatarFrame_Request.
         * @implements ICPlayer_SetAvatarFrame_Request
         * @constructor
         * @param {ICPlayer_SetAvatarFrame_Request=} [properties] Properties to set
         */
        function CPlayer_SetAvatarFrame_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_SetAvatarFrame_Request communityitemid.
         * @member {number|Long} communityitemid
         * @memberof CPlayer_SetAvatarFrame_Request
         * @instance
         */
        CPlayer_SetAvatarFrame_Request.prototype.communityitemid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CPlayer_SetAvatarFrame_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_SetAvatarFrame_Request
         * @static
         * @param {ICPlayer_SetAvatarFrame_Request=} [properties] Properties to set
         * @returns {CPlayer_SetAvatarFrame_Request} CPlayer_SetAvatarFrame_Request instance
         */
        CPlayer_SetAvatarFrame_Request.create = function create(properties) {
            return new CPlayer_SetAvatarFrame_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_SetAvatarFrame_Request message. Does not implicitly {@link CPlayer_SetAvatarFrame_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_SetAvatarFrame_Request
         * @static
         * @param {ICPlayer_SetAvatarFrame_Request} message CPlayer_SetAvatarFrame_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetAvatarFrame_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.communityitemid != null && Object.hasOwnProperty.call(message, "communityitemid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.communityitemid);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_SetAvatarFrame_Request message, length delimited. Does not implicitly {@link CPlayer_SetAvatarFrame_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_SetAvatarFrame_Request
         * @static
         * @param {ICPlayer_SetAvatarFrame_Request} message CPlayer_SetAvatarFrame_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetAvatarFrame_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_SetAvatarFrame_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_SetAvatarFrame_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_SetAvatarFrame_Request} CPlayer_SetAvatarFrame_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetAvatarFrame_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_SetAvatarFrame_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.communityitemid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_SetAvatarFrame_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_SetAvatarFrame_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_SetAvatarFrame_Request} CPlayer_SetAvatarFrame_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetAvatarFrame_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_SetAvatarFrame_Request message.
         * @function verify
         * @memberof CPlayer_SetAvatarFrame_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_SetAvatarFrame_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.communityitemid != null && message.hasOwnProperty("communityitemid"))
                if (!$util.isInteger(message.communityitemid) && !(message.communityitemid && $util.isInteger(message.communityitemid.low) && $util.isInteger(message.communityitemid.high)))
                    return "communityitemid: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_SetAvatarFrame_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_SetAvatarFrame_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_SetAvatarFrame_Request} CPlayer_SetAvatarFrame_Request
         */
        CPlayer_SetAvatarFrame_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_SetAvatarFrame_Request)
                return object;
            var message = new $root.CPlayer_SetAvatarFrame_Request();
            if (object.communityitemid != null)
                if ($util.Long)
                    (message.communityitemid = $util.Long.fromValue(object.communityitemid)).unsigned = true;
                else if (typeof object.communityitemid === "string")
                    message.communityitemid = parseInt(object.communityitemid, 10);
                else if (typeof object.communityitemid === "number")
                    message.communityitemid = object.communityitemid;
                else if (typeof object.communityitemid === "object")
                    message.communityitemid = new $util.LongBits(object.communityitemid.low >>> 0, object.communityitemid.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_SetAvatarFrame_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_SetAvatarFrame_Request
         * @static
         * @param {CPlayer_SetAvatarFrame_Request} message CPlayer_SetAvatarFrame_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_SetAvatarFrame_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.communityitemid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.communityitemid = options.longs === String ? "0" : 0;
            if (message.communityitemid != null && message.hasOwnProperty("communityitemid"))
                if (typeof message.communityitemid === "number")
                    object.communityitemid = options.longs === String ? String(message.communityitemid) : message.communityitemid;
                else
                    object.communityitemid = options.longs === String ? $util.Long.prototype.toString.call(message.communityitemid) : options.longs === Number ? new $util.LongBits(message.communityitemid.low >>> 0, message.communityitemid.high >>> 0).toNumber(true) : message.communityitemid;
            return object;
        };
    
        /**
         * Converts this CPlayer_SetAvatarFrame_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_SetAvatarFrame_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_SetAvatarFrame_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_SetAvatarFrame_Request;
    })();
    
    $root.CPlayer_SetAvatarFrame_Response = (function() {
    
        /**
         * Properties of a CPlayer_SetAvatarFrame_Response.
         * @exports ICPlayer_SetAvatarFrame_Response
         * @interface ICPlayer_SetAvatarFrame_Response
         */
    
        /**
         * Constructs a new CPlayer_SetAvatarFrame_Response.
         * @exports CPlayer_SetAvatarFrame_Response
         * @classdesc Represents a CPlayer_SetAvatarFrame_Response.
         * @implements ICPlayer_SetAvatarFrame_Response
         * @constructor
         * @param {ICPlayer_SetAvatarFrame_Response=} [properties] Properties to set
         */
        function CPlayer_SetAvatarFrame_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CPlayer_SetAvatarFrame_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_SetAvatarFrame_Response
         * @static
         * @param {ICPlayer_SetAvatarFrame_Response=} [properties] Properties to set
         * @returns {CPlayer_SetAvatarFrame_Response} CPlayer_SetAvatarFrame_Response instance
         */
        CPlayer_SetAvatarFrame_Response.create = function create(properties) {
            return new CPlayer_SetAvatarFrame_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_SetAvatarFrame_Response message. Does not implicitly {@link CPlayer_SetAvatarFrame_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_SetAvatarFrame_Response
         * @static
         * @param {ICPlayer_SetAvatarFrame_Response} message CPlayer_SetAvatarFrame_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetAvatarFrame_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_SetAvatarFrame_Response message, length delimited. Does not implicitly {@link CPlayer_SetAvatarFrame_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_SetAvatarFrame_Response
         * @static
         * @param {ICPlayer_SetAvatarFrame_Response} message CPlayer_SetAvatarFrame_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetAvatarFrame_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_SetAvatarFrame_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_SetAvatarFrame_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_SetAvatarFrame_Response} CPlayer_SetAvatarFrame_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetAvatarFrame_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_SetAvatarFrame_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_SetAvatarFrame_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_SetAvatarFrame_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_SetAvatarFrame_Response} CPlayer_SetAvatarFrame_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetAvatarFrame_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_SetAvatarFrame_Response message.
         * @function verify
         * @memberof CPlayer_SetAvatarFrame_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_SetAvatarFrame_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_SetAvatarFrame_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_SetAvatarFrame_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_SetAvatarFrame_Response} CPlayer_SetAvatarFrame_Response
         */
        CPlayer_SetAvatarFrame_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_SetAvatarFrame_Response)
                return object;
            return new $root.CPlayer_SetAvatarFrame_Response();
        };
    
        /**
         * Creates a plain object from a CPlayer_SetAvatarFrame_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_SetAvatarFrame_Response
         * @static
         * @param {CPlayer_SetAvatarFrame_Response} message CPlayer_SetAvatarFrame_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_SetAvatarFrame_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CPlayer_SetAvatarFrame_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_SetAvatarFrame_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_SetAvatarFrame_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_SetAvatarFrame_Response;
    })();
    
    $root.CPlayer_GetAnimatedAvatar_Request = (function() {
    
        /**
         * Properties of a CPlayer_GetAnimatedAvatar_Request.
         * @exports ICPlayer_GetAnimatedAvatar_Request
         * @interface ICPlayer_GetAnimatedAvatar_Request
         * @property {number|Long|null} [steamid] CPlayer_GetAnimatedAvatar_Request steamid
         * @property {string|null} [language] CPlayer_GetAnimatedAvatar_Request language
         */
    
        /**
         * Constructs a new CPlayer_GetAnimatedAvatar_Request.
         * @exports CPlayer_GetAnimatedAvatar_Request
         * @classdesc Represents a CPlayer_GetAnimatedAvatar_Request.
         * @implements ICPlayer_GetAnimatedAvatar_Request
         * @constructor
         * @param {ICPlayer_GetAnimatedAvatar_Request=} [properties] Properties to set
         */
        function CPlayer_GetAnimatedAvatar_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetAnimatedAvatar_Request steamid.
         * @member {number|Long} steamid
         * @memberof CPlayer_GetAnimatedAvatar_Request
         * @instance
         */
        CPlayer_GetAnimatedAvatar_Request.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CPlayer_GetAnimatedAvatar_Request language.
         * @member {string} language
         * @memberof CPlayer_GetAnimatedAvatar_Request
         * @instance
         */
        CPlayer_GetAnimatedAvatar_Request.prototype.language = "";
    
        /**
         * Creates a new CPlayer_GetAnimatedAvatar_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetAnimatedAvatar_Request
         * @static
         * @param {ICPlayer_GetAnimatedAvatar_Request=} [properties] Properties to set
         * @returns {CPlayer_GetAnimatedAvatar_Request} CPlayer_GetAnimatedAvatar_Request instance
         */
        CPlayer_GetAnimatedAvatar_Request.create = function create(properties) {
            return new CPlayer_GetAnimatedAvatar_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetAnimatedAvatar_Request message. Does not implicitly {@link CPlayer_GetAnimatedAvatar_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetAnimatedAvatar_Request
         * @static
         * @param {ICPlayer_GetAnimatedAvatar_Request} message CPlayer_GetAnimatedAvatar_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetAnimatedAvatar_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid != null && Object.hasOwnProperty.call(message, "steamid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
            if (message.language != null && Object.hasOwnProperty.call(message, "language"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.language);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetAnimatedAvatar_Request message, length delimited. Does not implicitly {@link CPlayer_GetAnimatedAvatar_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetAnimatedAvatar_Request
         * @static
         * @param {ICPlayer_GetAnimatedAvatar_Request} message CPlayer_GetAnimatedAvatar_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetAnimatedAvatar_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetAnimatedAvatar_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetAnimatedAvatar_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetAnimatedAvatar_Request} CPlayer_GetAnimatedAvatar_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetAnimatedAvatar_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetAnimatedAvatar_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid = reader.fixed64();
                    break;
                case 2:
                    message.language = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetAnimatedAvatar_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetAnimatedAvatar_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetAnimatedAvatar_Request} CPlayer_GetAnimatedAvatar_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetAnimatedAvatar_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetAnimatedAvatar_Request message.
         * @function verify
         * @memberof CPlayer_GetAnimatedAvatar_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetAnimatedAvatar_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            if (message.language != null && message.hasOwnProperty("language"))
                if (!$util.isString(message.language))
                    return "language: string expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_GetAnimatedAvatar_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetAnimatedAvatar_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetAnimatedAvatar_Request} CPlayer_GetAnimatedAvatar_Request
         */
        CPlayer_GetAnimatedAvatar_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetAnimatedAvatar_Request)
                return object;
            var message = new $root.CPlayer_GetAnimatedAvatar_Request();
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
            if (object.language != null)
                message.language = String(object.language);
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetAnimatedAvatar_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetAnimatedAvatar_Request
         * @static
         * @param {CPlayer_GetAnimatedAvatar_Request} message CPlayer_GetAnimatedAvatar_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetAnimatedAvatar_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
                object.language = "";
            }
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
            if (message.language != null && message.hasOwnProperty("language"))
                object.language = message.language;
            return object;
        };
    
        /**
         * Converts this CPlayer_GetAnimatedAvatar_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_GetAnimatedAvatar_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetAnimatedAvatar_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetAnimatedAvatar_Request;
    })();
    
    $root.CPlayer_GetAnimatedAvatar_Response = (function() {
    
        /**
         * Properties of a CPlayer_GetAnimatedAvatar_Response.
         * @exports ICPlayer_GetAnimatedAvatar_Response
         * @interface ICPlayer_GetAnimatedAvatar_Response
         * @property {IProfileItem|null} [avatar] CPlayer_GetAnimatedAvatar_Response avatar
         */
    
        /**
         * Constructs a new CPlayer_GetAnimatedAvatar_Response.
         * @exports CPlayer_GetAnimatedAvatar_Response
         * @classdesc Represents a CPlayer_GetAnimatedAvatar_Response.
         * @implements ICPlayer_GetAnimatedAvatar_Response
         * @constructor
         * @param {ICPlayer_GetAnimatedAvatar_Response=} [properties] Properties to set
         */
        function CPlayer_GetAnimatedAvatar_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetAnimatedAvatar_Response avatar.
         * @member {IProfileItem|null|undefined} avatar
         * @memberof CPlayer_GetAnimatedAvatar_Response
         * @instance
         */
        CPlayer_GetAnimatedAvatar_Response.prototype.avatar = null;
    
        /**
         * Creates a new CPlayer_GetAnimatedAvatar_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetAnimatedAvatar_Response
         * @static
         * @param {ICPlayer_GetAnimatedAvatar_Response=} [properties] Properties to set
         * @returns {CPlayer_GetAnimatedAvatar_Response} CPlayer_GetAnimatedAvatar_Response instance
         */
        CPlayer_GetAnimatedAvatar_Response.create = function create(properties) {
            return new CPlayer_GetAnimatedAvatar_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetAnimatedAvatar_Response message. Does not implicitly {@link CPlayer_GetAnimatedAvatar_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetAnimatedAvatar_Response
         * @static
         * @param {ICPlayer_GetAnimatedAvatar_Response} message CPlayer_GetAnimatedAvatar_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetAnimatedAvatar_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.avatar != null && Object.hasOwnProperty.call(message, "avatar"))
                $root.ProfileItem.encode(message.avatar, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetAnimatedAvatar_Response message, length delimited. Does not implicitly {@link CPlayer_GetAnimatedAvatar_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetAnimatedAvatar_Response
         * @static
         * @param {ICPlayer_GetAnimatedAvatar_Response} message CPlayer_GetAnimatedAvatar_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetAnimatedAvatar_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetAnimatedAvatar_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetAnimatedAvatar_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetAnimatedAvatar_Response} CPlayer_GetAnimatedAvatar_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetAnimatedAvatar_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetAnimatedAvatar_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.avatar = $root.ProfileItem.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetAnimatedAvatar_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetAnimatedAvatar_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetAnimatedAvatar_Response} CPlayer_GetAnimatedAvatar_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetAnimatedAvatar_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetAnimatedAvatar_Response message.
         * @function verify
         * @memberof CPlayer_GetAnimatedAvatar_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetAnimatedAvatar_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.avatar != null && message.hasOwnProperty("avatar")) {
                var error = $root.ProfileItem.verify(message.avatar);
                if (error)
                    return "avatar." + error;
            }
            return null;
        };
    
        /**
         * Creates a CPlayer_GetAnimatedAvatar_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetAnimatedAvatar_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetAnimatedAvatar_Response} CPlayer_GetAnimatedAvatar_Response
         */
        CPlayer_GetAnimatedAvatar_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetAnimatedAvatar_Response)
                return object;
            var message = new $root.CPlayer_GetAnimatedAvatar_Response();
            if (object.avatar != null) {
                if (typeof object.avatar !== "object")
                    throw TypeError(".CPlayer_GetAnimatedAvatar_Response.avatar: object expected");
                message.avatar = $root.ProfileItem.fromObject(object.avatar);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetAnimatedAvatar_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetAnimatedAvatar_Response
         * @static
         * @param {CPlayer_GetAnimatedAvatar_Response} message CPlayer_GetAnimatedAvatar_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetAnimatedAvatar_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.avatar = null;
            if (message.avatar != null && message.hasOwnProperty("avatar"))
                object.avatar = $root.ProfileItem.toObject(message.avatar, options);
            return object;
        };
    
        /**
         * Converts this CPlayer_GetAnimatedAvatar_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_GetAnimatedAvatar_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetAnimatedAvatar_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetAnimatedAvatar_Response;
    })();
    
    $root.CPlayer_SetAnimatedAvatar_Request = (function() {
    
        /**
         * Properties of a CPlayer_SetAnimatedAvatar_Request.
         * @exports ICPlayer_SetAnimatedAvatar_Request
         * @interface ICPlayer_SetAnimatedAvatar_Request
         * @property {number|Long|null} [communityitemid] CPlayer_SetAnimatedAvatar_Request communityitemid
         */
    
        /**
         * Constructs a new CPlayer_SetAnimatedAvatar_Request.
         * @exports CPlayer_SetAnimatedAvatar_Request
         * @classdesc Represents a CPlayer_SetAnimatedAvatar_Request.
         * @implements ICPlayer_SetAnimatedAvatar_Request
         * @constructor
         * @param {ICPlayer_SetAnimatedAvatar_Request=} [properties] Properties to set
         */
        function CPlayer_SetAnimatedAvatar_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_SetAnimatedAvatar_Request communityitemid.
         * @member {number|Long} communityitemid
         * @memberof CPlayer_SetAnimatedAvatar_Request
         * @instance
         */
        CPlayer_SetAnimatedAvatar_Request.prototype.communityitemid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CPlayer_SetAnimatedAvatar_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_SetAnimatedAvatar_Request
         * @static
         * @param {ICPlayer_SetAnimatedAvatar_Request=} [properties] Properties to set
         * @returns {CPlayer_SetAnimatedAvatar_Request} CPlayer_SetAnimatedAvatar_Request instance
         */
        CPlayer_SetAnimatedAvatar_Request.create = function create(properties) {
            return new CPlayer_SetAnimatedAvatar_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_SetAnimatedAvatar_Request message. Does not implicitly {@link CPlayer_SetAnimatedAvatar_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_SetAnimatedAvatar_Request
         * @static
         * @param {ICPlayer_SetAnimatedAvatar_Request} message CPlayer_SetAnimatedAvatar_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetAnimatedAvatar_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.communityitemid != null && Object.hasOwnProperty.call(message, "communityitemid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.communityitemid);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_SetAnimatedAvatar_Request message, length delimited. Does not implicitly {@link CPlayer_SetAnimatedAvatar_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_SetAnimatedAvatar_Request
         * @static
         * @param {ICPlayer_SetAnimatedAvatar_Request} message CPlayer_SetAnimatedAvatar_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetAnimatedAvatar_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_SetAnimatedAvatar_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_SetAnimatedAvatar_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_SetAnimatedAvatar_Request} CPlayer_SetAnimatedAvatar_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetAnimatedAvatar_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_SetAnimatedAvatar_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.communityitemid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_SetAnimatedAvatar_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_SetAnimatedAvatar_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_SetAnimatedAvatar_Request} CPlayer_SetAnimatedAvatar_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetAnimatedAvatar_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_SetAnimatedAvatar_Request message.
         * @function verify
         * @memberof CPlayer_SetAnimatedAvatar_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_SetAnimatedAvatar_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.communityitemid != null && message.hasOwnProperty("communityitemid"))
                if (!$util.isInteger(message.communityitemid) && !(message.communityitemid && $util.isInteger(message.communityitemid.low) && $util.isInteger(message.communityitemid.high)))
                    return "communityitemid: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_SetAnimatedAvatar_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_SetAnimatedAvatar_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_SetAnimatedAvatar_Request} CPlayer_SetAnimatedAvatar_Request
         */
        CPlayer_SetAnimatedAvatar_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_SetAnimatedAvatar_Request)
                return object;
            var message = new $root.CPlayer_SetAnimatedAvatar_Request();
            if (object.communityitemid != null)
                if ($util.Long)
                    (message.communityitemid = $util.Long.fromValue(object.communityitemid)).unsigned = true;
                else if (typeof object.communityitemid === "string")
                    message.communityitemid = parseInt(object.communityitemid, 10);
                else if (typeof object.communityitemid === "number")
                    message.communityitemid = object.communityitemid;
                else if (typeof object.communityitemid === "object")
                    message.communityitemid = new $util.LongBits(object.communityitemid.low >>> 0, object.communityitemid.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_SetAnimatedAvatar_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_SetAnimatedAvatar_Request
         * @static
         * @param {CPlayer_SetAnimatedAvatar_Request} message CPlayer_SetAnimatedAvatar_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_SetAnimatedAvatar_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.communityitemid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.communityitemid = options.longs === String ? "0" : 0;
            if (message.communityitemid != null && message.hasOwnProperty("communityitemid"))
                if (typeof message.communityitemid === "number")
                    object.communityitemid = options.longs === String ? String(message.communityitemid) : message.communityitemid;
                else
                    object.communityitemid = options.longs === String ? $util.Long.prototype.toString.call(message.communityitemid) : options.longs === Number ? new $util.LongBits(message.communityitemid.low >>> 0, message.communityitemid.high >>> 0).toNumber(true) : message.communityitemid;
            return object;
        };
    
        /**
         * Converts this CPlayer_SetAnimatedAvatar_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_SetAnimatedAvatar_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_SetAnimatedAvatar_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_SetAnimatedAvatar_Request;
    })();
    
    $root.CPlayer_SetAnimatedAvatar_Response = (function() {
    
        /**
         * Properties of a CPlayer_SetAnimatedAvatar_Response.
         * @exports ICPlayer_SetAnimatedAvatar_Response
         * @interface ICPlayer_SetAnimatedAvatar_Response
         */
    
        /**
         * Constructs a new CPlayer_SetAnimatedAvatar_Response.
         * @exports CPlayer_SetAnimatedAvatar_Response
         * @classdesc Represents a CPlayer_SetAnimatedAvatar_Response.
         * @implements ICPlayer_SetAnimatedAvatar_Response
         * @constructor
         * @param {ICPlayer_SetAnimatedAvatar_Response=} [properties] Properties to set
         */
        function CPlayer_SetAnimatedAvatar_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CPlayer_SetAnimatedAvatar_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_SetAnimatedAvatar_Response
         * @static
         * @param {ICPlayer_SetAnimatedAvatar_Response=} [properties] Properties to set
         * @returns {CPlayer_SetAnimatedAvatar_Response} CPlayer_SetAnimatedAvatar_Response instance
         */
        CPlayer_SetAnimatedAvatar_Response.create = function create(properties) {
            return new CPlayer_SetAnimatedAvatar_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_SetAnimatedAvatar_Response message. Does not implicitly {@link CPlayer_SetAnimatedAvatar_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_SetAnimatedAvatar_Response
         * @static
         * @param {ICPlayer_SetAnimatedAvatar_Response} message CPlayer_SetAnimatedAvatar_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetAnimatedAvatar_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_SetAnimatedAvatar_Response message, length delimited. Does not implicitly {@link CPlayer_SetAnimatedAvatar_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_SetAnimatedAvatar_Response
         * @static
         * @param {ICPlayer_SetAnimatedAvatar_Response} message CPlayer_SetAnimatedAvatar_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetAnimatedAvatar_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_SetAnimatedAvatar_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_SetAnimatedAvatar_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_SetAnimatedAvatar_Response} CPlayer_SetAnimatedAvatar_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetAnimatedAvatar_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_SetAnimatedAvatar_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_SetAnimatedAvatar_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_SetAnimatedAvatar_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_SetAnimatedAvatar_Response} CPlayer_SetAnimatedAvatar_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetAnimatedAvatar_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_SetAnimatedAvatar_Response message.
         * @function verify
         * @memberof CPlayer_SetAnimatedAvatar_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_SetAnimatedAvatar_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_SetAnimatedAvatar_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_SetAnimatedAvatar_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_SetAnimatedAvatar_Response} CPlayer_SetAnimatedAvatar_Response
         */
        CPlayer_SetAnimatedAvatar_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_SetAnimatedAvatar_Response)
                return object;
            return new $root.CPlayer_SetAnimatedAvatar_Response();
        };
    
        /**
         * Creates a plain object from a CPlayer_SetAnimatedAvatar_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_SetAnimatedAvatar_Response
         * @static
         * @param {CPlayer_SetAnimatedAvatar_Response} message CPlayer_SetAnimatedAvatar_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_SetAnimatedAvatar_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CPlayer_SetAnimatedAvatar_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_SetAnimatedAvatar_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_SetAnimatedAvatar_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_SetAnimatedAvatar_Response;
    })();
    
    $root.CPlayer_GetProfileItemsOwned_Request = (function() {
    
        /**
         * Properties of a CPlayer_GetProfileItemsOwned_Request.
         * @exports ICPlayer_GetProfileItemsOwned_Request
         * @interface ICPlayer_GetProfileItemsOwned_Request
         * @property {string|null} [language] CPlayer_GetProfileItemsOwned_Request language
         */
    
        /**
         * Constructs a new CPlayer_GetProfileItemsOwned_Request.
         * @exports CPlayer_GetProfileItemsOwned_Request
         * @classdesc Represents a CPlayer_GetProfileItemsOwned_Request.
         * @implements ICPlayer_GetProfileItemsOwned_Request
         * @constructor
         * @param {ICPlayer_GetProfileItemsOwned_Request=} [properties] Properties to set
         */
        function CPlayer_GetProfileItemsOwned_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetProfileItemsOwned_Request language.
         * @member {string} language
         * @memberof CPlayer_GetProfileItemsOwned_Request
         * @instance
         */
        CPlayer_GetProfileItemsOwned_Request.prototype.language = "";
    
        /**
         * Creates a new CPlayer_GetProfileItemsOwned_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetProfileItemsOwned_Request
         * @static
         * @param {ICPlayer_GetProfileItemsOwned_Request=} [properties] Properties to set
         * @returns {CPlayer_GetProfileItemsOwned_Request} CPlayer_GetProfileItemsOwned_Request instance
         */
        CPlayer_GetProfileItemsOwned_Request.create = function create(properties) {
            return new CPlayer_GetProfileItemsOwned_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetProfileItemsOwned_Request message. Does not implicitly {@link CPlayer_GetProfileItemsOwned_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetProfileItemsOwned_Request
         * @static
         * @param {ICPlayer_GetProfileItemsOwned_Request} message CPlayer_GetProfileItemsOwned_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetProfileItemsOwned_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.language != null && Object.hasOwnProperty.call(message, "language"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.language);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetProfileItemsOwned_Request message, length delimited. Does not implicitly {@link CPlayer_GetProfileItemsOwned_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetProfileItemsOwned_Request
         * @static
         * @param {ICPlayer_GetProfileItemsOwned_Request} message CPlayer_GetProfileItemsOwned_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetProfileItemsOwned_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetProfileItemsOwned_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetProfileItemsOwned_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetProfileItemsOwned_Request} CPlayer_GetProfileItemsOwned_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetProfileItemsOwned_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetProfileItemsOwned_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.language = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetProfileItemsOwned_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetProfileItemsOwned_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetProfileItemsOwned_Request} CPlayer_GetProfileItemsOwned_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetProfileItemsOwned_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetProfileItemsOwned_Request message.
         * @function verify
         * @memberof CPlayer_GetProfileItemsOwned_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetProfileItemsOwned_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.language != null && message.hasOwnProperty("language"))
                if (!$util.isString(message.language))
                    return "language: string expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_GetProfileItemsOwned_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetProfileItemsOwned_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetProfileItemsOwned_Request} CPlayer_GetProfileItemsOwned_Request
         */
        CPlayer_GetProfileItemsOwned_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetProfileItemsOwned_Request)
                return object;
            var message = new $root.CPlayer_GetProfileItemsOwned_Request();
            if (object.language != null)
                message.language = String(object.language);
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetProfileItemsOwned_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetProfileItemsOwned_Request
         * @static
         * @param {CPlayer_GetProfileItemsOwned_Request} message CPlayer_GetProfileItemsOwned_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetProfileItemsOwned_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.language = "";
            if (message.language != null && message.hasOwnProperty("language"))
                object.language = message.language;
            return object;
        };
    
        /**
         * Converts this CPlayer_GetProfileItemsOwned_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_GetProfileItemsOwned_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetProfileItemsOwned_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetProfileItemsOwned_Request;
    })();
    
    $root.CPlayer_GetProfileItemsOwned_Response = (function() {
    
        /**
         * Properties of a CPlayer_GetProfileItemsOwned_Response.
         * @exports ICPlayer_GetProfileItemsOwned_Response
         * @interface ICPlayer_GetProfileItemsOwned_Response
         * @property {Array.<IProfileItem>|null} [profile_backgrounds] CPlayer_GetProfileItemsOwned_Response profile_backgrounds
         * @property {Array.<IProfileItem>|null} [mini_profile_backgrounds] CPlayer_GetProfileItemsOwned_Response mini_profile_backgrounds
         * @property {Array.<IProfileItem>|null} [avatar_frames] CPlayer_GetProfileItemsOwned_Response avatar_frames
         * @property {Array.<IProfileItem>|null} [animated_avatars] CPlayer_GetProfileItemsOwned_Response animated_avatars
         * @property {Array.<IProfileItem>|null} [profile_modifiers] CPlayer_GetProfileItemsOwned_Response profile_modifiers
         */
    
        /**
         * Constructs a new CPlayer_GetProfileItemsOwned_Response.
         * @exports CPlayer_GetProfileItemsOwned_Response
         * @classdesc Represents a CPlayer_GetProfileItemsOwned_Response.
         * @implements ICPlayer_GetProfileItemsOwned_Response
         * @constructor
         * @param {ICPlayer_GetProfileItemsOwned_Response=} [properties] Properties to set
         */
        function CPlayer_GetProfileItemsOwned_Response(properties) {
            this.profile_backgrounds = [];
            this.mini_profile_backgrounds = [];
            this.avatar_frames = [];
            this.animated_avatars = [];
            this.profile_modifiers = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetProfileItemsOwned_Response profile_backgrounds.
         * @member {Array.<IProfileItem>} profile_backgrounds
         * @memberof CPlayer_GetProfileItemsOwned_Response
         * @instance
         */
        CPlayer_GetProfileItemsOwned_Response.prototype.profile_backgrounds = $util.emptyArray;
    
        /**
         * CPlayer_GetProfileItemsOwned_Response mini_profile_backgrounds.
         * @member {Array.<IProfileItem>} mini_profile_backgrounds
         * @memberof CPlayer_GetProfileItemsOwned_Response
         * @instance
         */
        CPlayer_GetProfileItemsOwned_Response.prototype.mini_profile_backgrounds = $util.emptyArray;
    
        /**
         * CPlayer_GetProfileItemsOwned_Response avatar_frames.
         * @member {Array.<IProfileItem>} avatar_frames
         * @memberof CPlayer_GetProfileItemsOwned_Response
         * @instance
         */
        CPlayer_GetProfileItemsOwned_Response.prototype.avatar_frames = $util.emptyArray;
    
        /**
         * CPlayer_GetProfileItemsOwned_Response animated_avatars.
         * @member {Array.<IProfileItem>} animated_avatars
         * @memberof CPlayer_GetProfileItemsOwned_Response
         * @instance
         */
        CPlayer_GetProfileItemsOwned_Response.prototype.animated_avatars = $util.emptyArray;
    
        /**
         * CPlayer_GetProfileItemsOwned_Response profile_modifiers.
         * @member {Array.<IProfileItem>} profile_modifiers
         * @memberof CPlayer_GetProfileItemsOwned_Response
         * @instance
         */
        CPlayer_GetProfileItemsOwned_Response.prototype.profile_modifiers = $util.emptyArray;
    
        /**
         * Creates a new CPlayer_GetProfileItemsOwned_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetProfileItemsOwned_Response
         * @static
         * @param {ICPlayer_GetProfileItemsOwned_Response=} [properties] Properties to set
         * @returns {CPlayer_GetProfileItemsOwned_Response} CPlayer_GetProfileItemsOwned_Response instance
         */
        CPlayer_GetProfileItemsOwned_Response.create = function create(properties) {
            return new CPlayer_GetProfileItemsOwned_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetProfileItemsOwned_Response message. Does not implicitly {@link CPlayer_GetProfileItemsOwned_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetProfileItemsOwned_Response
         * @static
         * @param {ICPlayer_GetProfileItemsOwned_Response} message CPlayer_GetProfileItemsOwned_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetProfileItemsOwned_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.profile_backgrounds != null && message.profile_backgrounds.length)
                for (var i = 0; i < message.profile_backgrounds.length; ++i)
                    $root.ProfileItem.encode(message.profile_backgrounds[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.mini_profile_backgrounds != null && message.mini_profile_backgrounds.length)
                for (var i = 0; i < message.mini_profile_backgrounds.length; ++i)
                    $root.ProfileItem.encode(message.mini_profile_backgrounds[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.avatar_frames != null && message.avatar_frames.length)
                for (var i = 0; i < message.avatar_frames.length; ++i)
                    $root.ProfileItem.encode(message.avatar_frames[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.animated_avatars != null && message.animated_avatars.length)
                for (var i = 0; i < message.animated_avatars.length; ++i)
                    $root.ProfileItem.encode(message.animated_avatars[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.profile_modifiers != null && message.profile_modifiers.length)
                for (var i = 0; i < message.profile_modifiers.length; ++i)
                    $root.ProfileItem.encode(message.profile_modifiers[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetProfileItemsOwned_Response message, length delimited. Does not implicitly {@link CPlayer_GetProfileItemsOwned_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetProfileItemsOwned_Response
         * @static
         * @param {ICPlayer_GetProfileItemsOwned_Response} message CPlayer_GetProfileItemsOwned_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetProfileItemsOwned_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetProfileItemsOwned_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetProfileItemsOwned_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetProfileItemsOwned_Response} CPlayer_GetProfileItemsOwned_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetProfileItemsOwned_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetProfileItemsOwned_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.profile_backgrounds && message.profile_backgrounds.length))
                        message.profile_backgrounds = [];
                    message.profile_backgrounds.push($root.ProfileItem.decode(reader, reader.uint32()));
                    break;
                case 2:
                    if (!(message.mini_profile_backgrounds && message.mini_profile_backgrounds.length))
                        message.mini_profile_backgrounds = [];
                    message.mini_profile_backgrounds.push($root.ProfileItem.decode(reader, reader.uint32()));
                    break;
                case 3:
                    if (!(message.avatar_frames && message.avatar_frames.length))
                        message.avatar_frames = [];
                    message.avatar_frames.push($root.ProfileItem.decode(reader, reader.uint32()));
                    break;
                case 4:
                    if (!(message.animated_avatars && message.animated_avatars.length))
                        message.animated_avatars = [];
                    message.animated_avatars.push($root.ProfileItem.decode(reader, reader.uint32()));
                    break;
                case 5:
                    if (!(message.profile_modifiers && message.profile_modifiers.length))
                        message.profile_modifiers = [];
                    message.profile_modifiers.push($root.ProfileItem.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetProfileItemsOwned_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetProfileItemsOwned_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetProfileItemsOwned_Response} CPlayer_GetProfileItemsOwned_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetProfileItemsOwned_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetProfileItemsOwned_Response message.
         * @function verify
         * @memberof CPlayer_GetProfileItemsOwned_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetProfileItemsOwned_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.profile_backgrounds != null && message.hasOwnProperty("profile_backgrounds")) {
                if (!Array.isArray(message.profile_backgrounds))
                    return "profile_backgrounds: array expected";
                for (var i = 0; i < message.profile_backgrounds.length; ++i) {
                    var error = $root.ProfileItem.verify(message.profile_backgrounds[i]);
                    if (error)
                        return "profile_backgrounds." + error;
                }
            }
            if (message.mini_profile_backgrounds != null && message.hasOwnProperty("mini_profile_backgrounds")) {
                if (!Array.isArray(message.mini_profile_backgrounds))
                    return "mini_profile_backgrounds: array expected";
                for (var i = 0; i < message.mini_profile_backgrounds.length; ++i) {
                    var error = $root.ProfileItem.verify(message.mini_profile_backgrounds[i]);
                    if (error)
                        return "mini_profile_backgrounds." + error;
                }
            }
            if (message.avatar_frames != null && message.hasOwnProperty("avatar_frames")) {
                if (!Array.isArray(message.avatar_frames))
                    return "avatar_frames: array expected";
                for (var i = 0; i < message.avatar_frames.length; ++i) {
                    var error = $root.ProfileItem.verify(message.avatar_frames[i]);
                    if (error)
                        return "avatar_frames." + error;
                }
            }
            if (message.animated_avatars != null && message.hasOwnProperty("animated_avatars")) {
                if (!Array.isArray(message.animated_avatars))
                    return "animated_avatars: array expected";
                for (var i = 0; i < message.animated_avatars.length; ++i) {
                    var error = $root.ProfileItem.verify(message.animated_avatars[i]);
                    if (error)
                        return "animated_avatars." + error;
                }
            }
            if (message.profile_modifiers != null && message.hasOwnProperty("profile_modifiers")) {
                if (!Array.isArray(message.profile_modifiers))
                    return "profile_modifiers: array expected";
                for (var i = 0; i < message.profile_modifiers.length; ++i) {
                    var error = $root.ProfileItem.verify(message.profile_modifiers[i]);
                    if (error)
                        return "profile_modifiers." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CPlayer_GetProfileItemsOwned_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetProfileItemsOwned_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetProfileItemsOwned_Response} CPlayer_GetProfileItemsOwned_Response
         */
        CPlayer_GetProfileItemsOwned_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetProfileItemsOwned_Response)
                return object;
            var message = new $root.CPlayer_GetProfileItemsOwned_Response();
            if (object.profile_backgrounds) {
                if (!Array.isArray(object.profile_backgrounds))
                    throw TypeError(".CPlayer_GetProfileItemsOwned_Response.profile_backgrounds: array expected");
                message.profile_backgrounds = [];
                for (var i = 0; i < object.profile_backgrounds.length; ++i) {
                    if (typeof object.profile_backgrounds[i] !== "object")
                        throw TypeError(".CPlayer_GetProfileItemsOwned_Response.profile_backgrounds: object expected");
                    message.profile_backgrounds[i] = $root.ProfileItem.fromObject(object.profile_backgrounds[i]);
                }
            }
            if (object.mini_profile_backgrounds) {
                if (!Array.isArray(object.mini_profile_backgrounds))
                    throw TypeError(".CPlayer_GetProfileItemsOwned_Response.mini_profile_backgrounds: array expected");
                message.mini_profile_backgrounds = [];
                for (var i = 0; i < object.mini_profile_backgrounds.length; ++i) {
                    if (typeof object.mini_profile_backgrounds[i] !== "object")
                        throw TypeError(".CPlayer_GetProfileItemsOwned_Response.mini_profile_backgrounds: object expected");
                    message.mini_profile_backgrounds[i] = $root.ProfileItem.fromObject(object.mini_profile_backgrounds[i]);
                }
            }
            if (object.avatar_frames) {
                if (!Array.isArray(object.avatar_frames))
                    throw TypeError(".CPlayer_GetProfileItemsOwned_Response.avatar_frames: array expected");
                message.avatar_frames = [];
                for (var i = 0; i < object.avatar_frames.length; ++i) {
                    if (typeof object.avatar_frames[i] !== "object")
                        throw TypeError(".CPlayer_GetProfileItemsOwned_Response.avatar_frames: object expected");
                    message.avatar_frames[i] = $root.ProfileItem.fromObject(object.avatar_frames[i]);
                }
            }
            if (object.animated_avatars) {
                if (!Array.isArray(object.animated_avatars))
                    throw TypeError(".CPlayer_GetProfileItemsOwned_Response.animated_avatars: array expected");
                message.animated_avatars = [];
                for (var i = 0; i < object.animated_avatars.length; ++i) {
                    if (typeof object.animated_avatars[i] !== "object")
                        throw TypeError(".CPlayer_GetProfileItemsOwned_Response.animated_avatars: object expected");
                    message.animated_avatars[i] = $root.ProfileItem.fromObject(object.animated_avatars[i]);
                }
            }
            if (object.profile_modifiers) {
                if (!Array.isArray(object.profile_modifiers))
                    throw TypeError(".CPlayer_GetProfileItemsOwned_Response.profile_modifiers: array expected");
                message.profile_modifiers = [];
                for (var i = 0; i < object.profile_modifiers.length; ++i) {
                    if (typeof object.profile_modifiers[i] !== "object")
                        throw TypeError(".CPlayer_GetProfileItemsOwned_Response.profile_modifiers: object expected");
                    message.profile_modifiers[i] = $root.ProfileItem.fromObject(object.profile_modifiers[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetProfileItemsOwned_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetProfileItemsOwned_Response
         * @static
         * @param {CPlayer_GetProfileItemsOwned_Response} message CPlayer_GetProfileItemsOwned_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetProfileItemsOwned_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.profile_backgrounds = [];
                object.mini_profile_backgrounds = [];
                object.avatar_frames = [];
                object.animated_avatars = [];
                object.profile_modifiers = [];
            }
            if (message.profile_backgrounds && message.profile_backgrounds.length) {
                object.profile_backgrounds = [];
                for (var j = 0; j < message.profile_backgrounds.length; ++j)
                    object.profile_backgrounds[j] = $root.ProfileItem.toObject(message.profile_backgrounds[j], options);
            }
            if (message.mini_profile_backgrounds && message.mini_profile_backgrounds.length) {
                object.mini_profile_backgrounds = [];
                for (var j = 0; j < message.mini_profile_backgrounds.length; ++j)
                    object.mini_profile_backgrounds[j] = $root.ProfileItem.toObject(message.mini_profile_backgrounds[j], options);
            }
            if (message.avatar_frames && message.avatar_frames.length) {
                object.avatar_frames = [];
                for (var j = 0; j < message.avatar_frames.length; ++j)
                    object.avatar_frames[j] = $root.ProfileItem.toObject(message.avatar_frames[j], options);
            }
            if (message.animated_avatars && message.animated_avatars.length) {
                object.animated_avatars = [];
                for (var j = 0; j < message.animated_avatars.length; ++j)
                    object.animated_avatars[j] = $root.ProfileItem.toObject(message.animated_avatars[j], options);
            }
            if (message.profile_modifiers && message.profile_modifiers.length) {
                object.profile_modifiers = [];
                for (var j = 0; j < message.profile_modifiers.length; ++j)
                    object.profile_modifiers[j] = $root.ProfileItem.toObject(message.profile_modifiers[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CPlayer_GetProfileItemsOwned_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_GetProfileItemsOwned_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetProfileItemsOwned_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetProfileItemsOwned_Response;
    })();
    
    $root.CPlayer_GetProfileItemsEquipped_Request = (function() {
    
        /**
         * Properties of a CPlayer_GetProfileItemsEquipped_Request.
         * @exports ICPlayer_GetProfileItemsEquipped_Request
         * @interface ICPlayer_GetProfileItemsEquipped_Request
         * @property {number|Long|null} [steamid] CPlayer_GetProfileItemsEquipped_Request steamid
         * @property {string|null} [language] CPlayer_GetProfileItemsEquipped_Request language
         */
    
        /**
         * Constructs a new CPlayer_GetProfileItemsEquipped_Request.
         * @exports CPlayer_GetProfileItemsEquipped_Request
         * @classdesc Represents a CPlayer_GetProfileItemsEquipped_Request.
         * @implements ICPlayer_GetProfileItemsEquipped_Request
         * @constructor
         * @param {ICPlayer_GetProfileItemsEquipped_Request=} [properties] Properties to set
         */
        function CPlayer_GetProfileItemsEquipped_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetProfileItemsEquipped_Request steamid.
         * @member {number|Long} steamid
         * @memberof CPlayer_GetProfileItemsEquipped_Request
         * @instance
         */
        CPlayer_GetProfileItemsEquipped_Request.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CPlayer_GetProfileItemsEquipped_Request language.
         * @member {string} language
         * @memberof CPlayer_GetProfileItemsEquipped_Request
         * @instance
         */
        CPlayer_GetProfileItemsEquipped_Request.prototype.language = "";
    
        /**
         * Creates a new CPlayer_GetProfileItemsEquipped_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetProfileItemsEquipped_Request
         * @static
         * @param {ICPlayer_GetProfileItemsEquipped_Request=} [properties] Properties to set
         * @returns {CPlayer_GetProfileItemsEquipped_Request} CPlayer_GetProfileItemsEquipped_Request instance
         */
        CPlayer_GetProfileItemsEquipped_Request.create = function create(properties) {
            return new CPlayer_GetProfileItemsEquipped_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetProfileItemsEquipped_Request message. Does not implicitly {@link CPlayer_GetProfileItemsEquipped_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetProfileItemsEquipped_Request
         * @static
         * @param {ICPlayer_GetProfileItemsEquipped_Request} message CPlayer_GetProfileItemsEquipped_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetProfileItemsEquipped_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid != null && Object.hasOwnProperty.call(message, "steamid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
            if (message.language != null && Object.hasOwnProperty.call(message, "language"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.language);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetProfileItemsEquipped_Request message, length delimited. Does not implicitly {@link CPlayer_GetProfileItemsEquipped_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetProfileItemsEquipped_Request
         * @static
         * @param {ICPlayer_GetProfileItemsEquipped_Request} message CPlayer_GetProfileItemsEquipped_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetProfileItemsEquipped_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetProfileItemsEquipped_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetProfileItemsEquipped_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetProfileItemsEquipped_Request} CPlayer_GetProfileItemsEquipped_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetProfileItemsEquipped_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetProfileItemsEquipped_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid = reader.fixed64();
                    break;
                case 2:
                    message.language = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetProfileItemsEquipped_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetProfileItemsEquipped_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetProfileItemsEquipped_Request} CPlayer_GetProfileItemsEquipped_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetProfileItemsEquipped_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetProfileItemsEquipped_Request message.
         * @function verify
         * @memberof CPlayer_GetProfileItemsEquipped_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetProfileItemsEquipped_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            if (message.language != null && message.hasOwnProperty("language"))
                if (!$util.isString(message.language))
                    return "language: string expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_GetProfileItemsEquipped_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetProfileItemsEquipped_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetProfileItemsEquipped_Request} CPlayer_GetProfileItemsEquipped_Request
         */
        CPlayer_GetProfileItemsEquipped_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetProfileItemsEquipped_Request)
                return object;
            var message = new $root.CPlayer_GetProfileItemsEquipped_Request();
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
            if (object.language != null)
                message.language = String(object.language);
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetProfileItemsEquipped_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetProfileItemsEquipped_Request
         * @static
         * @param {CPlayer_GetProfileItemsEquipped_Request} message CPlayer_GetProfileItemsEquipped_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetProfileItemsEquipped_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
                object.language = "";
            }
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
            if (message.language != null && message.hasOwnProperty("language"))
                object.language = message.language;
            return object;
        };
    
        /**
         * Converts this CPlayer_GetProfileItemsEquipped_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_GetProfileItemsEquipped_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetProfileItemsEquipped_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetProfileItemsEquipped_Request;
    })();
    
    $root.CPlayer_GetProfileItemsEquipped_Response = (function() {
    
        /**
         * Properties of a CPlayer_GetProfileItemsEquipped_Response.
         * @exports ICPlayer_GetProfileItemsEquipped_Response
         * @interface ICPlayer_GetProfileItemsEquipped_Response
         * @property {IProfileItem|null} [profile_background] CPlayer_GetProfileItemsEquipped_Response profile_background
         * @property {IProfileItem|null} [mini_profile_background] CPlayer_GetProfileItemsEquipped_Response mini_profile_background
         * @property {IProfileItem|null} [avatar_frame] CPlayer_GetProfileItemsEquipped_Response avatar_frame
         * @property {IProfileItem|null} [animated_avatar] CPlayer_GetProfileItemsEquipped_Response animated_avatar
         * @property {IProfileItem|null} [profile_modifier] CPlayer_GetProfileItemsEquipped_Response profile_modifier
         */
    
        /**
         * Constructs a new CPlayer_GetProfileItemsEquipped_Response.
         * @exports CPlayer_GetProfileItemsEquipped_Response
         * @classdesc Represents a CPlayer_GetProfileItemsEquipped_Response.
         * @implements ICPlayer_GetProfileItemsEquipped_Response
         * @constructor
         * @param {ICPlayer_GetProfileItemsEquipped_Response=} [properties] Properties to set
         */
        function CPlayer_GetProfileItemsEquipped_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetProfileItemsEquipped_Response profile_background.
         * @member {IProfileItem|null|undefined} profile_background
         * @memberof CPlayer_GetProfileItemsEquipped_Response
         * @instance
         */
        CPlayer_GetProfileItemsEquipped_Response.prototype.profile_background = null;
    
        /**
         * CPlayer_GetProfileItemsEquipped_Response mini_profile_background.
         * @member {IProfileItem|null|undefined} mini_profile_background
         * @memberof CPlayer_GetProfileItemsEquipped_Response
         * @instance
         */
        CPlayer_GetProfileItemsEquipped_Response.prototype.mini_profile_background = null;
    
        /**
         * CPlayer_GetProfileItemsEquipped_Response avatar_frame.
         * @member {IProfileItem|null|undefined} avatar_frame
         * @memberof CPlayer_GetProfileItemsEquipped_Response
         * @instance
         */
        CPlayer_GetProfileItemsEquipped_Response.prototype.avatar_frame = null;
    
        /**
         * CPlayer_GetProfileItemsEquipped_Response animated_avatar.
         * @member {IProfileItem|null|undefined} animated_avatar
         * @memberof CPlayer_GetProfileItemsEquipped_Response
         * @instance
         */
        CPlayer_GetProfileItemsEquipped_Response.prototype.animated_avatar = null;
    
        /**
         * CPlayer_GetProfileItemsEquipped_Response profile_modifier.
         * @member {IProfileItem|null|undefined} profile_modifier
         * @memberof CPlayer_GetProfileItemsEquipped_Response
         * @instance
         */
        CPlayer_GetProfileItemsEquipped_Response.prototype.profile_modifier = null;
    
        /**
         * Creates a new CPlayer_GetProfileItemsEquipped_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetProfileItemsEquipped_Response
         * @static
         * @param {ICPlayer_GetProfileItemsEquipped_Response=} [properties] Properties to set
         * @returns {CPlayer_GetProfileItemsEquipped_Response} CPlayer_GetProfileItemsEquipped_Response instance
         */
        CPlayer_GetProfileItemsEquipped_Response.create = function create(properties) {
            return new CPlayer_GetProfileItemsEquipped_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetProfileItemsEquipped_Response message. Does not implicitly {@link CPlayer_GetProfileItemsEquipped_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetProfileItemsEquipped_Response
         * @static
         * @param {ICPlayer_GetProfileItemsEquipped_Response} message CPlayer_GetProfileItemsEquipped_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetProfileItemsEquipped_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.profile_background != null && Object.hasOwnProperty.call(message, "profile_background"))
                $root.ProfileItem.encode(message.profile_background, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.mini_profile_background != null && Object.hasOwnProperty.call(message, "mini_profile_background"))
                $root.ProfileItem.encode(message.mini_profile_background, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.avatar_frame != null && Object.hasOwnProperty.call(message, "avatar_frame"))
                $root.ProfileItem.encode(message.avatar_frame, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.animated_avatar != null && Object.hasOwnProperty.call(message, "animated_avatar"))
                $root.ProfileItem.encode(message.animated_avatar, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.profile_modifier != null && Object.hasOwnProperty.call(message, "profile_modifier"))
                $root.ProfileItem.encode(message.profile_modifier, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetProfileItemsEquipped_Response message, length delimited. Does not implicitly {@link CPlayer_GetProfileItemsEquipped_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetProfileItemsEquipped_Response
         * @static
         * @param {ICPlayer_GetProfileItemsEquipped_Response} message CPlayer_GetProfileItemsEquipped_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetProfileItemsEquipped_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetProfileItemsEquipped_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetProfileItemsEquipped_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetProfileItemsEquipped_Response} CPlayer_GetProfileItemsEquipped_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetProfileItemsEquipped_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetProfileItemsEquipped_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.profile_background = $root.ProfileItem.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.mini_profile_background = $root.ProfileItem.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.avatar_frame = $root.ProfileItem.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.animated_avatar = $root.ProfileItem.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.profile_modifier = $root.ProfileItem.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetProfileItemsEquipped_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetProfileItemsEquipped_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetProfileItemsEquipped_Response} CPlayer_GetProfileItemsEquipped_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetProfileItemsEquipped_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetProfileItemsEquipped_Response message.
         * @function verify
         * @memberof CPlayer_GetProfileItemsEquipped_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetProfileItemsEquipped_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.profile_background != null && message.hasOwnProperty("profile_background")) {
                var error = $root.ProfileItem.verify(message.profile_background);
                if (error)
                    return "profile_background." + error;
            }
            if (message.mini_profile_background != null && message.hasOwnProperty("mini_profile_background")) {
                var error = $root.ProfileItem.verify(message.mini_profile_background);
                if (error)
                    return "mini_profile_background." + error;
            }
            if (message.avatar_frame != null && message.hasOwnProperty("avatar_frame")) {
                var error = $root.ProfileItem.verify(message.avatar_frame);
                if (error)
                    return "avatar_frame." + error;
            }
            if (message.animated_avatar != null && message.hasOwnProperty("animated_avatar")) {
                var error = $root.ProfileItem.verify(message.animated_avatar);
                if (error)
                    return "animated_avatar." + error;
            }
            if (message.profile_modifier != null && message.hasOwnProperty("profile_modifier")) {
                var error = $root.ProfileItem.verify(message.profile_modifier);
                if (error)
                    return "profile_modifier." + error;
            }
            return null;
        };
    
        /**
         * Creates a CPlayer_GetProfileItemsEquipped_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetProfileItemsEquipped_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetProfileItemsEquipped_Response} CPlayer_GetProfileItemsEquipped_Response
         */
        CPlayer_GetProfileItemsEquipped_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetProfileItemsEquipped_Response)
                return object;
            var message = new $root.CPlayer_GetProfileItemsEquipped_Response();
            if (object.profile_background != null) {
                if (typeof object.profile_background !== "object")
                    throw TypeError(".CPlayer_GetProfileItemsEquipped_Response.profile_background: object expected");
                message.profile_background = $root.ProfileItem.fromObject(object.profile_background);
            }
            if (object.mini_profile_background != null) {
                if (typeof object.mini_profile_background !== "object")
                    throw TypeError(".CPlayer_GetProfileItemsEquipped_Response.mini_profile_background: object expected");
                message.mini_profile_background = $root.ProfileItem.fromObject(object.mini_profile_background);
            }
            if (object.avatar_frame != null) {
                if (typeof object.avatar_frame !== "object")
                    throw TypeError(".CPlayer_GetProfileItemsEquipped_Response.avatar_frame: object expected");
                message.avatar_frame = $root.ProfileItem.fromObject(object.avatar_frame);
            }
            if (object.animated_avatar != null) {
                if (typeof object.animated_avatar !== "object")
                    throw TypeError(".CPlayer_GetProfileItemsEquipped_Response.animated_avatar: object expected");
                message.animated_avatar = $root.ProfileItem.fromObject(object.animated_avatar);
            }
            if (object.profile_modifier != null) {
                if (typeof object.profile_modifier !== "object")
                    throw TypeError(".CPlayer_GetProfileItemsEquipped_Response.profile_modifier: object expected");
                message.profile_modifier = $root.ProfileItem.fromObject(object.profile_modifier);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetProfileItemsEquipped_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetProfileItemsEquipped_Response
         * @static
         * @param {CPlayer_GetProfileItemsEquipped_Response} message CPlayer_GetProfileItemsEquipped_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetProfileItemsEquipped_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.profile_background = null;
                object.mini_profile_background = null;
                object.avatar_frame = null;
                object.animated_avatar = null;
                object.profile_modifier = null;
            }
            if (message.profile_background != null && message.hasOwnProperty("profile_background"))
                object.profile_background = $root.ProfileItem.toObject(message.profile_background, options);
            if (message.mini_profile_background != null && message.hasOwnProperty("mini_profile_background"))
                object.mini_profile_background = $root.ProfileItem.toObject(message.mini_profile_background, options);
            if (message.avatar_frame != null && message.hasOwnProperty("avatar_frame"))
                object.avatar_frame = $root.ProfileItem.toObject(message.avatar_frame, options);
            if (message.animated_avatar != null && message.hasOwnProperty("animated_avatar"))
                object.animated_avatar = $root.ProfileItem.toObject(message.animated_avatar, options);
            if (message.profile_modifier != null && message.hasOwnProperty("profile_modifier"))
                object.profile_modifier = $root.ProfileItem.toObject(message.profile_modifier, options);
            return object;
        };
    
        /**
         * Converts this CPlayer_GetProfileItemsEquipped_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_GetProfileItemsEquipped_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetProfileItemsEquipped_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetProfileItemsEquipped_Response;
    })();
    
    $root.CPlayer_SetEquippedProfileItemFlags_Request = (function() {
    
        /**
         * Properties of a CPlayer_SetEquippedProfileItemFlags_Request.
         * @exports ICPlayer_SetEquippedProfileItemFlags_Request
         * @interface ICPlayer_SetEquippedProfileItemFlags_Request
         * @property {number|Long|null} [communityitemid] CPlayer_SetEquippedProfileItemFlags_Request communityitemid
         * @property {number|null} [flags] CPlayer_SetEquippedProfileItemFlags_Request flags
         */
    
        /**
         * Constructs a new CPlayer_SetEquippedProfileItemFlags_Request.
         * @exports CPlayer_SetEquippedProfileItemFlags_Request
         * @classdesc Represents a CPlayer_SetEquippedProfileItemFlags_Request.
         * @implements ICPlayer_SetEquippedProfileItemFlags_Request
         * @constructor
         * @param {ICPlayer_SetEquippedProfileItemFlags_Request=} [properties] Properties to set
         */
        function CPlayer_SetEquippedProfileItemFlags_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_SetEquippedProfileItemFlags_Request communityitemid.
         * @member {number|Long} communityitemid
         * @memberof CPlayer_SetEquippedProfileItemFlags_Request
         * @instance
         */
        CPlayer_SetEquippedProfileItemFlags_Request.prototype.communityitemid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CPlayer_SetEquippedProfileItemFlags_Request flags.
         * @member {number} flags
         * @memberof CPlayer_SetEquippedProfileItemFlags_Request
         * @instance
         */
        CPlayer_SetEquippedProfileItemFlags_Request.prototype.flags = 0;
    
        /**
         * Creates a new CPlayer_SetEquippedProfileItemFlags_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_SetEquippedProfileItemFlags_Request
         * @static
         * @param {ICPlayer_SetEquippedProfileItemFlags_Request=} [properties] Properties to set
         * @returns {CPlayer_SetEquippedProfileItemFlags_Request} CPlayer_SetEquippedProfileItemFlags_Request instance
         */
        CPlayer_SetEquippedProfileItemFlags_Request.create = function create(properties) {
            return new CPlayer_SetEquippedProfileItemFlags_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_SetEquippedProfileItemFlags_Request message. Does not implicitly {@link CPlayer_SetEquippedProfileItemFlags_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_SetEquippedProfileItemFlags_Request
         * @static
         * @param {ICPlayer_SetEquippedProfileItemFlags_Request} message CPlayer_SetEquippedProfileItemFlags_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetEquippedProfileItemFlags_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.communityitemid != null && Object.hasOwnProperty.call(message, "communityitemid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.communityitemid);
            if (message.flags != null && Object.hasOwnProperty.call(message, "flags"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.flags);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_SetEquippedProfileItemFlags_Request message, length delimited. Does not implicitly {@link CPlayer_SetEquippedProfileItemFlags_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_SetEquippedProfileItemFlags_Request
         * @static
         * @param {ICPlayer_SetEquippedProfileItemFlags_Request} message CPlayer_SetEquippedProfileItemFlags_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetEquippedProfileItemFlags_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_SetEquippedProfileItemFlags_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_SetEquippedProfileItemFlags_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_SetEquippedProfileItemFlags_Request} CPlayer_SetEquippedProfileItemFlags_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetEquippedProfileItemFlags_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_SetEquippedProfileItemFlags_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.communityitemid = reader.uint64();
                    break;
                case 2:
                    message.flags = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_SetEquippedProfileItemFlags_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_SetEquippedProfileItemFlags_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_SetEquippedProfileItemFlags_Request} CPlayer_SetEquippedProfileItemFlags_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetEquippedProfileItemFlags_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_SetEquippedProfileItemFlags_Request message.
         * @function verify
         * @memberof CPlayer_SetEquippedProfileItemFlags_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_SetEquippedProfileItemFlags_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.communityitemid != null && message.hasOwnProperty("communityitemid"))
                if (!$util.isInteger(message.communityitemid) && !(message.communityitemid && $util.isInteger(message.communityitemid.low) && $util.isInteger(message.communityitemid.high)))
                    return "communityitemid: integer|Long expected";
            if (message.flags != null && message.hasOwnProperty("flags"))
                if (!$util.isInteger(message.flags))
                    return "flags: integer expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_SetEquippedProfileItemFlags_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_SetEquippedProfileItemFlags_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_SetEquippedProfileItemFlags_Request} CPlayer_SetEquippedProfileItemFlags_Request
         */
        CPlayer_SetEquippedProfileItemFlags_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_SetEquippedProfileItemFlags_Request)
                return object;
            var message = new $root.CPlayer_SetEquippedProfileItemFlags_Request();
            if (object.communityitemid != null)
                if ($util.Long)
                    (message.communityitemid = $util.Long.fromValue(object.communityitemid)).unsigned = true;
                else if (typeof object.communityitemid === "string")
                    message.communityitemid = parseInt(object.communityitemid, 10);
                else if (typeof object.communityitemid === "number")
                    message.communityitemid = object.communityitemid;
                else if (typeof object.communityitemid === "object")
                    message.communityitemid = new $util.LongBits(object.communityitemid.low >>> 0, object.communityitemid.high >>> 0).toNumber(true);
            if (object.flags != null)
                message.flags = object.flags >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_SetEquippedProfileItemFlags_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_SetEquippedProfileItemFlags_Request
         * @static
         * @param {CPlayer_SetEquippedProfileItemFlags_Request} message CPlayer_SetEquippedProfileItemFlags_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_SetEquippedProfileItemFlags_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.communityitemid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.communityitemid = options.longs === String ? "0" : 0;
                object.flags = 0;
            }
            if (message.communityitemid != null && message.hasOwnProperty("communityitemid"))
                if (typeof message.communityitemid === "number")
                    object.communityitemid = options.longs === String ? String(message.communityitemid) : message.communityitemid;
                else
                    object.communityitemid = options.longs === String ? $util.Long.prototype.toString.call(message.communityitemid) : options.longs === Number ? new $util.LongBits(message.communityitemid.low >>> 0, message.communityitemid.high >>> 0).toNumber(true) : message.communityitemid;
            if (message.flags != null && message.hasOwnProperty("flags"))
                object.flags = message.flags;
            return object;
        };
    
        /**
         * Converts this CPlayer_SetEquippedProfileItemFlags_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_SetEquippedProfileItemFlags_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_SetEquippedProfileItemFlags_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_SetEquippedProfileItemFlags_Request;
    })();
    
    $root.CPlayer_SetEquippedProfileItemFlags_Response = (function() {
    
        /**
         * Properties of a CPlayer_SetEquippedProfileItemFlags_Response.
         * @exports ICPlayer_SetEquippedProfileItemFlags_Response
         * @interface ICPlayer_SetEquippedProfileItemFlags_Response
         */
    
        /**
         * Constructs a new CPlayer_SetEquippedProfileItemFlags_Response.
         * @exports CPlayer_SetEquippedProfileItemFlags_Response
         * @classdesc Represents a CPlayer_SetEquippedProfileItemFlags_Response.
         * @implements ICPlayer_SetEquippedProfileItemFlags_Response
         * @constructor
         * @param {ICPlayer_SetEquippedProfileItemFlags_Response=} [properties] Properties to set
         */
        function CPlayer_SetEquippedProfileItemFlags_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CPlayer_SetEquippedProfileItemFlags_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_SetEquippedProfileItemFlags_Response
         * @static
         * @param {ICPlayer_SetEquippedProfileItemFlags_Response=} [properties] Properties to set
         * @returns {CPlayer_SetEquippedProfileItemFlags_Response} CPlayer_SetEquippedProfileItemFlags_Response instance
         */
        CPlayer_SetEquippedProfileItemFlags_Response.create = function create(properties) {
            return new CPlayer_SetEquippedProfileItemFlags_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_SetEquippedProfileItemFlags_Response message. Does not implicitly {@link CPlayer_SetEquippedProfileItemFlags_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_SetEquippedProfileItemFlags_Response
         * @static
         * @param {ICPlayer_SetEquippedProfileItemFlags_Response} message CPlayer_SetEquippedProfileItemFlags_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetEquippedProfileItemFlags_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_SetEquippedProfileItemFlags_Response message, length delimited. Does not implicitly {@link CPlayer_SetEquippedProfileItemFlags_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_SetEquippedProfileItemFlags_Response
         * @static
         * @param {ICPlayer_SetEquippedProfileItemFlags_Response} message CPlayer_SetEquippedProfileItemFlags_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetEquippedProfileItemFlags_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_SetEquippedProfileItemFlags_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_SetEquippedProfileItemFlags_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_SetEquippedProfileItemFlags_Response} CPlayer_SetEquippedProfileItemFlags_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetEquippedProfileItemFlags_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_SetEquippedProfileItemFlags_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_SetEquippedProfileItemFlags_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_SetEquippedProfileItemFlags_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_SetEquippedProfileItemFlags_Response} CPlayer_SetEquippedProfileItemFlags_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetEquippedProfileItemFlags_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_SetEquippedProfileItemFlags_Response message.
         * @function verify
         * @memberof CPlayer_SetEquippedProfileItemFlags_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_SetEquippedProfileItemFlags_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_SetEquippedProfileItemFlags_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_SetEquippedProfileItemFlags_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_SetEquippedProfileItemFlags_Response} CPlayer_SetEquippedProfileItemFlags_Response
         */
        CPlayer_SetEquippedProfileItemFlags_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_SetEquippedProfileItemFlags_Response)
                return object;
            return new $root.CPlayer_SetEquippedProfileItemFlags_Response();
        };
    
        /**
         * Creates a plain object from a CPlayer_SetEquippedProfileItemFlags_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_SetEquippedProfileItemFlags_Response
         * @static
         * @param {CPlayer_SetEquippedProfileItemFlags_Response} message CPlayer_SetEquippedProfileItemFlags_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_SetEquippedProfileItemFlags_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CPlayer_SetEquippedProfileItemFlags_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_SetEquippedProfileItemFlags_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_SetEquippedProfileItemFlags_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_SetEquippedProfileItemFlags_Response;
    })();
    
    $root.CPlayer_GetEmoticonList_Request = (function() {
    
        /**
         * Properties of a CPlayer_GetEmoticonList_Request.
         * @exports ICPlayer_GetEmoticonList_Request
         * @interface ICPlayer_GetEmoticonList_Request
         */
    
        /**
         * Constructs a new CPlayer_GetEmoticonList_Request.
         * @exports CPlayer_GetEmoticonList_Request
         * @classdesc Represents a CPlayer_GetEmoticonList_Request.
         * @implements ICPlayer_GetEmoticonList_Request
         * @constructor
         * @param {ICPlayer_GetEmoticonList_Request=} [properties] Properties to set
         */
        function CPlayer_GetEmoticonList_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CPlayer_GetEmoticonList_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetEmoticonList_Request
         * @static
         * @param {ICPlayer_GetEmoticonList_Request=} [properties] Properties to set
         * @returns {CPlayer_GetEmoticonList_Request} CPlayer_GetEmoticonList_Request instance
         */
        CPlayer_GetEmoticonList_Request.create = function create(properties) {
            return new CPlayer_GetEmoticonList_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetEmoticonList_Request message. Does not implicitly {@link CPlayer_GetEmoticonList_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetEmoticonList_Request
         * @static
         * @param {ICPlayer_GetEmoticonList_Request} message CPlayer_GetEmoticonList_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetEmoticonList_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetEmoticonList_Request message, length delimited. Does not implicitly {@link CPlayer_GetEmoticonList_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetEmoticonList_Request
         * @static
         * @param {ICPlayer_GetEmoticonList_Request} message CPlayer_GetEmoticonList_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetEmoticonList_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetEmoticonList_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetEmoticonList_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetEmoticonList_Request} CPlayer_GetEmoticonList_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetEmoticonList_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetEmoticonList_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetEmoticonList_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetEmoticonList_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetEmoticonList_Request} CPlayer_GetEmoticonList_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetEmoticonList_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetEmoticonList_Request message.
         * @function verify
         * @memberof CPlayer_GetEmoticonList_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetEmoticonList_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_GetEmoticonList_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetEmoticonList_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetEmoticonList_Request} CPlayer_GetEmoticonList_Request
         */
        CPlayer_GetEmoticonList_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetEmoticonList_Request)
                return object;
            return new $root.CPlayer_GetEmoticonList_Request();
        };
    
        /**
         * Creates a plain object from a CPlayer_GetEmoticonList_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetEmoticonList_Request
         * @static
         * @param {CPlayer_GetEmoticonList_Request} message CPlayer_GetEmoticonList_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetEmoticonList_Request.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CPlayer_GetEmoticonList_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_GetEmoticonList_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetEmoticonList_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetEmoticonList_Request;
    })();
    
    $root.CPlayer_GetEmoticonList_Response = (function() {
    
        /**
         * Properties of a CPlayer_GetEmoticonList_Response.
         * @exports ICPlayer_GetEmoticonList_Response
         * @interface ICPlayer_GetEmoticonList_Response
         * @property {Array.<CPlayer_GetEmoticonList_Response.IEmoticon>|null} [emoticons] CPlayer_GetEmoticonList_Response emoticons
         */
    
        /**
         * Constructs a new CPlayer_GetEmoticonList_Response.
         * @exports CPlayer_GetEmoticonList_Response
         * @classdesc Represents a CPlayer_GetEmoticonList_Response.
         * @implements ICPlayer_GetEmoticonList_Response
         * @constructor
         * @param {ICPlayer_GetEmoticonList_Response=} [properties] Properties to set
         */
        function CPlayer_GetEmoticonList_Response(properties) {
            this.emoticons = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetEmoticonList_Response emoticons.
         * @member {Array.<CPlayer_GetEmoticonList_Response.IEmoticon>} emoticons
         * @memberof CPlayer_GetEmoticonList_Response
         * @instance
         */
        CPlayer_GetEmoticonList_Response.prototype.emoticons = $util.emptyArray;
    
        /**
         * Creates a new CPlayer_GetEmoticonList_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetEmoticonList_Response
         * @static
         * @param {ICPlayer_GetEmoticonList_Response=} [properties] Properties to set
         * @returns {CPlayer_GetEmoticonList_Response} CPlayer_GetEmoticonList_Response instance
         */
        CPlayer_GetEmoticonList_Response.create = function create(properties) {
            return new CPlayer_GetEmoticonList_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetEmoticonList_Response message. Does not implicitly {@link CPlayer_GetEmoticonList_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetEmoticonList_Response
         * @static
         * @param {ICPlayer_GetEmoticonList_Response} message CPlayer_GetEmoticonList_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetEmoticonList_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.emoticons != null && message.emoticons.length)
                for (var i = 0; i < message.emoticons.length; ++i)
                    $root.CPlayer_GetEmoticonList_Response.Emoticon.encode(message.emoticons[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetEmoticonList_Response message, length delimited. Does not implicitly {@link CPlayer_GetEmoticonList_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetEmoticonList_Response
         * @static
         * @param {ICPlayer_GetEmoticonList_Response} message CPlayer_GetEmoticonList_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetEmoticonList_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetEmoticonList_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetEmoticonList_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetEmoticonList_Response} CPlayer_GetEmoticonList_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetEmoticonList_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetEmoticonList_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.emoticons && message.emoticons.length))
                        message.emoticons = [];
                    message.emoticons.push($root.CPlayer_GetEmoticonList_Response.Emoticon.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetEmoticonList_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetEmoticonList_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetEmoticonList_Response} CPlayer_GetEmoticonList_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetEmoticonList_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetEmoticonList_Response message.
         * @function verify
         * @memberof CPlayer_GetEmoticonList_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetEmoticonList_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.emoticons != null && message.hasOwnProperty("emoticons")) {
                if (!Array.isArray(message.emoticons))
                    return "emoticons: array expected";
                for (var i = 0; i < message.emoticons.length; ++i) {
                    var error = $root.CPlayer_GetEmoticonList_Response.Emoticon.verify(message.emoticons[i]);
                    if (error)
                        return "emoticons." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CPlayer_GetEmoticonList_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetEmoticonList_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetEmoticonList_Response} CPlayer_GetEmoticonList_Response
         */
        CPlayer_GetEmoticonList_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetEmoticonList_Response)
                return object;
            var message = new $root.CPlayer_GetEmoticonList_Response();
            if (object.emoticons) {
                if (!Array.isArray(object.emoticons))
                    throw TypeError(".CPlayer_GetEmoticonList_Response.emoticons: array expected");
                message.emoticons = [];
                for (var i = 0; i < object.emoticons.length; ++i) {
                    if (typeof object.emoticons[i] !== "object")
                        throw TypeError(".CPlayer_GetEmoticonList_Response.emoticons: object expected");
                    message.emoticons[i] = $root.CPlayer_GetEmoticonList_Response.Emoticon.fromObject(object.emoticons[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetEmoticonList_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetEmoticonList_Response
         * @static
         * @param {CPlayer_GetEmoticonList_Response} message CPlayer_GetEmoticonList_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetEmoticonList_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.emoticons = [];
            if (message.emoticons && message.emoticons.length) {
                object.emoticons = [];
                for (var j = 0; j < message.emoticons.length; ++j)
                    object.emoticons[j] = $root.CPlayer_GetEmoticonList_Response.Emoticon.toObject(message.emoticons[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CPlayer_GetEmoticonList_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_GetEmoticonList_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetEmoticonList_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CPlayer_GetEmoticonList_Response.Emoticon = (function() {
    
            /**
             * Properties of an Emoticon.
             * @memberof CPlayer_GetEmoticonList_Response
             * @interface IEmoticon
             * @property {string|null} [name] Emoticon name
             * @property {number|null} [count] Emoticon count
             * @property {number|null} [time_last_used] Emoticon time_last_used
             * @property {number|null} [use_count] Emoticon use_count
             * @property {number|null} [time_received] Emoticon time_received
             */
    
            /**
             * Constructs a new Emoticon.
             * @memberof CPlayer_GetEmoticonList_Response
             * @classdesc Represents an Emoticon.
             * @implements IEmoticon
             * @constructor
             * @param {CPlayer_GetEmoticonList_Response.IEmoticon=} [properties] Properties to set
             */
            function Emoticon(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Emoticon name.
             * @member {string} name
             * @memberof CPlayer_GetEmoticonList_Response.Emoticon
             * @instance
             */
            Emoticon.prototype.name = "";
    
            /**
             * Emoticon count.
             * @member {number} count
             * @memberof CPlayer_GetEmoticonList_Response.Emoticon
             * @instance
             */
            Emoticon.prototype.count = 0;
    
            /**
             * Emoticon time_last_used.
             * @member {number} time_last_used
             * @memberof CPlayer_GetEmoticonList_Response.Emoticon
             * @instance
             */
            Emoticon.prototype.time_last_used = 0;
    
            /**
             * Emoticon use_count.
             * @member {number} use_count
             * @memberof CPlayer_GetEmoticonList_Response.Emoticon
             * @instance
             */
            Emoticon.prototype.use_count = 0;
    
            /**
             * Emoticon time_received.
             * @member {number} time_received
             * @memberof CPlayer_GetEmoticonList_Response.Emoticon
             * @instance
             */
            Emoticon.prototype.time_received = 0;
    
            /**
             * Creates a new Emoticon instance using the specified properties.
             * @function create
             * @memberof CPlayer_GetEmoticonList_Response.Emoticon
             * @static
             * @param {CPlayer_GetEmoticonList_Response.IEmoticon=} [properties] Properties to set
             * @returns {CPlayer_GetEmoticonList_Response.Emoticon} Emoticon instance
             */
            Emoticon.create = function create(properties) {
                return new Emoticon(properties);
            };
    
            /**
             * Encodes the specified Emoticon message. Does not implicitly {@link CPlayer_GetEmoticonList_Response.Emoticon.verify|verify} messages.
             * @function encode
             * @memberof CPlayer_GetEmoticonList_Response.Emoticon
             * @static
             * @param {CPlayer_GetEmoticonList_Response.IEmoticon} message Emoticon message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Emoticon.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.count != null && Object.hasOwnProperty.call(message, "count"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.count);
                if (message.time_last_used != null && Object.hasOwnProperty.call(message, "time_last_used"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.time_last_used);
                if (message.use_count != null && Object.hasOwnProperty.call(message, "use_count"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.use_count);
                if (message.time_received != null && Object.hasOwnProperty.call(message, "time_received"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.time_received);
                return writer;
            };
    
            /**
             * Encodes the specified Emoticon message, length delimited. Does not implicitly {@link CPlayer_GetEmoticonList_Response.Emoticon.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CPlayer_GetEmoticonList_Response.Emoticon
             * @static
             * @param {CPlayer_GetEmoticonList_Response.IEmoticon} message Emoticon message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Emoticon.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an Emoticon message from the specified reader or buffer.
             * @function decode
             * @memberof CPlayer_GetEmoticonList_Response.Emoticon
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CPlayer_GetEmoticonList_Response.Emoticon} Emoticon
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Emoticon.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetEmoticonList_Response.Emoticon();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.count = reader.int32();
                        break;
                    case 3:
                        message.time_last_used = reader.uint32();
                        break;
                    case 4:
                        message.use_count = reader.uint32();
                        break;
                    case 5:
                        message.time_received = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an Emoticon message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CPlayer_GetEmoticonList_Response.Emoticon
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CPlayer_GetEmoticonList_Response.Emoticon} Emoticon
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Emoticon.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an Emoticon message.
             * @function verify
             * @memberof CPlayer_GetEmoticonList_Response.Emoticon
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Emoticon.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.count != null && message.hasOwnProperty("count"))
                    if (!$util.isInteger(message.count))
                        return "count: integer expected";
                if (message.time_last_used != null && message.hasOwnProperty("time_last_used"))
                    if (!$util.isInteger(message.time_last_used))
                        return "time_last_used: integer expected";
                if (message.use_count != null && message.hasOwnProperty("use_count"))
                    if (!$util.isInteger(message.use_count))
                        return "use_count: integer expected";
                if (message.time_received != null && message.hasOwnProperty("time_received"))
                    if (!$util.isInteger(message.time_received))
                        return "time_received: integer expected";
                return null;
            };
    
            /**
             * Creates an Emoticon message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CPlayer_GetEmoticonList_Response.Emoticon
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CPlayer_GetEmoticonList_Response.Emoticon} Emoticon
             */
            Emoticon.fromObject = function fromObject(object) {
                if (object instanceof $root.CPlayer_GetEmoticonList_Response.Emoticon)
                    return object;
                var message = new $root.CPlayer_GetEmoticonList_Response.Emoticon();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.count != null)
                    message.count = object.count | 0;
                if (object.time_last_used != null)
                    message.time_last_used = object.time_last_used >>> 0;
                if (object.use_count != null)
                    message.use_count = object.use_count >>> 0;
                if (object.time_received != null)
                    message.time_received = object.time_received >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from an Emoticon message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CPlayer_GetEmoticonList_Response.Emoticon
             * @static
             * @param {CPlayer_GetEmoticonList_Response.Emoticon} message Emoticon
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Emoticon.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    object.count = 0;
                    object.time_last_used = 0;
                    object.use_count = 0;
                    object.time_received = 0;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.count != null && message.hasOwnProperty("count"))
                    object.count = message.count;
                if (message.time_last_used != null && message.hasOwnProperty("time_last_used"))
                    object.time_last_used = message.time_last_used;
                if (message.use_count != null && message.hasOwnProperty("use_count"))
                    object.use_count = message.use_count;
                if (message.time_received != null && message.hasOwnProperty("time_received"))
                    object.time_received = message.time_received;
                return object;
            };
    
            /**
             * Converts this Emoticon to JSON.
             * @function toJSON
             * @memberof CPlayer_GetEmoticonList_Response.Emoticon
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Emoticon.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Emoticon;
        })();
    
        return CPlayer_GetEmoticonList_Response;
    })();
    
    $root.CPlayer_GetAchievementsProgress_Request = (function() {
    
        /**
         * Properties of a CPlayer_GetAchievementsProgress_Request.
         * @exports ICPlayer_GetAchievementsProgress_Request
         * @interface ICPlayer_GetAchievementsProgress_Request
         * @property {number|Long|null} [steamid] CPlayer_GetAchievementsProgress_Request steamid
         * @property {string|null} [language] CPlayer_GetAchievementsProgress_Request language
         * @property {Array.<number>|null} [appids] CPlayer_GetAchievementsProgress_Request appids
         */
    
        /**
         * Constructs a new CPlayer_GetAchievementsProgress_Request.
         * @exports CPlayer_GetAchievementsProgress_Request
         * @classdesc Represents a CPlayer_GetAchievementsProgress_Request.
         * @implements ICPlayer_GetAchievementsProgress_Request
         * @constructor
         * @param {ICPlayer_GetAchievementsProgress_Request=} [properties] Properties to set
         */
        function CPlayer_GetAchievementsProgress_Request(properties) {
            this.appids = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetAchievementsProgress_Request steamid.
         * @member {number|Long} steamid
         * @memberof CPlayer_GetAchievementsProgress_Request
         * @instance
         */
        CPlayer_GetAchievementsProgress_Request.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CPlayer_GetAchievementsProgress_Request language.
         * @member {string} language
         * @memberof CPlayer_GetAchievementsProgress_Request
         * @instance
         */
        CPlayer_GetAchievementsProgress_Request.prototype.language = "";
    
        /**
         * CPlayer_GetAchievementsProgress_Request appids.
         * @member {Array.<number>} appids
         * @memberof CPlayer_GetAchievementsProgress_Request
         * @instance
         */
        CPlayer_GetAchievementsProgress_Request.prototype.appids = $util.emptyArray;
    
        /**
         * Creates a new CPlayer_GetAchievementsProgress_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetAchievementsProgress_Request
         * @static
         * @param {ICPlayer_GetAchievementsProgress_Request=} [properties] Properties to set
         * @returns {CPlayer_GetAchievementsProgress_Request} CPlayer_GetAchievementsProgress_Request instance
         */
        CPlayer_GetAchievementsProgress_Request.create = function create(properties) {
            return new CPlayer_GetAchievementsProgress_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetAchievementsProgress_Request message. Does not implicitly {@link CPlayer_GetAchievementsProgress_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetAchievementsProgress_Request
         * @static
         * @param {ICPlayer_GetAchievementsProgress_Request} message CPlayer_GetAchievementsProgress_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetAchievementsProgress_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid != null && Object.hasOwnProperty.call(message, "steamid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.steamid);
            if (message.language != null && Object.hasOwnProperty.call(message, "language"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.language);
            if (message.appids != null && message.appids.length)
                for (var i = 0; i < message.appids.length; ++i)
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.appids[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetAchievementsProgress_Request message, length delimited. Does not implicitly {@link CPlayer_GetAchievementsProgress_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetAchievementsProgress_Request
         * @static
         * @param {ICPlayer_GetAchievementsProgress_Request} message CPlayer_GetAchievementsProgress_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetAchievementsProgress_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetAchievementsProgress_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetAchievementsProgress_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetAchievementsProgress_Request} CPlayer_GetAchievementsProgress_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetAchievementsProgress_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetAchievementsProgress_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid = reader.uint64();
                    break;
                case 2:
                    message.language = reader.string();
                    break;
                case 3:
                    if (!(message.appids && message.appids.length))
                        message.appids = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.appids.push(reader.uint32());
                    } else
                        message.appids.push(reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetAchievementsProgress_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetAchievementsProgress_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetAchievementsProgress_Request} CPlayer_GetAchievementsProgress_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetAchievementsProgress_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetAchievementsProgress_Request message.
         * @function verify
         * @memberof CPlayer_GetAchievementsProgress_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetAchievementsProgress_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            if (message.language != null && message.hasOwnProperty("language"))
                if (!$util.isString(message.language))
                    return "language: string expected";
            if (message.appids != null && message.hasOwnProperty("appids")) {
                if (!Array.isArray(message.appids))
                    return "appids: array expected";
                for (var i = 0; i < message.appids.length; ++i)
                    if (!$util.isInteger(message.appids[i]))
                        return "appids: integer[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CPlayer_GetAchievementsProgress_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetAchievementsProgress_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetAchievementsProgress_Request} CPlayer_GetAchievementsProgress_Request
         */
        CPlayer_GetAchievementsProgress_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetAchievementsProgress_Request)
                return object;
            var message = new $root.CPlayer_GetAchievementsProgress_Request();
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = true;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber(true);
            if (object.language != null)
                message.language = String(object.language);
            if (object.appids) {
                if (!Array.isArray(object.appids))
                    throw TypeError(".CPlayer_GetAchievementsProgress_Request.appids: array expected");
                message.appids = [];
                for (var i = 0; i < object.appids.length; ++i)
                    message.appids[i] = object.appids[i] >>> 0;
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetAchievementsProgress_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetAchievementsProgress_Request
         * @static
         * @param {CPlayer_GetAchievementsProgress_Request} message CPlayer_GetAchievementsProgress_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetAchievementsProgress_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.appids = [];
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
                object.language = "";
            }
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber(true) : message.steamid;
            if (message.language != null && message.hasOwnProperty("language"))
                object.language = message.language;
            if (message.appids && message.appids.length) {
                object.appids = [];
                for (var j = 0; j < message.appids.length; ++j)
                    object.appids[j] = message.appids[j];
            }
            return object;
        };
    
        /**
         * Converts this CPlayer_GetAchievementsProgress_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_GetAchievementsProgress_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetAchievementsProgress_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetAchievementsProgress_Request;
    })();
    
    $root.CPlayer_GetAchievementsProgress_Response = (function() {
    
        /**
         * Properties of a CPlayer_GetAchievementsProgress_Response.
         * @exports ICPlayer_GetAchievementsProgress_Response
         * @interface ICPlayer_GetAchievementsProgress_Response
         * @property {Array.<CPlayer_GetAchievementsProgress_Response.IAchievementProgress>|null} [achievement_progress] CPlayer_GetAchievementsProgress_Response achievement_progress
         */
    
        /**
         * Constructs a new CPlayer_GetAchievementsProgress_Response.
         * @exports CPlayer_GetAchievementsProgress_Response
         * @classdesc Represents a CPlayer_GetAchievementsProgress_Response.
         * @implements ICPlayer_GetAchievementsProgress_Response
         * @constructor
         * @param {ICPlayer_GetAchievementsProgress_Response=} [properties] Properties to set
         */
        function CPlayer_GetAchievementsProgress_Response(properties) {
            this.achievement_progress = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetAchievementsProgress_Response achievement_progress.
         * @member {Array.<CPlayer_GetAchievementsProgress_Response.IAchievementProgress>} achievement_progress
         * @memberof CPlayer_GetAchievementsProgress_Response
         * @instance
         */
        CPlayer_GetAchievementsProgress_Response.prototype.achievement_progress = $util.emptyArray;
    
        /**
         * Creates a new CPlayer_GetAchievementsProgress_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetAchievementsProgress_Response
         * @static
         * @param {ICPlayer_GetAchievementsProgress_Response=} [properties] Properties to set
         * @returns {CPlayer_GetAchievementsProgress_Response} CPlayer_GetAchievementsProgress_Response instance
         */
        CPlayer_GetAchievementsProgress_Response.create = function create(properties) {
            return new CPlayer_GetAchievementsProgress_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetAchievementsProgress_Response message. Does not implicitly {@link CPlayer_GetAchievementsProgress_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetAchievementsProgress_Response
         * @static
         * @param {ICPlayer_GetAchievementsProgress_Response} message CPlayer_GetAchievementsProgress_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetAchievementsProgress_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.achievement_progress != null && message.achievement_progress.length)
                for (var i = 0; i < message.achievement_progress.length; ++i)
                    $root.CPlayer_GetAchievementsProgress_Response.AchievementProgress.encode(message.achievement_progress[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetAchievementsProgress_Response message, length delimited. Does not implicitly {@link CPlayer_GetAchievementsProgress_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetAchievementsProgress_Response
         * @static
         * @param {ICPlayer_GetAchievementsProgress_Response} message CPlayer_GetAchievementsProgress_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetAchievementsProgress_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetAchievementsProgress_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetAchievementsProgress_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetAchievementsProgress_Response} CPlayer_GetAchievementsProgress_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetAchievementsProgress_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetAchievementsProgress_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.achievement_progress && message.achievement_progress.length))
                        message.achievement_progress = [];
                    message.achievement_progress.push($root.CPlayer_GetAchievementsProgress_Response.AchievementProgress.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetAchievementsProgress_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetAchievementsProgress_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetAchievementsProgress_Response} CPlayer_GetAchievementsProgress_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetAchievementsProgress_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetAchievementsProgress_Response message.
         * @function verify
         * @memberof CPlayer_GetAchievementsProgress_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetAchievementsProgress_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.achievement_progress != null && message.hasOwnProperty("achievement_progress")) {
                if (!Array.isArray(message.achievement_progress))
                    return "achievement_progress: array expected";
                for (var i = 0; i < message.achievement_progress.length; ++i) {
                    var error = $root.CPlayer_GetAchievementsProgress_Response.AchievementProgress.verify(message.achievement_progress[i]);
                    if (error)
                        return "achievement_progress." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CPlayer_GetAchievementsProgress_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetAchievementsProgress_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetAchievementsProgress_Response} CPlayer_GetAchievementsProgress_Response
         */
        CPlayer_GetAchievementsProgress_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetAchievementsProgress_Response)
                return object;
            var message = new $root.CPlayer_GetAchievementsProgress_Response();
            if (object.achievement_progress) {
                if (!Array.isArray(object.achievement_progress))
                    throw TypeError(".CPlayer_GetAchievementsProgress_Response.achievement_progress: array expected");
                message.achievement_progress = [];
                for (var i = 0; i < object.achievement_progress.length; ++i) {
                    if (typeof object.achievement_progress[i] !== "object")
                        throw TypeError(".CPlayer_GetAchievementsProgress_Response.achievement_progress: object expected");
                    message.achievement_progress[i] = $root.CPlayer_GetAchievementsProgress_Response.AchievementProgress.fromObject(object.achievement_progress[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetAchievementsProgress_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetAchievementsProgress_Response
         * @static
         * @param {CPlayer_GetAchievementsProgress_Response} message CPlayer_GetAchievementsProgress_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetAchievementsProgress_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.achievement_progress = [];
            if (message.achievement_progress && message.achievement_progress.length) {
                object.achievement_progress = [];
                for (var j = 0; j < message.achievement_progress.length; ++j)
                    object.achievement_progress[j] = $root.CPlayer_GetAchievementsProgress_Response.AchievementProgress.toObject(message.achievement_progress[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CPlayer_GetAchievementsProgress_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_GetAchievementsProgress_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetAchievementsProgress_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CPlayer_GetAchievementsProgress_Response.AchievementProgress = (function() {
    
            /**
             * Properties of an AchievementProgress.
             * @memberof CPlayer_GetAchievementsProgress_Response
             * @interface IAchievementProgress
             * @property {number|null} [appid] AchievementProgress appid
             * @property {number|null} [unlocked] AchievementProgress unlocked
             * @property {number|null} [total] AchievementProgress total
             * @property {number|null} [percentage] AchievementProgress percentage
             * @property {boolean|null} [all_unlocked] AchievementProgress all_unlocked
             * @property {number|null} [cache_time] AchievementProgress cache_time
             */
    
            /**
             * Constructs a new AchievementProgress.
             * @memberof CPlayer_GetAchievementsProgress_Response
             * @classdesc Represents an AchievementProgress.
             * @implements IAchievementProgress
             * @constructor
             * @param {CPlayer_GetAchievementsProgress_Response.IAchievementProgress=} [properties] Properties to set
             */
            function AchievementProgress(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * AchievementProgress appid.
             * @member {number} appid
             * @memberof CPlayer_GetAchievementsProgress_Response.AchievementProgress
             * @instance
             */
            AchievementProgress.prototype.appid = 0;
    
            /**
             * AchievementProgress unlocked.
             * @member {number} unlocked
             * @memberof CPlayer_GetAchievementsProgress_Response.AchievementProgress
             * @instance
             */
            AchievementProgress.prototype.unlocked = 0;
    
            /**
             * AchievementProgress total.
             * @member {number} total
             * @memberof CPlayer_GetAchievementsProgress_Response.AchievementProgress
             * @instance
             */
            AchievementProgress.prototype.total = 0;
    
            /**
             * AchievementProgress percentage.
             * @member {number} percentage
             * @memberof CPlayer_GetAchievementsProgress_Response.AchievementProgress
             * @instance
             */
            AchievementProgress.prototype.percentage = 0;
    
            /**
             * AchievementProgress all_unlocked.
             * @member {boolean} all_unlocked
             * @memberof CPlayer_GetAchievementsProgress_Response.AchievementProgress
             * @instance
             */
            AchievementProgress.prototype.all_unlocked = false;
    
            /**
             * AchievementProgress cache_time.
             * @member {number} cache_time
             * @memberof CPlayer_GetAchievementsProgress_Response.AchievementProgress
             * @instance
             */
            AchievementProgress.prototype.cache_time = 0;
    
            /**
             * Creates a new AchievementProgress instance using the specified properties.
             * @function create
             * @memberof CPlayer_GetAchievementsProgress_Response.AchievementProgress
             * @static
             * @param {CPlayer_GetAchievementsProgress_Response.IAchievementProgress=} [properties] Properties to set
             * @returns {CPlayer_GetAchievementsProgress_Response.AchievementProgress} AchievementProgress instance
             */
            AchievementProgress.create = function create(properties) {
                return new AchievementProgress(properties);
            };
    
            /**
             * Encodes the specified AchievementProgress message. Does not implicitly {@link CPlayer_GetAchievementsProgress_Response.AchievementProgress.verify|verify} messages.
             * @function encode
             * @memberof CPlayer_GetAchievementsProgress_Response.AchievementProgress
             * @static
             * @param {CPlayer_GetAchievementsProgress_Response.IAchievementProgress} message AchievementProgress message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AchievementProgress.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.appid != null && Object.hasOwnProperty.call(message, "appid"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
                if (message.unlocked != null && Object.hasOwnProperty.call(message, "unlocked"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.unlocked);
                if (message.total != null && Object.hasOwnProperty.call(message, "total"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.total);
                if (message.percentage != null && Object.hasOwnProperty.call(message, "percentage"))
                    writer.uint32(/* id 4, wireType 5 =*/37).float(message.percentage);
                if (message.all_unlocked != null && Object.hasOwnProperty.call(message, "all_unlocked"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.all_unlocked);
                if (message.cache_time != null && Object.hasOwnProperty.call(message, "cache_time"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.cache_time);
                return writer;
            };
    
            /**
             * Encodes the specified AchievementProgress message, length delimited. Does not implicitly {@link CPlayer_GetAchievementsProgress_Response.AchievementProgress.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CPlayer_GetAchievementsProgress_Response.AchievementProgress
             * @static
             * @param {CPlayer_GetAchievementsProgress_Response.IAchievementProgress} message AchievementProgress message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AchievementProgress.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an AchievementProgress message from the specified reader or buffer.
             * @function decode
             * @memberof CPlayer_GetAchievementsProgress_Response.AchievementProgress
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CPlayer_GetAchievementsProgress_Response.AchievementProgress} AchievementProgress
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AchievementProgress.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetAchievementsProgress_Response.AchievementProgress();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.appid = reader.uint32();
                        break;
                    case 2:
                        message.unlocked = reader.uint32();
                        break;
                    case 3:
                        message.total = reader.uint32();
                        break;
                    case 4:
                        message.percentage = reader.float();
                        break;
                    case 5:
                        message.all_unlocked = reader.bool();
                        break;
                    case 6:
                        message.cache_time = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an AchievementProgress message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CPlayer_GetAchievementsProgress_Response.AchievementProgress
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CPlayer_GetAchievementsProgress_Response.AchievementProgress} AchievementProgress
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AchievementProgress.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an AchievementProgress message.
             * @function verify
             * @memberof CPlayer_GetAchievementsProgress_Response.AchievementProgress
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AchievementProgress.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.appid != null && message.hasOwnProperty("appid"))
                    if (!$util.isInteger(message.appid))
                        return "appid: integer expected";
                if (message.unlocked != null && message.hasOwnProperty("unlocked"))
                    if (!$util.isInteger(message.unlocked))
                        return "unlocked: integer expected";
                if (message.total != null && message.hasOwnProperty("total"))
                    if (!$util.isInteger(message.total))
                        return "total: integer expected";
                if (message.percentage != null && message.hasOwnProperty("percentage"))
                    if (typeof message.percentage !== "number")
                        return "percentage: number expected";
                if (message.all_unlocked != null && message.hasOwnProperty("all_unlocked"))
                    if (typeof message.all_unlocked !== "boolean")
                        return "all_unlocked: boolean expected";
                if (message.cache_time != null && message.hasOwnProperty("cache_time"))
                    if (!$util.isInteger(message.cache_time))
                        return "cache_time: integer expected";
                return null;
            };
    
            /**
             * Creates an AchievementProgress message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CPlayer_GetAchievementsProgress_Response.AchievementProgress
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CPlayer_GetAchievementsProgress_Response.AchievementProgress} AchievementProgress
             */
            AchievementProgress.fromObject = function fromObject(object) {
                if (object instanceof $root.CPlayer_GetAchievementsProgress_Response.AchievementProgress)
                    return object;
                var message = new $root.CPlayer_GetAchievementsProgress_Response.AchievementProgress();
                if (object.appid != null)
                    message.appid = object.appid >>> 0;
                if (object.unlocked != null)
                    message.unlocked = object.unlocked >>> 0;
                if (object.total != null)
                    message.total = object.total >>> 0;
                if (object.percentage != null)
                    message.percentage = Number(object.percentage);
                if (object.all_unlocked != null)
                    message.all_unlocked = Boolean(object.all_unlocked);
                if (object.cache_time != null)
                    message.cache_time = object.cache_time >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from an AchievementProgress message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CPlayer_GetAchievementsProgress_Response.AchievementProgress
             * @static
             * @param {CPlayer_GetAchievementsProgress_Response.AchievementProgress} message AchievementProgress
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AchievementProgress.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.appid = 0;
                    object.unlocked = 0;
                    object.total = 0;
                    object.percentage = 0;
                    object.all_unlocked = false;
                    object.cache_time = 0;
                }
                if (message.appid != null && message.hasOwnProperty("appid"))
                    object.appid = message.appid;
                if (message.unlocked != null && message.hasOwnProperty("unlocked"))
                    object.unlocked = message.unlocked;
                if (message.total != null && message.hasOwnProperty("total"))
                    object.total = message.total;
                if (message.percentage != null && message.hasOwnProperty("percentage"))
                    object.percentage = options.json && !isFinite(message.percentage) ? String(message.percentage) : message.percentage;
                if (message.all_unlocked != null && message.hasOwnProperty("all_unlocked"))
                    object.all_unlocked = message.all_unlocked;
                if (message.cache_time != null && message.hasOwnProperty("cache_time"))
                    object.cache_time = message.cache_time;
                return object;
            };
    
            /**
             * Converts this AchievementProgress to JSON.
             * @function toJSON
             * @memberof CPlayer_GetAchievementsProgress_Response.AchievementProgress
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AchievementProgress.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return AchievementProgress;
        })();
    
        return CPlayer_GetAchievementsProgress_Response;
    })();
    
    $root.CPlayer_GetFavoriteBadge_Request = (function() {
    
        /**
         * Properties of a CPlayer_GetFavoriteBadge_Request.
         * @exports ICPlayer_GetFavoriteBadge_Request
         * @interface ICPlayer_GetFavoriteBadge_Request
         * @property {number|Long|null} [steamid] CPlayer_GetFavoriteBadge_Request steamid
         */
    
        /**
         * Constructs a new CPlayer_GetFavoriteBadge_Request.
         * @exports CPlayer_GetFavoriteBadge_Request
         * @classdesc Represents a CPlayer_GetFavoriteBadge_Request.
         * @implements ICPlayer_GetFavoriteBadge_Request
         * @constructor
         * @param {ICPlayer_GetFavoriteBadge_Request=} [properties] Properties to set
         */
        function CPlayer_GetFavoriteBadge_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetFavoriteBadge_Request steamid.
         * @member {number|Long} steamid
         * @memberof CPlayer_GetFavoriteBadge_Request
         * @instance
         */
        CPlayer_GetFavoriteBadge_Request.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CPlayer_GetFavoriteBadge_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetFavoriteBadge_Request
         * @static
         * @param {ICPlayer_GetFavoriteBadge_Request=} [properties] Properties to set
         * @returns {CPlayer_GetFavoriteBadge_Request} CPlayer_GetFavoriteBadge_Request instance
         */
        CPlayer_GetFavoriteBadge_Request.create = function create(properties) {
            return new CPlayer_GetFavoriteBadge_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetFavoriteBadge_Request message. Does not implicitly {@link CPlayer_GetFavoriteBadge_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetFavoriteBadge_Request
         * @static
         * @param {ICPlayer_GetFavoriteBadge_Request} message CPlayer_GetFavoriteBadge_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetFavoriteBadge_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid != null && Object.hasOwnProperty.call(message, "steamid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.steamid);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetFavoriteBadge_Request message, length delimited. Does not implicitly {@link CPlayer_GetFavoriteBadge_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetFavoriteBadge_Request
         * @static
         * @param {ICPlayer_GetFavoriteBadge_Request} message CPlayer_GetFavoriteBadge_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetFavoriteBadge_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetFavoriteBadge_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetFavoriteBadge_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetFavoriteBadge_Request} CPlayer_GetFavoriteBadge_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetFavoriteBadge_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetFavoriteBadge_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetFavoriteBadge_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetFavoriteBadge_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetFavoriteBadge_Request} CPlayer_GetFavoriteBadge_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetFavoriteBadge_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetFavoriteBadge_Request message.
         * @function verify
         * @memberof CPlayer_GetFavoriteBadge_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetFavoriteBadge_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_GetFavoriteBadge_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetFavoriteBadge_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetFavoriteBadge_Request} CPlayer_GetFavoriteBadge_Request
         */
        CPlayer_GetFavoriteBadge_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetFavoriteBadge_Request)
                return object;
            var message = new $root.CPlayer_GetFavoriteBadge_Request();
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = true;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetFavoriteBadge_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetFavoriteBadge_Request
         * @static
         * @param {CPlayer_GetFavoriteBadge_Request} message CPlayer_GetFavoriteBadge_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetFavoriteBadge_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber(true) : message.steamid;
            return object;
        };
    
        /**
         * Converts this CPlayer_GetFavoriteBadge_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_GetFavoriteBadge_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetFavoriteBadge_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetFavoriteBadge_Request;
    })();
    
    $root.CPlayer_GetFavoriteBadge_Response = (function() {
    
        /**
         * Properties of a CPlayer_GetFavoriteBadge_Response.
         * @exports ICPlayer_GetFavoriteBadge_Response
         * @interface ICPlayer_GetFavoriteBadge_Response
         * @property {boolean|null} [has_favorite_badge] CPlayer_GetFavoriteBadge_Response has_favorite_badge
         * @property {number|null} [badgeid] CPlayer_GetFavoriteBadge_Response badgeid
         * @property {number|Long|null} [communityitemid] CPlayer_GetFavoriteBadge_Response communityitemid
         * @property {number|null} [item_type] CPlayer_GetFavoriteBadge_Response item_type
         * @property {number|null} [border_color] CPlayer_GetFavoriteBadge_Response border_color
         * @property {number|null} [appid] CPlayer_GetFavoriteBadge_Response appid
         * @property {number|null} [level] CPlayer_GetFavoriteBadge_Response level
         */
    
        /**
         * Constructs a new CPlayer_GetFavoriteBadge_Response.
         * @exports CPlayer_GetFavoriteBadge_Response
         * @classdesc Represents a CPlayer_GetFavoriteBadge_Response.
         * @implements ICPlayer_GetFavoriteBadge_Response
         * @constructor
         * @param {ICPlayer_GetFavoriteBadge_Response=} [properties] Properties to set
         */
        function CPlayer_GetFavoriteBadge_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetFavoriteBadge_Response has_favorite_badge.
         * @member {boolean} has_favorite_badge
         * @memberof CPlayer_GetFavoriteBadge_Response
         * @instance
         */
        CPlayer_GetFavoriteBadge_Response.prototype.has_favorite_badge = false;
    
        /**
         * CPlayer_GetFavoriteBadge_Response badgeid.
         * @member {number} badgeid
         * @memberof CPlayer_GetFavoriteBadge_Response
         * @instance
         */
        CPlayer_GetFavoriteBadge_Response.prototype.badgeid = 0;
    
        /**
         * CPlayer_GetFavoriteBadge_Response communityitemid.
         * @member {number|Long} communityitemid
         * @memberof CPlayer_GetFavoriteBadge_Response
         * @instance
         */
        CPlayer_GetFavoriteBadge_Response.prototype.communityitemid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CPlayer_GetFavoriteBadge_Response item_type.
         * @member {number} item_type
         * @memberof CPlayer_GetFavoriteBadge_Response
         * @instance
         */
        CPlayer_GetFavoriteBadge_Response.prototype.item_type = 0;
    
        /**
         * CPlayer_GetFavoriteBadge_Response border_color.
         * @member {number} border_color
         * @memberof CPlayer_GetFavoriteBadge_Response
         * @instance
         */
        CPlayer_GetFavoriteBadge_Response.prototype.border_color = 0;
    
        /**
         * CPlayer_GetFavoriteBadge_Response appid.
         * @member {number} appid
         * @memberof CPlayer_GetFavoriteBadge_Response
         * @instance
         */
        CPlayer_GetFavoriteBadge_Response.prototype.appid = 0;
    
        /**
         * CPlayer_GetFavoriteBadge_Response level.
         * @member {number} level
         * @memberof CPlayer_GetFavoriteBadge_Response
         * @instance
         */
        CPlayer_GetFavoriteBadge_Response.prototype.level = 0;
    
        /**
         * Creates a new CPlayer_GetFavoriteBadge_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetFavoriteBadge_Response
         * @static
         * @param {ICPlayer_GetFavoriteBadge_Response=} [properties] Properties to set
         * @returns {CPlayer_GetFavoriteBadge_Response} CPlayer_GetFavoriteBadge_Response instance
         */
        CPlayer_GetFavoriteBadge_Response.create = function create(properties) {
            return new CPlayer_GetFavoriteBadge_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetFavoriteBadge_Response message. Does not implicitly {@link CPlayer_GetFavoriteBadge_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetFavoriteBadge_Response
         * @static
         * @param {ICPlayer_GetFavoriteBadge_Response} message CPlayer_GetFavoriteBadge_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetFavoriteBadge_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.has_favorite_badge != null && Object.hasOwnProperty.call(message, "has_favorite_badge"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.has_favorite_badge);
            if (message.badgeid != null && Object.hasOwnProperty.call(message, "badgeid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.badgeid);
            if (message.communityitemid != null && Object.hasOwnProperty.call(message, "communityitemid"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.communityitemid);
            if (message.item_type != null && Object.hasOwnProperty.call(message, "item_type"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.item_type);
            if (message.border_color != null && Object.hasOwnProperty.call(message, "border_color"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.border_color);
            if (message.appid != null && Object.hasOwnProperty.call(message, "appid"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.appid);
            if (message.level != null && Object.hasOwnProperty.call(message, "level"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.level);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetFavoriteBadge_Response message, length delimited. Does not implicitly {@link CPlayer_GetFavoriteBadge_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetFavoriteBadge_Response
         * @static
         * @param {ICPlayer_GetFavoriteBadge_Response} message CPlayer_GetFavoriteBadge_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetFavoriteBadge_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetFavoriteBadge_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetFavoriteBadge_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetFavoriteBadge_Response} CPlayer_GetFavoriteBadge_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetFavoriteBadge_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetFavoriteBadge_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.has_favorite_badge = reader.bool();
                    break;
                case 2:
                    message.badgeid = reader.uint32();
                    break;
                case 3:
                    message.communityitemid = reader.uint64();
                    break;
                case 4:
                    message.item_type = reader.uint32();
                    break;
                case 5:
                    message.border_color = reader.uint32();
                    break;
                case 6:
                    message.appid = reader.uint32();
                    break;
                case 7:
                    message.level = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetFavoriteBadge_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetFavoriteBadge_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetFavoriteBadge_Response} CPlayer_GetFavoriteBadge_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetFavoriteBadge_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetFavoriteBadge_Response message.
         * @function verify
         * @memberof CPlayer_GetFavoriteBadge_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetFavoriteBadge_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.has_favorite_badge != null && message.hasOwnProperty("has_favorite_badge"))
                if (typeof message.has_favorite_badge !== "boolean")
                    return "has_favorite_badge: boolean expected";
            if (message.badgeid != null && message.hasOwnProperty("badgeid"))
                if (!$util.isInteger(message.badgeid))
                    return "badgeid: integer expected";
            if (message.communityitemid != null && message.hasOwnProperty("communityitemid"))
                if (!$util.isInteger(message.communityitemid) && !(message.communityitemid && $util.isInteger(message.communityitemid.low) && $util.isInteger(message.communityitemid.high)))
                    return "communityitemid: integer|Long expected";
            if (message.item_type != null && message.hasOwnProperty("item_type"))
                if (!$util.isInteger(message.item_type))
                    return "item_type: integer expected";
            if (message.border_color != null && message.hasOwnProperty("border_color"))
                if (!$util.isInteger(message.border_color))
                    return "border_color: integer expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.level != null && message.hasOwnProperty("level"))
                if (!$util.isInteger(message.level))
                    return "level: integer expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_GetFavoriteBadge_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetFavoriteBadge_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetFavoriteBadge_Response} CPlayer_GetFavoriteBadge_Response
         */
        CPlayer_GetFavoriteBadge_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetFavoriteBadge_Response)
                return object;
            var message = new $root.CPlayer_GetFavoriteBadge_Response();
            if (object.has_favorite_badge != null)
                message.has_favorite_badge = Boolean(object.has_favorite_badge);
            if (object.badgeid != null)
                message.badgeid = object.badgeid >>> 0;
            if (object.communityitemid != null)
                if ($util.Long)
                    (message.communityitemid = $util.Long.fromValue(object.communityitemid)).unsigned = true;
                else if (typeof object.communityitemid === "string")
                    message.communityitemid = parseInt(object.communityitemid, 10);
                else if (typeof object.communityitemid === "number")
                    message.communityitemid = object.communityitemid;
                else if (typeof object.communityitemid === "object")
                    message.communityitemid = new $util.LongBits(object.communityitemid.low >>> 0, object.communityitemid.high >>> 0).toNumber(true);
            if (object.item_type != null)
                message.item_type = object.item_type >>> 0;
            if (object.border_color != null)
                message.border_color = object.border_color >>> 0;
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.level != null)
                message.level = object.level >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetFavoriteBadge_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetFavoriteBadge_Response
         * @static
         * @param {CPlayer_GetFavoriteBadge_Response} message CPlayer_GetFavoriteBadge_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetFavoriteBadge_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.has_favorite_badge = false;
                object.badgeid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.communityitemid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.communityitemid = options.longs === String ? "0" : 0;
                object.item_type = 0;
                object.border_color = 0;
                object.appid = 0;
                object.level = 0;
            }
            if (message.has_favorite_badge != null && message.hasOwnProperty("has_favorite_badge"))
                object.has_favorite_badge = message.has_favorite_badge;
            if (message.badgeid != null && message.hasOwnProperty("badgeid"))
                object.badgeid = message.badgeid;
            if (message.communityitemid != null && message.hasOwnProperty("communityitemid"))
                if (typeof message.communityitemid === "number")
                    object.communityitemid = options.longs === String ? String(message.communityitemid) : message.communityitemid;
                else
                    object.communityitemid = options.longs === String ? $util.Long.prototype.toString.call(message.communityitemid) : options.longs === Number ? new $util.LongBits(message.communityitemid.low >>> 0, message.communityitemid.high >>> 0).toNumber(true) : message.communityitemid;
            if (message.item_type != null && message.hasOwnProperty("item_type"))
                object.item_type = message.item_type;
            if (message.border_color != null && message.hasOwnProperty("border_color"))
                object.border_color = message.border_color;
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.level != null && message.hasOwnProperty("level"))
                object.level = message.level;
            return object;
        };
    
        /**
         * Converts this CPlayer_GetFavoriteBadge_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_GetFavoriteBadge_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetFavoriteBadge_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetFavoriteBadge_Response;
    })();
    
    $root.CPlayer_SetFavoriteBadge_Request = (function() {
    
        /**
         * Properties of a CPlayer_SetFavoriteBadge_Request.
         * @exports ICPlayer_SetFavoriteBadge_Request
         * @interface ICPlayer_SetFavoriteBadge_Request
         * @property {number|Long|null} [communityitemid] CPlayer_SetFavoriteBadge_Request communityitemid
         * @property {number|null} [badgeid] CPlayer_SetFavoriteBadge_Request badgeid
         */
    
        /**
         * Constructs a new CPlayer_SetFavoriteBadge_Request.
         * @exports CPlayer_SetFavoriteBadge_Request
         * @classdesc Represents a CPlayer_SetFavoriteBadge_Request.
         * @implements ICPlayer_SetFavoriteBadge_Request
         * @constructor
         * @param {ICPlayer_SetFavoriteBadge_Request=} [properties] Properties to set
         */
        function CPlayer_SetFavoriteBadge_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_SetFavoriteBadge_Request communityitemid.
         * @member {number|Long} communityitemid
         * @memberof CPlayer_SetFavoriteBadge_Request
         * @instance
         */
        CPlayer_SetFavoriteBadge_Request.prototype.communityitemid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CPlayer_SetFavoriteBadge_Request badgeid.
         * @member {number} badgeid
         * @memberof CPlayer_SetFavoriteBadge_Request
         * @instance
         */
        CPlayer_SetFavoriteBadge_Request.prototype.badgeid = 0;
    
        /**
         * Creates a new CPlayer_SetFavoriteBadge_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_SetFavoriteBadge_Request
         * @static
         * @param {ICPlayer_SetFavoriteBadge_Request=} [properties] Properties to set
         * @returns {CPlayer_SetFavoriteBadge_Request} CPlayer_SetFavoriteBadge_Request instance
         */
        CPlayer_SetFavoriteBadge_Request.create = function create(properties) {
            return new CPlayer_SetFavoriteBadge_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_SetFavoriteBadge_Request message. Does not implicitly {@link CPlayer_SetFavoriteBadge_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_SetFavoriteBadge_Request
         * @static
         * @param {ICPlayer_SetFavoriteBadge_Request} message CPlayer_SetFavoriteBadge_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetFavoriteBadge_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.communityitemid != null && Object.hasOwnProperty.call(message, "communityitemid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.communityitemid);
            if (message.badgeid != null && Object.hasOwnProperty.call(message, "badgeid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.badgeid);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_SetFavoriteBadge_Request message, length delimited. Does not implicitly {@link CPlayer_SetFavoriteBadge_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_SetFavoriteBadge_Request
         * @static
         * @param {ICPlayer_SetFavoriteBadge_Request} message CPlayer_SetFavoriteBadge_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetFavoriteBadge_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_SetFavoriteBadge_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_SetFavoriteBadge_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_SetFavoriteBadge_Request} CPlayer_SetFavoriteBadge_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetFavoriteBadge_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_SetFavoriteBadge_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.communityitemid = reader.uint64();
                    break;
                case 2:
                    message.badgeid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_SetFavoriteBadge_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_SetFavoriteBadge_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_SetFavoriteBadge_Request} CPlayer_SetFavoriteBadge_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetFavoriteBadge_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_SetFavoriteBadge_Request message.
         * @function verify
         * @memberof CPlayer_SetFavoriteBadge_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_SetFavoriteBadge_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.communityitemid != null && message.hasOwnProperty("communityitemid"))
                if (!$util.isInteger(message.communityitemid) && !(message.communityitemid && $util.isInteger(message.communityitemid.low) && $util.isInteger(message.communityitemid.high)))
                    return "communityitemid: integer|Long expected";
            if (message.badgeid != null && message.hasOwnProperty("badgeid"))
                if (!$util.isInteger(message.badgeid))
                    return "badgeid: integer expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_SetFavoriteBadge_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_SetFavoriteBadge_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_SetFavoriteBadge_Request} CPlayer_SetFavoriteBadge_Request
         */
        CPlayer_SetFavoriteBadge_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_SetFavoriteBadge_Request)
                return object;
            var message = new $root.CPlayer_SetFavoriteBadge_Request();
            if (object.communityitemid != null)
                if ($util.Long)
                    (message.communityitemid = $util.Long.fromValue(object.communityitemid)).unsigned = true;
                else if (typeof object.communityitemid === "string")
                    message.communityitemid = parseInt(object.communityitemid, 10);
                else if (typeof object.communityitemid === "number")
                    message.communityitemid = object.communityitemid;
                else if (typeof object.communityitemid === "object")
                    message.communityitemid = new $util.LongBits(object.communityitemid.low >>> 0, object.communityitemid.high >>> 0).toNumber(true);
            if (object.badgeid != null)
                message.badgeid = object.badgeid >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_SetFavoriteBadge_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_SetFavoriteBadge_Request
         * @static
         * @param {CPlayer_SetFavoriteBadge_Request} message CPlayer_SetFavoriteBadge_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_SetFavoriteBadge_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.communityitemid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.communityitemid = options.longs === String ? "0" : 0;
                object.badgeid = 0;
            }
            if (message.communityitemid != null && message.hasOwnProperty("communityitemid"))
                if (typeof message.communityitemid === "number")
                    object.communityitemid = options.longs === String ? String(message.communityitemid) : message.communityitemid;
                else
                    object.communityitemid = options.longs === String ? $util.Long.prototype.toString.call(message.communityitemid) : options.longs === Number ? new $util.LongBits(message.communityitemid.low >>> 0, message.communityitemid.high >>> 0).toNumber(true) : message.communityitemid;
            if (message.badgeid != null && message.hasOwnProperty("badgeid"))
                object.badgeid = message.badgeid;
            return object;
        };
    
        /**
         * Converts this CPlayer_SetFavoriteBadge_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_SetFavoriteBadge_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_SetFavoriteBadge_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_SetFavoriteBadge_Request;
    })();
    
    $root.CPlayer_SetFavoriteBadge_Response = (function() {
    
        /**
         * Properties of a CPlayer_SetFavoriteBadge_Response.
         * @exports ICPlayer_SetFavoriteBadge_Response
         * @interface ICPlayer_SetFavoriteBadge_Response
         */
    
        /**
         * Constructs a new CPlayer_SetFavoriteBadge_Response.
         * @exports CPlayer_SetFavoriteBadge_Response
         * @classdesc Represents a CPlayer_SetFavoriteBadge_Response.
         * @implements ICPlayer_SetFavoriteBadge_Response
         * @constructor
         * @param {ICPlayer_SetFavoriteBadge_Response=} [properties] Properties to set
         */
        function CPlayer_SetFavoriteBadge_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CPlayer_SetFavoriteBadge_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_SetFavoriteBadge_Response
         * @static
         * @param {ICPlayer_SetFavoriteBadge_Response=} [properties] Properties to set
         * @returns {CPlayer_SetFavoriteBadge_Response} CPlayer_SetFavoriteBadge_Response instance
         */
        CPlayer_SetFavoriteBadge_Response.create = function create(properties) {
            return new CPlayer_SetFavoriteBadge_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_SetFavoriteBadge_Response message. Does not implicitly {@link CPlayer_SetFavoriteBadge_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_SetFavoriteBadge_Response
         * @static
         * @param {ICPlayer_SetFavoriteBadge_Response} message CPlayer_SetFavoriteBadge_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetFavoriteBadge_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_SetFavoriteBadge_Response message, length delimited. Does not implicitly {@link CPlayer_SetFavoriteBadge_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_SetFavoriteBadge_Response
         * @static
         * @param {ICPlayer_SetFavoriteBadge_Response} message CPlayer_SetFavoriteBadge_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetFavoriteBadge_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_SetFavoriteBadge_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_SetFavoriteBadge_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_SetFavoriteBadge_Response} CPlayer_SetFavoriteBadge_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetFavoriteBadge_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_SetFavoriteBadge_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_SetFavoriteBadge_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_SetFavoriteBadge_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_SetFavoriteBadge_Response} CPlayer_SetFavoriteBadge_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetFavoriteBadge_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_SetFavoriteBadge_Response message.
         * @function verify
         * @memberof CPlayer_SetFavoriteBadge_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_SetFavoriteBadge_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_SetFavoriteBadge_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_SetFavoriteBadge_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_SetFavoriteBadge_Response} CPlayer_SetFavoriteBadge_Response
         */
        CPlayer_SetFavoriteBadge_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_SetFavoriteBadge_Response)
                return object;
            return new $root.CPlayer_SetFavoriteBadge_Response();
        };
    
        /**
         * Creates a plain object from a CPlayer_SetFavoriteBadge_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_SetFavoriteBadge_Response
         * @static
         * @param {CPlayer_SetFavoriteBadge_Response} message CPlayer_SetFavoriteBadge_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_SetFavoriteBadge_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CPlayer_SetFavoriteBadge_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_SetFavoriteBadge_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_SetFavoriteBadge_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_SetFavoriteBadge_Response;
    })();
    
    $root.CPlayer_GetProfileCustomization_Request = (function() {
    
        /**
         * Properties of a CPlayer_GetProfileCustomization_Request.
         * @exports ICPlayer_GetProfileCustomization_Request
         * @interface ICPlayer_GetProfileCustomization_Request
         * @property {number|Long|null} [steamid] CPlayer_GetProfileCustomization_Request steamid
         * @property {boolean|null} [include_inactive_customizations] CPlayer_GetProfileCustomization_Request include_inactive_customizations
         */
    
        /**
         * Constructs a new CPlayer_GetProfileCustomization_Request.
         * @exports CPlayer_GetProfileCustomization_Request
         * @classdesc Represents a CPlayer_GetProfileCustomization_Request.
         * @implements ICPlayer_GetProfileCustomization_Request
         * @constructor
         * @param {ICPlayer_GetProfileCustomization_Request=} [properties] Properties to set
         */
        function CPlayer_GetProfileCustomization_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetProfileCustomization_Request steamid.
         * @member {number|Long} steamid
         * @memberof CPlayer_GetProfileCustomization_Request
         * @instance
         */
        CPlayer_GetProfileCustomization_Request.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CPlayer_GetProfileCustomization_Request include_inactive_customizations.
         * @member {boolean} include_inactive_customizations
         * @memberof CPlayer_GetProfileCustomization_Request
         * @instance
         */
        CPlayer_GetProfileCustomization_Request.prototype.include_inactive_customizations = false;
    
        /**
         * Creates a new CPlayer_GetProfileCustomization_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetProfileCustomization_Request
         * @static
         * @param {ICPlayer_GetProfileCustomization_Request=} [properties] Properties to set
         * @returns {CPlayer_GetProfileCustomization_Request} CPlayer_GetProfileCustomization_Request instance
         */
        CPlayer_GetProfileCustomization_Request.create = function create(properties) {
            return new CPlayer_GetProfileCustomization_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetProfileCustomization_Request message. Does not implicitly {@link CPlayer_GetProfileCustomization_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetProfileCustomization_Request
         * @static
         * @param {ICPlayer_GetProfileCustomization_Request} message CPlayer_GetProfileCustomization_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetProfileCustomization_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid != null && Object.hasOwnProperty.call(message, "steamid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
            if (message.include_inactive_customizations != null && Object.hasOwnProperty.call(message, "include_inactive_customizations"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.include_inactive_customizations);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetProfileCustomization_Request message, length delimited. Does not implicitly {@link CPlayer_GetProfileCustomization_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetProfileCustomization_Request
         * @static
         * @param {ICPlayer_GetProfileCustomization_Request} message CPlayer_GetProfileCustomization_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetProfileCustomization_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetProfileCustomization_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetProfileCustomization_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetProfileCustomization_Request} CPlayer_GetProfileCustomization_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetProfileCustomization_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetProfileCustomization_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid = reader.fixed64();
                    break;
                case 2:
                    message.include_inactive_customizations = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetProfileCustomization_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetProfileCustomization_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetProfileCustomization_Request} CPlayer_GetProfileCustomization_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetProfileCustomization_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetProfileCustomization_Request message.
         * @function verify
         * @memberof CPlayer_GetProfileCustomization_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetProfileCustomization_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            if (message.include_inactive_customizations != null && message.hasOwnProperty("include_inactive_customizations"))
                if (typeof message.include_inactive_customizations !== "boolean")
                    return "include_inactive_customizations: boolean expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_GetProfileCustomization_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetProfileCustomization_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetProfileCustomization_Request} CPlayer_GetProfileCustomization_Request
         */
        CPlayer_GetProfileCustomization_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetProfileCustomization_Request)
                return object;
            var message = new $root.CPlayer_GetProfileCustomization_Request();
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
            if (object.include_inactive_customizations != null)
                message.include_inactive_customizations = Boolean(object.include_inactive_customizations);
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetProfileCustomization_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetProfileCustomization_Request
         * @static
         * @param {CPlayer_GetProfileCustomization_Request} message CPlayer_GetProfileCustomization_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetProfileCustomization_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
                object.include_inactive_customizations = false;
            }
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
            if (message.include_inactive_customizations != null && message.hasOwnProperty("include_inactive_customizations"))
                object.include_inactive_customizations = message.include_inactive_customizations;
            return object;
        };
    
        /**
         * Converts this CPlayer_GetProfileCustomization_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_GetProfileCustomization_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetProfileCustomization_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetProfileCustomization_Request;
    })();
    
    $root.ProfileCustomizationSlot = (function() {
    
        /**
         * Properties of a ProfileCustomizationSlot.
         * @exports IProfileCustomizationSlot
         * @interface IProfileCustomizationSlot
         * @property {number|null} [slot] ProfileCustomizationSlot slot
         * @property {number|null} [appid] ProfileCustomizationSlot appid
         * @property {number|Long|null} [publishedfileid] ProfileCustomizationSlot publishedfileid
         * @property {number|Long|null} [item_assetid] ProfileCustomizationSlot item_assetid
         * @property {number|Long|null} [item_contextid] ProfileCustomizationSlot item_contextid
         * @property {string|null} [notes] ProfileCustomizationSlot notes
         * @property {string|null} [title] ProfileCustomizationSlot title
         * @property {number|null} [accountid] ProfileCustomizationSlot accountid
         * @property {number|null} [badgeid] ProfileCustomizationSlot badgeid
         * @property {number|null} [border_color] ProfileCustomizationSlot border_color
         * @property {number|Long|null} [item_classid] ProfileCustomizationSlot item_classid
         * @property {number|Long|null} [item_instanceid] ProfileCustomizationSlot item_instanceid
         */
    
        /**
         * Constructs a new ProfileCustomizationSlot.
         * @exports ProfileCustomizationSlot
         * @classdesc Represents a ProfileCustomizationSlot.
         * @implements IProfileCustomizationSlot
         * @constructor
         * @param {IProfileCustomizationSlot=} [properties] Properties to set
         */
        function ProfileCustomizationSlot(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * ProfileCustomizationSlot slot.
         * @member {number} slot
         * @memberof ProfileCustomizationSlot
         * @instance
         */
        ProfileCustomizationSlot.prototype.slot = 0;
    
        /**
         * ProfileCustomizationSlot appid.
         * @member {number} appid
         * @memberof ProfileCustomizationSlot
         * @instance
         */
        ProfileCustomizationSlot.prototype.appid = 0;
    
        /**
         * ProfileCustomizationSlot publishedfileid.
         * @member {number|Long} publishedfileid
         * @memberof ProfileCustomizationSlot
         * @instance
         */
        ProfileCustomizationSlot.prototype.publishedfileid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * ProfileCustomizationSlot item_assetid.
         * @member {number|Long} item_assetid
         * @memberof ProfileCustomizationSlot
         * @instance
         */
        ProfileCustomizationSlot.prototype.item_assetid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * ProfileCustomizationSlot item_contextid.
         * @member {number|Long} item_contextid
         * @memberof ProfileCustomizationSlot
         * @instance
         */
        ProfileCustomizationSlot.prototype.item_contextid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * ProfileCustomizationSlot notes.
         * @member {string} notes
         * @memberof ProfileCustomizationSlot
         * @instance
         */
        ProfileCustomizationSlot.prototype.notes = "";
    
        /**
         * ProfileCustomizationSlot title.
         * @member {string} title
         * @memberof ProfileCustomizationSlot
         * @instance
         */
        ProfileCustomizationSlot.prototype.title = "";
    
        /**
         * ProfileCustomizationSlot accountid.
         * @member {number} accountid
         * @memberof ProfileCustomizationSlot
         * @instance
         */
        ProfileCustomizationSlot.prototype.accountid = 0;
    
        /**
         * ProfileCustomizationSlot badgeid.
         * @member {number} badgeid
         * @memberof ProfileCustomizationSlot
         * @instance
         */
        ProfileCustomizationSlot.prototype.badgeid = 0;
    
        /**
         * ProfileCustomizationSlot border_color.
         * @member {number} border_color
         * @memberof ProfileCustomizationSlot
         * @instance
         */
        ProfileCustomizationSlot.prototype.border_color = 0;
    
        /**
         * ProfileCustomizationSlot item_classid.
         * @member {number|Long} item_classid
         * @memberof ProfileCustomizationSlot
         * @instance
         */
        ProfileCustomizationSlot.prototype.item_classid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * ProfileCustomizationSlot item_instanceid.
         * @member {number|Long} item_instanceid
         * @memberof ProfileCustomizationSlot
         * @instance
         */
        ProfileCustomizationSlot.prototype.item_instanceid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new ProfileCustomizationSlot instance using the specified properties.
         * @function create
         * @memberof ProfileCustomizationSlot
         * @static
         * @param {IProfileCustomizationSlot=} [properties] Properties to set
         * @returns {ProfileCustomizationSlot} ProfileCustomizationSlot instance
         */
        ProfileCustomizationSlot.create = function create(properties) {
            return new ProfileCustomizationSlot(properties);
        };
    
        /**
         * Encodes the specified ProfileCustomizationSlot message. Does not implicitly {@link ProfileCustomizationSlot.verify|verify} messages.
         * @function encode
         * @memberof ProfileCustomizationSlot
         * @static
         * @param {IProfileCustomizationSlot} message ProfileCustomizationSlot message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProfileCustomizationSlot.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.slot != null && Object.hasOwnProperty.call(message, "slot"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.slot);
            if (message.appid != null && Object.hasOwnProperty.call(message, "appid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.appid);
            if (message.publishedfileid != null && Object.hasOwnProperty.call(message, "publishedfileid"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.publishedfileid);
            if (message.item_assetid != null && Object.hasOwnProperty.call(message, "item_assetid"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.item_assetid);
            if (message.item_contextid != null && Object.hasOwnProperty.call(message, "item_contextid"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.item_contextid);
            if (message.notes != null && Object.hasOwnProperty.call(message, "notes"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.notes);
            if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.title);
            if (message.accountid != null && Object.hasOwnProperty.call(message, "accountid"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.accountid);
            if (message.badgeid != null && Object.hasOwnProperty.call(message, "badgeid"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.badgeid);
            if (message.border_color != null && Object.hasOwnProperty.call(message, "border_color"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.border_color);
            if (message.item_classid != null && Object.hasOwnProperty.call(message, "item_classid"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.item_classid);
            if (message.item_instanceid != null && Object.hasOwnProperty.call(message, "item_instanceid"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint64(message.item_instanceid);
            return writer;
        };
    
        /**
         * Encodes the specified ProfileCustomizationSlot message, length delimited. Does not implicitly {@link ProfileCustomizationSlot.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ProfileCustomizationSlot
         * @static
         * @param {IProfileCustomizationSlot} message ProfileCustomizationSlot message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProfileCustomizationSlot.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a ProfileCustomizationSlot message from the specified reader or buffer.
         * @function decode
         * @memberof ProfileCustomizationSlot
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ProfileCustomizationSlot} ProfileCustomizationSlot
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProfileCustomizationSlot.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProfileCustomizationSlot();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.slot = reader.uint32();
                    break;
                case 2:
                    message.appid = reader.uint32();
                    break;
                case 3:
                    message.publishedfileid = reader.uint64();
                    break;
                case 4:
                    message.item_assetid = reader.uint64();
                    break;
                case 5:
                    message.item_contextid = reader.uint64();
                    break;
                case 6:
                    message.notes = reader.string();
                    break;
                case 7:
                    message.title = reader.string();
                    break;
                case 8:
                    message.accountid = reader.uint32();
                    break;
                case 9:
                    message.badgeid = reader.uint32();
                    break;
                case 10:
                    message.border_color = reader.uint32();
                    break;
                case 11:
                    message.item_classid = reader.uint64();
                    break;
                case 12:
                    message.item_instanceid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a ProfileCustomizationSlot message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ProfileCustomizationSlot
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ProfileCustomizationSlot} ProfileCustomizationSlot
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProfileCustomizationSlot.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a ProfileCustomizationSlot message.
         * @function verify
         * @memberof ProfileCustomizationSlot
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProfileCustomizationSlot.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.slot != null && message.hasOwnProperty("slot"))
                if (!$util.isInteger(message.slot))
                    return "slot: integer expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.publishedfileid != null && message.hasOwnProperty("publishedfileid"))
                if (!$util.isInteger(message.publishedfileid) && !(message.publishedfileid && $util.isInteger(message.publishedfileid.low) && $util.isInteger(message.publishedfileid.high)))
                    return "publishedfileid: integer|Long expected";
            if (message.item_assetid != null && message.hasOwnProperty("item_assetid"))
                if (!$util.isInteger(message.item_assetid) && !(message.item_assetid && $util.isInteger(message.item_assetid.low) && $util.isInteger(message.item_assetid.high)))
                    return "item_assetid: integer|Long expected";
            if (message.item_contextid != null && message.hasOwnProperty("item_contextid"))
                if (!$util.isInteger(message.item_contextid) && !(message.item_contextid && $util.isInteger(message.item_contextid.low) && $util.isInteger(message.item_contextid.high)))
                    return "item_contextid: integer|Long expected";
            if (message.notes != null && message.hasOwnProperty("notes"))
                if (!$util.isString(message.notes))
                    return "notes: string expected";
            if (message.title != null && message.hasOwnProperty("title"))
                if (!$util.isString(message.title))
                    return "title: string expected";
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                if (!$util.isInteger(message.accountid))
                    return "accountid: integer expected";
            if (message.badgeid != null && message.hasOwnProperty("badgeid"))
                if (!$util.isInteger(message.badgeid))
                    return "badgeid: integer expected";
            if (message.border_color != null && message.hasOwnProperty("border_color"))
                if (!$util.isInteger(message.border_color))
                    return "border_color: integer expected";
            if (message.item_classid != null && message.hasOwnProperty("item_classid"))
                if (!$util.isInteger(message.item_classid) && !(message.item_classid && $util.isInteger(message.item_classid.low) && $util.isInteger(message.item_classid.high)))
                    return "item_classid: integer|Long expected";
            if (message.item_instanceid != null && message.hasOwnProperty("item_instanceid"))
                if (!$util.isInteger(message.item_instanceid) && !(message.item_instanceid && $util.isInteger(message.item_instanceid.low) && $util.isInteger(message.item_instanceid.high)))
                    return "item_instanceid: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a ProfileCustomizationSlot message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ProfileCustomizationSlot
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ProfileCustomizationSlot} ProfileCustomizationSlot
         */
        ProfileCustomizationSlot.fromObject = function fromObject(object) {
            if (object instanceof $root.ProfileCustomizationSlot)
                return object;
            var message = new $root.ProfileCustomizationSlot();
            if (object.slot != null)
                message.slot = object.slot >>> 0;
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.publishedfileid != null)
                if ($util.Long)
                    (message.publishedfileid = $util.Long.fromValue(object.publishedfileid)).unsigned = true;
                else if (typeof object.publishedfileid === "string")
                    message.publishedfileid = parseInt(object.publishedfileid, 10);
                else if (typeof object.publishedfileid === "number")
                    message.publishedfileid = object.publishedfileid;
                else if (typeof object.publishedfileid === "object")
                    message.publishedfileid = new $util.LongBits(object.publishedfileid.low >>> 0, object.publishedfileid.high >>> 0).toNumber(true);
            if (object.item_assetid != null)
                if ($util.Long)
                    (message.item_assetid = $util.Long.fromValue(object.item_assetid)).unsigned = true;
                else if (typeof object.item_assetid === "string")
                    message.item_assetid = parseInt(object.item_assetid, 10);
                else if (typeof object.item_assetid === "number")
                    message.item_assetid = object.item_assetid;
                else if (typeof object.item_assetid === "object")
                    message.item_assetid = new $util.LongBits(object.item_assetid.low >>> 0, object.item_assetid.high >>> 0).toNumber(true);
            if (object.item_contextid != null)
                if ($util.Long)
                    (message.item_contextid = $util.Long.fromValue(object.item_contextid)).unsigned = true;
                else if (typeof object.item_contextid === "string")
                    message.item_contextid = parseInt(object.item_contextid, 10);
                else if (typeof object.item_contextid === "number")
                    message.item_contextid = object.item_contextid;
                else if (typeof object.item_contextid === "object")
                    message.item_contextid = new $util.LongBits(object.item_contextid.low >>> 0, object.item_contextid.high >>> 0).toNumber(true);
            if (object.notes != null)
                message.notes = String(object.notes);
            if (object.title != null)
                message.title = String(object.title);
            if (object.accountid != null)
                message.accountid = object.accountid >>> 0;
            if (object.badgeid != null)
                message.badgeid = object.badgeid >>> 0;
            if (object.border_color != null)
                message.border_color = object.border_color >>> 0;
            if (object.item_classid != null)
                if ($util.Long)
                    (message.item_classid = $util.Long.fromValue(object.item_classid)).unsigned = true;
                else if (typeof object.item_classid === "string")
                    message.item_classid = parseInt(object.item_classid, 10);
                else if (typeof object.item_classid === "number")
                    message.item_classid = object.item_classid;
                else if (typeof object.item_classid === "object")
                    message.item_classid = new $util.LongBits(object.item_classid.low >>> 0, object.item_classid.high >>> 0).toNumber(true);
            if (object.item_instanceid != null)
                if ($util.Long)
                    (message.item_instanceid = $util.Long.fromValue(object.item_instanceid)).unsigned = true;
                else if (typeof object.item_instanceid === "string")
                    message.item_instanceid = parseInt(object.item_instanceid, 10);
                else if (typeof object.item_instanceid === "number")
                    message.item_instanceid = object.item_instanceid;
                else if (typeof object.item_instanceid === "object")
                    message.item_instanceid = new $util.LongBits(object.item_instanceid.low >>> 0, object.item_instanceid.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a ProfileCustomizationSlot message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ProfileCustomizationSlot
         * @static
         * @param {ProfileCustomizationSlot} message ProfileCustomizationSlot
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProfileCustomizationSlot.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.slot = 0;
                object.appid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.publishedfileid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.publishedfileid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.item_assetid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.item_assetid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.item_contextid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.item_contextid = options.longs === String ? "0" : 0;
                object.notes = "";
                object.title = "";
                object.accountid = 0;
                object.badgeid = 0;
                object.border_color = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.item_classid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.item_classid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.item_instanceid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.item_instanceid = options.longs === String ? "0" : 0;
            }
            if (message.slot != null && message.hasOwnProperty("slot"))
                object.slot = message.slot;
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.publishedfileid != null && message.hasOwnProperty("publishedfileid"))
                if (typeof message.publishedfileid === "number")
                    object.publishedfileid = options.longs === String ? String(message.publishedfileid) : message.publishedfileid;
                else
                    object.publishedfileid = options.longs === String ? $util.Long.prototype.toString.call(message.publishedfileid) : options.longs === Number ? new $util.LongBits(message.publishedfileid.low >>> 0, message.publishedfileid.high >>> 0).toNumber(true) : message.publishedfileid;
            if (message.item_assetid != null && message.hasOwnProperty("item_assetid"))
                if (typeof message.item_assetid === "number")
                    object.item_assetid = options.longs === String ? String(message.item_assetid) : message.item_assetid;
                else
                    object.item_assetid = options.longs === String ? $util.Long.prototype.toString.call(message.item_assetid) : options.longs === Number ? new $util.LongBits(message.item_assetid.low >>> 0, message.item_assetid.high >>> 0).toNumber(true) : message.item_assetid;
            if (message.item_contextid != null && message.hasOwnProperty("item_contextid"))
                if (typeof message.item_contextid === "number")
                    object.item_contextid = options.longs === String ? String(message.item_contextid) : message.item_contextid;
                else
                    object.item_contextid = options.longs === String ? $util.Long.prototype.toString.call(message.item_contextid) : options.longs === Number ? new $util.LongBits(message.item_contextid.low >>> 0, message.item_contextid.high >>> 0).toNumber(true) : message.item_contextid;
            if (message.notes != null && message.hasOwnProperty("notes"))
                object.notes = message.notes;
            if (message.title != null && message.hasOwnProperty("title"))
                object.title = message.title;
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                object.accountid = message.accountid;
            if (message.badgeid != null && message.hasOwnProperty("badgeid"))
                object.badgeid = message.badgeid;
            if (message.border_color != null && message.hasOwnProperty("border_color"))
                object.border_color = message.border_color;
            if (message.item_classid != null && message.hasOwnProperty("item_classid"))
                if (typeof message.item_classid === "number")
                    object.item_classid = options.longs === String ? String(message.item_classid) : message.item_classid;
                else
                    object.item_classid = options.longs === String ? $util.Long.prototype.toString.call(message.item_classid) : options.longs === Number ? new $util.LongBits(message.item_classid.low >>> 0, message.item_classid.high >>> 0).toNumber(true) : message.item_classid;
            if (message.item_instanceid != null && message.hasOwnProperty("item_instanceid"))
                if (typeof message.item_instanceid === "number")
                    object.item_instanceid = options.longs === String ? String(message.item_instanceid) : message.item_instanceid;
                else
                    object.item_instanceid = options.longs === String ? $util.Long.prototype.toString.call(message.item_instanceid) : options.longs === Number ? new $util.LongBits(message.item_instanceid.low >>> 0, message.item_instanceid.high >>> 0).toNumber(true) : message.item_instanceid;
            return object;
        };
    
        /**
         * Converts this ProfileCustomizationSlot to JSON.
         * @function toJSON
         * @memberof ProfileCustomizationSlot
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProfileCustomizationSlot.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return ProfileCustomizationSlot;
    })();
    
    $root.ProfileCustomization = (function() {
    
        /**
         * Properties of a ProfileCustomization.
         * @exports IProfileCustomization
         * @interface IProfileCustomization
         * @property {EProfileCustomizationType|null} [customization_type] ProfileCustomization customization_type
         * @property {boolean|null} [large] ProfileCustomization large
         * @property {Array.<IProfileCustomizationSlot>|null} [slots] ProfileCustomization slots
         * @property {boolean|null} [active] ProfileCustomization active
         * @property {EProfileCustomizationStyle|null} [customization_style] ProfileCustomization customization_style
         */
    
        /**
         * Constructs a new ProfileCustomization.
         * @exports ProfileCustomization
         * @classdesc Represents a ProfileCustomization.
         * @implements IProfileCustomization
         * @constructor
         * @param {IProfileCustomization=} [properties] Properties to set
         */
        function ProfileCustomization(properties) {
            this.slots = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * ProfileCustomization customization_type.
         * @member {EProfileCustomizationType} customization_type
         * @memberof ProfileCustomization
         * @instance
         */
        ProfileCustomization.prototype.customization_type = 0;
    
        /**
         * ProfileCustomization large.
         * @member {boolean} large
         * @memberof ProfileCustomization
         * @instance
         */
        ProfileCustomization.prototype.large = false;
    
        /**
         * ProfileCustomization slots.
         * @member {Array.<IProfileCustomizationSlot>} slots
         * @memberof ProfileCustomization
         * @instance
         */
        ProfileCustomization.prototype.slots = $util.emptyArray;
    
        /**
         * ProfileCustomization active.
         * @member {boolean} active
         * @memberof ProfileCustomization
         * @instance
         */
        ProfileCustomization.prototype.active = false;
    
        /**
         * ProfileCustomization customization_style.
         * @member {EProfileCustomizationStyle} customization_style
         * @memberof ProfileCustomization
         * @instance
         */
        ProfileCustomization.prototype.customization_style = 0;
    
        /**
         * Creates a new ProfileCustomization instance using the specified properties.
         * @function create
         * @memberof ProfileCustomization
         * @static
         * @param {IProfileCustomization=} [properties] Properties to set
         * @returns {ProfileCustomization} ProfileCustomization instance
         */
        ProfileCustomization.create = function create(properties) {
            return new ProfileCustomization(properties);
        };
    
        /**
         * Encodes the specified ProfileCustomization message. Does not implicitly {@link ProfileCustomization.verify|verify} messages.
         * @function encode
         * @memberof ProfileCustomization
         * @static
         * @param {IProfileCustomization} message ProfileCustomization message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProfileCustomization.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.customization_type != null && Object.hasOwnProperty.call(message, "customization_type"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.customization_type);
            if (message.large != null && Object.hasOwnProperty.call(message, "large"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.large);
            if (message.slots != null && message.slots.length)
                for (var i = 0; i < message.slots.length; ++i)
                    $root.ProfileCustomizationSlot.encode(message.slots[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.active != null && Object.hasOwnProperty.call(message, "active"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.active);
            if (message.customization_style != null && Object.hasOwnProperty.call(message, "customization_style"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.customization_style);
            return writer;
        };
    
        /**
         * Encodes the specified ProfileCustomization message, length delimited. Does not implicitly {@link ProfileCustomization.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ProfileCustomization
         * @static
         * @param {IProfileCustomization} message ProfileCustomization message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProfileCustomization.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a ProfileCustomization message from the specified reader or buffer.
         * @function decode
         * @memberof ProfileCustomization
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ProfileCustomization} ProfileCustomization
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProfileCustomization.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProfileCustomization();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.customization_type = reader.int32();
                    break;
                case 2:
                    message.large = reader.bool();
                    break;
                case 3:
                    if (!(message.slots && message.slots.length))
                        message.slots = [];
                    message.slots.push($root.ProfileCustomizationSlot.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.active = reader.bool();
                    break;
                case 5:
                    message.customization_style = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a ProfileCustomization message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ProfileCustomization
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ProfileCustomization} ProfileCustomization
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProfileCustomization.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a ProfileCustomization message.
         * @function verify
         * @memberof ProfileCustomization
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProfileCustomization.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.customization_type != null && message.hasOwnProperty("customization_type"))
                switch (message.customization_type) {
                default:
                    return "customization_type: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                    break;
                }
            if (message.large != null && message.hasOwnProperty("large"))
                if (typeof message.large !== "boolean")
                    return "large: boolean expected";
            if (message.slots != null && message.hasOwnProperty("slots")) {
                if (!Array.isArray(message.slots))
                    return "slots: array expected";
                for (var i = 0; i < message.slots.length; ++i) {
                    var error = $root.ProfileCustomizationSlot.verify(message.slots[i]);
                    if (error)
                        return "slots." + error;
                }
            }
            if (message.active != null && message.hasOwnProperty("active"))
                if (typeof message.active !== "boolean")
                    return "active: boolean expected";
            if (message.customization_style != null && message.hasOwnProperty("customization_style"))
                switch (message.customization_style) {
                default:
                    return "customization_style: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
            return null;
        };
    
        /**
         * Creates a ProfileCustomization message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ProfileCustomization
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ProfileCustomization} ProfileCustomization
         */
        ProfileCustomization.fromObject = function fromObject(object) {
            if (object instanceof $root.ProfileCustomization)
                return object;
            var message = new $root.ProfileCustomization();
            switch (object.customization_type) {
            case "k_EProfileCustomizationTypeInvalid":
            case 0:
                message.customization_type = 0;
                break;
            case "k_EProfileCustomizationTypeRareAchievementShowcase":
            case 1:
                message.customization_type = 1;
                break;
            case "k_EProfileCustomizationTypeGameCollector":
            case 2:
                message.customization_type = 2;
                break;
            case "k_EProfileCustomizationTypeItemShowcase":
            case 3:
                message.customization_type = 3;
                break;
            case "k_EProfileCustomizationTypeTradeShowcase":
            case 4:
                message.customization_type = 4;
                break;
            case "k_EProfileCustomizationTypeBadges":
            case 5:
                message.customization_type = 5;
                break;
            case "k_EProfileCustomizationTypeFavoriteGame":
            case 6:
                message.customization_type = 6;
                break;
            case "k_EProfileCustomizationTypeScreenshotShowcase":
            case 7:
                message.customization_type = 7;
                break;
            case "k_EProfileCustomizationTypeCustomText":
            case 8:
                message.customization_type = 8;
                break;
            case "k_EProfileCustomizationTypeFavoriteGroup":
            case 9:
                message.customization_type = 9;
                break;
            case "k_EProfileCustomizationTypeRecommendation":
            case 10:
                message.customization_type = 10;
                break;
            case "k_EProfileCustomizationTypeWorkshopItem":
            case 11:
                message.customization_type = 11;
                break;
            case "k_EProfileCustomizationTypeMyWorkshop":
            case 12:
                message.customization_type = 12;
                break;
            case "k_EProfileCustomizationTypeArtworkShowcase":
            case 13:
                message.customization_type = 13;
                break;
            case "k_EProfileCustomizationTypeVideoShowcase":
            case 14:
                message.customization_type = 14;
                break;
            case "k_EProfileCustomizationTypeGuides":
            case 15:
                message.customization_type = 15;
                break;
            case "k_EProfileCustomizationTypeMyGuides":
            case 16:
                message.customization_type = 16;
                break;
            case "k_EProfileCustomizationTypeAchievements":
            case 17:
                message.customization_type = 17;
                break;
            case "k_EProfileCustomizationTypeGreenlight":
            case 18:
                message.customization_type = 18;
                break;
            case "k_EProfileCustomizationTypeMyGreenlight":
            case 19:
                message.customization_type = 19;
                break;
            case "k_EProfileCustomizationTypeSalien":
            case 20:
                message.customization_type = 20;
                break;
            }
            if (object.large != null)
                message.large = Boolean(object.large);
            if (object.slots) {
                if (!Array.isArray(object.slots))
                    throw TypeError(".ProfileCustomization.slots: array expected");
                message.slots = [];
                for (var i = 0; i < object.slots.length; ++i) {
                    if (typeof object.slots[i] !== "object")
                        throw TypeError(".ProfileCustomization.slots: object expected");
                    message.slots[i] = $root.ProfileCustomizationSlot.fromObject(object.slots[i]);
                }
            }
            if (object.active != null)
                message.active = Boolean(object.active);
            switch (object.customization_style) {
            case "k_EProfileCustomizationStyleDefault":
            case 0:
                message.customization_style = 0;
                break;
            case "k_EProfileCustomizationStyleSelected":
            case 1:
                message.customization_style = 1;
                break;
            case "k_EProfileCustomizationStyleRarest":
            case 2:
                message.customization_style = 2;
                break;
            case "k_EProfileCustomizationStyleMostRecent":
            case 3:
                message.customization_style = 3;
                break;
            case "k_EProfileCustomizationStyleRandom":
            case 4:
                message.customization_style = 4;
                break;
            case "k_EProfileCustomizationStyleHighestRated":
            case 5:
                message.customization_style = 5;
                break;
            }
            return message;
        };
    
        /**
         * Creates a plain object from a ProfileCustomization message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ProfileCustomization
         * @static
         * @param {ProfileCustomization} message ProfileCustomization
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProfileCustomization.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.slots = [];
            if (options.defaults) {
                object.customization_type = options.enums === String ? "k_EProfileCustomizationTypeInvalid" : 0;
                object.large = false;
                object.active = false;
                object.customization_style = options.enums === String ? "k_EProfileCustomizationStyleDefault" : 0;
            }
            if (message.customization_type != null && message.hasOwnProperty("customization_type"))
                object.customization_type = options.enums === String ? $root.EProfileCustomizationType[message.customization_type] : message.customization_type;
            if (message.large != null && message.hasOwnProperty("large"))
                object.large = message.large;
            if (message.slots && message.slots.length) {
                object.slots = [];
                for (var j = 0; j < message.slots.length; ++j)
                    object.slots[j] = $root.ProfileCustomizationSlot.toObject(message.slots[j], options);
            }
            if (message.active != null && message.hasOwnProperty("active"))
                object.active = message.active;
            if (message.customization_style != null && message.hasOwnProperty("customization_style"))
                object.customization_style = options.enums === String ? $root.EProfileCustomizationStyle[message.customization_style] : message.customization_style;
            return object;
        };
    
        /**
         * Converts this ProfileCustomization to JSON.
         * @function toJSON
         * @memberof ProfileCustomization
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProfileCustomization.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return ProfileCustomization;
    })();
    
    $root.ProfileTheme = (function() {
    
        /**
         * Properties of a ProfileTheme.
         * @exports IProfileTheme
         * @interface IProfileTheme
         * @property {string|null} [theme_id] ProfileTheme theme_id
         * @property {string|null} [title] ProfileTheme title
         */
    
        /**
         * Constructs a new ProfileTheme.
         * @exports ProfileTheme
         * @classdesc Represents a ProfileTheme.
         * @implements IProfileTheme
         * @constructor
         * @param {IProfileTheme=} [properties] Properties to set
         */
        function ProfileTheme(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * ProfileTheme theme_id.
         * @member {string} theme_id
         * @memberof ProfileTheme
         * @instance
         */
        ProfileTheme.prototype.theme_id = "";
    
        /**
         * ProfileTheme title.
         * @member {string} title
         * @memberof ProfileTheme
         * @instance
         */
        ProfileTheme.prototype.title = "";
    
        /**
         * Creates a new ProfileTheme instance using the specified properties.
         * @function create
         * @memberof ProfileTheme
         * @static
         * @param {IProfileTheme=} [properties] Properties to set
         * @returns {ProfileTheme} ProfileTheme instance
         */
        ProfileTheme.create = function create(properties) {
            return new ProfileTheme(properties);
        };
    
        /**
         * Encodes the specified ProfileTheme message. Does not implicitly {@link ProfileTheme.verify|verify} messages.
         * @function encode
         * @memberof ProfileTheme
         * @static
         * @param {IProfileTheme} message ProfileTheme message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProfileTheme.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.theme_id != null && Object.hasOwnProperty.call(message, "theme_id"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.theme_id);
            if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.title);
            return writer;
        };
    
        /**
         * Encodes the specified ProfileTheme message, length delimited. Does not implicitly {@link ProfileTheme.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ProfileTheme
         * @static
         * @param {IProfileTheme} message ProfileTheme message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProfileTheme.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a ProfileTheme message from the specified reader or buffer.
         * @function decode
         * @memberof ProfileTheme
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ProfileTheme} ProfileTheme
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProfileTheme.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProfileTheme();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.theme_id = reader.string();
                    break;
                case 2:
                    message.title = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a ProfileTheme message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ProfileTheme
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ProfileTheme} ProfileTheme
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProfileTheme.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a ProfileTheme message.
         * @function verify
         * @memberof ProfileTheme
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProfileTheme.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.theme_id != null && message.hasOwnProperty("theme_id"))
                if (!$util.isString(message.theme_id))
                    return "theme_id: string expected";
            if (message.title != null && message.hasOwnProperty("title"))
                if (!$util.isString(message.title))
                    return "title: string expected";
            return null;
        };
    
        /**
         * Creates a ProfileTheme message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ProfileTheme
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ProfileTheme} ProfileTheme
         */
        ProfileTheme.fromObject = function fromObject(object) {
            if (object instanceof $root.ProfileTheme)
                return object;
            var message = new $root.ProfileTheme();
            if (object.theme_id != null)
                message.theme_id = String(object.theme_id);
            if (object.title != null)
                message.title = String(object.title);
            return message;
        };
    
        /**
         * Creates a plain object from a ProfileTheme message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ProfileTheme
         * @static
         * @param {ProfileTheme} message ProfileTheme
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProfileTheme.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.theme_id = "";
                object.title = "";
            }
            if (message.theme_id != null && message.hasOwnProperty("theme_id"))
                object.theme_id = message.theme_id;
            if (message.title != null && message.hasOwnProperty("title"))
                object.title = message.title;
            return object;
        };
    
        /**
         * Converts this ProfileTheme to JSON.
         * @function toJSON
         * @memberof ProfileTheme
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProfileTheme.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return ProfileTheme;
    })();
    
    $root.CPlayer_GetProfileCustomization_Response = (function() {
    
        /**
         * Properties of a CPlayer_GetProfileCustomization_Response.
         * @exports ICPlayer_GetProfileCustomization_Response
         * @interface ICPlayer_GetProfileCustomization_Response
         * @property {Array.<IProfileCustomization>|null} [customizations] CPlayer_GetProfileCustomization_Response customizations
         * @property {number|null} [slots_available] CPlayer_GetProfileCustomization_Response slots_available
         * @property {IProfileTheme|null} [profile_theme] CPlayer_GetProfileCustomization_Response profile_theme
         */
    
        /**
         * Constructs a new CPlayer_GetProfileCustomization_Response.
         * @exports CPlayer_GetProfileCustomization_Response
         * @classdesc Represents a CPlayer_GetProfileCustomization_Response.
         * @implements ICPlayer_GetProfileCustomization_Response
         * @constructor
         * @param {ICPlayer_GetProfileCustomization_Response=} [properties] Properties to set
         */
        function CPlayer_GetProfileCustomization_Response(properties) {
            this.customizations = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetProfileCustomization_Response customizations.
         * @member {Array.<IProfileCustomization>} customizations
         * @memberof CPlayer_GetProfileCustomization_Response
         * @instance
         */
        CPlayer_GetProfileCustomization_Response.prototype.customizations = $util.emptyArray;
    
        /**
         * CPlayer_GetProfileCustomization_Response slots_available.
         * @member {number} slots_available
         * @memberof CPlayer_GetProfileCustomization_Response
         * @instance
         */
        CPlayer_GetProfileCustomization_Response.prototype.slots_available = 0;
    
        /**
         * CPlayer_GetProfileCustomization_Response profile_theme.
         * @member {IProfileTheme|null|undefined} profile_theme
         * @memberof CPlayer_GetProfileCustomization_Response
         * @instance
         */
        CPlayer_GetProfileCustomization_Response.prototype.profile_theme = null;
    
        /**
         * Creates a new CPlayer_GetProfileCustomization_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetProfileCustomization_Response
         * @static
         * @param {ICPlayer_GetProfileCustomization_Response=} [properties] Properties to set
         * @returns {CPlayer_GetProfileCustomization_Response} CPlayer_GetProfileCustomization_Response instance
         */
        CPlayer_GetProfileCustomization_Response.create = function create(properties) {
            return new CPlayer_GetProfileCustomization_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetProfileCustomization_Response message. Does not implicitly {@link CPlayer_GetProfileCustomization_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetProfileCustomization_Response
         * @static
         * @param {ICPlayer_GetProfileCustomization_Response} message CPlayer_GetProfileCustomization_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetProfileCustomization_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.customizations != null && message.customizations.length)
                for (var i = 0; i < message.customizations.length; ++i)
                    $root.ProfileCustomization.encode(message.customizations[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.slots_available != null && Object.hasOwnProperty.call(message, "slots_available"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.slots_available);
            if (message.profile_theme != null && Object.hasOwnProperty.call(message, "profile_theme"))
                $root.ProfileTheme.encode(message.profile_theme, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetProfileCustomization_Response message, length delimited. Does not implicitly {@link CPlayer_GetProfileCustomization_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetProfileCustomization_Response
         * @static
         * @param {ICPlayer_GetProfileCustomization_Response} message CPlayer_GetProfileCustomization_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetProfileCustomization_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetProfileCustomization_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetProfileCustomization_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetProfileCustomization_Response} CPlayer_GetProfileCustomization_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetProfileCustomization_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetProfileCustomization_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.customizations && message.customizations.length))
                        message.customizations = [];
                    message.customizations.push($root.ProfileCustomization.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.slots_available = reader.uint32();
                    break;
                case 3:
                    message.profile_theme = $root.ProfileTheme.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetProfileCustomization_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetProfileCustomization_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetProfileCustomization_Response} CPlayer_GetProfileCustomization_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetProfileCustomization_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetProfileCustomization_Response message.
         * @function verify
         * @memberof CPlayer_GetProfileCustomization_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetProfileCustomization_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.customizations != null && message.hasOwnProperty("customizations")) {
                if (!Array.isArray(message.customizations))
                    return "customizations: array expected";
                for (var i = 0; i < message.customizations.length; ++i) {
                    var error = $root.ProfileCustomization.verify(message.customizations[i]);
                    if (error)
                        return "customizations." + error;
                }
            }
            if (message.slots_available != null && message.hasOwnProperty("slots_available"))
                if (!$util.isInteger(message.slots_available))
                    return "slots_available: integer expected";
            if (message.profile_theme != null && message.hasOwnProperty("profile_theme")) {
                var error = $root.ProfileTheme.verify(message.profile_theme);
                if (error)
                    return "profile_theme." + error;
            }
            return null;
        };
    
        /**
         * Creates a CPlayer_GetProfileCustomization_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetProfileCustomization_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetProfileCustomization_Response} CPlayer_GetProfileCustomization_Response
         */
        CPlayer_GetProfileCustomization_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetProfileCustomization_Response)
                return object;
            var message = new $root.CPlayer_GetProfileCustomization_Response();
            if (object.customizations) {
                if (!Array.isArray(object.customizations))
                    throw TypeError(".CPlayer_GetProfileCustomization_Response.customizations: array expected");
                message.customizations = [];
                for (var i = 0; i < object.customizations.length; ++i) {
                    if (typeof object.customizations[i] !== "object")
                        throw TypeError(".CPlayer_GetProfileCustomization_Response.customizations: object expected");
                    message.customizations[i] = $root.ProfileCustomization.fromObject(object.customizations[i]);
                }
            }
            if (object.slots_available != null)
                message.slots_available = object.slots_available >>> 0;
            if (object.profile_theme != null) {
                if (typeof object.profile_theme !== "object")
                    throw TypeError(".CPlayer_GetProfileCustomization_Response.profile_theme: object expected");
                message.profile_theme = $root.ProfileTheme.fromObject(object.profile_theme);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetProfileCustomization_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetProfileCustomization_Response
         * @static
         * @param {CPlayer_GetProfileCustomization_Response} message CPlayer_GetProfileCustomization_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetProfileCustomization_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.customizations = [];
            if (options.defaults) {
                object.slots_available = 0;
                object.profile_theme = null;
            }
            if (message.customizations && message.customizations.length) {
                object.customizations = [];
                for (var j = 0; j < message.customizations.length; ++j)
                    object.customizations[j] = $root.ProfileCustomization.toObject(message.customizations[j], options);
            }
            if (message.slots_available != null && message.hasOwnProperty("slots_available"))
                object.slots_available = message.slots_available;
            if (message.profile_theme != null && message.hasOwnProperty("profile_theme"))
                object.profile_theme = $root.ProfileTheme.toObject(message.profile_theme, options);
            return object;
        };
    
        /**
         * Converts this CPlayer_GetProfileCustomization_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_GetProfileCustomization_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetProfileCustomization_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetProfileCustomization_Response;
    })();
    
    $root.CPlayer_GetProfileThemesAvailable_Request = (function() {
    
        /**
         * Properties of a CPlayer_GetProfileThemesAvailable_Request.
         * @exports ICPlayer_GetProfileThemesAvailable_Request
         * @interface ICPlayer_GetProfileThemesAvailable_Request
         */
    
        /**
         * Constructs a new CPlayer_GetProfileThemesAvailable_Request.
         * @exports CPlayer_GetProfileThemesAvailable_Request
         * @classdesc Represents a CPlayer_GetProfileThemesAvailable_Request.
         * @implements ICPlayer_GetProfileThemesAvailable_Request
         * @constructor
         * @param {ICPlayer_GetProfileThemesAvailable_Request=} [properties] Properties to set
         */
        function CPlayer_GetProfileThemesAvailable_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CPlayer_GetProfileThemesAvailable_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetProfileThemesAvailable_Request
         * @static
         * @param {ICPlayer_GetProfileThemesAvailable_Request=} [properties] Properties to set
         * @returns {CPlayer_GetProfileThemesAvailable_Request} CPlayer_GetProfileThemesAvailable_Request instance
         */
        CPlayer_GetProfileThemesAvailable_Request.create = function create(properties) {
            return new CPlayer_GetProfileThemesAvailable_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetProfileThemesAvailable_Request message. Does not implicitly {@link CPlayer_GetProfileThemesAvailable_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetProfileThemesAvailable_Request
         * @static
         * @param {ICPlayer_GetProfileThemesAvailable_Request} message CPlayer_GetProfileThemesAvailable_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetProfileThemesAvailable_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetProfileThemesAvailable_Request message, length delimited. Does not implicitly {@link CPlayer_GetProfileThemesAvailable_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetProfileThemesAvailable_Request
         * @static
         * @param {ICPlayer_GetProfileThemesAvailable_Request} message CPlayer_GetProfileThemesAvailable_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetProfileThemesAvailable_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetProfileThemesAvailable_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetProfileThemesAvailable_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetProfileThemesAvailable_Request} CPlayer_GetProfileThemesAvailable_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetProfileThemesAvailable_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetProfileThemesAvailable_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetProfileThemesAvailable_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetProfileThemesAvailable_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetProfileThemesAvailable_Request} CPlayer_GetProfileThemesAvailable_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetProfileThemesAvailable_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetProfileThemesAvailable_Request message.
         * @function verify
         * @memberof CPlayer_GetProfileThemesAvailable_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetProfileThemesAvailable_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_GetProfileThemesAvailable_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetProfileThemesAvailable_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetProfileThemesAvailable_Request} CPlayer_GetProfileThemesAvailable_Request
         */
        CPlayer_GetProfileThemesAvailable_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetProfileThemesAvailable_Request)
                return object;
            return new $root.CPlayer_GetProfileThemesAvailable_Request();
        };
    
        /**
         * Creates a plain object from a CPlayer_GetProfileThemesAvailable_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetProfileThemesAvailable_Request
         * @static
         * @param {CPlayer_GetProfileThemesAvailable_Request} message CPlayer_GetProfileThemesAvailable_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetProfileThemesAvailable_Request.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CPlayer_GetProfileThemesAvailable_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_GetProfileThemesAvailable_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetProfileThemesAvailable_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetProfileThemesAvailable_Request;
    })();
    
    $root.CPlayer_GetProfileThemesAvailable_Response = (function() {
    
        /**
         * Properties of a CPlayer_GetProfileThemesAvailable_Response.
         * @exports ICPlayer_GetProfileThemesAvailable_Response
         * @interface ICPlayer_GetProfileThemesAvailable_Response
         * @property {Array.<IProfileTheme>|null} [profile_themes] CPlayer_GetProfileThemesAvailable_Response profile_themes
         */
    
        /**
         * Constructs a new CPlayer_GetProfileThemesAvailable_Response.
         * @exports CPlayer_GetProfileThemesAvailable_Response
         * @classdesc Represents a CPlayer_GetProfileThemesAvailable_Response.
         * @implements ICPlayer_GetProfileThemesAvailable_Response
         * @constructor
         * @param {ICPlayer_GetProfileThemesAvailable_Response=} [properties] Properties to set
         */
        function CPlayer_GetProfileThemesAvailable_Response(properties) {
            this.profile_themes = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetProfileThemesAvailable_Response profile_themes.
         * @member {Array.<IProfileTheme>} profile_themes
         * @memberof CPlayer_GetProfileThemesAvailable_Response
         * @instance
         */
        CPlayer_GetProfileThemesAvailable_Response.prototype.profile_themes = $util.emptyArray;
    
        /**
         * Creates a new CPlayer_GetProfileThemesAvailable_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetProfileThemesAvailable_Response
         * @static
         * @param {ICPlayer_GetProfileThemesAvailable_Response=} [properties] Properties to set
         * @returns {CPlayer_GetProfileThemesAvailable_Response} CPlayer_GetProfileThemesAvailable_Response instance
         */
        CPlayer_GetProfileThemesAvailable_Response.create = function create(properties) {
            return new CPlayer_GetProfileThemesAvailable_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetProfileThemesAvailable_Response message. Does not implicitly {@link CPlayer_GetProfileThemesAvailable_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetProfileThemesAvailable_Response
         * @static
         * @param {ICPlayer_GetProfileThemesAvailable_Response} message CPlayer_GetProfileThemesAvailable_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetProfileThemesAvailable_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.profile_themes != null && message.profile_themes.length)
                for (var i = 0; i < message.profile_themes.length; ++i)
                    $root.ProfileTheme.encode(message.profile_themes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetProfileThemesAvailable_Response message, length delimited. Does not implicitly {@link CPlayer_GetProfileThemesAvailable_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetProfileThemesAvailable_Response
         * @static
         * @param {ICPlayer_GetProfileThemesAvailable_Response} message CPlayer_GetProfileThemesAvailable_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetProfileThemesAvailable_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetProfileThemesAvailable_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetProfileThemesAvailable_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetProfileThemesAvailable_Response} CPlayer_GetProfileThemesAvailable_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetProfileThemesAvailable_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetProfileThemesAvailable_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.profile_themes && message.profile_themes.length))
                        message.profile_themes = [];
                    message.profile_themes.push($root.ProfileTheme.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetProfileThemesAvailable_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetProfileThemesAvailable_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetProfileThemesAvailable_Response} CPlayer_GetProfileThemesAvailable_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetProfileThemesAvailable_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetProfileThemesAvailable_Response message.
         * @function verify
         * @memberof CPlayer_GetProfileThemesAvailable_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetProfileThemesAvailable_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.profile_themes != null && message.hasOwnProperty("profile_themes")) {
                if (!Array.isArray(message.profile_themes))
                    return "profile_themes: array expected";
                for (var i = 0; i < message.profile_themes.length; ++i) {
                    var error = $root.ProfileTheme.verify(message.profile_themes[i]);
                    if (error)
                        return "profile_themes." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CPlayer_GetProfileThemesAvailable_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetProfileThemesAvailable_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetProfileThemesAvailable_Response} CPlayer_GetProfileThemesAvailable_Response
         */
        CPlayer_GetProfileThemesAvailable_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetProfileThemesAvailable_Response)
                return object;
            var message = new $root.CPlayer_GetProfileThemesAvailable_Response();
            if (object.profile_themes) {
                if (!Array.isArray(object.profile_themes))
                    throw TypeError(".CPlayer_GetProfileThemesAvailable_Response.profile_themes: array expected");
                message.profile_themes = [];
                for (var i = 0; i < object.profile_themes.length; ++i) {
                    if (typeof object.profile_themes[i] !== "object")
                        throw TypeError(".CPlayer_GetProfileThemesAvailable_Response.profile_themes: object expected");
                    message.profile_themes[i] = $root.ProfileTheme.fromObject(object.profile_themes[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetProfileThemesAvailable_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetProfileThemesAvailable_Response
         * @static
         * @param {CPlayer_GetProfileThemesAvailable_Response} message CPlayer_GetProfileThemesAvailable_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetProfileThemesAvailable_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.profile_themes = [];
            if (message.profile_themes && message.profile_themes.length) {
                object.profile_themes = [];
                for (var j = 0; j < message.profile_themes.length; ++j)
                    object.profile_themes[j] = $root.ProfileTheme.toObject(message.profile_themes[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CPlayer_GetProfileThemesAvailable_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_GetProfileThemesAvailable_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetProfileThemesAvailable_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetProfileThemesAvailable_Response;
    })();
    
    $root.CPlayer_SetProfileTheme_Request = (function() {
    
        /**
         * Properties of a CPlayer_SetProfileTheme_Request.
         * @exports ICPlayer_SetProfileTheme_Request
         * @interface ICPlayer_SetProfileTheme_Request
         * @property {string|null} [theme_id] CPlayer_SetProfileTheme_Request theme_id
         */
    
        /**
         * Constructs a new CPlayer_SetProfileTheme_Request.
         * @exports CPlayer_SetProfileTheme_Request
         * @classdesc Represents a CPlayer_SetProfileTheme_Request.
         * @implements ICPlayer_SetProfileTheme_Request
         * @constructor
         * @param {ICPlayer_SetProfileTheme_Request=} [properties] Properties to set
         */
        function CPlayer_SetProfileTheme_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_SetProfileTheme_Request theme_id.
         * @member {string} theme_id
         * @memberof CPlayer_SetProfileTheme_Request
         * @instance
         */
        CPlayer_SetProfileTheme_Request.prototype.theme_id = "";
    
        /**
         * Creates a new CPlayer_SetProfileTheme_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_SetProfileTheme_Request
         * @static
         * @param {ICPlayer_SetProfileTheme_Request=} [properties] Properties to set
         * @returns {CPlayer_SetProfileTheme_Request} CPlayer_SetProfileTheme_Request instance
         */
        CPlayer_SetProfileTheme_Request.create = function create(properties) {
            return new CPlayer_SetProfileTheme_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_SetProfileTheme_Request message. Does not implicitly {@link CPlayer_SetProfileTheme_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_SetProfileTheme_Request
         * @static
         * @param {ICPlayer_SetProfileTheme_Request} message CPlayer_SetProfileTheme_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetProfileTheme_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.theme_id != null && Object.hasOwnProperty.call(message, "theme_id"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.theme_id);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_SetProfileTheme_Request message, length delimited. Does not implicitly {@link CPlayer_SetProfileTheme_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_SetProfileTheme_Request
         * @static
         * @param {ICPlayer_SetProfileTheme_Request} message CPlayer_SetProfileTheme_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetProfileTheme_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_SetProfileTheme_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_SetProfileTheme_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_SetProfileTheme_Request} CPlayer_SetProfileTheme_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetProfileTheme_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_SetProfileTheme_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.theme_id = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_SetProfileTheme_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_SetProfileTheme_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_SetProfileTheme_Request} CPlayer_SetProfileTheme_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetProfileTheme_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_SetProfileTheme_Request message.
         * @function verify
         * @memberof CPlayer_SetProfileTheme_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_SetProfileTheme_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.theme_id != null && message.hasOwnProperty("theme_id"))
                if (!$util.isString(message.theme_id))
                    return "theme_id: string expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_SetProfileTheme_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_SetProfileTheme_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_SetProfileTheme_Request} CPlayer_SetProfileTheme_Request
         */
        CPlayer_SetProfileTheme_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_SetProfileTheme_Request)
                return object;
            var message = new $root.CPlayer_SetProfileTheme_Request();
            if (object.theme_id != null)
                message.theme_id = String(object.theme_id);
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_SetProfileTheme_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_SetProfileTheme_Request
         * @static
         * @param {CPlayer_SetProfileTheme_Request} message CPlayer_SetProfileTheme_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_SetProfileTheme_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.theme_id = "";
            if (message.theme_id != null && message.hasOwnProperty("theme_id"))
                object.theme_id = message.theme_id;
            return object;
        };
    
        /**
         * Converts this CPlayer_SetProfileTheme_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_SetProfileTheme_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_SetProfileTheme_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_SetProfileTheme_Request;
    })();
    
    $root.CPlayer_SetProfileTheme_Response = (function() {
    
        /**
         * Properties of a CPlayer_SetProfileTheme_Response.
         * @exports ICPlayer_SetProfileTheme_Response
         * @interface ICPlayer_SetProfileTheme_Response
         */
    
        /**
         * Constructs a new CPlayer_SetProfileTheme_Response.
         * @exports CPlayer_SetProfileTheme_Response
         * @classdesc Represents a CPlayer_SetProfileTheme_Response.
         * @implements ICPlayer_SetProfileTheme_Response
         * @constructor
         * @param {ICPlayer_SetProfileTheme_Response=} [properties] Properties to set
         */
        function CPlayer_SetProfileTheme_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CPlayer_SetProfileTheme_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_SetProfileTheme_Response
         * @static
         * @param {ICPlayer_SetProfileTheme_Response=} [properties] Properties to set
         * @returns {CPlayer_SetProfileTheme_Response} CPlayer_SetProfileTheme_Response instance
         */
        CPlayer_SetProfileTheme_Response.create = function create(properties) {
            return new CPlayer_SetProfileTheme_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_SetProfileTheme_Response message. Does not implicitly {@link CPlayer_SetProfileTheme_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_SetProfileTheme_Response
         * @static
         * @param {ICPlayer_SetProfileTheme_Response} message CPlayer_SetProfileTheme_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetProfileTheme_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_SetProfileTheme_Response message, length delimited. Does not implicitly {@link CPlayer_SetProfileTheme_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_SetProfileTheme_Response
         * @static
         * @param {ICPlayer_SetProfileTheme_Response} message CPlayer_SetProfileTheme_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetProfileTheme_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_SetProfileTheme_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_SetProfileTheme_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_SetProfileTheme_Response} CPlayer_SetProfileTheme_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetProfileTheme_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_SetProfileTheme_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_SetProfileTheme_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_SetProfileTheme_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_SetProfileTheme_Response} CPlayer_SetProfileTheme_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetProfileTheme_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_SetProfileTheme_Response message.
         * @function verify
         * @memberof CPlayer_SetProfileTheme_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_SetProfileTheme_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_SetProfileTheme_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_SetProfileTheme_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_SetProfileTheme_Response} CPlayer_SetProfileTheme_Response
         */
        CPlayer_SetProfileTheme_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_SetProfileTheme_Response)
                return object;
            return new $root.CPlayer_SetProfileTheme_Response();
        };
    
        /**
         * Creates a plain object from a CPlayer_SetProfileTheme_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_SetProfileTheme_Response
         * @static
         * @param {CPlayer_SetProfileTheme_Response} message CPlayer_SetProfileTheme_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_SetProfileTheme_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CPlayer_SetProfileTheme_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_SetProfileTheme_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_SetProfileTheme_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_SetProfileTheme_Response;
    })();
    
    $root.CPlayer_PostStatusToFriends_Request = (function() {
    
        /**
         * Properties of a CPlayer_PostStatusToFriends_Request.
         * @exports ICPlayer_PostStatusToFriends_Request
         * @interface ICPlayer_PostStatusToFriends_Request
         * @property {number|null} [appid] CPlayer_PostStatusToFriends_Request appid
         * @property {string|null} [status_text] CPlayer_PostStatusToFriends_Request status_text
         */
    
        /**
         * Constructs a new CPlayer_PostStatusToFriends_Request.
         * @exports CPlayer_PostStatusToFriends_Request
         * @classdesc Represents a CPlayer_PostStatusToFriends_Request.
         * @implements ICPlayer_PostStatusToFriends_Request
         * @constructor
         * @param {ICPlayer_PostStatusToFriends_Request=} [properties] Properties to set
         */
        function CPlayer_PostStatusToFriends_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_PostStatusToFriends_Request appid.
         * @member {number} appid
         * @memberof CPlayer_PostStatusToFriends_Request
         * @instance
         */
        CPlayer_PostStatusToFriends_Request.prototype.appid = 0;
    
        /**
         * CPlayer_PostStatusToFriends_Request status_text.
         * @member {string} status_text
         * @memberof CPlayer_PostStatusToFriends_Request
         * @instance
         */
        CPlayer_PostStatusToFriends_Request.prototype.status_text = "";
    
        /**
         * Creates a new CPlayer_PostStatusToFriends_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_PostStatusToFriends_Request
         * @static
         * @param {ICPlayer_PostStatusToFriends_Request=} [properties] Properties to set
         * @returns {CPlayer_PostStatusToFriends_Request} CPlayer_PostStatusToFriends_Request instance
         */
        CPlayer_PostStatusToFriends_Request.create = function create(properties) {
            return new CPlayer_PostStatusToFriends_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_PostStatusToFriends_Request message. Does not implicitly {@link CPlayer_PostStatusToFriends_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_PostStatusToFriends_Request
         * @static
         * @param {ICPlayer_PostStatusToFriends_Request} message CPlayer_PostStatusToFriends_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_PostStatusToFriends_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appid != null && Object.hasOwnProperty.call(message, "appid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
            if (message.status_text != null && Object.hasOwnProperty.call(message, "status_text"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.status_text);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_PostStatusToFriends_Request message, length delimited. Does not implicitly {@link CPlayer_PostStatusToFriends_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_PostStatusToFriends_Request
         * @static
         * @param {ICPlayer_PostStatusToFriends_Request} message CPlayer_PostStatusToFriends_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_PostStatusToFriends_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_PostStatusToFriends_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_PostStatusToFriends_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_PostStatusToFriends_Request} CPlayer_PostStatusToFriends_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_PostStatusToFriends_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_PostStatusToFriends_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.appid = reader.uint32();
                    break;
                case 2:
                    message.status_text = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_PostStatusToFriends_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_PostStatusToFriends_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_PostStatusToFriends_Request} CPlayer_PostStatusToFriends_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_PostStatusToFriends_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_PostStatusToFriends_Request message.
         * @function verify
         * @memberof CPlayer_PostStatusToFriends_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_PostStatusToFriends_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.status_text != null && message.hasOwnProperty("status_text"))
                if (!$util.isString(message.status_text))
                    return "status_text: string expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_PostStatusToFriends_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_PostStatusToFriends_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_PostStatusToFriends_Request} CPlayer_PostStatusToFriends_Request
         */
        CPlayer_PostStatusToFriends_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_PostStatusToFriends_Request)
                return object;
            var message = new $root.CPlayer_PostStatusToFriends_Request();
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.status_text != null)
                message.status_text = String(object.status_text);
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_PostStatusToFriends_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_PostStatusToFriends_Request
         * @static
         * @param {CPlayer_PostStatusToFriends_Request} message CPlayer_PostStatusToFriends_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_PostStatusToFriends_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.appid = 0;
                object.status_text = "";
            }
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.status_text != null && message.hasOwnProperty("status_text"))
                object.status_text = message.status_text;
            return object;
        };
    
        /**
         * Converts this CPlayer_PostStatusToFriends_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_PostStatusToFriends_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_PostStatusToFriends_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_PostStatusToFriends_Request;
    })();
    
    $root.CPlayer_PostStatusToFriends_Response = (function() {
    
        /**
         * Properties of a CPlayer_PostStatusToFriends_Response.
         * @exports ICPlayer_PostStatusToFriends_Response
         * @interface ICPlayer_PostStatusToFriends_Response
         */
    
        /**
         * Constructs a new CPlayer_PostStatusToFriends_Response.
         * @exports CPlayer_PostStatusToFriends_Response
         * @classdesc Represents a CPlayer_PostStatusToFriends_Response.
         * @implements ICPlayer_PostStatusToFriends_Response
         * @constructor
         * @param {ICPlayer_PostStatusToFriends_Response=} [properties] Properties to set
         */
        function CPlayer_PostStatusToFriends_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CPlayer_PostStatusToFriends_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_PostStatusToFriends_Response
         * @static
         * @param {ICPlayer_PostStatusToFriends_Response=} [properties] Properties to set
         * @returns {CPlayer_PostStatusToFriends_Response} CPlayer_PostStatusToFriends_Response instance
         */
        CPlayer_PostStatusToFriends_Response.create = function create(properties) {
            return new CPlayer_PostStatusToFriends_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_PostStatusToFriends_Response message. Does not implicitly {@link CPlayer_PostStatusToFriends_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_PostStatusToFriends_Response
         * @static
         * @param {ICPlayer_PostStatusToFriends_Response} message CPlayer_PostStatusToFriends_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_PostStatusToFriends_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_PostStatusToFriends_Response message, length delimited. Does not implicitly {@link CPlayer_PostStatusToFriends_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_PostStatusToFriends_Response
         * @static
         * @param {ICPlayer_PostStatusToFriends_Response} message CPlayer_PostStatusToFriends_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_PostStatusToFriends_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_PostStatusToFriends_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_PostStatusToFriends_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_PostStatusToFriends_Response} CPlayer_PostStatusToFriends_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_PostStatusToFriends_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_PostStatusToFriends_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_PostStatusToFriends_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_PostStatusToFriends_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_PostStatusToFriends_Response} CPlayer_PostStatusToFriends_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_PostStatusToFriends_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_PostStatusToFriends_Response message.
         * @function verify
         * @memberof CPlayer_PostStatusToFriends_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_PostStatusToFriends_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_PostStatusToFriends_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_PostStatusToFriends_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_PostStatusToFriends_Response} CPlayer_PostStatusToFriends_Response
         */
        CPlayer_PostStatusToFriends_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_PostStatusToFriends_Response)
                return object;
            return new $root.CPlayer_PostStatusToFriends_Response();
        };
    
        /**
         * Creates a plain object from a CPlayer_PostStatusToFriends_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_PostStatusToFriends_Response
         * @static
         * @param {CPlayer_PostStatusToFriends_Response} message CPlayer_PostStatusToFriends_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_PostStatusToFriends_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CPlayer_PostStatusToFriends_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_PostStatusToFriends_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_PostStatusToFriends_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_PostStatusToFriends_Response;
    })();
    
    $root.CPlayer_GetPostedStatus_Request = (function() {
    
        /**
         * Properties of a CPlayer_GetPostedStatus_Request.
         * @exports ICPlayer_GetPostedStatus_Request
         * @interface ICPlayer_GetPostedStatus_Request
         * @property {number|Long|null} [steamid] CPlayer_GetPostedStatus_Request steamid
         * @property {number|Long|null} [postid] CPlayer_GetPostedStatus_Request postid
         */
    
        /**
         * Constructs a new CPlayer_GetPostedStatus_Request.
         * @exports CPlayer_GetPostedStatus_Request
         * @classdesc Represents a CPlayer_GetPostedStatus_Request.
         * @implements ICPlayer_GetPostedStatus_Request
         * @constructor
         * @param {ICPlayer_GetPostedStatus_Request=} [properties] Properties to set
         */
        function CPlayer_GetPostedStatus_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetPostedStatus_Request steamid.
         * @member {number|Long} steamid
         * @memberof CPlayer_GetPostedStatus_Request
         * @instance
         */
        CPlayer_GetPostedStatus_Request.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CPlayer_GetPostedStatus_Request postid.
         * @member {number|Long} postid
         * @memberof CPlayer_GetPostedStatus_Request
         * @instance
         */
        CPlayer_GetPostedStatus_Request.prototype.postid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CPlayer_GetPostedStatus_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetPostedStatus_Request
         * @static
         * @param {ICPlayer_GetPostedStatus_Request=} [properties] Properties to set
         * @returns {CPlayer_GetPostedStatus_Request} CPlayer_GetPostedStatus_Request instance
         */
        CPlayer_GetPostedStatus_Request.create = function create(properties) {
            return new CPlayer_GetPostedStatus_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetPostedStatus_Request message. Does not implicitly {@link CPlayer_GetPostedStatus_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetPostedStatus_Request
         * @static
         * @param {ICPlayer_GetPostedStatus_Request} message CPlayer_GetPostedStatus_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetPostedStatus_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid != null && Object.hasOwnProperty.call(message, "steamid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.steamid);
            if (message.postid != null && Object.hasOwnProperty.call(message, "postid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.postid);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetPostedStatus_Request message, length delimited. Does not implicitly {@link CPlayer_GetPostedStatus_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetPostedStatus_Request
         * @static
         * @param {ICPlayer_GetPostedStatus_Request} message CPlayer_GetPostedStatus_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetPostedStatus_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetPostedStatus_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetPostedStatus_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetPostedStatus_Request} CPlayer_GetPostedStatus_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetPostedStatus_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetPostedStatus_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid = reader.uint64();
                    break;
                case 2:
                    message.postid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetPostedStatus_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetPostedStatus_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetPostedStatus_Request} CPlayer_GetPostedStatus_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetPostedStatus_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetPostedStatus_Request message.
         * @function verify
         * @memberof CPlayer_GetPostedStatus_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetPostedStatus_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            if (message.postid != null && message.hasOwnProperty("postid"))
                if (!$util.isInteger(message.postid) && !(message.postid && $util.isInteger(message.postid.low) && $util.isInteger(message.postid.high)))
                    return "postid: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_GetPostedStatus_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetPostedStatus_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetPostedStatus_Request} CPlayer_GetPostedStatus_Request
         */
        CPlayer_GetPostedStatus_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetPostedStatus_Request)
                return object;
            var message = new $root.CPlayer_GetPostedStatus_Request();
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = true;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber(true);
            if (object.postid != null)
                if ($util.Long)
                    (message.postid = $util.Long.fromValue(object.postid)).unsigned = true;
                else if (typeof object.postid === "string")
                    message.postid = parseInt(object.postid, 10);
                else if (typeof object.postid === "number")
                    message.postid = object.postid;
                else if (typeof object.postid === "object")
                    message.postid = new $util.LongBits(object.postid.low >>> 0, object.postid.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetPostedStatus_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetPostedStatus_Request
         * @static
         * @param {CPlayer_GetPostedStatus_Request} message CPlayer_GetPostedStatus_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetPostedStatus_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.postid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.postid = options.longs === String ? "0" : 0;
            }
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber(true) : message.steamid;
            if (message.postid != null && message.hasOwnProperty("postid"))
                if (typeof message.postid === "number")
                    object.postid = options.longs === String ? String(message.postid) : message.postid;
                else
                    object.postid = options.longs === String ? $util.Long.prototype.toString.call(message.postid) : options.longs === Number ? new $util.LongBits(message.postid.low >>> 0, message.postid.high >>> 0).toNumber(true) : message.postid;
            return object;
        };
    
        /**
         * Converts this CPlayer_GetPostedStatus_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_GetPostedStatus_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetPostedStatus_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetPostedStatus_Request;
    })();
    
    $root.CPlayer_GetPostedStatus_Response = (function() {
    
        /**
         * Properties of a CPlayer_GetPostedStatus_Response.
         * @exports ICPlayer_GetPostedStatus_Response
         * @interface ICPlayer_GetPostedStatus_Response
         * @property {number|null} [accountid] CPlayer_GetPostedStatus_Response accountid
         * @property {number|Long|null} [postid] CPlayer_GetPostedStatus_Response postid
         * @property {string|null} [status_text] CPlayer_GetPostedStatus_Response status_text
         * @property {boolean|null} [deleted] CPlayer_GetPostedStatus_Response deleted
         * @property {number|null} [appid] CPlayer_GetPostedStatus_Response appid
         */
    
        /**
         * Constructs a new CPlayer_GetPostedStatus_Response.
         * @exports CPlayer_GetPostedStatus_Response
         * @classdesc Represents a CPlayer_GetPostedStatus_Response.
         * @implements ICPlayer_GetPostedStatus_Response
         * @constructor
         * @param {ICPlayer_GetPostedStatus_Response=} [properties] Properties to set
         */
        function CPlayer_GetPostedStatus_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetPostedStatus_Response accountid.
         * @member {number} accountid
         * @memberof CPlayer_GetPostedStatus_Response
         * @instance
         */
        CPlayer_GetPostedStatus_Response.prototype.accountid = 0;
    
        /**
         * CPlayer_GetPostedStatus_Response postid.
         * @member {number|Long} postid
         * @memberof CPlayer_GetPostedStatus_Response
         * @instance
         */
        CPlayer_GetPostedStatus_Response.prototype.postid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CPlayer_GetPostedStatus_Response status_text.
         * @member {string} status_text
         * @memberof CPlayer_GetPostedStatus_Response
         * @instance
         */
        CPlayer_GetPostedStatus_Response.prototype.status_text = "";
    
        /**
         * CPlayer_GetPostedStatus_Response deleted.
         * @member {boolean} deleted
         * @memberof CPlayer_GetPostedStatus_Response
         * @instance
         */
        CPlayer_GetPostedStatus_Response.prototype.deleted = false;
    
        /**
         * CPlayer_GetPostedStatus_Response appid.
         * @member {number} appid
         * @memberof CPlayer_GetPostedStatus_Response
         * @instance
         */
        CPlayer_GetPostedStatus_Response.prototype.appid = 0;
    
        /**
         * Creates a new CPlayer_GetPostedStatus_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetPostedStatus_Response
         * @static
         * @param {ICPlayer_GetPostedStatus_Response=} [properties] Properties to set
         * @returns {CPlayer_GetPostedStatus_Response} CPlayer_GetPostedStatus_Response instance
         */
        CPlayer_GetPostedStatus_Response.create = function create(properties) {
            return new CPlayer_GetPostedStatus_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetPostedStatus_Response message. Does not implicitly {@link CPlayer_GetPostedStatus_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetPostedStatus_Response
         * @static
         * @param {ICPlayer_GetPostedStatus_Response} message CPlayer_GetPostedStatus_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetPostedStatus_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.accountid != null && Object.hasOwnProperty.call(message, "accountid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.accountid);
            if (message.postid != null && Object.hasOwnProperty.call(message, "postid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.postid);
            if (message.status_text != null && Object.hasOwnProperty.call(message, "status_text"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.status_text);
            if (message.deleted != null && Object.hasOwnProperty.call(message, "deleted"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.deleted);
            if (message.appid != null && Object.hasOwnProperty.call(message, "appid"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.appid);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetPostedStatus_Response message, length delimited. Does not implicitly {@link CPlayer_GetPostedStatus_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetPostedStatus_Response
         * @static
         * @param {ICPlayer_GetPostedStatus_Response} message CPlayer_GetPostedStatus_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetPostedStatus_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetPostedStatus_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetPostedStatus_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetPostedStatus_Response} CPlayer_GetPostedStatus_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetPostedStatus_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetPostedStatus_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.accountid = reader.uint32();
                    break;
                case 2:
                    message.postid = reader.uint64();
                    break;
                case 3:
                    message.status_text = reader.string();
                    break;
                case 4:
                    message.deleted = reader.bool();
                    break;
                case 5:
                    message.appid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetPostedStatus_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetPostedStatus_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetPostedStatus_Response} CPlayer_GetPostedStatus_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetPostedStatus_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetPostedStatus_Response message.
         * @function verify
         * @memberof CPlayer_GetPostedStatus_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetPostedStatus_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                if (!$util.isInteger(message.accountid))
                    return "accountid: integer expected";
            if (message.postid != null && message.hasOwnProperty("postid"))
                if (!$util.isInteger(message.postid) && !(message.postid && $util.isInteger(message.postid.low) && $util.isInteger(message.postid.high)))
                    return "postid: integer|Long expected";
            if (message.status_text != null && message.hasOwnProperty("status_text"))
                if (!$util.isString(message.status_text))
                    return "status_text: string expected";
            if (message.deleted != null && message.hasOwnProperty("deleted"))
                if (typeof message.deleted !== "boolean")
                    return "deleted: boolean expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_GetPostedStatus_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetPostedStatus_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetPostedStatus_Response} CPlayer_GetPostedStatus_Response
         */
        CPlayer_GetPostedStatus_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetPostedStatus_Response)
                return object;
            var message = new $root.CPlayer_GetPostedStatus_Response();
            if (object.accountid != null)
                message.accountid = object.accountid >>> 0;
            if (object.postid != null)
                if ($util.Long)
                    (message.postid = $util.Long.fromValue(object.postid)).unsigned = true;
                else if (typeof object.postid === "string")
                    message.postid = parseInt(object.postid, 10);
                else if (typeof object.postid === "number")
                    message.postid = object.postid;
                else if (typeof object.postid === "object")
                    message.postid = new $util.LongBits(object.postid.low >>> 0, object.postid.high >>> 0).toNumber(true);
            if (object.status_text != null)
                message.status_text = String(object.status_text);
            if (object.deleted != null)
                message.deleted = Boolean(object.deleted);
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetPostedStatus_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetPostedStatus_Response
         * @static
         * @param {CPlayer_GetPostedStatus_Response} message CPlayer_GetPostedStatus_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetPostedStatus_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.accountid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.postid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.postid = options.longs === String ? "0" : 0;
                object.status_text = "";
                object.deleted = false;
                object.appid = 0;
            }
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                object.accountid = message.accountid;
            if (message.postid != null && message.hasOwnProperty("postid"))
                if (typeof message.postid === "number")
                    object.postid = options.longs === String ? String(message.postid) : message.postid;
                else
                    object.postid = options.longs === String ? $util.Long.prototype.toString.call(message.postid) : options.longs === Number ? new $util.LongBits(message.postid.low >>> 0, message.postid.high >>> 0).toNumber(true) : message.postid;
            if (message.status_text != null && message.hasOwnProperty("status_text"))
                object.status_text = message.status_text;
            if (message.deleted != null && message.hasOwnProperty("deleted"))
                object.deleted = message.deleted;
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            return object;
        };
    
        /**
         * Converts this CPlayer_GetPostedStatus_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_GetPostedStatus_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetPostedStatus_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetPostedStatus_Response;
    })();
    
    $root.CPlayer_DeletePostedStatus_Request = (function() {
    
        /**
         * Properties of a CPlayer_DeletePostedStatus_Request.
         * @exports ICPlayer_DeletePostedStatus_Request
         * @interface ICPlayer_DeletePostedStatus_Request
         * @property {number|Long|null} [postid] CPlayer_DeletePostedStatus_Request postid
         */
    
        /**
         * Constructs a new CPlayer_DeletePostedStatus_Request.
         * @exports CPlayer_DeletePostedStatus_Request
         * @classdesc Represents a CPlayer_DeletePostedStatus_Request.
         * @implements ICPlayer_DeletePostedStatus_Request
         * @constructor
         * @param {ICPlayer_DeletePostedStatus_Request=} [properties] Properties to set
         */
        function CPlayer_DeletePostedStatus_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_DeletePostedStatus_Request postid.
         * @member {number|Long} postid
         * @memberof CPlayer_DeletePostedStatus_Request
         * @instance
         */
        CPlayer_DeletePostedStatus_Request.prototype.postid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CPlayer_DeletePostedStatus_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_DeletePostedStatus_Request
         * @static
         * @param {ICPlayer_DeletePostedStatus_Request=} [properties] Properties to set
         * @returns {CPlayer_DeletePostedStatus_Request} CPlayer_DeletePostedStatus_Request instance
         */
        CPlayer_DeletePostedStatus_Request.create = function create(properties) {
            return new CPlayer_DeletePostedStatus_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_DeletePostedStatus_Request message. Does not implicitly {@link CPlayer_DeletePostedStatus_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_DeletePostedStatus_Request
         * @static
         * @param {ICPlayer_DeletePostedStatus_Request} message CPlayer_DeletePostedStatus_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_DeletePostedStatus_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.postid != null && Object.hasOwnProperty.call(message, "postid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.postid);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_DeletePostedStatus_Request message, length delimited. Does not implicitly {@link CPlayer_DeletePostedStatus_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_DeletePostedStatus_Request
         * @static
         * @param {ICPlayer_DeletePostedStatus_Request} message CPlayer_DeletePostedStatus_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_DeletePostedStatus_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_DeletePostedStatus_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_DeletePostedStatus_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_DeletePostedStatus_Request} CPlayer_DeletePostedStatus_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_DeletePostedStatus_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_DeletePostedStatus_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.postid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_DeletePostedStatus_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_DeletePostedStatus_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_DeletePostedStatus_Request} CPlayer_DeletePostedStatus_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_DeletePostedStatus_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_DeletePostedStatus_Request message.
         * @function verify
         * @memberof CPlayer_DeletePostedStatus_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_DeletePostedStatus_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.postid != null && message.hasOwnProperty("postid"))
                if (!$util.isInteger(message.postid) && !(message.postid && $util.isInteger(message.postid.low) && $util.isInteger(message.postid.high)))
                    return "postid: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_DeletePostedStatus_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_DeletePostedStatus_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_DeletePostedStatus_Request} CPlayer_DeletePostedStatus_Request
         */
        CPlayer_DeletePostedStatus_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_DeletePostedStatus_Request)
                return object;
            var message = new $root.CPlayer_DeletePostedStatus_Request();
            if (object.postid != null)
                if ($util.Long)
                    (message.postid = $util.Long.fromValue(object.postid)).unsigned = true;
                else if (typeof object.postid === "string")
                    message.postid = parseInt(object.postid, 10);
                else if (typeof object.postid === "number")
                    message.postid = object.postid;
                else if (typeof object.postid === "object")
                    message.postid = new $util.LongBits(object.postid.low >>> 0, object.postid.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_DeletePostedStatus_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_DeletePostedStatus_Request
         * @static
         * @param {CPlayer_DeletePostedStatus_Request} message CPlayer_DeletePostedStatus_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_DeletePostedStatus_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.postid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.postid = options.longs === String ? "0" : 0;
            if (message.postid != null && message.hasOwnProperty("postid"))
                if (typeof message.postid === "number")
                    object.postid = options.longs === String ? String(message.postid) : message.postid;
                else
                    object.postid = options.longs === String ? $util.Long.prototype.toString.call(message.postid) : options.longs === Number ? new $util.LongBits(message.postid.low >>> 0, message.postid.high >>> 0).toNumber(true) : message.postid;
            return object;
        };
    
        /**
         * Converts this CPlayer_DeletePostedStatus_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_DeletePostedStatus_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_DeletePostedStatus_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_DeletePostedStatus_Request;
    })();
    
    $root.CPlayer_DeletePostedStatus_Response = (function() {
    
        /**
         * Properties of a CPlayer_DeletePostedStatus_Response.
         * @exports ICPlayer_DeletePostedStatus_Response
         * @interface ICPlayer_DeletePostedStatus_Response
         */
    
        /**
         * Constructs a new CPlayer_DeletePostedStatus_Response.
         * @exports CPlayer_DeletePostedStatus_Response
         * @classdesc Represents a CPlayer_DeletePostedStatus_Response.
         * @implements ICPlayer_DeletePostedStatus_Response
         * @constructor
         * @param {ICPlayer_DeletePostedStatus_Response=} [properties] Properties to set
         */
        function CPlayer_DeletePostedStatus_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CPlayer_DeletePostedStatus_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_DeletePostedStatus_Response
         * @static
         * @param {ICPlayer_DeletePostedStatus_Response=} [properties] Properties to set
         * @returns {CPlayer_DeletePostedStatus_Response} CPlayer_DeletePostedStatus_Response instance
         */
        CPlayer_DeletePostedStatus_Response.create = function create(properties) {
            return new CPlayer_DeletePostedStatus_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_DeletePostedStatus_Response message. Does not implicitly {@link CPlayer_DeletePostedStatus_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_DeletePostedStatus_Response
         * @static
         * @param {ICPlayer_DeletePostedStatus_Response} message CPlayer_DeletePostedStatus_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_DeletePostedStatus_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_DeletePostedStatus_Response message, length delimited. Does not implicitly {@link CPlayer_DeletePostedStatus_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_DeletePostedStatus_Response
         * @static
         * @param {ICPlayer_DeletePostedStatus_Response} message CPlayer_DeletePostedStatus_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_DeletePostedStatus_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_DeletePostedStatus_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_DeletePostedStatus_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_DeletePostedStatus_Response} CPlayer_DeletePostedStatus_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_DeletePostedStatus_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_DeletePostedStatus_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_DeletePostedStatus_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_DeletePostedStatus_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_DeletePostedStatus_Response} CPlayer_DeletePostedStatus_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_DeletePostedStatus_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_DeletePostedStatus_Response message.
         * @function verify
         * @memberof CPlayer_DeletePostedStatus_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_DeletePostedStatus_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_DeletePostedStatus_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_DeletePostedStatus_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_DeletePostedStatus_Response} CPlayer_DeletePostedStatus_Response
         */
        CPlayer_DeletePostedStatus_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_DeletePostedStatus_Response)
                return object;
            return new $root.CPlayer_DeletePostedStatus_Response();
        };
    
        /**
         * Creates a plain object from a CPlayer_DeletePostedStatus_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_DeletePostedStatus_Response
         * @static
         * @param {CPlayer_DeletePostedStatus_Response} message CPlayer_DeletePostedStatus_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_DeletePostedStatus_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CPlayer_DeletePostedStatus_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_DeletePostedStatus_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_DeletePostedStatus_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_DeletePostedStatus_Response;
    })();
    
    $root.CPlayer_GetLastPlayedTimes_Request = (function() {
    
        /**
         * Properties of a CPlayer_GetLastPlayedTimes_Request.
         * @exports ICPlayer_GetLastPlayedTimes_Request
         * @interface ICPlayer_GetLastPlayedTimes_Request
         * @property {number|null} [min_last_played] CPlayer_GetLastPlayedTimes_Request min_last_played
         */
    
        /**
         * Constructs a new CPlayer_GetLastPlayedTimes_Request.
         * @exports CPlayer_GetLastPlayedTimes_Request
         * @classdesc Represents a CPlayer_GetLastPlayedTimes_Request.
         * @implements ICPlayer_GetLastPlayedTimes_Request
         * @constructor
         * @param {ICPlayer_GetLastPlayedTimes_Request=} [properties] Properties to set
         */
        function CPlayer_GetLastPlayedTimes_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetLastPlayedTimes_Request min_last_played.
         * @member {number} min_last_played
         * @memberof CPlayer_GetLastPlayedTimes_Request
         * @instance
         */
        CPlayer_GetLastPlayedTimes_Request.prototype.min_last_played = 0;
    
        /**
         * Creates a new CPlayer_GetLastPlayedTimes_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetLastPlayedTimes_Request
         * @static
         * @param {ICPlayer_GetLastPlayedTimes_Request=} [properties] Properties to set
         * @returns {CPlayer_GetLastPlayedTimes_Request} CPlayer_GetLastPlayedTimes_Request instance
         */
        CPlayer_GetLastPlayedTimes_Request.create = function create(properties) {
            return new CPlayer_GetLastPlayedTimes_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetLastPlayedTimes_Request message. Does not implicitly {@link CPlayer_GetLastPlayedTimes_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetLastPlayedTimes_Request
         * @static
         * @param {ICPlayer_GetLastPlayedTimes_Request} message CPlayer_GetLastPlayedTimes_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetLastPlayedTimes_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.min_last_played != null && Object.hasOwnProperty.call(message, "min_last_played"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.min_last_played);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetLastPlayedTimes_Request message, length delimited. Does not implicitly {@link CPlayer_GetLastPlayedTimes_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetLastPlayedTimes_Request
         * @static
         * @param {ICPlayer_GetLastPlayedTimes_Request} message CPlayer_GetLastPlayedTimes_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetLastPlayedTimes_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetLastPlayedTimes_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetLastPlayedTimes_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetLastPlayedTimes_Request} CPlayer_GetLastPlayedTimes_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetLastPlayedTimes_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetLastPlayedTimes_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.min_last_played = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetLastPlayedTimes_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetLastPlayedTimes_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetLastPlayedTimes_Request} CPlayer_GetLastPlayedTimes_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetLastPlayedTimes_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetLastPlayedTimes_Request message.
         * @function verify
         * @memberof CPlayer_GetLastPlayedTimes_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetLastPlayedTimes_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.min_last_played != null && message.hasOwnProperty("min_last_played"))
                if (!$util.isInteger(message.min_last_played))
                    return "min_last_played: integer expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_GetLastPlayedTimes_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetLastPlayedTimes_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetLastPlayedTimes_Request} CPlayer_GetLastPlayedTimes_Request
         */
        CPlayer_GetLastPlayedTimes_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetLastPlayedTimes_Request)
                return object;
            var message = new $root.CPlayer_GetLastPlayedTimes_Request();
            if (object.min_last_played != null)
                message.min_last_played = object.min_last_played >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetLastPlayedTimes_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetLastPlayedTimes_Request
         * @static
         * @param {CPlayer_GetLastPlayedTimes_Request} message CPlayer_GetLastPlayedTimes_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetLastPlayedTimes_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.min_last_played = 0;
            if (message.min_last_played != null && message.hasOwnProperty("min_last_played"))
                object.min_last_played = message.min_last_played;
            return object;
        };
    
        /**
         * Converts this CPlayer_GetLastPlayedTimes_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_GetLastPlayedTimes_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetLastPlayedTimes_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetLastPlayedTimes_Request;
    })();
    
    $root.CPlayer_GetLastPlayedTimes_Response = (function() {
    
        /**
         * Properties of a CPlayer_GetLastPlayedTimes_Response.
         * @exports ICPlayer_GetLastPlayedTimes_Response
         * @interface ICPlayer_GetLastPlayedTimes_Response
         * @property {Array.<CPlayer_GetLastPlayedTimes_Response.IGame>|null} [games] CPlayer_GetLastPlayedTimes_Response games
         */
    
        /**
         * Constructs a new CPlayer_GetLastPlayedTimes_Response.
         * @exports CPlayer_GetLastPlayedTimes_Response
         * @classdesc Represents a CPlayer_GetLastPlayedTimes_Response.
         * @implements ICPlayer_GetLastPlayedTimes_Response
         * @constructor
         * @param {ICPlayer_GetLastPlayedTimes_Response=} [properties] Properties to set
         */
        function CPlayer_GetLastPlayedTimes_Response(properties) {
            this.games = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetLastPlayedTimes_Response games.
         * @member {Array.<CPlayer_GetLastPlayedTimes_Response.IGame>} games
         * @memberof CPlayer_GetLastPlayedTimes_Response
         * @instance
         */
        CPlayer_GetLastPlayedTimes_Response.prototype.games = $util.emptyArray;
    
        /**
         * Creates a new CPlayer_GetLastPlayedTimes_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetLastPlayedTimes_Response
         * @static
         * @param {ICPlayer_GetLastPlayedTimes_Response=} [properties] Properties to set
         * @returns {CPlayer_GetLastPlayedTimes_Response} CPlayer_GetLastPlayedTimes_Response instance
         */
        CPlayer_GetLastPlayedTimes_Response.create = function create(properties) {
            return new CPlayer_GetLastPlayedTimes_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetLastPlayedTimes_Response message. Does not implicitly {@link CPlayer_GetLastPlayedTimes_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetLastPlayedTimes_Response
         * @static
         * @param {ICPlayer_GetLastPlayedTimes_Response} message CPlayer_GetLastPlayedTimes_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetLastPlayedTimes_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.games != null && message.games.length)
                for (var i = 0; i < message.games.length; ++i)
                    $root.CPlayer_GetLastPlayedTimes_Response.Game.encode(message.games[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetLastPlayedTimes_Response message, length delimited. Does not implicitly {@link CPlayer_GetLastPlayedTimes_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetLastPlayedTimes_Response
         * @static
         * @param {ICPlayer_GetLastPlayedTimes_Response} message CPlayer_GetLastPlayedTimes_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetLastPlayedTimes_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetLastPlayedTimes_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetLastPlayedTimes_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetLastPlayedTimes_Response} CPlayer_GetLastPlayedTimes_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetLastPlayedTimes_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetLastPlayedTimes_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.games && message.games.length))
                        message.games = [];
                    message.games.push($root.CPlayer_GetLastPlayedTimes_Response.Game.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetLastPlayedTimes_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetLastPlayedTimes_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetLastPlayedTimes_Response} CPlayer_GetLastPlayedTimes_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetLastPlayedTimes_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetLastPlayedTimes_Response message.
         * @function verify
         * @memberof CPlayer_GetLastPlayedTimes_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetLastPlayedTimes_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.games != null && message.hasOwnProperty("games")) {
                if (!Array.isArray(message.games))
                    return "games: array expected";
                for (var i = 0; i < message.games.length; ++i) {
                    var error = $root.CPlayer_GetLastPlayedTimes_Response.Game.verify(message.games[i]);
                    if (error)
                        return "games." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CPlayer_GetLastPlayedTimes_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetLastPlayedTimes_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetLastPlayedTimes_Response} CPlayer_GetLastPlayedTimes_Response
         */
        CPlayer_GetLastPlayedTimes_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetLastPlayedTimes_Response)
                return object;
            var message = new $root.CPlayer_GetLastPlayedTimes_Response();
            if (object.games) {
                if (!Array.isArray(object.games))
                    throw TypeError(".CPlayer_GetLastPlayedTimes_Response.games: array expected");
                message.games = [];
                for (var i = 0; i < object.games.length; ++i) {
                    if (typeof object.games[i] !== "object")
                        throw TypeError(".CPlayer_GetLastPlayedTimes_Response.games: object expected");
                    message.games[i] = $root.CPlayer_GetLastPlayedTimes_Response.Game.fromObject(object.games[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetLastPlayedTimes_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetLastPlayedTimes_Response
         * @static
         * @param {CPlayer_GetLastPlayedTimes_Response} message CPlayer_GetLastPlayedTimes_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetLastPlayedTimes_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.games = [];
            if (message.games && message.games.length) {
                object.games = [];
                for (var j = 0; j < message.games.length; ++j)
                    object.games[j] = $root.CPlayer_GetLastPlayedTimes_Response.Game.toObject(message.games[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CPlayer_GetLastPlayedTimes_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_GetLastPlayedTimes_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetLastPlayedTimes_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CPlayer_GetLastPlayedTimes_Response.Game = (function() {
    
            /**
             * Properties of a Game.
             * @memberof CPlayer_GetLastPlayedTimes_Response
             * @interface IGame
             * @property {number|null} [appid] Game appid
             * @property {number|null} [last_playtime] Game last_playtime
             * @property {number|null} [playtime_2weeks] Game playtime_2weeks
             * @property {number|null} [playtime_forever] Game playtime_forever
             * @property {number|null} [first_playtime] Game first_playtime
             * @property {number|null} [playtime_windows_forever] Game playtime_windows_forever
             * @property {number|null} [playtime_mac_forever] Game playtime_mac_forever
             * @property {number|null} [playtime_linux_forever] Game playtime_linux_forever
             * @property {number|null} [first_windows_playtime] Game first_windows_playtime
             * @property {number|null} [first_mac_playtime] Game first_mac_playtime
             * @property {number|null} [first_linux_playtime] Game first_linux_playtime
             * @property {number|null} [last_windows_playtime] Game last_windows_playtime
             * @property {number|null} [last_mac_playtime] Game last_mac_playtime
             * @property {number|null} [last_linux_playtime] Game last_linux_playtime
             */
    
            /**
             * Constructs a new Game.
             * @memberof CPlayer_GetLastPlayedTimes_Response
             * @classdesc Represents a Game.
             * @implements IGame
             * @constructor
             * @param {CPlayer_GetLastPlayedTimes_Response.IGame=} [properties] Properties to set
             */
            function Game(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Game appid.
             * @member {number} appid
             * @memberof CPlayer_GetLastPlayedTimes_Response.Game
             * @instance
             */
            Game.prototype.appid = 0;
    
            /**
             * Game last_playtime.
             * @member {number} last_playtime
             * @memberof CPlayer_GetLastPlayedTimes_Response.Game
             * @instance
             */
            Game.prototype.last_playtime = 0;
    
            /**
             * Game playtime_2weeks.
             * @member {number} playtime_2weeks
             * @memberof CPlayer_GetLastPlayedTimes_Response.Game
             * @instance
             */
            Game.prototype.playtime_2weeks = 0;
    
            /**
             * Game playtime_forever.
             * @member {number} playtime_forever
             * @memberof CPlayer_GetLastPlayedTimes_Response.Game
             * @instance
             */
            Game.prototype.playtime_forever = 0;
    
            /**
             * Game first_playtime.
             * @member {number} first_playtime
             * @memberof CPlayer_GetLastPlayedTimes_Response.Game
             * @instance
             */
            Game.prototype.first_playtime = 0;
    
            /**
             * Game playtime_windows_forever.
             * @member {number} playtime_windows_forever
             * @memberof CPlayer_GetLastPlayedTimes_Response.Game
             * @instance
             */
            Game.prototype.playtime_windows_forever = 0;
    
            /**
             * Game playtime_mac_forever.
             * @member {number} playtime_mac_forever
             * @memberof CPlayer_GetLastPlayedTimes_Response.Game
             * @instance
             */
            Game.prototype.playtime_mac_forever = 0;
    
            /**
             * Game playtime_linux_forever.
             * @member {number} playtime_linux_forever
             * @memberof CPlayer_GetLastPlayedTimes_Response.Game
             * @instance
             */
            Game.prototype.playtime_linux_forever = 0;
    
            /**
             * Game first_windows_playtime.
             * @member {number} first_windows_playtime
             * @memberof CPlayer_GetLastPlayedTimes_Response.Game
             * @instance
             */
            Game.prototype.first_windows_playtime = 0;
    
            /**
             * Game first_mac_playtime.
             * @member {number} first_mac_playtime
             * @memberof CPlayer_GetLastPlayedTimes_Response.Game
             * @instance
             */
            Game.prototype.first_mac_playtime = 0;
    
            /**
             * Game first_linux_playtime.
             * @member {number} first_linux_playtime
             * @memberof CPlayer_GetLastPlayedTimes_Response.Game
             * @instance
             */
            Game.prototype.first_linux_playtime = 0;
    
            /**
             * Game last_windows_playtime.
             * @member {number} last_windows_playtime
             * @memberof CPlayer_GetLastPlayedTimes_Response.Game
             * @instance
             */
            Game.prototype.last_windows_playtime = 0;
    
            /**
             * Game last_mac_playtime.
             * @member {number} last_mac_playtime
             * @memberof CPlayer_GetLastPlayedTimes_Response.Game
             * @instance
             */
            Game.prototype.last_mac_playtime = 0;
    
            /**
             * Game last_linux_playtime.
             * @member {number} last_linux_playtime
             * @memberof CPlayer_GetLastPlayedTimes_Response.Game
             * @instance
             */
            Game.prototype.last_linux_playtime = 0;
    
            /**
             * Creates a new Game instance using the specified properties.
             * @function create
             * @memberof CPlayer_GetLastPlayedTimes_Response.Game
             * @static
             * @param {CPlayer_GetLastPlayedTimes_Response.IGame=} [properties] Properties to set
             * @returns {CPlayer_GetLastPlayedTimes_Response.Game} Game instance
             */
            Game.create = function create(properties) {
                return new Game(properties);
            };
    
            /**
             * Encodes the specified Game message. Does not implicitly {@link CPlayer_GetLastPlayedTimes_Response.Game.verify|verify} messages.
             * @function encode
             * @memberof CPlayer_GetLastPlayedTimes_Response.Game
             * @static
             * @param {CPlayer_GetLastPlayedTimes_Response.IGame} message Game message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Game.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.appid != null && Object.hasOwnProperty.call(message, "appid"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.appid);
                if (message.last_playtime != null && Object.hasOwnProperty.call(message, "last_playtime"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.last_playtime);
                if (message.playtime_2weeks != null && Object.hasOwnProperty.call(message, "playtime_2weeks"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.playtime_2weeks);
                if (message.playtime_forever != null && Object.hasOwnProperty.call(message, "playtime_forever"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.playtime_forever);
                if (message.first_playtime != null && Object.hasOwnProperty.call(message, "first_playtime"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.first_playtime);
                if (message.playtime_windows_forever != null && Object.hasOwnProperty.call(message, "playtime_windows_forever"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.playtime_windows_forever);
                if (message.playtime_mac_forever != null && Object.hasOwnProperty.call(message, "playtime_mac_forever"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int32(message.playtime_mac_forever);
                if (message.playtime_linux_forever != null && Object.hasOwnProperty.call(message, "playtime_linux_forever"))
                    writer.uint32(/* id 8, wireType 0 =*/64).int32(message.playtime_linux_forever);
                if (message.first_windows_playtime != null && Object.hasOwnProperty.call(message, "first_windows_playtime"))
                    writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.first_windows_playtime);
                if (message.first_mac_playtime != null && Object.hasOwnProperty.call(message, "first_mac_playtime"))
                    writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.first_mac_playtime);
                if (message.first_linux_playtime != null && Object.hasOwnProperty.call(message, "first_linux_playtime"))
                    writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.first_linux_playtime);
                if (message.last_windows_playtime != null && Object.hasOwnProperty.call(message, "last_windows_playtime"))
                    writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.last_windows_playtime);
                if (message.last_mac_playtime != null && Object.hasOwnProperty.call(message, "last_mac_playtime"))
                    writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.last_mac_playtime);
                if (message.last_linux_playtime != null && Object.hasOwnProperty.call(message, "last_linux_playtime"))
                    writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.last_linux_playtime);
                return writer;
            };
    
            /**
             * Encodes the specified Game message, length delimited. Does not implicitly {@link CPlayer_GetLastPlayedTimes_Response.Game.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CPlayer_GetLastPlayedTimes_Response.Game
             * @static
             * @param {CPlayer_GetLastPlayedTimes_Response.IGame} message Game message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Game.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Game message from the specified reader or buffer.
             * @function decode
             * @memberof CPlayer_GetLastPlayedTimes_Response.Game
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CPlayer_GetLastPlayedTimes_Response.Game} Game
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Game.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetLastPlayedTimes_Response.Game();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.appid = reader.int32();
                        break;
                    case 2:
                        message.last_playtime = reader.uint32();
                        break;
                    case 3:
                        message.playtime_2weeks = reader.int32();
                        break;
                    case 4:
                        message.playtime_forever = reader.int32();
                        break;
                    case 5:
                        message.first_playtime = reader.uint32();
                        break;
                    case 6:
                        message.playtime_windows_forever = reader.int32();
                        break;
                    case 7:
                        message.playtime_mac_forever = reader.int32();
                        break;
                    case 8:
                        message.playtime_linux_forever = reader.int32();
                        break;
                    case 9:
                        message.first_windows_playtime = reader.uint32();
                        break;
                    case 10:
                        message.first_mac_playtime = reader.uint32();
                        break;
                    case 11:
                        message.first_linux_playtime = reader.uint32();
                        break;
                    case 12:
                        message.last_windows_playtime = reader.uint32();
                        break;
                    case 13:
                        message.last_mac_playtime = reader.uint32();
                        break;
                    case 14:
                        message.last_linux_playtime = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a Game message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CPlayer_GetLastPlayedTimes_Response.Game
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CPlayer_GetLastPlayedTimes_Response.Game} Game
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Game.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Game message.
             * @function verify
             * @memberof CPlayer_GetLastPlayedTimes_Response.Game
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Game.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.appid != null && message.hasOwnProperty("appid"))
                    if (!$util.isInteger(message.appid))
                        return "appid: integer expected";
                if (message.last_playtime != null && message.hasOwnProperty("last_playtime"))
                    if (!$util.isInteger(message.last_playtime))
                        return "last_playtime: integer expected";
                if (message.playtime_2weeks != null && message.hasOwnProperty("playtime_2weeks"))
                    if (!$util.isInteger(message.playtime_2weeks))
                        return "playtime_2weeks: integer expected";
                if (message.playtime_forever != null && message.hasOwnProperty("playtime_forever"))
                    if (!$util.isInteger(message.playtime_forever))
                        return "playtime_forever: integer expected";
                if (message.first_playtime != null && message.hasOwnProperty("first_playtime"))
                    if (!$util.isInteger(message.first_playtime))
                        return "first_playtime: integer expected";
                if (message.playtime_windows_forever != null && message.hasOwnProperty("playtime_windows_forever"))
                    if (!$util.isInteger(message.playtime_windows_forever))
                        return "playtime_windows_forever: integer expected";
                if (message.playtime_mac_forever != null && message.hasOwnProperty("playtime_mac_forever"))
                    if (!$util.isInteger(message.playtime_mac_forever))
                        return "playtime_mac_forever: integer expected";
                if (message.playtime_linux_forever != null && message.hasOwnProperty("playtime_linux_forever"))
                    if (!$util.isInteger(message.playtime_linux_forever))
                        return "playtime_linux_forever: integer expected";
                if (message.first_windows_playtime != null && message.hasOwnProperty("first_windows_playtime"))
                    if (!$util.isInteger(message.first_windows_playtime))
                        return "first_windows_playtime: integer expected";
                if (message.first_mac_playtime != null && message.hasOwnProperty("first_mac_playtime"))
                    if (!$util.isInteger(message.first_mac_playtime))
                        return "first_mac_playtime: integer expected";
                if (message.first_linux_playtime != null && message.hasOwnProperty("first_linux_playtime"))
                    if (!$util.isInteger(message.first_linux_playtime))
                        return "first_linux_playtime: integer expected";
                if (message.last_windows_playtime != null && message.hasOwnProperty("last_windows_playtime"))
                    if (!$util.isInteger(message.last_windows_playtime))
                        return "last_windows_playtime: integer expected";
                if (message.last_mac_playtime != null && message.hasOwnProperty("last_mac_playtime"))
                    if (!$util.isInteger(message.last_mac_playtime))
                        return "last_mac_playtime: integer expected";
                if (message.last_linux_playtime != null && message.hasOwnProperty("last_linux_playtime"))
                    if (!$util.isInteger(message.last_linux_playtime))
                        return "last_linux_playtime: integer expected";
                return null;
            };
    
            /**
             * Creates a Game message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CPlayer_GetLastPlayedTimes_Response.Game
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CPlayer_GetLastPlayedTimes_Response.Game} Game
             */
            Game.fromObject = function fromObject(object) {
                if (object instanceof $root.CPlayer_GetLastPlayedTimes_Response.Game)
                    return object;
                var message = new $root.CPlayer_GetLastPlayedTimes_Response.Game();
                if (object.appid != null)
                    message.appid = object.appid | 0;
                if (object.last_playtime != null)
                    message.last_playtime = object.last_playtime >>> 0;
                if (object.playtime_2weeks != null)
                    message.playtime_2weeks = object.playtime_2weeks | 0;
                if (object.playtime_forever != null)
                    message.playtime_forever = object.playtime_forever | 0;
                if (object.first_playtime != null)
                    message.first_playtime = object.first_playtime >>> 0;
                if (object.playtime_windows_forever != null)
                    message.playtime_windows_forever = object.playtime_windows_forever | 0;
                if (object.playtime_mac_forever != null)
                    message.playtime_mac_forever = object.playtime_mac_forever | 0;
                if (object.playtime_linux_forever != null)
                    message.playtime_linux_forever = object.playtime_linux_forever | 0;
                if (object.first_windows_playtime != null)
                    message.first_windows_playtime = object.first_windows_playtime >>> 0;
                if (object.first_mac_playtime != null)
                    message.first_mac_playtime = object.first_mac_playtime >>> 0;
                if (object.first_linux_playtime != null)
                    message.first_linux_playtime = object.first_linux_playtime >>> 0;
                if (object.last_windows_playtime != null)
                    message.last_windows_playtime = object.last_windows_playtime >>> 0;
                if (object.last_mac_playtime != null)
                    message.last_mac_playtime = object.last_mac_playtime >>> 0;
                if (object.last_linux_playtime != null)
                    message.last_linux_playtime = object.last_linux_playtime >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a Game message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CPlayer_GetLastPlayedTimes_Response.Game
             * @static
             * @param {CPlayer_GetLastPlayedTimes_Response.Game} message Game
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Game.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.appid = 0;
                    object.last_playtime = 0;
                    object.playtime_2weeks = 0;
                    object.playtime_forever = 0;
                    object.first_playtime = 0;
                    object.playtime_windows_forever = 0;
                    object.playtime_mac_forever = 0;
                    object.playtime_linux_forever = 0;
                    object.first_windows_playtime = 0;
                    object.first_mac_playtime = 0;
                    object.first_linux_playtime = 0;
                    object.last_windows_playtime = 0;
                    object.last_mac_playtime = 0;
                    object.last_linux_playtime = 0;
                }
                if (message.appid != null && message.hasOwnProperty("appid"))
                    object.appid = message.appid;
                if (message.last_playtime != null && message.hasOwnProperty("last_playtime"))
                    object.last_playtime = message.last_playtime;
                if (message.playtime_2weeks != null && message.hasOwnProperty("playtime_2weeks"))
                    object.playtime_2weeks = message.playtime_2weeks;
                if (message.playtime_forever != null && message.hasOwnProperty("playtime_forever"))
                    object.playtime_forever = message.playtime_forever;
                if (message.first_playtime != null && message.hasOwnProperty("first_playtime"))
                    object.first_playtime = message.first_playtime;
                if (message.playtime_windows_forever != null && message.hasOwnProperty("playtime_windows_forever"))
                    object.playtime_windows_forever = message.playtime_windows_forever;
                if (message.playtime_mac_forever != null && message.hasOwnProperty("playtime_mac_forever"))
                    object.playtime_mac_forever = message.playtime_mac_forever;
                if (message.playtime_linux_forever != null && message.hasOwnProperty("playtime_linux_forever"))
                    object.playtime_linux_forever = message.playtime_linux_forever;
                if (message.first_windows_playtime != null && message.hasOwnProperty("first_windows_playtime"))
                    object.first_windows_playtime = message.first_windows_playtime;
                if (message.first_mac_playtime != null && message.hasOwnProperty("first_mac_playtime"))
                    object.first_mac_playtime = message.first_mac_playtime;
                if (message.first_linux_playtime != null && message.hasOwnProperty("first_linux_playtime"))
                    object.first_linux_playtime = message.first_linux_playtime;
                if (message.last_windows_playtime != null && message.hasOwnProperty("last_windows_playtime"))
                    object.last_windows_playtime = message.last_windows_playtime;
                if (message.last_mac_playtime != null && message.hasOwnProperty("last_mac_playtime"))
                    object.last_mac_playtime = message.last_mac_playtime;
                if (message.last_linux_playtime != null && message.hasOwnProperty("last_linux_playtime"))
                    object.last_linux_playtime = message.last_linux_playtime;
                return object;
            };
    
            /**
             * Converts this Game to JSON.
             * @function toJSON
             * @memberof CPlayer_GetLastPlayedTimes_Response.Game
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Game.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Game;
        })();
    
        return CPlayer_GetLastPlayedTimes_Response;
    })();
    
    $root.CPlayer_AcceptSSA_Request = (function() {
    
        /**
         * Properties of a CPlayer_AcceptSSA_Request.
         * @exports ICPlayer_AcceptSSA_Request
         * @interface ICPlayer_AcceptSSA_Request
         */
    
        /**
         * Constructs a new CPlayer_AcceptSSA_Request.
         * @exports CPlayer_AcceptSSA_Request
         * @classdesc Represents a CPlayer_AcceptSSA_Request.
         * @implements ICPlayer_AcceptSSA_Request
         * @constructor
         * @param {ICPlayer_AcceptSSA_Request=} [properties] Properties to set
         */
        function CPlayer_AcceptSSA_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CPlayer_AcceptSSA_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_AcceptSSA_Request
         * @static
         * @param {ICPlayer_AcceptSSA_Request=} [properties] Properties to set
         * @returns {CPlayer_AcceptSSA_Request} CPlayer_AcceptSSA_Request instance
         */
        CPlayer_AcceptSSA_Request.create = function create(properties) {
            return new CPlayer_AcceptSSA_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_AcceptSSA_Request message. Does not implicitly {@link CPlayer_AcceptSSA_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_AcceptSSA_Request
         * @static
         * @param {ICPlayer_AcceptSSA_Request} message CPlayer_AcceptSSA_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_AcceptSSA_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_AcceptSSA_Request message, length delimited. Does not implicitly {@link CPlayer_AcceptSSA_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_AcceptSSA_Request
         * @static
         * @param {ICPlayer_AcceptSSA_Request} message CPlayer_AcceptSSA_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_AcceptSSA_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_AcceptSSA_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_AcceptSSA_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_AcceptSSA_Request} CPlayer_AcceptSSA_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_AcceptSSA_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_AcceptSSA_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_AcceptSSA_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_AcceptSSA_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_AcceptSSA_Request} CPlayer_AcceptSSA_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_AcceptSSA_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_AcceptSSA_Request message.
         * @function verify
         * @memberof CPlayer_AcceptSSA_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_AcceptSSA_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_AcceptSSA_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_AcceptSSA_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_AcceptSSA_Request} CPlayer_AcceptSSA_Request
         */
        CPlayer_AcceptSSA_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_AcceptSSA_Request)
                return object;
            return new $root.CPlayer_AcceptSSA_Request();
        };
    
        /**
         * Creates a plain object from a CPlayer_AcceptSSA_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_AcceptSSA_Request
         * @static
         * @param {CPlayer_AcceptSSA_Request} message CPlayer_AcceptSSA_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_AcceptSSA_Request.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CPlayer_AcceptSSA_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_AcceptSSA_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_AcceptSSA_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_AcceptSSA_Request;
    })();
    
    $root.CPlayer_AcceptSSA_Response = (function() {
    
        /**
         * Properties of a CPlayer_AcceptSSA_Response.
         * @exports ICPlayer_AcceptSSA_Response
         * @interface ICPlayer_AcceptSSA_Response
         */
    
        /**
         * Constructs a new CPlayer_AcceptSSA_Response.
         * @exports CPlayer_AcceptSSA_Response
         * @classdesc Represents a CPlayer_AcceptSSA_Response.
         * @implements ICPlayer_AcceptSSA_Response
         * @constructor
         * @param {ICPlayer_AcceptSSA_Response=} [properties] Properties to set
         */
        function CPlayer_AcceptSSA_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CPlayer_AcceptSSA_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_AcceptSSA_Response
         * @static
         * @param {ICPlayer_AcceptSSA_Response=} [properties] Properties to set
         * @returns {CPlayer_AcceptSSA_Response} CPlayer_AcceptSSA_Response instance
         */
        CPlayer_AcceptSSA_Response.create = function create(properties) {
            return new CPlayer_AcceptSSA_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_AcceptSSA_Response message. Does not implicitly {@link CPlayer_AcceptSSA_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_AcceptSSA_Response
         * @static
         * @param {ICPlayer_AcceptSSA_Response} message CPlayer_AcceptSSA_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_AcceptSSA_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_AcceptSSA_Response message, length delimited. Does not implicitly {@link CPlayer_AcceptSSA_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_AcceptSSA_Response
         * @static
         * @param {ICPlayer_AcceptSSA_Response} message CPlayer_AcceptSSA_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_AcceptSSA_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_AcceptSSA_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_AcceptSSA_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_AcceptSSA_Response} CPlayer_AcceptSSA_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_AcceptSSA_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_AcceptSSA_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_AcceptSSA_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_AcceptSSA_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_AcceptSSA_Response} CPlayer_AcceptSSA_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_AcceptSSA_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_AcceptSSA_Response message.
         * @function verify
         * @memberof CPlayer_AcceptSSA_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_AcceptSSA_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_AcceptSSA_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_AcceptSSA_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_AcceptSSA_Response} CPlayer_AcceptSSA_Response
         */
        CPlayer_AcceptSSA_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_AcceptSSA_Response)
                return object;
            return new $root.CPlayer_AcceptSSA_Response();
        };
    
        /**
         * Creates a plain object from a CPlayer_AcceptSSA_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_AcceptSSA_Response
         * @static
         * @param {CPlayer_AcceptSSA_Response} message CPlayer_AcceptSSA_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_AcceptSSA_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CPlayer_AcceptSSA_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_AcceptSSA_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_AcceptSSA_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_AcceptSSA_Response;
    })();
    
    $root.CPlayer_GetNicknameList_Request = (function() {
    
        /**
         * Properties of a CPlayer_GetNicknameList_Request.
         * @exports ICPlayer_GetNicknameList_Request
         * @interface ICPlayer_GetNicknameList_Request
         */
    
        /**
         * Constructs a new CPlayer_GetNicknameList_Request.
         * @exports CPlayer_GetNicknameList_Request
         * @classdesc Represents a CPlayer_GetNicknameList_Request.
         * @implements ICPlayer_GetNicknameList_Request
         * @constructor
         * @param {ICPlayer_GetNicknameList_Request=} [properties] Properties to set
         */
        function CPlayer_GetNicknameList_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CPlayer_GetNicknameList_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetNicknameList_Request
         * @static
         * @param {ICPlayer_GetNicknameList_Request=} [properties] Properties to set
         * @returns {CPlayer_GetNicknameList_Request} CPlayer_GetNicknameList_Request instance
         */
        CPlayer_GetNicknameList_Request.create = function create(properties) {
            return new CPlayer_GetNicknameList_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetNicknameList_Request message. Does not implicitly {@link CPlayer_GetNicknameList_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetNicknameList_Request
         * @static
         * @param {ICPlayer_GetNicknameList_Request} message CPlayer_GetNicknameList_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetNicknameList_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetNicknameList_Request message, length delimited. Does not implicitly {@link CPlayer_GetNicknameList_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetNicknameList_Request
         * @static
         * @param {ICPlayer_GetNicknameList_Request} message CPlayer_GetNicknameList_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetNicknameList_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetNicknameList_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetNicknameList_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetNicknameList_Request} CPlayer_GetNicknameList_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetNicknameList_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetNicknameList_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetNicknameList_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetNicknameList_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetNicknameList_Request} CPlayer_GetNicknameList_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetNicknameList_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetNicknameList_Request message.
         * @function verify
         * @memberof CPlayer_GetNicknameList_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetNicknameList_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_GetNicknameList_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetNicknameList_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetNicknameList_Request} CPlayer_GetNicknameList_Request
         */
        CPlayer_GetNicknameList_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetNicknameList_Request)
                return object;
            return new $root.CPlayer_GetNicknameList_Request();
        };
    
        /**
         * Creates a plain object from a CPlayer_GetNicknameList_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetNicknameList_Request
         * @static
         * @param {CPlayer_GetNicknameList_Request} message CPlayer_GetNicknameList_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetNicknameList_Request.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CPlayer_GetNicknameList_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_GetNicknameList_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetNicknameList_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetNicknameList_Request;
    })();
    
    $root.CPlayer_GetNicknameList_Response = (function() {
    
        /**
         * Properties of a CPlayer_GetNicknameList_Response.
         * @exports ICPlayer_GetNicknameList_Response
         * @interface ICPlayer_GetNicknameList_Response
         * @property {Array.<CPlayer_GetNicknameList_Response.IPlayerNickname>|null} [nicknames] CPlayer_GetNicknameList_Response nicknames
         */
    
        /**
         * Constructs a new CPlayer_GetNicknameList_Response.
         * @exports CPlayer_GetNicknameList_Response
         * @classdesc Represents a CPlayer_GetNicknameList_Response.
         * @implements ICPlayer_GetNicknameList_Response
         * @constructor
         * @param {ICPlayer_GetNicknameList_Response=} [properties] Properties to set
         */
        function CPlayer_GetNicknameList_Response(properties) {
            this.nicknames = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetNicknameList_Response nicknames.
         * @member {Array.<CPlayer_GetNicknameList_Response.IPlayerNickname>} nicknames
         * @memberof CPlayer_GetNicknameList_Response
         * @instance
         */
        CPlayer_GetNicknameList_Response.prototype.nicknames = $util.emptyArray;
    
        /**
         * Creates a new CPlayer_GetNicknameList_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetNicknameList_Response
         * @static
         * @param {ICPlayer_GetNicknameList_Response=} [properties] Properties to set
         * @returns {CPlayer_GetNicknameList_Response} CPlayer_GetNicknameList_Response instance
         */
        CPlayer_GetNicknameList_Response.create = function create(properties) {
            return new CPlayer_GetNicknameList_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetNicknameList_Response message. Does not implicitly {@link CPlayer_GetNicknameList_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetNicknameList_Response
         * @static
         * @param {ICPlayer_GetNicknameList_Response} message CPlayer_GetNicknameList_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetNicknameList_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.nicknames != null && message.nicknames.length)
                for (var i = 0; i < message.nicknames.length; ++i)
                    $root.CPlayer_GetNicknameList_Response.PlayerNickname.encode(message.nicknames[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetNicknameList_Response message, length delimited. Does not implicitly {@link CPlayer_GetNicknameList_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetNicknameList_Response
         * @static
         * @param {ICPlayer_GetNicknameList_Response} message CPlayer_GetNicknameList_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetNicknameList_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetNicknameList_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetNicknameList_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetNicknameList_Response} CPlayer_GetNicknameList_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetNicknameList_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetNicknameList_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.nicknames && message.nicknames.length))
                        message.nicknames = [];
                    message.nicknames.push($root.CPlayer_GetNicknameList_Response.PlayerNickname.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetNicknameList_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetNicknameList_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetNicknameList_Response} CPlayer_GetNicknameList_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetNicknameList_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetNicknameList_Response message.
         * @function verify
         * @memberof CPlayer_GetNicknameList_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetNicknameList_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.nicknames != null && message.hasOwnProperty("nicknames")) {
                if (!Array.isArray(message.nicknames))
                    return "nicknames: array expected";
                for (var i = 0; i < message.nicknames.length; ++i) {
                    var error = $root.CPlayer_GetNicknameList_Response.PlayerNickname.verify(message.nicknames[i]);
                    if (error)
                        return "nicknames." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CPlayer_GetNicknameList_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetNicknameList_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetNicknameList_Response} CPlayer_GetNicknameList_Response
         */
        CPlayer_GetNicknameList_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetNicknameList_Response)
                return object;
            var message = new $root.CPlayer_GetNicknameList_Response();
            if (object.nicknames) {
                if (!Array.isArray(object.nicknames))
                    throw TypeError(".CPlayer_GetNicknameList_Response.nicknames: array expected");
                message.nicknames = [];
                for (var i = 0; i < object.nicknames.length; ++i) {
                    if (typeof object.nicknames[i] !== "object")
                        throw TypeError(".CPlayer_GetNicknameList_Response.nicknames: object expected");
                    message.nicknames[i] = $root.CPlayer_GetNicknameList_Response.PlayerNickname.fromObject(object.nicknames[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetNicknameList_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetNicknameList_Response
         * @static
         * @param {CPlayer_GetNicknameList_Response} message CPlayer_GetNicknameList_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetNicknameList_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.nicknames = [];
            if (message.nicknames && message.nicknames.length) {
                object.nicknames = [];
                for (var j = 0; j < message.nicknames.length; ++j)
                    object.nicknames[j] = $root.CPlayer_GetNicknameList_Response.PlayerNickname.toObject(message.nicknames[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CPlayer_GetNicknameList_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_GetNicknameList_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetNicknameList_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CPlayer_GetNicknameList_Response.PlayerNickname = (function() {
    
            /**
             * Properties of a PlayerNickname.
             * @memberof CPlayer_GetNicknameList_Response
             * @interface IPlayerNickname
             * @property {number|null} [accountid] PlayerNickname accountid
             * @property {string|null} [nickname] PlayerNickname nickname
             */
    
            /**
             * Constructs a new PlayerNickname.
             * @memberof CPlayer_GetNicknameList_Response
             * @classdesc Represents a PlayerNickname.
             * @implements IPlayerNickname
             * @constructor
             * @param {CPlayer_GetNicknameList_Response.IPlayerNickname=} [properties] Properties to set
             */
            function PlayerNickname(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PlayerNickname accountid.
             * @member {number} accountid
             * @memberof CPlayer_GetNicknameList_Response.PlayerNickname
             * @instance
             */
            PlayerNickname.prototype.accountid = 0;
    
            /**
             * PlayerNickname nickname.
             * @member {string} nickname
             * @memberof CPlayer_GetNicknameList_Response.PlayerNickname
             * @instance
             */
            PlayerNickname.prototype.nickname = "";
    
            /**
             * Creates a new PlayerNickname instance using the specified properties.
             * @function create
             * @memberof CPlayer_GetNicknameList_Response.PlayerNickname
             * @static
             * @param {CPlayer_GetNicknameList_Response.IPlayerNickname=} [properties] Properties to set
             * @returns {CPlayer_GetNicknameList_Response.PlayerNickname} PlayerNickname instance
             */
            PlayerNickname.create = function create(properties) {
                return new PlayerNickname(properties);
            };
    
            /**
             * Encodes the specified PlayerNickname message. Does not implicitly {@link CPlayer_GetNicknameList_Response.PlayerNickname.verify|verify} messages.
             * @function encode
             * @memberof CPlayer_GetNicknameList_Response.PlayerNickname
             * @static
             * @param {CPlayer_GetNicknameList_Response.IPlayerNickname} message PlayerNickname message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerNickname.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accountid != null && Object.hasOwnProperty.call(message, "accountid"))
                    writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.accountid);
                if (message.nickname != null && Object.hasOwnProperty.call(message, "nickname"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.nickname);
                return writer;
            };
    
            /**
             * Encodes the specified PlayerNickname message, length delimited. Does not implicitly {@link CPlayer_GetNicknameList_Response.PlayerNickname.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CPlayer_GetNicknameList_Response.PlayerNickname
             * @static
             * @param {CPlayer_GetNicknameList_Response.IPlayerNickname} message PlayerNickname message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerNickname.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PlayerNickname message from the specified reader or buffer.
             * @function decode
             * @memberof CPlayer_GetNicknameList_Response.PlayerNickname
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CPlayer_GetNicknameList_Response.PlayerNickname} PlayerNickname
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerNickname.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetNicknameList_Response.PlayerNickname();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.accountid = reader.fixed32();
                        break;
                    case 2:
                        message.nickname = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PlayerNickname message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CPlayer_GetNicknameList_Response.PlayerNickname
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CPlayer_GetNicknameList_Response.PlayerNickname} PlayerNickname
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerNickname.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PlayerNickname message.
             * @function verify
             * @memberof CPlayer_GetNicknameList_Response.PlayerNickname
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PlayerNickname.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accountid != null && message.hasOwnProperty("accountid"))
                    if (!$util.isInteger(message.accountid))
                        return "accountid: integer expected";
                if (message.nickname != null && message.hasOwnProperty("nickname"))
                    if (!$util.isString(message.nickname))
                        return "nickname: string expected";
                return null;
            };
    
            /**
             * Creates a PlayerNickname message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CPlayer_GetNicknameList_Response.PlayerNickname
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CPlayer_GetNicknameList_Response.PlayerNickname} PlayerNickname
             */
            PlayerNickname.fromObject = function fromObject(object) {
                if (object instanceof $root.CPlayer_GetNicknameList_Response.PlayerNickname)
                    return object;
                var message = new $root.CPlayer_GetNicknameList_Response.PlayerNickname();
                if (object.accountid != null)
                    message.accountid = object.accountid >>> 0;
                if (object.nickname != null)
                    message.nickname = String(object.nickname);
                return message;
            };
    
            /**
             * Creates a plain object from a PlayerNickname message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CPlayer_GetNicknameList_Response.PlayerNickname
             * @static
             * @param {CPlayer_GetNicknameList_Response.PlayerNickname} message PlayerNickname
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PlayerNickname.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accountid = 0;
                    object.nickname = "";
                }
                if (message.accountid != null && message.hasOwnProperty("accountid"))
                    object.accountid = message.accountid;
                if (message.nickname != null && message.hasOwnProperty("nickname"))
                    object.nickname = message.nickname;
                return object;
            };
    
            /**
             * Converts this PlayerNickname to JSON.
             * @function toJSON
             * @memberof CPlayer_GetNicknameList_Response.PlayerNickname
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PlayerNickname.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PlayerNickname;
        })();
    
        return CPlayer_GetNicknameList_Response;
    })();
    
    $root.CPlayer_GetPerFriendPreferences_Request = (function() {
    
        /**
         * Properties of a CPlayer_GetPerFriendPreferences_Request.
         * @exports ICPlayer_GetPerFriendPreferences_Request
         * @interface ICPlayer_GetPerFriendPreferences_Request
         */
    
        /**
         * Constructs a new CPlayer_GetPerFriendPreferences_Request.
         * @exports CPlayer_GetPerFriendPreferences_Request
         * @classdesc Represents a CPlayer_GetPerFriendPreferences_Request.
         * @implements ICPlayer_GetPerFriendPreferences_Request
         * @constructor
         * @param {ICPlayer_GetPerFriendPreferences_Request=} [properties] Properties to set
         */
        function CPlayer_GetPerFriendPreferences_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CPlayer_GetPerFriendPreferences_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetPerFriendPreferences_Request
         * @static
         * @param {ICPlayer_GetPerFriendPreferences_Request=} [properties] Properties to set
         * @returns {CPlayer_GetPerFriendPreferences_Request} CPlayer_GetPerFriendPreferences_Request instance
         */
        CPlayer_GetPerFriendPreferences_Request.create = function create(properties) {
            return new CPlayer_GetPerFriendPreferences_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetPerFriendPreferences_Request message. Does not implicitly {@link CPlayer_GetPerFriendPreferences_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetPerFriendPreferences_Request
         * @static
         * @param {ICPlayer_GetPerFriendPreferences_Request} message CPlayer_GetPerFriendPreferences_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetPerFriendPreferences_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetPerFriendPreferences_Request message, length delimited. Does not implicitly {@link CPlayer_GetPerFriendPreferences_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetPerFriendPreferences_Request
         * @static
         * @param {ICPlayer_GetPerFriendPreferences_Request} message CPlayer_GetPerFriendPreferences_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetPerFriendPreferences_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetPerFriendPreferences_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetPerFriendPreferences_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetPerFriendPreferences_Request} CPlayer_GetPerFriendPreferences_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetPerFriendPreferences_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetPerFriendPreferences_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetPerFriendPreferences_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetPerFriendPreferences_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetPerFriendPreferences_Request} CPlayer_GetPerFriendPreferences_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetPerFriendPreferences_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetPerFriendPreferences_Request message.
         * @function verify
         * @memberof CPlayer_GetPerFriendPreferences_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetPerFriendPreferences_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_GetPerFriendPreferences_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetPerFriendPreferences_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetPerFriendPreferences_Request} CPlayer_GetPerFriendPreferences_Request
         */
        CPlayer_GetPerFriendPreferences_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetPerFriendPreferences_Request)
                return object;
            return new $root.CPlayer_GetPerFriendPreferences_Request();
        };
    
        /**
         * Creates a plain object from a CPlayer_GetPerFriendPreferences_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetPerFriendPreferences_Request
         * @static
         * @param {CPlayer_GetPerFriendPreferences_Request} message CPlayer_GetPerFriendPreferences_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetPerFriendPreferences_Request.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CPlayer_GetPerFriendPreferences_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_GetPerFriendPreferences_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetPerFriendPreferences_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetPerFriendPreferences_Request;
    })();
    
    $root.PerFriendPreferences = (function() {
    
        /**
         * Properties of a PerFriendPreferences.
         * @exports IPerFriendPreferences
         * @interface IPerFriendPreferences
         * @property {number|null} [accountid] PerFriendPreferences accountid
         * @property {string|null} [nickname] PerFriendPreferences nickname
         * @property {ENotificationSetting|null} [notifications_showingame] PerFriendPreferences notifications_showingame
         * @property {ENotificationSetting|null} [notifications_showonline] PerFriendPreferences notifications_showonline
         * @property {ENotificationSetting|null} [notifications_showmessages] PerFriendPreferences notifications_showmessages
         * @property {ENotificationSetting|null} [sounds_showingame] PerFriendPreferences sounds_showingame
         * @property {ENotificationSetting|null} [sounds_showonline] PerFriendPreferences sounds_showonline
         * @property {ENotificationSetting|null} [sounds_showmessages] PerFriendPreferences sounds_showmessages
         * @property {ENotificationSetting|null} [notifications_sendmobile] PerFriendPreferences notifications_sendmobile
         */
    
        /**
         * Constructs a new PerFriendPreferences.
         * @exports PerFriendPreferences
         * @classdesc Represents a PerFriendPreferences.
         * @implements IPerFriendPreferences
         * @constructor
         * @param {IPerFriendPreferences=} [properties] Properties to set
         */
        function PerFriendPreferences(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * PerFriendPreferences accountid.
         * @member {number} accountid
         * @memberof PerFriendPreferences
         * @instance
         */
        PerFriendPreferences.prototype.accountid = 0;
    
        /**
         * PerFriendPreferences nickname.
         * @member {string} nickname
         * @memberof PerFriendPreferences
         * @instance
         */
        PerFriendPreferences.prototype.nickname = "";
    
        /**
         * PerFriendPreferences notifications_showingame.
         * @member {ENotificationSetting} notifications_showingame
         * @memberof PerFriendPreferences
         * @instance
         */
        PerFriendPreferences.prototype.notifications_showingame = 0;
    
        /**
         * PerFriendPreferences notifications_showonline.
         * @member {ENotificationSetting} notifications_showonline
         * @memberof PerFriendPreferences
         * @instance
         */
        PerFriendPreferences.prototype.notifications_showonline = 0;
    
        /**
         * PerFriendPreferences notifications_showmessages.
         * @member {ENotificationSetting} notifications_showmessages
         * @memberof PerFriendPreferences
         * @instance
         */
        PerFriendPreferences.prototype.notifications_showmessages = 0;
    
        /**
         * PerFriendPreferences sounds_showingame.
         * @member {ENotificationSetting} sounds_showingame
         * @memberof PerFriendPreferences
         * @instance
         */
        PerFriendPreferences.prototype.sounds_showingame = 0;
    
        /**
         * PerFriendPreferences sounds_showonline.
         * @member {ENotificationSetting} sounds_showonline
         * @memberof PerFriendPreferences
         * @instance
         */
        PerFriendPreferences.prototype.sounds_showonline = 0;
    
        /**
         * PerFriendPreferences sounds_showmessages.
         * @member {ENotificationSetting} sounds_showmessages
         * @memberof PerFriendPreferences
         * @instance
         */
        PerFriendPreferences.prototype.sounds_showmessages = 0;
    
        /**
         * PerFriendPreferences notifications_sendmobile.
         * @member {ENotificationSetting} notifications_sendmobile
         * @memberof PerFriendPreferences
         * @instance
         */
        PerFriendPreferences.prototype.notifications_sendmobile = 0;
    
        /**
         * Creates a new PerFriendPreferences instance using the specified properties.
         * @function create
         * @memberof PerFriendPreferences
         * @static
         * @param {IPerFriendPreferences=} [properties] Properties to set
         * @returns {PerFriendPreferences} PerFriendPreferences instance
         */
        PerFriendPreferences.create = function create(properties) {
            return new PerFriendPreferences(properties);
        };
    
        /**
         * Encodes the specified PerFriendPreferences message. Does not implicitly {@link PerFriendPreferences.verify|verify} messages.
         * @function encode
         * @memberof PerFriendPreferences
         * @static
         * @param {IPerFriendPreferences} message PerFriendPreferences message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PerFriendPreferences.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.accountid != null && Object.hasOwnProperty.call(message, "accountid"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.accountid);
            if (message.nickname != null && Object.hasOwnProperty.call(message, "nickname"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.nickname);
            if (message.notifications_showingame != null && Object.hasOwnProperty.call(message, "notifications_showingame"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.notifications_showingame);
            if (message.notifications_showonline != null && Object.hasOwnProperty.call(message, "notifications_showonline"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.notifications_showonline);
            if (message.notifications_showmessages != null && Object.hasOwnProperty.call(message, "notifications_showmessages"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.notifications_showmessages);
            if (message.sounds_showingame != null && Object.hasOwnProperty.call(message, "sounds_showingame"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.sounds_showingame);
            if (message.sounds_showonline != null && Object.hasOwnProperty.call(message, "sounds_showonline"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.sounds_showonline);
            if (message.sounds_showmessages != null && Object.hasOwnProperty.call(message, "sounds_showmessages"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.sounds_showmessages);
            if (message.notifications_sendmobile != null && Object.hasOwnProperty.call(message, "notifications_sendmobile"))
                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.notifications_sendmobile);
            return writer;
        };
    
        /**
         * Encodes the specified PerFriendPreferences message, length delimited. Does not implicitly {@link PerFriendPreferences.verify|verify} messages.
         * @function encodeDelimited
         * @memberof PerFriendPreferences
         * @static
         * @param {IPerFriendPreferences} message PerFriendPreferences message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PerFriendPreferences.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a PerFriendPreferences message from the specified reader or buffer.
         * @function decode
         * @memberof PerFriendPreferences
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {PerFriendPreferences} PerFriendPreferences
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PerFriendPreferences.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PerFriendPreferences();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.accountid = reader.fixed32();
                    break;
                case 2:
                    message.nickname = reader.string();
                    break;
                case 3:
                    message.notifications_showingame = reader.int32();
                    break;
                case 4:
                    message.notifications_showonline = reader.int32();
                    break;
                case 5:
                    message.notifications_showmessages = reader.int32();
                    break;
                case 6:
                    message.sounds_showingame = reader.int32();
                    break;
                case 7:
                    message.sounds_showonline = reader.int32();
                    break;
                case 8:
                    message.sounds_showmessages = reader.int32();
                    break;
                case 9:
                    message.notifications_sendmobile = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a PerFriendPreferences message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof PerFriendPreferences
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {PerFriendPreferences} PerFriendPreferences
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PerFriendPreferences.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a PerFriendPreferences message.
         * @function verify
         * @memberof PerFriendPreferences
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PerFriendPreferences.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                if (!$util.isInteger(message.accountid))
                    return "accountid: integer expected";
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                if (!$util.isString(message.nickname))
                    return "nickname: string expected";
            if (message.notifications_showingame != null && message.hasOwnProperty("notifications_showingame"))
                switch (message.notifications_showingame) {
                default:
                    return "notifications_showingame: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            if (message.notifications_showonline != null && message.hasOwnProperty("notifications_showonline"))
                switch (message.notifications_showonline) {
                default:
                    return "notifications_showonline: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            if (message.notifications_showmessages != null && message.hasOwnProperty("notifications_showmessages"))
                switch (message.notifications_showmessages) {
                default:
                    return "notifications_showmessages: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            if (message.sounds_showingame != null && message.hasOwnProperty("sounds_showingame"))
                switch (message.sounds_showingame) {
                default:
                    return "sounds_showingame: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            if (message.sounds_showonline != null && message.hasOwnProperty("sounds_showonline"))
                switch (message.sounds_showonline) {
                default:
                    return "sounds_showonline: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            if (message.sounds_showmessages != null && message.hasOwnProperty("sounds_showmessages"))
                switch (message.sounds_showmessages) {
                default:
                    return "sounds_showmessages: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            if (message.notifications_sendmobile != null && message.hasOwnProperty("notifications_sendmobile"))
                switch (message.notifications_sendmobile) {
                default:
                    return "notifications_sendmobile: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            return null;
        };
    
        /**
         * Creates a PerFriendPreferences message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof PerFriendPreferences
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {PerFriendPreferences} PerFriendPreferences
         */
        PerFriendPreferences.fromObject = function fromObject(object) {
            if (object instanceof $root.PerFriendPreferences)
                return object;
            var message = new $root.PerFriendPreferences();
            if (object.accountid != null)
                message.accountid = object.accountid >>> 0;
            if (object.nickname != null)
                message.nickname = String(object.nickname);
            switch (object.notifications_showingame) {
            case "k_ENotificationSettingNotifyUseDefault":
            case 0:
                message.notifications_showingame = 0;
                break;
            case "k_ENotificationSettingAlways":
            case 1:
                message.notifications_showingame = 1;
                break;
            case "k_ENotificationSettingNever":
            case 2:
                message.notifications_showingame = 2;
                break;
            }
            switch (object.notifications_showonline) {
            case "k_ENotificationSettingNotifyUseDefault":
            case 0:
                message.notifications_showonline = 0;
                break;
            case "k_ENotificationSettingAlways":
            case 1:
                message.notifications_showonline = 1;
                break;
            case "k_ENotificationSettingNever":
            case 2:
                message.notifications_showonline = 2;
                break;
            }
            switch (object.notifications_showmessages) {
            case "k_ENotificationSettingNotifyUseDefault":
            case 0:
                message.notifications_showmessages = 0;
                break;
            case "k_ENotificationSettingAlways":
            case 1:
                message.notifications_showmessages = 1;
                break;
            case "k_ENotificationSettingNever":
            case 2:
                message.notifications_showmessages = 2;
                break;
            }
            switch (object.sounds_showingame) {
            case "k_ENotificationSettingNotifyUseDefault":
            case 0:
                message.sounds_showingame = 0;
                break;
            case "k_ENotificationSettingAlways":
            case 1:
                message.sounds_showingame = 1;
                break;
            case "k_ENotificationSettingNever":
            case 2:
                message.sounds_showingame = 2;
                break;
            }
            switch (object.sounds_showonline) {
            case "k_ENotificationSettingNotifyUseDefault":
            case 0:
                message.sounds_showonline = 0;
                break;
            case "k_ENotificationSettingAlways":
            case 1:
                message.sounds_showonline = 1;
                break;
            case "k_ENotificationSettingNever":
            case 2:
                message.sounds_showonline = 2;
                break;
            }
            switch (object.sounds_showmessages) {
            case "k_ENotificationSettingNotifyUseDefault":
            case 0:
                message.sounds_showmessages = 0;
                break;
            case "k_ENotificationSettingAlways":
            case 1:
                message.sounds_showmessages = 1;
                break;
            case "k_ENotificationSettingNever":
            case 2:
                message.sounds_showmessages = 2;
                break;
            }
            switch (object.notifications_sendmobile) {
            case "k_ENotificationSettingNotifyUseDefault":
            case 0:
                message.notifications_sendmobile = 0;
                break;
            case "k_ENotificationSettingAlways":
            case 1:
                message.notifications_sendmobile = 1;
                break;
            case "k_ENotificationSettingNever":
            case 2:
                message.notifications_sendmobile = 2;
                break;
            }
            return message;
        };
    
        /**
         * Creates a plain object from a PerFriendPreferences message. Also converts values to other types if specified.
         * @function toObject
         * @memberof PerFriendPreferences
         * @static
         * @param {PerFriendPreferences} message PerFriendPreferences
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PerFriendPreferences.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.accountid = 0;
                object.nickname = "";
                object.notifications_showingame = options.enums === String ? "k_ENotificationSettingNotifyUseDefault" : 0;
                object.notifications_showonline = options.enums === String ? "k_ENotificationSettingNotifyUseDefault" : 0;
                object.notifications_showmessages = options.enums === String ? "k_ENotificationSettingNotifyUseDefault" : 0;
                object.sounds_showingame = options.enums === String ? "k_ENotificationSettingNotifyUseDefault" : 0;
                object.sounds_showonline = options.enums === String ? "k_ENotificationSettingNotifyUseDefault" : 0;
                object.sounds_showmessages = options.enums === String ? "k_ENotificationSettingNotifyUseDefault" : 0;
                object.notifications_sendmobile = options.enums === String ? "k_ENotificationSettingNotifyUseDefault" : 0;
            }
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                object.accountid = message.accountid;
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                object.nickname = message.nickname;
            if (message.notifications_showingame != null && message.hasOwnProperty("notifications_showingame"))
                object.notifications_showingame = options.enums === String ? $root.ENotificationSetting[message.notifications_showingame] : message.notifications_showingame;
            if (message.notifications_showonline != null && message.hasOwnProperty("notifications_showonline"))
                object.notifications_showonline = options.enums === String ? $root.ENotificationSetting[message.notifications_showonline] : message.notifications_showonline;
            if (message.notifications_showmessages != null && message.hasOwnProperty("notifications_showmessages"))
                object.notifications_showmessages = options.enums === String ? $root.ENotificationSetting[message.notifications_showmessages] : message.notifications_showmessages;
            if (message.sounds_showingame != null && message.hasOwnProperty("sounds_showingame"))
                object.sounds_showingame = options.enums === String ? $root.ENotificationSetting[message.sounds_showingame] : message.sounds_showingame;
            if (message.sounds_showonline != null && message.hasOwnProperty("sounds_showonline"))
                object.sounds_showonline = options.enums === String ? $root.ENotificationSetting[message.sounds_showonline] : message.sounds_showonline;
            if (message.sounds_showmessages != null && message.hasOwnProperty("sounds_showmessages"))
                object.sounds_showmessages = options.enums === String ? $root.ENotificationSetting[message.sounds_showmessages] : message.sounds_showmessages;
            if (message.notifications_sendmobile != null && message.hasOwnProperty("notifications_sendmobile"))
                object.notifications_sendmobile = options.enums === String ? $root.ENotificationSetting[message.notifications_sendmobile] : message.notifications_sendmobile;
            return object;
        };
    
        /**
         * Converts this PerFriendPreferences to JSON.
         * @function toJSON
         * @memberof PerFriendPreferences
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PerFriendPreferences.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return PerFriendPreferences;
    })();
    
    $root.CPlayer_GetPerFriendPreferences_Response = (function() {
    
        /**
         * Properties of a CPlayer_GetPerFriendPreferences_Response.
         * @exports ICPlayer_GetPerFriendPreferences_Response
         * @interface ICPlayer_GetPerFriendPreferences_Response
         * @property {Array.<IPerFriendPreferences>|null} [preferences] CPlayer_GetPerFriendPreferences_Response preferences
         */
    
        /**
         * Constructs a new CPlayer_GetPerFriendPreferences_Response.
         * @exports CPlayer_GetPerFriendPreferences_Response
         * @classdesc Represents a CPlayer_GetPerFriendPreferences_Response.
         * @implements ICPlayer_GetPerFriendPreferences_Response
         * @constructor
         * @param {ICPlayer_GetPerFriendPreferences_Response=} [properties] Properties to set
         */
        function CPlayer_GetPerFriendPreferences_Response(properties) {
            this.preferences = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetPerFriendPreferences_Response preferences.
         * @member {Array.<IPerFriendPreferences>} preferences
         * @memberof CPlayer_GetPerFriendPreferences_Response
         * @instance
         */
        CPlayer_GetPerFriendPreferences_Response.prototype.preferences = $util.emptyArray;
    
        /**
         * Creates a new CPlayer_GetPerFriendPreferences_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetPerFriendPreferences_Response
         * @static
         * @param {ICPlayer_GetPerFriendPreferences_Response=} [properties] Properties to set
         * @returns {CPlayer_GetPerFriendPreferences_Response} CPlayer_GetPerFriendPreferences_Response instance
         */
        CPlayer_GetPerFriendPreferences_Response.create = function create(properties) {
            return new CPlayer_GetPerFriendPreferences_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetPerFriendPreferences_Response message. Does not implicitly {@link CPlayer_GetPerFriendPreferences_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetPerFriendPreferences_Response
         * @static
         * @param {ICPlayer_GetPerFriendPreferences_Response} message CPlayer_GetPerFriendPreferences_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetPerFriendPreferences_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.preferences != null && message.preferences.length)
                for (var i = 0; i < message.preferences.length; ++i)
                    $root.PerFriendPreferences.encode(message.preferences[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetPerFriendPreferences_Response message, length delimited. Does not implicitly {@link CPlayer_GetPerFriendPreferences_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetPerFriendPreferences_Response
         * @static
         * @param {ICPlayer_GetPerFriendPreferences_Response} message CPlayer_GetPerFriendPreferences_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetPerFriendPreferences_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetPerFriendPreferences_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetPerFriendPreferences_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetPerFriendPreferences_Response} CPlayer_GetPerFriendPreferences_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetPerFriendPreferences_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetPerFriendPreferences_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.preferences && message.preferences.length))
                        message.preferences = [];
                    message.preferences.push($root.PerFriendPreferences.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetPerFriendPreferences_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetPerFriendPreferences_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetPerFriendPreferences_Response} CPlayer_GetPerFriendPreferences_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetPerFriendPreferences_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetPerFriendPreferences_Response message.
         * @function verify
         * @memberof CPlayer_GetPerFriendPreferences_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetPerFriendPreferences_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.preferences != null && message.hasOwnProperty("preferences")) {
                if (!Array.isArray(message.preferences))
                    return "preferences: array expected";
                for (var i = 0; i < message.preferences.length; ++i) {
                    var error = $root.PerFriendPreferences.verify(message.preferences[i]);
                    if (error)
                        return "preferences." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CPlayer_GetPerFriendPreferences_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetPerFriendPreferences_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetPerFriendPreferences_Response} CPlayer_GetPerFriendPreferences_Response
         */
        CPlayer_GetPerFriendPreferences_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetPerFriendPreferences_Response)
                return object;
            var message = new $root.CPlayer_GetPerFriendPreferences_Response();
            if (object.preferences) {
                if (!Array.isArray(object.preferences))
                    throw TypeError(".CPlayer_GetPerFriendPreferences_Response.preferences: array expected");
                message.preferences = [];
                for (var i = 0; i < object.preferences.length; ++i) {
                    if (typeof object.preferences[i] !== "object")
                        throw TypeError(".CPlayer_GetPerFriendPreferences_Response.preferences: object expected");
                    message.preferences[i] = $root.PerFriendPreferences.fromObject(object.preferences[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetPerFriendPreferences_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetPerFriendPreferences_Response
         * @static
         * @param {CPlayer_GetPerFriendPreferences_Response} message CPlayer_GetPerFriendPreferences_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetPerFriendPreferences_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.preferences = [];
            if (message.preferences && message.preferences.length) {
                object.preferences = [];
                for (var j = 0; j < message.preferences.length; ++j)
                    object.preferences[j] = $root.PerFriendPreferences.toObject(message.preferences[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CPlayer_GetPerFriendPreferences_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_GetPerFriendPreferences_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetPerFriendPreferences_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetPerFriendPreferences_Response;
    })();
    
    $root.CPlayer_SetPerFriendPreferences_Request = (function() {
    
        /**
         * Properties of a CPlayer_SetPerFriendPreferences_Request.
         * @exports ICPlayer_SetPerFriendPreferences_Request
         * @interface ICPlayer_SetPerFriendPreferences_Request
         * @property {IPerFriendPreferences|null} [preferences] CPlayer_SetPerFriendPreferences_Request preferences
         */
    
        /**
         * Constructs a new CPlayer_SetPerFriendPreferences_Request.
         * @exports CPlayer_SetPerFriendPreferences_Request
         * @classdesc Represents a CPlayer_SetPerFriendPreferences_Request.
         * @implements ICPlayer_SetPerFriendPreferences_Request
         * @constructor
         * @param {ICPlayer_SetPerFriendPreferences_Request=} [properties] Properties to set
         */
        function CPlayer_SetPerFriendPreferences_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_SetPerFriendPreferences_Request preferences.
         * @member {IPerFriendPreferences|null|undefined} preferences
         * @memberof CPlayer_SetPerFriendPreferences_Request
         * @instance
         */
        CPlayer_SetPerFriendPreferences_Request.prototype.preferences = null;
    
        /**
         * Creates a new CPlayer_SetPerFriendPreferences_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_SetPerFriendPreferences_Request
         * @static
         * @param {ICPlayer_SetPerFriendPreferences_Request=} [properties] Properties to set
         * @returns {CPlayer_SetPerFriendPreferences_Request} CPlayer_SetPerFriendPreferences_Request instance
         */
        CPlayer_SetPerFriendPreferences_Request.create = function create(properties) {
            return new CPlayer_SetPerFriendPreferences_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_SetPerFriendPreferences_Request message. Does not implicitly {@link CPlayer_SetPerFriendPreferences_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_SetPerFriendPreferences_Request
         * @static
         * @param {ICPlayer_SetPerFriendPreferences_Request} message CPlayer_SetPerFriendPreferences_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetPerFriendPreferences_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.preferences != null && Object.hasOwnProperty.call(message, "preferences"))
                $root.PerFriendPreferences.encode(message.preferences, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_SetPerFriendPreferences_Request message, length delimited. Does not implicitly {@link CPlayer_SetPerFriendPreferences_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_SetPerFriendPreferences_Request
         * @static
         * @param {ICPlayer_SetPerFriendPreferences_Request} message CPlayer_SetPerFriendPreferences_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetPerFriendPreferences_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_SetPerFriendPreferences_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_SetPerFriendPreferences_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_SetPerFriendPreferences_Request} CPlayer_SetPerFriendPreferences_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetPerFriendPreferences_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_SetPerFriendPreferences_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.preferences = $root.PerFriendPreferences.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_SetPerFriendPreferences_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_SetPerFriendPreferences_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_SetPerFriendPreferences_Request} CPlayer_SetPerFriendPreferences_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetPerFriendPreferences_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_SetPerFriendPreferences_Request message.
         * @function verify
         * @memberof CPlayer_SetPerFriendPreferences_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_SetPerFriendPreferences_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.preferences != null && message.hasOwnProperty("preferences")) {
                var error = $root.PerFriendPreferences.verify(message.preferences);
                if (error)
                    return "preferences." + error;
            }
            return null;
        };
    
        /**
         * Creates a CPlayer_SetPerFriendPreferences_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_SetPerFriendPreferences_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_SetPerFriendPreferences_Request} CPlayer_SetPerFriendPreferences_Request
         */
        CPlayer_SetPerFriendPreferences_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_SetPerFriendPreferences_Request)
                return object;
            var message = new $root.CPlayer_SetPerFriendPreferences_Request();
            if (object.preferences != null) {
                if (typeof object.preferences !== "object")
                    throw TypeError(".CPlayer_SetPerFriendPreferences_Request.preferences: object expected");
                message.preferences = $root.PerFriendPreferences.fromObject(object.preferences);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_SetPerFriendPreferences_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_SetPerFriendPreferences_Request
         * @static
         * @param {CPlayer_SetPerFriendPreferences_Request} message CPlayer_SetPerFriendPreferences_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_SetPerFriendPreferences_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.preferences = null;
            if (message.preferences != null && message.hasOwnProperty("preferences"))
                object.preferences = $root.PerFriendPreferences.toObject(message.preferences, options);
            return object;
        };
    
        /**
         * Converts this CPlayer_SetPerFriendPreferences_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_SetPerFriendPreferences_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_SetPerFriendPreferences_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_SetPerFriendPreferences_Request;
    })();
    
    $root.CPlayer_SetPerFriendPreferences_Response = (function() {
    
        /**
         * Properties of a CPlayer_SetPerFriendPreferences_Response.
         * @exports ICPlayer_SetPerFriendPreferences_Response
         * @interface ICPlayer_SetPerFriendPreferences_Response
         */
    
        /**
         * Constructs a new CPlayer_SetPerFriendPreferences_Response.
         * @exports CPlayer_SetPerFriendPreferences_Response
         * @classdesc Represents a CPlayer_SetPerFriendPreferences_Response.
         * @implements ICPlayer_SetPerFriendPreferences_Response
         * @constructor
         * @param {ICPlayer_SetPerFriendPreferences_Response=} [properties] Properties to set
         */
        function CPlayer_SetPerFriendPreferences_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CPlayer_SetPerFriendPreferences_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_SetPerFriendPreferences_Response
         * @static
         * @param {ICPlayer_SetPerFriendPreferences_Response=} [properties] Properties to set
         * @returns {CPlayer_SetPerFriendPreferences_Response} CPlayer_SetPerFriendPreferences_Response instance
         */
        CPlayer_SetPerFriendPreferences_Response.create = function create(properties) {
            return new CPlayer_SetPerFriendPreferences_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_SetPerFriendPreferences_Response message. Does not implicitly {@link CPlayer_SetPerFriendPreferences_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_SetPerFriendPreferences_Response
         * @static
         * @param {ICPlayer_SetPerFriendPreferences_Response} message CPlayer_SetPerFriendPreferences_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetPerFriendPreferences_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_SetPerFriendPreferences_Response message, length delimited. Does not implicitly {@link CPlayer_SetPerFriendPreferences_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_SetPerFriendPreferences_Response
         * @static
         * @param {ICPlayer_SetPerFriendPreferences_Response} message CPlayer_SetPerFriendPreferences_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetPerFriendPreferences_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_SetPerFriendPreferences_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_SetPerFriendPreferences_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_SetPerFriendPreferences_Response} CPlayer_SetPerFriendPreferences_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetPerFriendPreferences_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_SetPerFriendPreferences_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_SetPerFriendPreferences_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_SetPerFriendPreferences_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_SetPerFriendPreferences_Response} CPlayer_SetPerFriendPreferences_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetPerFriendPreferences_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_SetPerFriendPreferences_Response message.
         * @function verify
         * @memberof CPlayer_SetPerFriendPreferences_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_SetPerFriendPreferences_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_SetPerFriendPreferences_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_SetPerFriendPreferences_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_SetPerFriendPreferences_Response} CPlayer_SetPerFriendPreferences_Response
         */
        CPlayer_SetPerFriendPreferences_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_SetPerFriendPreferences_Response)
                return object;
            return new $root.CPlayer_SetPerFriendPreferences_Response();
        };
    
        /**
         * Creates a plain object from a CPlayer_SetPerFriendPreferences_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_SetPerFriendPreferences_Response
         * @static
         * @param {CPlayer_SetPerFriendPreferences_Response} message CPlayer_SetPerFriendPreferences_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_SetPerFriendPreferences_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CPlayer_SetPerFriendPreferences_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_SetPerFriendPreferences_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_SetPerFriendPreferences_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_SetPerFriendPreferences_Response;
    })();
    
    $root.CPlayer_AddFriend_Request = (function() {
    
        /**
         * Properties of a CPlayer_AddFriend_Request.
         * @exports ICPlayer_AddFriend_Request
         * @interface ICPlayer_AddFriend_Request
         * @property {number|Long|null} [steamid] CPlayer_AddFriend_Request steamid
         */
    
        /**
         * Constructs a new CPlayer_AddFriend_Request.
         * @exports CPlayer_AddFriend_Request
         * @classdesc Represents a CPlayer_AddFriend_Request.
         * @implements ICPlayer_AddFriend_Request
         * @constructor
         * @param {ICPlayer_AddFriend_Request=} [properties] Properties to set
         */
        function CPlayer_AddFriend_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_AddFriend_Request steamid.
         * @member {number|Long} steamid
         * @memberof CPlayer_AddFriend_Request
         * @instance
         */
        CPlayer_AddFriend_Request.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CPlayer_AddFriend_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_AddFriend_Request
         * @static
         * @param {ICPlayer_AddFriend_Request=} [properties] Properties to set
         * @returns {CPlayer_AddFriend_Request} CPlayer_AddFriend_Request instance
         */
        CPlayer_AddFriend_Request.create = function create(properties) {
            return new CPlayer_AddFriend_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_AddFriend_Request message. Does not implicitly {@link CPlayer_AddFriend_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_AddFriend_Request
         * @static
         * @param {ICPlayer_AddFriend_Request} message CPlayer_AddFriend_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_AddFriend_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid != null && Object.hasOwnProperty.call(message, "steamid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_AddFriend_Request message, length delimited. Does not implicitly {@link CPlayer_AddFriend_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_AddFriend_Request
         * @static
         * @param {ICPlayer_AddFriend_Request} message CPlayer_AddFriend_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_AddFriend_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_AddFriend_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_AddFriend_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_AddFriend_Request} CPlayer_AddFriend_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_AddFriend_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_AddFriend_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid = reader.fixed64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_AddFriend_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_AddFriend_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_AddFriend_Request} CPlayer_AddFriend_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_AddFriend_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_AddFriend_Request message.
         * @function verify
         * @memberof CPlayer_AddFriend_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_AddFriend_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_AddFriend_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_AddFriend_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_AddFriend_Request} CPlayer_AddFriend_Request
         */
        CPlayer_AddFriend_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_AddFriend_Request)
                return object;
            var message = new $root.CPlayer_AddFriend_Request();
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_AddFriend_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_AddFriend_Request
         * @static
         * @param {CPlayer_AddFriend_Request} message CPlayer_AddFriend_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_AddFriend_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
            return object;
        };
    
        /**
         * Converts this CPlayer_AddFriend_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_AddFriend_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_AddFriend_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_AddFriend_Request;
    })();
    
    $root.CPlayer_AddFriend_Response = (function() {
    
        /**
         * Properties of a CPlayer_AddFriend_Response.
         * @exports ICPlayer_AddFriend_Response
         * @interface ICPlayer_AddFriend_Response
         * @property {boolean|null} [invite_sent] CPlayer_AddFriend_Response invite_sent
         * @property {number|null} [friend_relationship] CPlayer_AddFriend_Response friend_relationship
         * @property {number|null} [result] CPlayer_AddFriend_Response result
         */
    
        /**
         * Constructs a new CPlayer_AddFriend_Response.
         * @exports CPlayer_AddFriend_Response
         * @classdesc Represents a CPlayer_AddFriend_Response.
         * @implements ICPlayer_AddFriend_Response
         * @constructor
         * @param {ICPlayer_AddFriend_Response=} [properties] Properties to set
         */
        function CPlayer_AddFriend_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_AddFriend_Response invite_sent.
         * @member {boolean} invite_sent
         * @memberof CPlayer_AddFriend_Response
         * @instance
         */
        CPlayer_AddFriend_Response.prototype.invite_sent = false;
    
        /**
         * CPlayer_AddFriend_Response friend_relationship.
         * @member {number} friend_relationship
         * @memberof CPlayer_AddFriend_Response
         * @instance
         */
        CPlayer_AddFriend_Response.prototype.friend_relationship = 0;
    
        /**
         * CPlayer_AddFriend_Response result.
         * @member {number} result
         * @memberof CPlayer_AddFriend_Response
         * @instance
         */
        CPlayer_AddFriend_Response.prototype.result = 0;
    
        /**
         * Creates a new CPlayer_AddFriend_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_AddFriend_Response
         * @static
         * @param {ICPlayer_AddFriend_Response=} [properties] Properties to set
         * @returns {CPlayer_AddFriend_Response} CPlayer_AddFriend_Response instance
         */
        CPlayer_AddFriend_Response.create = function create(properties) {
            return new CPlayer_AddFriend_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_AddFriend_Response message. Does not implicitly {@link CPlayer_AddFriend_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_AddFriend_Response
         * @static
         * @param {ICPlayer_AddFriend_Response} message CPlayer_AddFriend_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_AddFriend_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.invite_sent != null && Object.hasOwnProperty.call(message, "invite_sent"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.invite_sent);
            if (message.friend_relationship != null && Object.hasOwnProperty.call(message, "friend_relationship"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.friend_relationship);
            if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.result);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_AddFriend_Response message, length delimited. Does not implicitly {@link CPlayer_AddFriend_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_AddFriend_Response
         * @static
         * @param {ICPlayer_AddFriend_Response} message CPlayer_AddFriend_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_AddFriend_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_AddFriend_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_AddFriend_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_AddFriend_Response} CPlayer_AddFriend_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_AddFriend_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_AddFriend_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.invite_sent = reader.bool();
                    break;
                case 2:
                    message.friend_relationship = reader.uint32();
                    break;
                case 3:
                    message.result = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_AddFriend_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_AddFriend_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_AddFriend_Response} CPlayer_AddFriend_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_AddFriend_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_AddFriend_Response message.
         * @function verify
         * @memberof CPlayer_AddFriend_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_AddFriend_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.invite_sent != null && message.hasOwnProperty("invite_sent"))
                if (typeof message.invite_sent !== "boolean")
                    return "invite_sent: boolean expected";
            if (message.friend_relationship != null && message.hasOwnProperty("friend_relationship"))
                if (!$util.isInteger(message.friend_relationship))
                    return "friend_relationship: integer expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_AddFriend_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_AddFriend_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_AddFriend_Response} CPlayer_AddFriend_Response
         */
        CPlayer_AddFriend_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_AddFriend_Response)
                return object;
            var message = new $root.CPlayer_AddFriend_Response();
            if (object.invite_sent != null)
                message.invite_sent = Boolean(object.invite_sent);
            if (object.friend_relationship != null)
                message.friend_relationship = object.friend_relationship >>> 0;
            if (object.result != null)
                message.result = object.result | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_AddFriend_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_AddFriend_Response
         * @static
         * @param {CPlayer_AddFriend_Response} message CPlayer_AddFriend_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_AddFriend_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.invite_sent = false;
                object.friend_relationship = 0;
                object.result = 0;
            }
            if (message.invite_sent != null && message.hasOwnProperty("invite_sent"))
                object.invite_sent = message.invite_sent;
            if (message.friend_relationship != null && message.hasOwnProperty("friend_relationship"))
                object.friend_relationship = message.friend_relationship;
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            return object;
        };
    
        /**
         * Converts this CPlayer_AddFriend_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_AddFriend_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_AddFriend_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_AddFriend_Response;
    })();
    
    $root.CPlayer_RemoveFriend_Request = (function() {
    
        /**
         * Properties of a CPlayer_RemoveFriend_Request.
         * @exports ICPlayer_RemoveFriend_Request
         * @interface ICPlayer_RemoveFriend_Request
         * @property {number|Long|null} [steamid] CPlayer_RemoveFriend_Request steamid
         */
    
        /**
         * Constructs a new CPlayer_RemoveFriend_Request.
         * @exports CPlayer_RemoveFriend_Request
         * @classdesc Represents a CPlayer_RemoveFriend_Request.
         * @implements ICPlayer_RemoveFriend_Request
         * @constructor
         * @param {ICPlayer_RemoveFriend_Request=} [properties] Properties to set
         */
        function CPlayer_RemoveFriend_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_RemoveFriend_Request steamid.
         * @member {number|Long} steamid
         * @memberof CPlayer_RemoveFriend_Request
         * @instance
         */
        CPlayer_RemoveFriend_Request.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CPlayer_RemoveFriend_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_RemoveFriend_Request
         * @static
         * @param {ICPlayer_RemoveFriend_Request=} [properties] Properties to set
         * @returns {CPlayer_RemoveFriend_Request} CPlayer_RemoveFriend_Request instance
         */
        CPlayer_RemoveFriend_Request.create = function create(properties) {
            return new CPlayer_RemoveFriend_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_RemoveFriend_Request message. Does not implicitly {@link CPlayer_RemoveFriend_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_RemoveFriend_Request
         * @static
         * @param {ICPlayer_RemoveFriend_Request} message CPlayer_RemoveFriend_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_RemoveFriend_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid != null && Object.hasOwnProperty.call(message, "steamid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_RemoveFriend_Request message, length delimited. Does not implicitly {@link CPlayer_RemoveFriend_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_RemoveFriend_Request
         * @static
         * @param {ICPlayer_RemoveFriend_Request} message CPlayer_RemoveFriend_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_RemoveFriend_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_RemoveFriend_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_RemoveFriend_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_RemoveFriend_Request} CPlayer_RemoveFriend_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_RemoveFriend_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_RemoveFriend_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid = reader.fixed64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_RemoveFriend_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_RemoveFriend_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_RemoveFriend_Request} CPlayer_RemoveFriend_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_RemoveFriend_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_RemoveFriend_Request message.
         * @function verify
         * @memberof CPlayer_RemoveFriend_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_RemoveFriend_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_RemoveFriend_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_RemoveFriend_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_RemoveFriend_Request} CPlayer_RemoveFriend_Request
         */
        CPlayer_RemoveFriend_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_RemoveFriend_Request)
                return object;
            var message = new $root.CPlayer_RemoveFriend_Request();
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_RemoveFriend_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_RemoveFriend_Request
         * @static
         * @param {CPlayer_RemoveFriend_Request} message CPlayer_RemoveFriend_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_RemoveFriend_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
            return object;
        };
    
        /**
         * Converts this CPlayer_RemoveFriend_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_RemoveFriend_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_RemoveFriend_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_RemoveFriend_Request;
    })();
    
    $root.CPlayer_RemoveFriend_Response = (function() {
    
        /**
         * Properties of a CPlayer_RemoveFriend_Response.
         * @exports ICPlayer_RemoveFriend_Response
         * @interface ICPlayer_RemoveFriend_Response
         * @property {number|null} [friend_relationship] CPlayer_RemoveFriend_Response friend_relationship
         */
    
        /**
         * Constructs a new CPlayer_RemoveFriend_Response.
         * @exports CPlayer_RemoveFriend_Response
         * @classdesc Represents a CPlayer_RemoveFriend_Response.
         * @implements ICPlayer_RemoveFriend_Response
         * @constructor
         * @param {ICPlayer_RemoveFriend_Response=} [properties] Properties to set
         */
        function CPlayer_RemoveFriend_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_RemoveFriend_Response friend_relationship.
         * @member {number} friend_relationship
         * @memberof CPlayer_RemoveFriend_Response
         * @instance
         */
        CPlayer_RemoveFriend_Response.prototype.friend_relationship = 0;
    
        /**
         * Creates a new CPlayer_RemoveFriend_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_RemoveFriend_Response
         * @static
         * @param {ICPlayer_RemoveFriend_Response=} [properties] Properties to set
         * @returns {CPlayer_RemoveFriend_Response} CPlayer_RemoveFriend_Response instance
         */
        CPlayer_RemoveFriend_Response.create = function create(properties) {
            return new CPlayer_RemoveFriend_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_RemoveFriend_Response message. Does not implicitly {@link CPlayer_RemoveFriend_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_RemoveFriend_Response
         * @static
         * @param {ICPlayer_RemoveFriend_Response} message CPlayer_RemoveFriend_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_RemoveFriend_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.friend_relationship != null && Object.hasOwnProperty.call(message, "friend_relationship"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.friend_relationship);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_RemoveFriend_Response message, length delimited. Does not implicitly {@link CPlayer_RemoveFriend_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_RemoveFriend_Response
         * @static
         * @param {ICPlayer_RemoveFriend_Response} message CPlayer_RemoveFriend_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_RemoveFriend_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_RemoveFriend_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_RemoveFriend_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_RemoveFriend_Response} CPlayer_RemoveFriend_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_RemoveFriend_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_RemoveFriend_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.friend_relationship = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_RemoveFriend_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_RemoveFriend_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_RemoveFriend_Response} CPlayer_RemoveFriend_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_RemoveFriend_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_RemoveFriend_Response message.
         * @function verify
         * @memberof CPlayer_RemoveFriend_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_RemoveFriend_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.friend_relationship != null && message.hasOwnProperty("friend_relationship"))
                if (!$util.isInteger(message.friend_relationship))
                    return "friend_relationship: integer expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_RemoveFriend_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_RemoveFriend_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_RemoveFriend_Response} CPlayer_RemoveFriend_Response
         */
        CPlayer_RemoveFriend_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_RemoveFriend_Response)
                return object;
            var message = new $root.CPlayer_RemoveFriend_Response();
            if (object.friend_relationship != null)
                message.friend_relationship = object.friend_relationship >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_RemoveFriend_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_RemoveFriend_Response
         * @static
         * @param {CPlayer_RemoveFriend_Response} message CPlayer_RemoveFriend_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_RemoveFriend_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.friend_relationship = 0;
            if (message.friend_relationship != null && message.hasOwnProperty("friend_relationship"))
                object.friend_relationship = message.friend_relationship;
            return object;
        };
    
        /**
         * Converts this CPlayer_RemoveFriend_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_RemoveFriend_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_RemoveFriend_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_RemoveFriend_Response;
    })();
    
    $root.CPlayer_IgnoreFriend_Request = (function() {
    
        /**
         * Properties of a CPlayer_IgnoreFriend_Request.
         * @exports ICPlayer_IgnoreFriend_Request
         * @interface ICPlayer_IgnoreFriend_Request
         * @property {number|Long|null} [steamid] CPlayer_IgnoreFriend_Request steamid
         * @property {boolean|null} [unignore] CPlayer_IgnoreFriend_Request unignore
         */
    
        /**
         * Constructs a new CPlayer_IgnoreFriend_Request.
         * @exports CPlayer_IgnoreFriend_Request
         * @classdesc Represents a CPlayer_IgnoreFriend_Request.
         * @implements ICPlayer_IgnoreFriend_Request
         * @constructor
         * @param {ICPlayer_IgnoreFriend_Request=} [properties] Properties to set
         */
        function CPlayer_IgnoreFriend_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_IgnoreFriend_Request steamid.
         * @member {number|Long} steamid
         * @memberof CPlayer_IgnoreFriend_Request
         * @instance
         */
        CPlayer_IgnoreFriend_Request.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CPlayer_IgnoreFriend_Request unignore.
         * @member {boolean} unignore
         * @memberof CPlayer_IgnoreFriend_Request
         * @instance
         */
        CPlayer_IgnoreFriend_Request.prototype.unignore = false;
    
        /**
         * Creates a new CPlayer_IgnoreFriend_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_IgnoreFriend_Request
         * @static
         * @param {ICPlayer_IgnoreFriend_Request=} [properties] Properties to set
         * @returns {CPlayer_IgnoreFriend_Request} CPlayer_IgnoreFriend_Request instance
         */
        CPlayer_IgnoreFriend_Request.create = function create(properties) {
            return new CPlayer_IgnoreFriend_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_IgnoreFriend_Request message. Does not implicitly {@link CPlayer_IgnoreFriend_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_IgnoreFriend_Request
         * @static
         * @param {ICPlayer_IgnoreFriend_Request} message CPlayer_IgnoreFriend_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_IgnoreFriend_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid != null && Object.hasOwnProperty.call(message, "steamid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
            if (message.unignore != null && Object.hasOwnProperty.call(message, "unignore"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.unignore);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_IgnoreFriend_Request message, length delimited. Does not implicitly {@link CPlayer_IgnoreFriend_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_IgnoreFriend_Request
         * @static
         * @param {ICPlayer_IgnoreFriend_Request} message CPlayer_IgnoreFriend_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_IgnoreFriend_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_IgnoreFriend_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_IgnoreFriend_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_IgnoreFriend_Request} CPlayer_IgnoreFriend_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_IgnoreFriend_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_IgnoreFriend_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid = reader.fixed64();
                    break;
                case 2:
                    message.unignore = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_IgnoreFriend_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_IgnoreFriend_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_IgnoreFriend_Request} CPlayer_IgnoreFriend_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_IgnoreFriend_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_IgnoreFriend_Request message.
         * @function verify
         * @memberof CPlayer_IgnoreFriend_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_IgnoreFriend_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            if (message.unignore != null && message.hasOwnProperty("unignore"))
                if (typeof message.unignore !== "boolean")
                    return "unignore: boolean expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_IgnoreFriend_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_IgnoreFriend_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_IgnoreFriend_Request} CPlayer_IgnoreFriend_Request
         */
        CPlayer_IgnoreFriend_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_IgnoreFriend_Request)
                return object;
            var message = new $root.CPlayer_IgnoreFriend_Request();
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
            if (object.unignore != null)
                message.unignore = Boolean(object.unignore);
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_IgnoreFriend_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_IgnoreFriend_Request
         * @static
         * @param {CPlayer_IgnoreFriend_Request} message CPlayer_IgnoreFriend_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_IgnoreFriend_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
                object.unignore = false;
            }
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
            if (message.unignore != null && message.hasOwnProperty("unignore"))
                object.unignore = message.unignore;
            return object;
        };
    
        /**
         * Converts this CPlayer_IgnoreFriend_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_IgnoreFriend_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_IgnoreFriend_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_IgnoreFriend_Request;
    })();
    
    $root.CPlayer_IgnoreFriend_Response = (function() {
    
        /**
         * Properties of a CPlayer_IgnoreFriend_Response.
         * @exports ICPlayer_IgnoreFriend_Response
         * @interface ICPlayer_IgnoreFriend_Response
         * @property {number|null} [friend_relationship] CPlayer_IgnoreFriend_Response friend_relationship
         */
    
        /**
         * Constructs a new CPlayer_IgnoreFriend_Response.
         * @exports CPlayer_IgnoreFriend_Response
         * @classdesc Represents a CPlayer_IgnoreFriend_Response.
         * @implements ICPlayer_IgnoreFriend_Response
         * @constructor
         * @param {ICPlayer_IgnoreFriend_Response=} [properties] Properties to set
         */
        function CPlayer_IgnoreFriend_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_IgnoreFriend_Response friend_relationship.
         * @member {number} friend_relationship
         * @memberof CPlayer_IgnoreFriend_Response
         * @instance
         */
        CPlayer_IgnoreFriend_Response.prototype.friend_relationship = 0;
    
        /**
         * Creates a new CPlayer_IgnoreFriend_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_IgnoreFriend_Response
         * @static
         * @param {ICPlayer_IgnoreFriend_Response=} [properties] Properties to set
         * @returns {CPlayer_IgnoreFriend_Response} CPlayer_IgnoreFriend_Response instance
         */
        CPlayer_IgnoreFriend_Response.create = function create(properties) {
            return new CPlayer_IgnoreFriend_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_IgnoreFriend_Response message. Does not implicitly {@link CPlayer_IgnoreFriend_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_IgnoreFriend_Response
         * @static
         * @param {ICPlayer_IgnoreFriend_Response} message CPlayer_IgnoreFriend_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_IgnoreFriend_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.friend_relationship != null && Object.hasOwnProperty.call(message, "friend_relationship"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.friend_relationship);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_IgnoreFriend_Response message, length delimited. Does not implicitly {@link CPlayer_IgnoreFriend_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_IgnoreFriend_Response
         * @static
         * @param {ICPlayer_IgnoreFriend_Response} message CPlayer_IgnoreFriend_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_IgnoreFriend_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_IgnoreFriend_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_IgnoreFriend_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_IgnoreFriend_Response} CPlayer_IgnoreFriend_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_IgnoreFriend_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_IgnoreFriend_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.friend_relationship = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_IgnoreFriend_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_IgnoreFriend_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_IgnoreFriend_Response} CPlayer_IgnoreFriend_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_IgnoreFriend_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_IgnoreFriend_Response message.
         * @function verify
         * @memberof CPlayer_IgnoreFriend_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_IgnoreFriend_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.friend_relationship != null && message.hasOwnProperty("friend_relationship"))
                if (!$util.isInteger(message.friend_relationship))
                    return "friend_relationship: integer expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_IgnoreFriend_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_IgnoreFriend_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_IgnoreFriend_Response} CPlayer_IgnoreFriend_Response
         */
        CPlayer_IgnoreFriend_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_IgnoreFriend_Response)
                return object;
            var message = new $root.CPlayer_IgnoreFriend_Response();
            if (object.friend_relationship != null)
                message.friend_relationship = object.friend_relationship >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_IgnoreFriend_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_IgnoreFriend_Response
         * @static
         * @param {CPlayer_IgnoreFriend_Response} message CPlayer_IgnoreFriend_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_IgnoreFriend_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.friend_relationship = 0;
            if (message.friend_relationship != null && message.hasOwnProperty("friend_relationship"))
                object.friend_relationship = message.friend_relationship;
            return object;
        };
    
        /**
         * Converts this CPlayer_IgnoreFriend_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_IgnoreFriend_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_IgnoreFriend_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_IgnoreFriend_Response;
    })();
    
    $root.CPlayer_GetCommunityPreferences_Request = (function() {
    
        /**
         * Properties of a CPlayer_GetCommunityPreferences_Request.
         * @exports ICPlayer_GetCommunityPreferences_Request
         * @interface ICPlayer_GetCommunityPreferences_Request
         */
    
        /**
         * Constructs a new CPlayer_GetCommunityPreferences_Request.
         * @exports CPlayer_GetCommunityPreferences_Request
         * @classdesc Represents a CPlayer_GetCommunityPreferences_Request.
         * @implements ICPlayer_GetCommunityPreferences_Request
         * @constructor
         * @param {ICPlayer_GetCommunityPreferences_Request=} [properties] Properties to set
         */
        function CPlayer_GetCommunityPreferences_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CPlayer_GetCommunityPreferences_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetCommunityPreferences_Request
         * @static
         * @param {ICPlayer_GetCommunityPreferences_Request=} [properties] Properties to set
         * @returns {CPlayer_GetCommunityPreferences_Request} CPlayer_GetCommunityPreferences_Request instance
         */
        CPlayer_GetCommunityPreferences_Request.create = function create(properties) {
            return new CPlayer_GetCommunityPreferences_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetCommunityPreferences_Request message. Does not implicitly {@link CPlayer_GetCommunityPreferences_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetCommunityPreferences_Request
         * @static
         * @param {ICPlayer_GetCommunityPreferences_Request} message CPlayer_GetCommunityPreferences_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetCommunityPreferences_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetCommunityPreferences_Request message, length delimited. Does not implicitly {@link CPlayer_GetCommunityPreferences_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetCommunityPreferences_Request
         * @static
         * @param {ICPlayer_GetCommunityPreferences_Request} message CPlayer_GetCommunityPreferences_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetCommunityPreferences_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetCommunityPreferences_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetCommunityPreferences_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetCommunityPreferences_Request} CPlayer_GetCommunityPreferences_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetCommunityPreferences_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetCommunityPreferences_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetCommunityPreferences_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetCommunityPreferences_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetCommunityPreferences_Request} CPlayer_GetCommunityPreferences_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetCommunityPreferences_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetCommunityPreferences_Request message.
         * @function verify
         * @memberof CPlayer_GetCommunityPreferences_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetCommunityPreferences_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_GetCommunityPreferences_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetCommunityPreferences_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetCommunityPreferences_Request} CPlayer_GetCommunityPreferences_Request
         */
        CPlayer_GetCommunityPreferences_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetCommunityPreferences_Request)
                return object;
            return new $root.CPlayer_GetCommunityPreferences_Request();
        };
    
        /**
         * Creates a plain object from a CPlayer_GetCommunityPreferences_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetCommunityPreferences_Request
         * @static
         * @param {CPlayer_GetCommunityPreferences_Request} message CPlayer_GetCommunityPreferences_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetCommunityPreferences_Request.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CPlayer_GetCommunityPreferences_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_GetCommunityPreferences_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetCommunityPreferences_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetCommunityPreferences_Request;
    })();
    
    $root.CPlayer_CommunityPreferences = (function() {
    
        /**
         * Properties of a CPlayer_CommunityPreferences.
         * @exports ICPlayer_CommunityPreferences
         * @interface ICPlayer_CommunityPreferences
         * @property {boolean|null} [hide_adult_content_violence] CPlayer_CommunityPreferences hide_adult_content_violence
         * @property {boolean|null} [hide_adult_content_sex] CPlayer_CommunityPreferences hide_adult_content_sex
         * @property {boolean|null} [parenthesize_nicknames] CPlayer_CommunityPreferences parenthesize_nicknames
         * @property {number|null} [timestamp_updated] CPlayer_CommunityPreferences timestamp_updated
         */
    
        /**
         * Constructs a new CPlayer_CommunityPreferences.
         * @exports CPlayer_CommunityPreferences
         * @classdesc Represents a CPlayer_CommunityPreferences.
         * @implements ICPlayer_CommunityPreferences
         * @constructor
         * @param {ICPlayer_CommunityPreferences=} [properties] Properties to set
         */
        function CPlayer_CommunityPreferences(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_CommunityPreferences hide_adult_content_violence.
         * @member {boolean} hide_adult_content_violence
         * @memberof CPlayer_CommunityPreferences
         * @instance
         */
        CPlayer_CommunityPreferences.prototype.hide_adult_content_violence = true;
    
        /**
         * CPlayer_CommunityPreferences hide_adult_content_sex.
         * @member {boolean} hide_adult_content_sex
         * @memberof CPlayer_CommunityPreferences
         * @instance
         */
        CPlayer_CommunityPreferences.prototype.hide_adult_content_sex = true;
    
        /**
         * CPlayer_CommunityPreferences parenthesize_nicknames.
         * @member {boolean} parenthesize_nicknames
         * @memberof CPlayer_CommunityPreferences
         * @instance
         */
        CPlayer_CommunityPreferences.prototype.parenthesize_nicknames = false;
    
        /**
         * CPlayer_CommunityPreferences timestamp_updated.
         * @member {number} timestamp_updated
         * @memberof CPlayer_CommunityPreferences
         * @instance
         */
        CPlayer_CommunityPreferences.prototype.timestamp_updated = 0;
    
        /**
         * Creates a new CPlayer_CommunityPreferences instance using the specified properties.
         * @function create
         * @memberof CPlayer_CommunityPreferences
         * @static
         * @param {ICPlayer_CommunityPreferences=} [properties] Properties to set
         * @returns {CPlayer_CommunityPreferences} CPlayer_CommunityPreferences instance
         */
        CPlayer_CommunityPreferences.create = function create(properties) {
            return new CPlayer_CommunityPreferences(properties);
        };
    
        /**
         * Encodes the specified CPlayer_CommunityPreferences message. Does not implicitly {@link CPlayer_CommunityPreferences.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_CommunityPreferences
         * @static
         * @param {ICPlayer_CommunityPreferences} message CPlayer_CommunityPreferences message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_CommunityPreferences.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.hide_adult_content_violence != null && Object.hasOwnProperty.call(message, "hide_adult_content_violence"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.hide_adult_content_violence);
            if (message.hide_adult_content_sex != null && Object.hasOwnProperty.call(message, "hide_adult_content_sex"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.hide_adult_content_sex);
            if (message.timestamp_updated != null && Object.hasOwnProperty.call(message, "timestamp_updated"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.timestamp_updated);
            if (message.parenthesize_nicknames != null && Object.hasOwnProperty.call(message, "parenthesize_nicknames"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.parenthesize_nicknames);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_CommunityPreferences message, length delimited. Does not implicitly {@link CPlayer_CommunityPreferences.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_CommunityPreferences
         * @static
         * @param {ICPlayer_CommunityPreferences} message CPlayer_CommunityPreferences message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_CommunityPreferences.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_CommunityPreferences message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_CommunityPreferences
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_CommunityPreferences} CPlayer_CommunityPreferences
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_CommunityPreferences.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_CommunityPreferences();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.hide_adult_content_violence = reader.bool();
                    break;
                case 2:
                    message.hide_adult_content_sex = reader.bool();
                    break;
                case 4:
                    message.parenthesize_nicknames = reader.bool();
                    break;
                case 3:
                    message.timestamp_updated = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_CommunityPreferences message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_CommunityPreferences
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_CommunityPreferences} CPlayer_CommunityPreferences
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_CommunityPreferences.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_CommunityPreferences message.
         * @function verify
         * @memberof CPlayer_CommunityPreferences
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_CommunityPreferences.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.hide_adult_content_violence != null && message.hasOwnProperty("hide_adult_content_violence"))
                if (typeof message.hide_adult_content_violence !== "boolean")
                    return "hide_adult_content_violence: boolean expected";
            if (message.hide_adult_content_sex != null && message.hasOwnProperty("hide_adult_content_sex"))
                if (typeof message.hide_adult_content_sex !== "boolean")
                    return "hide_adult_content_sex: boolean expected";
            if (message.parenthesize_nicknames != null && message.hasOwnProperty("parenthesize_nicknames"))
                if (typeof message.parenthesize_nicknames !== "boolean")
                    return "parenthesize_nicknames: boolean expected";
            if (message.timestamp_updated != null && message.hasOwnProperty("timestamp_updated"))
                if (!$util.isInteger(message.timestamp_updated))
                    return "timestamp_updated: integer expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_CommunityPreferences message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_CommunityPreferences
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_CommunityPreferences} CPlayer_CommunityPreferences
         */
        CPlayer_CommunityPreferences.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_CommunityPreferences)
                return object;
            var message = new $root.CPlayer_CommunityPreferences();
            if (object.hide_adult_content_violence != null)
                message.hide_adult_content_violence = Boolean(object.hide_adult_content_violence);
            if (object.hide_adult_content_sex != null)
                message.hide_adult_content_sex = Boolean(object.hide_adult_content_sex);
            if (object.parenthesize_nicknames != null)
                message.parenthesize_nicknames = Boolean(object.parenthesize_nicknames);
            if (object.timestamp_updated != null)
                message.timestamp_updated = object.timestamp_updated >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_CommunityPreferences message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_CommunityPreferences
         * @static
         * @param {CPlayer_CommunityPreferences} message CPlayer_CommunityPreferences
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_CommunityPreferences.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.hide_adult_content_violence = true;
                object.hide_adult_content_sex = true;
                object.timestamp_updated = 0;
                object.parenthesize_nicknames = false;
            }
            if (message.hide_adult_content_violence != null && message.hasOwnProperty("hide_adult_content_violence"))
                object.hide_adult_content_violence = message.hide_adult_content_violence;
            if (message.hide_adult_content_sex != null && message.hasOwnProperty("hide_adult_content_sex"))
                object.hide_adult_content_sex = message.hide_adult_content_sex;
            if (message.timestamp_updated != null && message.hasOwnProperty("timestamp_updated"))
                object.timestamp_updated = message.timestamp_updated;
            if (message.parenthesize_nicknames != null && message.hasOwnProperty("parenthesize_nicknames"))
                object.parenthesize_nicknames = message.parenthesize_nicknames;
            return object;
        };
    
        /**
         * Converts this CPlayer_CommunityPreferences to JSON.
         * @function toJSON
         * @memberof CPlayer_CommunityPreferences
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_CommunityPreferences.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_CommunityPreferences;
    })();
    
    $root.CPlayer_GetCommunityPreferences_Response = (function() {
    
        /**
         * Properties of a CPlayer_GetCommunityPreferences_Response.
         * @exports ICPlayer_GetCommunityPreferences_Response
         * @interface ICPlayer_GetCommunityPreferences_Response
         * @property {ICPlayer_CommunityPreferences|null} [preferences] CPlayer_GetCommunityPreferences_Response preferences
         */
    
        /**
         * Constructs a new CPlayer_GetCommunityPreferences_Response.
         * @exports CPlayer_GetCommunityPreferences_Response
         * @classdesc Represents a CPlayer_GetCommunityPreferences_Response.
         * @implements ICPlayer_GetCommunityPreferences_Response
         * @constructor
         * @param {ICPlayer_GetCommunityPreferences_Response=} [properties] Properties to set
         */
        function CPlayer_GetCommunityPreferences_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetCommunityPreferences_Response preferences.
         * @member {ICPlayer_CommunityPreferences|null|undefined} preferences
         * @memberof CPlayer_GetCommunityPreferences_Response
         * @instance
         */
        CPlayer_GetCommunityPreferences_Response.prototype.preferences = null;
    
        /**
         * Creates a new CPlayer_GetCommunityPreferences_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetCommunityPreferences_Response
         * @static
         * @param {ICPlayer_GetCommunityPreferences_Response=} [properties] Properties to set
         * @returns {CPlayer_GetCommunityPreferences_Response} CPlayer_GetCommunityPreferences_Response instance
         */
        CPlayer_GetCommunityPreferences_Response.create = function create(properties) {
            return new CPlayer_GetCommunityPreferences_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetCommunityPreferences_Response message. Does not implicitly {@link CPlayer_GetCommunityPreferences_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetCommunityPreferences_Response
         * @static
         * @param {ICPlayer_GetCommunityPreferences_Response} message CPlayer_GetCommunityPreferences_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetCommunityPreferences_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.preferences != null && Object.hasOwnProperty.call(message, "preferences"))
                $root.CPlayer_CommunityPreferences.encode(message.preferences, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetCommunityPreferences_Response message, length delimited. Does not implicitly {@link CPlayer_GetCommunityPreferences_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetCommunityPreferences_Response
         * @static
         * @param {ICPlayer_GetCommunityPreferences_Response} message CPlayer_GetCommunityPreferences_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetCommunityPreferences_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetCommunityPreferences_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetCommunityPreferences_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetCommunityPreferences_Response} CPlayer_GetCommunityPreferences_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetCommunityPreferences_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetCommunityPreferences_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.preferences = $root.CPlayer_CommunityPreferences.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetCommunityPreferences_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetCommunityPreferences_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetCommunityPreferences_Response} CPlayer_GetCommunityPreferences_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetCommunityPreferences_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetCommunityPreferences_Response message.
         * @function verify
         * @memberof CPlayer_GetCommunityPreferences_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetCommunityPreferences_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.preferences != null && message.hasOwnProperty("preferences")) {
                var error = $root.CPlayer_CommunityPreferences.verify(message.preferences);
                if (error)
                    return "preferences." + error;
            }
            return null;
        };
    
        /**
         * Creates a CPlayer_GetCommunityPreferences_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetCommunityPreferences_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetCommunityPreferences_Response} CPlayer_GetCommunityPreferences_Response
         */
        CPlayer_GetCommunityPreferences_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetCommunityPreferences_Response)
                return object;
            var message = new $root.CPlayer_GetCommunityPreferences_Response();
            if (object.preferences != null) {
                if (typeof object.preferences !== "object")
                    throw TypeError(".CPlayer_GetCommunityPreferences_Response.preferences: object expected");
                message.preferences = $root.CPlayer_CommunityPreferences.fromObject(object.preferences);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetCommunityPreferences_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetCommunityPreferences_Response
         * @static
         * @param {CPlayer_GetCommunityPreferences_Response} message CPlayer_GetCommunityPreferences_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetCommunityPreferences_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.preferences = null;
            if (message.preferences != null && message.hasOwnProperty("preferences"))
                object.preferences = $root.CPlayer_CommunityPreferences.toObject(message.preferences, options);
            return object;
        };
    
        /**
         * Converts this CPlayer_GetCommunityPreferences_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_GetCommunityPreferences_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetCommunityPreferences_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetCommunityPreferences_Response;
    })();
    
    $root.CPlayer_SetCommunityPreferences_Request = (function() {
    
        /**
         * Properties of a CPlayer_SetCommunityPreferences_Request.
         * @exports ICPlayer_SetCommunityPreferences_Request
         * @interface ICPlayer_SetCommunityPreferences_Request
         * @property {ICPlayer_CommunityPreferences|null} [preferences] CPlayer_SetCommunityPreferences_Request preferences
         */
    
        /**
         * Constructs a new CPlayer_SetCommunityPreferences_Request.
         * @exports CPlayer_SetCommunityPreferences_Request
         * @classdesc Represents a CPlayer_SetCommunityPreferences_Request.
         * @implements ICPlayer_SetCommunityPreferences_Request
         * @constructor
         * @param {ICPlayer_SetCommunityPreferences_Request=} [properties] Properties to set
         */
        function CPlayer_SetCommunityPreferences_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_SetCommunityPreferences_Request preferences.
         * @member {ICPlayer_CommunityPreferences|null|undefined} preferences
         * @memberof CPlayer_SetCommunityPreferences_Request
         * @instance
         */
        CPlayer_SetCommunityPreferences_Request.prototype.preferences = null;
    
        /**
         * Creates a new CPlayer_SetCommunityPreferences_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_SetCommunityPreferences_Request
         * @static
         * @param {ICPlayer_SetCommunityPreferences_Request=} [properties] Properties to set
         * @returns {CPlayer_SetCommunityPreferences_Request} CPlayer_SetCommunityPreferences_Request instance
         */
        CPlayer_SetCommunityPreferences_Request.create = function create(properties) {
            return new CPlayer_SetCommunityPreferences_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_SetCommunityPreferences_Request message. Does not implicitly {@link CPlayer_SetCommunityPreferences_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_SetCommunityPreferences_Request
         * @static
         * @param {ICPlayer_SetCommunityPreferences_Request} message CPlayer_SetCommunityPreferences_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetCommunityPreferences_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.preferences != null && Object.hasOwnProperty.call(message, "preferences"))
                $root.CPlayer_CommunityPreferences.encode(message.preferences, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_SetCommunityPreferences_Request message, length delimited. Does not implicitly {@link CPlayer_SetCommunityPreferences_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_SetCommunityPreferences_Request
         * @static
         * @param {ICPlayer_SetCommunityPreferences_Request} message CPlayer_SetCommunityPreferences_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetCommunityPreferences_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_SetCommunityPreferences_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_SetCommunityPreferences_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_SetCommunityPreferences_Request} CPlayer_SetCommunityPreferences_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetCommunityPreferences_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_SetCommunityPreferences_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.preferences = $root.CPlayer_CommunityPreferences.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_SetCommunityPreferences_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_SetCommunityPreferences_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_SetCommunityPreferences_Request} CPlayer_SetCommunityPreferences_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetCommunityPreferences_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_SetCommunityPreferences_Request message.
         * @function verify
         * @memberof CPlayer_SetCommunityPreferences_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_SetCommunityPreferences_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.preferences != null && message.hasOwnProperty("preferences")) {
                var error = $root.CPlayer_CommunityPreferences.verify(message.preferences);
                if (error)
                    return "preferences." + error;
            }
            return null;
        };
    
        /**
         * Creates a CPlayer_SetCommunityPreferences_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_SetCommunityPreferences_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_SetCommunityPreferences_Request} CPlayer_SetCommunityPreferences_Request
         */
        CPlayer_SetCommunityPreferences_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_SetCommunityPreferences_Request)
                return object;
            var message = new $root.CPlayer_SetCommunityPreferences_Request();
            if (object.preferences != null) {
                if (typeof object.preferences !== "object")
                    throw TypeError(".CPlayer_SetCommunityPreferences_Request.preferences: object expected");
                message.preferences = $root.CPlayer_CommunityPreferences.fromObject(object.preferences);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_SetCommunityPreferences_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_SetCommunityPreferences_Request
         * @static
         * @param {CPlayer_SetCommunityPreferences_Request} message CPlayer_SetCommunityPreferences_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_SetCommunityPreferences_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.preferences = null;
            if (message.preferences != null && message.hasOwnProperty("preferences"))
                object.preferences = $root.CPlayer_CommunityPreferences.toObject(message.preferences, options);
            return object;
        };
    
        /**
         * Converts this CPlayer_SetCommunityPreferences_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_SetCommunityPreferences_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_SetCommunityPreferences_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_SetCommunityPreferences_Request;
    })();
    
    $root.CPlayer_SetCommunityPreferences_Response = (function() {
    
        /**
         * Properties of a CPlayer_SetCommunityPreferences_Response.
         * @exports ICPlayer_SetCommunityPreferences_Response
         * @interface ICPlayer_SetCommunityPreferences_Response
         */
    
        /**
         * Constructs a new CPlayer_SetCommunityPreferences_Response.
         * @exports CPlayer_SetCommunityPreferences_Response
         * @classdesc Represents a CPlayer_SetCommunityPreferences_Response.
         * @implements ICPlayer_SetCommunityPreferences_Response
         * @constructor
         * @param {ICPlayer_SetCommunityPreferences_Response=} [properties] Properties to set
         */
        function CPlayer_SetCommunityPreferences_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CPlayer_SetCommunityPreferences_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_SetCommunityPreferences_Response
         * @static
         * @param {ICPlayer_SetCommunityPreferences_Response=} [properties] Properties to set
         * @returns {CPlayer_SetCommunityPreferences_Response} CPlayer_SetCommunityPreferences_Response instance
         */
        CPlayer_SetCommunityPreferences_Response.create = function create(properties) {
            return new CPlayer_SetCommunityPreferences_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_SetCommunityPreferences_Response message. Does not implicitly {@link CPlayer_SetCommunityPreferences_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_SetCommunityPreferences_Response
         * @static
         * @param {ICPlayer_SetCommunityPreferences_Response} message CPlayer_SetCommunityPreferences_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetCommunityPreferences_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_SetCommunityPreferences_Response message, length delimited. Does not implicitly {@link CPlayer_SetCommunityPreferences_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_SetCommunityPreferences_Response
         * @static
         * @param {ICPlayer_SetCommunityPreferences_Response} message CPlayer_SetCommunityPreferences_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_SetCommunityPreferences_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_SetCommunityPreferences_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_SetCommunityPreferences_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_SetCommunityPreferences_Response} CPlayer_SetCommunityPreferences_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetCommunityPreferences_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_SetCommunityPreferences_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_SetCommunityPreferences_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_SetCommunityPreferences_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_SetCommunityPreferences_Response} CPlayer_SetCommunityPreferences_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_SetCommunityPreferences_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_SetCommunityPreferences_Response message.
         * @function verify
         * @memberof CPlayer_SetCommunityPreferences_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_SetCommunityPreferences_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_SetCommunityPreferences_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_SetCommunityPreferences_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_SetCommunityPreferences_Response} CPlayer_SetCommunityPreferences_Response
         */
        CPlayer_SetCommunityPreferences_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_SetCommunityPreferences_Response)
                return object;
            return new $root.CPlayer_SetCommunityPreferences_Response();
        };
    
        /**
         * Creates a plain object from a CPlayer_SetCommunityPreferences_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_SetCommunityPreferences_Response
         * @static
         * @param {CPlayer_SetCommunityPreferences_Response} message CPlayer_SetCommunityPreferences_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_SetCommunityPreferences_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CPlayer_SetCommunityPreferences_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_SetCommunityPreferences_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_SetCommunityPreferences_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_SetCommunityPreferences_Response;
    })();
    
    $root.CPlayer_GetNewSteamAnnouncementState_Request = (function() {
    
        /**
         * Properties of a CPlayer_GetNewSteamAnnouncementState_Request.
         * @exports ICPlayer_GetNewSteamAnnouncementState_Request
         * @interface ICPlayer_GetNewSteamAnnouncementState_Request
         * @property {number|null} [language] CPlayer_GetNewSteamAnnouncementState_Request language
         */
    
        /**
         * Constructs a new CPlayer_GetNewSteamAnnouncementState_Request.
         * @exports CPlayer_GetNewSteamAnnouncementState_Request
         * @classdesc Represents a CPlayer_GetNewSteamAnnouncementState_Request.
         * @implements ICPlayer_GetNewSteamAnnouncementState_Request
         * @constructor
         * @param {ICPlayer_GetNewSteamAnnouncementState_Request=} [properties] Properties to set
         */
        function CPlayer_GetNewSteamAnnouncementState_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetNewSteamAnnouncementState_Request language.
         * @member {number} language
         * @memberof CPlayer_GetNewSteamAnnouncementState_Request
         * @instance
         */
        CPlayer_GetNewSteamAnnouncementState_Request.prototype.language = 0;
    
        /**
         * Creates a new CPlayer_GetNewSteamAnnouncementState_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetNewSteamAnnouncementState_Request
         * @static
         * @param {ICPlayer_GetNewSteamAnnouncementState_Request=} [properties] Properties to set
         * @returns {CPlayer_GetNewSteamAnnouncementState_Request} CPlayer_GetNewSteamAnnouncementState_Request instance
         */
        CPlayer_GetNewSteamAnnouncementState_Request.create = function create(properties) {
            return new CPlayer_GetNewSteamAnnouncementState_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetNewSteamAnnouncementState_Request message. Does not implicitly {@link CPlayer_GetNewSteamAnnouncementState_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetNewSteamAnnouncementState_Request
         * @static
         * @param {ICPlayer_GetNewSteamAnnouncementState_Request} message CPlayer_GetNewSteamAnnouncementState_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetNewSteamAnnouncementState_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.language != null && Object.hasOwnProperty.call(message, "language"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.language);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetNewSteamAnnouncementState_Request message, length delimited. Does not implicitly {@link CPlayer_GetNewSteamAnnouncementState_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetNewSteamAnnouncementState_Request
         * @static
         * @param {ICPlayer_GetNewSteamAnnouncementState_Request} message CPlayer_GetNewSteamAnnouncementState_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetNewSteamAnnouncementState_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetNewSteamAnnouncementState_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetNewSteamAnnouncementState_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetNewSteamAnnouncementState_Request} CPlayer_GetNewSteamAnnouncementState_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetNewSteamAnnouncementState_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetNewSteamAnnouncementState_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.language = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetNewSteamAnnouncementState_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetNewSteamAnnouncementState_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetNewSteamAnnouncementState_Request} CPlayer_GetNewSteamAnnouncementState_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetNewSteamAnnouncementState_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetNewSteamAnnouncementState_Request message.
         * @function verify
         * @memberof CPlayer_GetNewSteamAnnouncementState_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetNewSteamAnnouncementState_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.language != null && message.hasOwnProperty("language"))
                if (!$util.isInteger(message.language))
                    return "language: integer expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_GetNewSteamAnnouncementState_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetNewSteamAnnouncementState_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetNewSteamAnnouncementState_Request} CPlayer_GetNewSteamAnnouncementState_Request
         */
        CPlayer_GetNewSteamAnnouncementState_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetNewSteamAnnouncementState_Request)
                return object;
            var message = new $root.CPlayer_GetNewSteamAnnouncementState_Request();
            if (object.language != null)
                message.language = object.language | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetNewSteamAnnouncementState_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetNewSteamAnnouncementState_Request
         * @static
         * @param {CPlayer_GetNewSteamAnnouncementState_Request} message CPlayer_GetNewSteamAnnouncementState_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetNewSteamAnnouncementState_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.language = 0;
            if (message.language != null && message.hasOwnProperty("language"))
                object.language = message.language;
            return object;
        };
    
        /**
         * Converts this CPlayer_GetNewSteamAnnouncementState_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_GetNewSteamAnnouncementState_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetNewSteamAnnouncementState_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetNewSteamAnnouncementState_Request;
    })();
    
    $root.CPlayer_GetNewSteamAnnouncementState_Response = (function() {
    
        /**
         * Properties of a CPlayer_GetNewSteamAnnouncementState_Response.
         * @exports ICPlayer_GetNewSteamAnnouncementState_Response
         * @interface ICPlayer_GetNewSteamAnnouncementState_Response
         * @property {number|null} [state] CPlayer_GetNewSteamAnnouncementState_Response state
         * @property {string|null} [announcement_headline] CPlayer_GetNewSteamAnnouncementState_Response announcement_headline
         * @property {string|null} [announcement_url] CPlayer_GetNewSteamAnnouncementState_Response announcement_url
         * @property {number|null} [time_posted] CPlayer_GetNewSteamAnnouncementState_Response time_posted
         * @property {number|Long|null} [announcement_gid] CPlayer_GetNewSteamAnnouncementState_Response announcement_gid
         */
    
        /**
         * Constructs a new CPlayer_GetNewSteamAnnouncementState_Response.
         * @exports CPlayer_GetNewSteamAnnouncementState_Response
         * @classdesc Represents a CPlayer_GetNewSteamAnnouncementState_Response.
         * @implements ICPlayer_GetNewSteamAnnouncementState_Response
         * @constructor
         * @param {ICPlayer_GetNewSteamAnnouncementState_Response=} [properties] Properties to set
         */
        function CPlayer_GetNewSteamAnnouncementState_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetNewSteamAnnouncementState_Response state.
         * @member {number} state
         * @memberof CPlayer_GetNewSteamAnnouncementState_Response
         * @instance
         */
        CPlayer_GetNewSteamAnnouncementState_Response.prototype.state = 0;
    
        /**
         * CPlayer_GetNewSteamAnnouncementState_Response announcement_headline.
         * @member {string} announcement_headline
         * @memberof CPlayer_GetNewSteamAnnouncementState_Response
         * @instance
         */
        CPlayer_GetNewSteamAnnouncementState_Response.prototype.announcement_headline = "";
    
        /**
         * CPlayer_GetNewSteamAnnouncementState_Response announcement_url.
         * @member {string} announcement_url
         * @memberof CPlayer_GetNewSteamAnnouncementState_Response
         * @instance
         */
        CPlayer_GetNewSteamAnnouncementState_Response.prototype.announcement_url = "";
    
        /**
         * CPlayer_GetNewSteamAnnouncementState_Response time_posted.
         * @member {number} time_posted
         * @memberof CPlayer_GetNewSteamAnnouncementState_Response
         * @instance
         */
        CPlayer_GetNewSteamAnnouncementState_Response.prototype.time_posted = 0;
    
        /**
         * CPlayer_GetNewSteamAnnouncementState_Response announcement_gid.
         * @member {number|Long} announcement_gid
         * @memberof CPlayer_GetNewSteamAnnouncementState_Response
         * @instance
         */
        CPlayer_GetNewSteamAnnouncementState_Response.prototype.announcement_gid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CPlayer_GetNewSteamAnnouncementState_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetNewSteamAnnouncementState_Response
         * @static
         * @param {ICPlayer_GetNewSteamAnnouncementState_Response=} [properties] Properties to set
         * @returns {CPlayer_GetNewSteamAnnouncementState_Response} CPlayer_GetNewSteamAnnouncementState_Response instance
         */
        CPlayer_GetNewSteamAnnouncementState_Response.create = function create(properties) {
            return new CPlayer_GetNewSteamAnnouncementState_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetNewSteamAnnouncementState_Response message. Does not implicitly {@link CPlayer_GetNewSteamAnnouncementState_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetNewSteamAnnouncementState_Response
         * @static
         * @param {ICPlayer_GetNewSteamAnnouncementState_Response} message CPlayer_GetNewSteamAnnouncementState_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetNewSteamAnnouncementState_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.state);
            if (message.announcement_headline != null && Object.hasOwnProperty.call(message, "announcement_headline"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.announcement_headline);
            if (message.announcement_url != null && Object.hasOwnProperty.call(message, "announcement_url"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.announcement_url);
            if (message.time_posted != null && Object.hasOwnProperty.call(message, "time_posted"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.time_posted);
            if (message.announcement_gid != null && Object.hasOwnProperty.call(message, "announcement_gid"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.announcement_gid);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetNewSteamAnnouncementState_Response message, length delimited. Does not implicitly {@link CPlayer_GetNewSteamAnnouncementState_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetNewSteamAnnouncementState_Response
         * @static
         * @param {ICPlayer_GetNewSteamAnnouncementState_Response} message CPlayer_GetNewSteamAnnouncementState_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetNewSteamAnnouncementState_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetNewSteamAnnouncementState_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetNewSteamAnnouncementState_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetNewSteamAnnouncementState_Response} CPlayer_GetNewSteamAnnouncementState_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetNewSteamAnnouncementState_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetNewSteamAnnouncementState_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.state = reader.int32();
                    break;
                case 2:
                    message.announcement_headline = reader.string();
                    break;
                case 3:
                    message.announcement_url = reader.string();
                    break;
                case 4:
                    message.time_posted = reader.uint32();
                    break;
                case 5:
                    message.announcement_gid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetNewSteamAnnouncementState_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetNewSteamAnnouncementState_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetNewSteamAnnouncementState_Response} CPlayer_GetNewSteamAnnouncementState_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetNewSteamAnnouncementState_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetNewSteamAnnouncementState_Response message.
         * @function verify
         * @memberof CPlayer_GetNewSteamAnnouncementState_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetNewSteamAnnouncementState_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.state != null && message.hasOwnProperty("state"))
                if (!$util.isInteger(message.state))
                    return "state: integer expected";
            if (message.announcement_headline != null && message.hasOwnProperty("announcement_headline"))
                if (!$util.isString(message.announcement_headline))
                    return "announcement_headline: string expected";
            if (message.announcement_url != null && message.hasOwnProperty("announcement_url"))
                if (!$util.isString(message.announcement_url))
                    return "announcement_url: string expected";
            if (message.time_posted != null && message.hasOwnProperty("time_posted"))
                if (!$util.isInteger(message.time_posted))
                    return "time_posted: integer expected";
            if (message.announcement_gid != null && message.hasOwnProperty("announcement_gid"))
                if (!$util.isInteger(message.announcement_gid) && !(message.announcement_gid && $util.isInteger(message.announcement_gid.low) && $util.isInteger(message.announcement_gid.high)))
                    return "announcement_gid: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_GetNewSteamAnnouncementState_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetNewSteamAnnouncementState_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetNewSteamAnnouncementState_Response} CPlayer_GetNewSteamAnnouncementState_Response
         */
        CPlayer_GetNewSteamAnnouncementState_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetNewSteamAnnouncementState_Response)
                return object;
            var message = new $root.CPlayer_GetNewSteamAnnouncementState_Response();
            if (object.state != null)
                message.state = object.state | 0;
            if (object.announcement_headline != null)
                message.announcement_headline = String(object.announcement_headline);
            if (object.announcement_url != null)
                message.announcement_url = String(object.announcement_url);
            if (object.time_posted != null)
                message.time_posted = object.time_posted >>> 0;
            if (object.announcement_gid != null)
                if ($util.Long)
                    (message.announcement_gid = $util.Long.fromValue(object.announcement_gid)).unsigned = true;
                else if (typeof object.announcement_gid === "string")
                    message.announcement_gid = parseInt(object.announcement_gid, 10);
                else if (typeof object.announcement_gid === "number")
                    message.announcement_gid = object.announcement_gid;
                else if (typeof object.announcement_gid === "object")
                    message.announcement_gid = new $util.LongBits(object.announcement_gid.low >>> 0, object.announcement_gid.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetNewSteamAnnouncementState_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetNewSteamAnnouncementState_Response
         * @static
         * @param {CPlayer_GetNewSteamAnnouncementState_Response} message CPlayer_GetNewSteamAnnouncementState_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetNewSteamAnnouncementState_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.state = 0;
                object.announcement_headline = "";
                object.announcement_url = "";
                object.time_posted = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.announcement_gid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.announcement_gid = options.longs === String ? "0" : 0;
            }
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = message.state;
            if (message.announcement_headline != null && message.hasOwnProperty("announcement_headline"))
                object.announcement_headline = message.announcement_headline;
            if (message.announcement_url != null && message.hasOwnProperty("announcement_url"))
                object.announcement_url = message.announcement_url;
            if (message.time_posted != null && message.hasOwnProperty("time_posted"))
                object.time_posted = message.time_posted;
            if (message.announcement_gid != null && message.hasOwnProperty("announcement_gid"))
                if (typeof message.announcement_gid === "number")
                    object.announcement_gid = options.longs === String ? String(message.announcement_gid) : message.announcement_gid;
                else
                    object.announcement_gid = options.longs === String ? $util.Long.prototype.toString.call(message.announcement_gid) : options.longs === Number ? new $util.LongBits(message.announcement_gid.low >>> 0, message.announcement_gid.high >>> 0).toNumber(true) : message.announcement_gid;
            return object;
        };
    
        /**
         * Converts this CPlayer_GetNewSteamAnnouncementState_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_GetNewSteamAnnouncementState_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetNewSteamAnnouncementState_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetNewSteamAnnouncementState_Response;
    })();
    
    $root.CPlayer_UpdateSteamAnnouncementLastRead_Request = (function() {
    
        /**
         * Properties of a CPlayer_UpdateSteamAnnouncementLastRead_Request.
         * @exports ICPlayer_UpdateSteamAnnouncementLastRead_Request
         * @interface ICPlayer_UpdateSteamAnnouncementLastRead_Request
         * @property {number|Long|null} [announcement_gid] CPlayer_UpdateSteamAnnouncementLastRead_Request announcement_gid
         * @property {number|null} [time_posted] CPlayer_UpdateSteamAnnouncementLastRead_Request time_posted
         */
    
        /**
         * Constructs a new CPlayer_UpdateSteamAnnouncementLastRead_Request.
         * @exports CPlayer_UpdateSteamAnnouncementLastRead_Request
         * @classdesc Represents a CPlayer_UpdateSteamAnnouncementLastRead_Request.
         * @implements ICPlayer_UpdateSteamAnnouncementLastRead_Request
         * @constructor
         * @param {ICPlayer_UpdateSteamAnnouncementLastRead_Request=} [properties] Properties to set
         */
        function CPlayer_UpdateSteamAnnouncementLastRead_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_UpdateSteamAnnouncementLastRead_Request announcement_gid.
         * @member {number|Long} announcement_gid
         * @memberof CPlayer_UpdateSteamAnnouncementLastRead_Request
         * @instance
         */
        CPlayer_UpdateSteamAnnouncementLastRead_Request.prototype.announcement_gid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CPlayer_UpdateSteamAnnouncementLastRead_Request time_posted.
         * @member {number} time_posted
         * @memberof CPlayer_UpdateSteamAnnouncementLastRead_Request
         * @instance
         */
        CPlayer_UpdateSteamAnnouncementLastRead_Request.prototype.time_posted = 0;
    
        /**
         * Creates a new CPlayer_UpdateSteamAnnouncementLastRead_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_UpdateSteamAnnouncementLastRead_Request
         * @static
         * @param {ICPlayer_UpdateSteamAnnouncementLastRead_Request=} [properties] Properties to set
         * @returns {CPlayer_UpdateSteamAnnouncementLastRead_Request} CPlayer_UpdateSteamAnnouncementLastRead_Request instance
         */
        CPlayer_UpdateSteamAnnouncementLastRead_Request.create = function create(properties) {
            return new CPlayer_UpdateSteamAnnouncementLastRead_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_UpdateSteamAnnouncementLastRead_Request message. Does not implicitly {@link CPlayer_UpdateSteamAnnouncementLastRead_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_UpdateSteamAnnouncementLastRead_Request
         * @static
         * @param {ICPlayer_UpdateSteamAnnouncementLastRead_Request} message CPlayer_UpdateSteamAnnouncementLastRead_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_UpdateSteamAnnouncementLastRead_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.announcement_gid != null && Object.hasOwnProperty.call(message, "announcement_gid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.announcement_gid);
            if (message.time_posted != null && Object.hasOwnProperty.call(message, "time_posted"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.time_posted);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_UpdateSteamAnnouncementLastRead_Request message, length delimited. Does not implicitly {@link CPlayer_UpdateSteamAnnouncementLastRead_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_UpdateSteamAnnouncementLastRead_Request
         * @static
         * @param {ICPlayer_UpdateSteamAnnouncementLastRead_Request} message CPlayer_UpdateSteamAnnouncementLastRead_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_UpdateSteamAnnouncementLastRead_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_UpdateSteamAnnouncementLastRead_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_UpdateSteamAnnouncementLastRead_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_UpdateSteamAnnouncementLastRead_Request} CPlayer_UpdateSteamAnnouncementLastRead_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_UpdateSteamAnnouncementLastRead_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_UpdateSteamAnnouncementLastRead_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.announcement_gid = reader.uint64();
                    break;
                case 2:
                    message.time_posted = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_UpdateSteamAnnouncementLastRead_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_UpdateSteamAnnouncementLastRead_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_UpdateSteamAnnouncementLastRead_Request} CPlayer_UpdateSteamAnnouncementLastRead_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_UpdateSteamAnnouncementLastRead_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_UpdateSteamAnnouncementLastRead_Request message.
         * @function verify
         * @memberof CPlayer_UpdateSteamAnnouncementLastRead_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_UpdateSteamAnnouncementLastRead_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.announcement_gid != null && message.hasOwnProperty("announcement_gid"))
                if (!$util.isInteger(message.announcement_gid) && !(message.announcement_gid && $util.isInteger(message.announcement_gid.low) && $util.isInteger(message.announcement_gid.high)))
                    return "announcement_gid: integer|Long expected";
            if (message.time_posted != null && message.hasOwnProperty("time_posted"))
                if (!$util.isInteger(message.time_posted))
                    return "time_posted: integer expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_UpdateSteamAnnouncementLastRead_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_UpdateSteamAnnouncementLastRead_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_UpdateSteamAnnouncementLastRead_Request} CPlayer_UpdateSteamAnnouncementLastRead_Request
         */
        CPlayer_UpdateSteamAnnouncementLastRead_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_UpdateSteamAnnouncementLastRead_Request)
                return object;
            var message = new $root.CPlayer_UpdateSteamAnnouncementLastRead_Request();
            if (object.announcement_gid != null)
                if ($util.Long)
                    (message.announcement_gid = $util.Long.fromValue(object.announcement_gid)).unsigned = true;
                else if (typeof object.announcement_gid === "string")
                    message.announcement_gid = parseInt(object.announcement_gid, 10);
                else if (typeof object.announcement_gid === "number")
                    message.announcement_gid = object.announcement_gid;
                else if (typeof object.announcement_gid === "object")
                    message.announcement_gid = new $util.LongBits(object.announcement_gid.low >>> 0, object.announcement_gid.high >>> 0).toNumber(true);
            if (object.time_posted != null)
                message.time_posted = object.time_posted >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_UpdateSteamAnnouncementLastRead_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_UpdateSteamAnnouncementLastRead_Request
         * @static
         * @param {CPlayer_UpdateSteamAnnouncementLastRead_Request} message CPlayer_UpdateSteamAnnouncementLastRead_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_UpdateSteamAnnouncementLastRead_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.announcement_gid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.announcement_gid = options.longs === String ? "0" : 0;
                object.time_posted = 0;
            }
            if (message.announcement_gid != null && message.hasOwnProperty("announcement_gid"))
                if (typeof message.announcement_gid === "number")
                    object.announcement_gid = options.longs === String ? String(message.announcement_gid) : message.announcement_gid;
                else
                    object.announcement_gid = options.longs === String ? $util.Long.prototype.toString.call(message.announcement_gid) : options.longs === Number ? new $util.LongBits(message.announcement_gid.low >>> 0, message.announcement_gid.high >>> 0).toNumber(true) : message.announcement_gid;
            if (message.time_posted != null && message.hasOwnProperty("time_posted"))
                object.time_posted = message.time_posted;
            return object;
        };
    
        /**
         * Converts this CPlayer_UpdateSteamAnnouncementLastRead_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_UpdateSteamAnnouncementLastRead_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_UpdateSteamAnnouncementLastRead_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_UpdateSteamAnnouncementLastRead_Request;
    })();
    
    $root.CPlayer_UpdateSteamAnnouncementLastRead_Response = (function() {
    
        /**
         * Properties of a CPlayer_UpdateSteamAnnouncementLastRead_Response.
         * @exports ICPlayer_UpdateSteamAnnouncementLastRead_Response
         * @interface ICPlayer_UpdateSteamAnnouncementLastRead_Response
         */
    
        /**
         * Constructs a new CPlayer_UpdateSteamAnnouncementLastRead_Response.
         * @exports CPlayer_UpdateSteamAnnouncementLastRead_Response
         * @classdesc Represents a CPlayer_UpdateSteamAnnouncementLastRead_Response.
         * @implements ICPlayer_UpdateSteamAnnouncementLastRead_Response
         * @constructor
         * @param {ICPlayer_UpdateSteamAnnouncementLastRead_Response=} [properties] Properties to set
         */
        function CPlayer_UpdateSteamAnnouncementLastRead_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CPlayer_UpdateSteamAnnouncementLastRead_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_UpdateSteamAnnouncementLastRead_Response
         * @static
         * @param {ICPlayer_UpdateSteamAnnouncementLastRead_Response=} [properties] Properties to set
         * @returns {CPlayer_UpdateSteamAnnouncementLastRead_Response} CPlayer_UpdateSteamAnnouncementLastRead_Response instance
         */
        CPlayer_UpdateSteamAnnouncementLastRead_Response.create = function create(properties) {
            return new CPlayer_UpdateSteamAnnouncementLastRead_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_UpdateSteamAnnouncementLastRead_Response message. Does not implicitly {@link CPlayer_UpdateSteamAnnouncementLastRead_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_UpdateSteamAnnouncementLastRead_Response
         * @static
         * @param {ICPlayer_UpdateSteamAnnouncementLastRead_Response} message CPlayer_UpdateSteamAnnouncementLastRead_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_UpdateSteamAnnouncementLastRead_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_UpdateSteamAnnouncementLastRead_Response message, length delimited. Does not implicitly {@link CPlayer_UpdateSteamAnnouncementLastRead_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_UpdateSteamAnnouncementLastRead_Response
         * @static
         * @param {ICPlayer_UpdateSteamAnnouncementLastRead_Response} message CPlayer_UpdateSteamAnnouncementLastRead_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_UpdateSteamAnnouncementLastRead_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_UpdateSteamAnnouncementLastRead_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_UpdateSteamAnnouncementLastRead_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_UpdateSteamAnnouncementLastRead_Response} CPlayer_UpdateSteamAnnouncementLastRead_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_UpdateSteamAnnouncementLastRead_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_UpdateSteamAnnouncementLastRead_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_UpdateSteamAnnouncementLastRead_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_UpdateSteamAnnouncementLastRead_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_UpdateSteamAnnouncementLastRead_Response} CPlayer_UpdateSteamAnnouncementLastRead_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_UpdateSteamAnnouncementLastRead_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_UpdateSteamAnnouncementLastRead_Response message.
         * @function verify
         * @memberof CPlayer_UpdateSteamAnnouncementLastRead_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_UpdateSteamAnnouncementLastRead_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_UpdateSteamAnnouncementLastRead_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_UpdateSteamAnnouncementLastRead_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_UpdateSteamAnnouncementLastRead_Response} CPlayer_UpdateSteamAnnouncementLastRead_Response
         */
        CPlayer_UpdateSteamAnnouncementLastRead_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_UpdateSteamAnnouncementLastRead_Response)
                return object;
            return new $root.CPlayer_UpdateSteamAnnouncementLastRead_Response();
        };
    
        /**
         * Creates a plain object from a CPlayer_UpdateSteamAnnouncementLastRead_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_UpdateSteamAnnouncementLastRead_Response
         * @static
         * @param {CPlayer_UpdateSteamAnnouncementLastRead_Response} message CPlayer_UpdateSteamAnnouncementLastRead_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_UpdateSteamAnnouncementLastRead_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CPlayer_UpdateSteamAnnouncementLastRead_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_UpdateSteamAnnouncementLastRead_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_UpdateSteamAnnouncementLastRead_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_UpdateSteamAnnouncementLastRead_Response;
    })();
    
    $root.CPlayer_GetPrivacySettings_Request = (function() {
    
        /**
         * Properties of a CPlayer_GetPrivacySettings_Request.
         * @exports ICPlayer_GetPrivacySettings_Request
         * @interface ICPlayer_GetPrivacySettings_Request
         */
    
        /**
         * Constructs a new CPlayer_GetPrivacySettings_Request.
         * @exports CPlayer_GetPrivacySettings_Request
         * @classdesc Represents a CPlayer_GetPrivacySettings_Request.
         * @implements ICPlayer_GetPrivacySettings_Request
         * @constructor
         * @param {ICPlayer_GetPrivacySettings_Request=} [properties] Properties to set
         */
        function CPlayer_GetPrivacySettings_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CPlayer_GetPrivacySettings_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetPrivacySettings_Request
         * @static
         * @param {ICPlayer_GetPrivacySettings_Request=} [properties] Properties to set
         * @returns {CPlayer_GetPrivacySettings_Request} CPlayer_GetPrivacySettings_Request instance
         */
        CPlayer_GetPrivacySettings_Request.create = function create(properties) {
            return new CPlayer_GetPrivacySettings_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetPrivacySettings_Request message. Does not implicitly {@link CPlayer_GetPrivacySettings_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetPrivacySettings_Request
         * @static
         * @param {ICPlayer_GetPrivacySettings_Request} message CPlayer_GetPrivacySettings_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetPrivacySettings_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetPrivacySettings_Request message, length delimited. Does not implicitly {@link CPlayer_GetPrivacySettings_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetPrivacySettings_Request
         * @static
         * @param {ICPlayer_GetPrivacySettings_Request} message CPlayer_GetPrivacySettings_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetPrivacySettings_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetPrivacySettings_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetPrivacySettings_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetPrivacySettings_Request} CPlayer_GetPrivacySettings_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetPrivacySettings_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetPrivacySettings_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetPrivacySettings_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetPrivacySettings_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetPrivacySettings_Request} CPlayer_GetPrivacySettings_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetPrivacySettings_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetPrivacySettings_Request message.
         * @function verify
         * @memberof CPlayer_GetPrivacySettings_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetPrivacySettings_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_GetPrivacySettings_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetPrivacySettings_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetPrivacySettings_Request} CPlayer_GetPrivacySettings_Request
         */
        CPlayer_GetPrivacySettings_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetPrivacySettings_Request)
                return object;
            return new $root.CPlayer_GetPrivacySettings_Request();
        };
    
        /**
         * Creates a plain object from a CPlayer_GetPrivacySettings_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetPrivacySettings_Request
         * @static
         * @param {CPlayer_GetPrivacySettings_Request} message CPlayer_GetPrivacySettings_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetPrivacySettings_Request.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CPlayer_GetPrivacySettings_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_GetPrivacySettings_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetPrivacySettings_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetPrivacySettings_Request;
    })();
    
    $root.CPrivacySettings = (function() {
    
        /**
         * Properties of a CPrivacySettings.
         * @exports ICPrivacySettings
         * @interface ICPrivacySettings
         * @property {number|null} [privacy_state] CPrivacySettings privacy_state
         * @property {number|null} [privacy_state_inventory] CPrivacySettings privacy_state_inventory
         * @property {number|null} [privacy_state_gifts] CPrivacySettings privacy_state_gifts
         * @property {number|null} [privacy_state_ownedgames] CPrivacySettings privacy_state_ownedgames
         * @property {number|null} [privacy_state_playtime] CPrivacySettings privacy_state_playtime
         * @property {number|null} [privacy_state_friendslist] CPrivacySettings privacy_state_friendslist
         */
    
        /**
         * Constructs a new CPrivacySettings.
         * @exports CPrivacySettings
         * @classdesc Represents a CPrivacySettings.
         * @implements ICPrivacySettings
         * @constructor
         * @param {ICPrivacySettings=} [properties] Properties to set
         */
        function CPrivacySettings(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPrivacySettings privacy_state.
         * @member {number} privacy_state
         * @memberof CPrivacySettings
         * @instance
         */
        CPrivacySettings.prototype.privacy_state = 0;
    
        /**
         * CPrivacySettings privacy_state_inventory.
         * @member {number} privacy_state_inventory
         * @memberof CPrivacySettings
         * @instance
         */
        CPrivacySettings.prototype.privacy_state_inventory = 0;
    
        /**
         * CPrivacySettings privacy_state_gifts.
         * @member {number} privacy_state_gifts
         * @memberof CPrivacySettings
         * @instance
         */
        CPrivacySettings.prototype.privacy_state_gifts = 0;
    
        /**
         * CPrivacySettings privacy_state_ownedgames.
         * @member {number} privacy_state_ownedgames
         * @memberof CPrivacySettings
         * @instance
         */
        CPrivacySettings.prototype.privacy_state_ownedgames = 0;
    
        /**
         * CPrivacySettings privacy_state_playtime.
         * @member {number} privacy_state_playtime
         * @memberof CPrivacySettings
         * @instance
         */
        CPrivacySettings.prototype.privacy_state_playtime = 0;
    
        /**
         * CPrivacySettings privacy_state_friendslist.
         * @member {number} privacy_state_friendslist
         * @memberof CPrivacySettings
         * @instance
         */
        CPrivacySettings.prototype.privacy_state_friendslist = 0;
    
        /**
         * Creates a new CPrivacySettings instance using the specified properties.
         * @function create
         * @memberof CPrivacySettings
         * @static
         * @param {ICPrivacySettings=} [properties] Properties to set
         * @returns {CPrivacySettings} CPrivacySettings instance
         */
        CPrivacySettings.create = function create(properties) {
            return new CPrivacySettings(properties);
        };
    
        /**
         * Encodes the specified CPrivacySettings message. Does not implicitly {@link CPrivacySettings.verify|verify} messages.
         * @function encode
         * @memberof CPrivacySettings
         * @static
         * @param {ICPrivacySettings} message CPrivacySettings message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPrivacySettings.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.privacy_state != null && Object.hasOwnProperty.call(message, "privacy_state"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.privacy_state);
            if (message.privacy_state_inventory != null && Object.hasOwnProperty.call(message, "privacy_state_inventory"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.privacy_state_inventory);
            if (message.privacy_state_gifts != null && Object.hasOwnProperty.call(message, "privacy_state_gifts"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.privacy_state_gifts);
            if (message.privacy_state_ownedgames != null && Object.hasOwnProperty.call(message, "privacy_state_ownedgames"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.privacy_state_ownedgames);
            if (message.privacy_state_playtime != null && Object.hasOwnProperty.call(message, "privacy_state_playtime"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.privacy_state_playtime);
            if (message.privacy_state_friendslist != null && Object.hasOwnProperty.call(message, "privacy_state_friendslist"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.privacy_state_friendslist);
            return writer;
        };
    
        /**
         * Encodes the specified CPrivacySettings message, length delimited. Does not implicitly {@link CPrivacySettings.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPrivacySettings
         * @static
         * @param {ICPrivacySettings} message CPrivacySettings message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPrivacySettings.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPrivacySettings message from the specified reader or buffer.
         * @function decode
         * @memberof CPrivacySettings
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPrivacySettings} CPrivacySettings
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPrivacySettings.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPrivacySettings();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.privacy_state = reader.int32();
                    break;
                case 2:
                    message.privacy_state_inventory = reader.int32();
                    break;
                case 3:
                    message.privacy_state_gifts = reader.int32();
                    break;
                case 4:
                    message.privacy_state_ownedgames = reader.int32();
                    break;
                case 5:
                    message.privacy_state_playtime = reader.int32();
                    break;
                case 6:
                    message.privacy_state_friendslist = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPrivacySettings message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPrivacySettings
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPrivacySettings} CPrivacySettings
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPrivacySettings.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPrivacySettings message.
         * @function verify
         * @memberof CPrivacySettings
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPrivacySettings.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.privacy_state != null && message.hasOwnProperty("privacy_state"))
                if (!$util.isInteger(message.privacy_state))
                    return "privacy_state: integer expected";
            if (message.privacy_state_inventory != null && message.hasOwnProperty("privacy_state_inventory"))
                if (!$util.isInteger(message.privacy_state_inventory))
                    return "privacy_state_inventory: integer expected";
            if (message.privacy_state_gifts != null && message.hasOwnProperty("privacy_state_gifts"))
                if (!$util.isInteger(message.privacy_state_gifts))
                    return "privacy_state_gifts: integer expected";
            if (message.privacy_state_ownedgames != null && message.hasOwnProperty("privacy_state_ownedgames"))
                if (!$util.isInteger(message.privacy_state_ownedgames))
                    return "privacy_state_ownedgames: integer expected";
            if (message.privacy_state_playtime != null && message.hasOwnProperty("privacy_state_playtime"))
                if (!$util.isInteger(message.privacy_state_playtime))
                    return "privacy_state_playtime: integer expected";
            if (message.privacy_state_friendslist != null && message.hasOwnProperty("privacy_state_friendslist"))
                if (!$util.isInteger(message.privacy_state_friendslist))
                    return "privacy_state_friendslist: integer expected";
            return null;
        };
    
        /**
         * Creates a CPrivacySettings message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPrivacySettings
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPrivacySettings} CPrivacySettings
         */
        CPrivacySettings.fromObject = function fromObject(object) {
            if (object instanceof $root.CPrivacySettings)
                return object;
            var message = new $root.CPrivacySettings();
            if (object.privacy_state != null)
                message.privacy_state = object.privacy_state | 0;
            if (object.privacy_state_inventory != null)
                message.privacy_state_inventory = object.privacy_state_inventory | 0;
            if (object.privacy_state_gifts != null)
                message.privacy_state_gifts = object.privacy_state_gifts | 0;
            if (object.privacy_state_ownedgames != null)
                message.privacy_state_ownedgames = object.privacy_state_ownedgames | 0;
            if (object.privacy_state_playtime != null)
                message.privacy_state_playtime = object.privacy_state_playtime | 0;
            if (object.privacy_state_friendslist != null)
                message.privacy_state_friendslist = object.privacy_state_friendslist | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CPrivacySettings message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPrivacySettings
         * @static
         * @param {CPrivacySettings} message CPrivacySettings
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPrivacySettings.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.privacy_state = 0;
                object.privacy_state_inventory = 0;
                object.privacy_state_gifts = 0;
                object.privacy_state_ownedgames = 0;
                object.privacy_state_playtime = 0;
                object.privacy_state_friendslist = 0;
            }
            if (message.privacy_state != null && message.hasOwnProperty("privacy_state"))
                object.privacy_state = message.privacy_state;
            if (message.privacy_state_inventory != null && message.hasOwnProperty("privacy_state_inventory"))
                object.privacy_state_inventory = message.privacy_state_inventory;
            if (message.privacy_state_gifts != null && message.hasOwnProperty("privacy_state_gifts"))
                object.privacy_state_gifts = message.privacy_state_gifts;
            if (message.privacy_state_ownedgames != null && message.hasOwnProperty("privacy_state_ownedgames"))
                object.privacy_state_ownedgames = message.privacy_state_ownedgames;
            if (message.privacy_state_playtime != null && message.hasOwnProperty("privacy_state_playtime"))
                object.privacy_state_playtime = message.privacy_state_playtime;
            if (message.privacy_state_friendslist != null && message.hasOwnProperty("privacy_state_friendslist"))
                object.privacy_state_friendslist = message.privacy_state_friendslist;
            return object;
        };
    
        /**
         * Converts this CPrivacySettings to JSON.
         * @function toJSON
         * @memberof CPrivacySettings
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPrivacySettings.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPrivacySettings;
    })();
    
    $root.CPlayer_GetPrivacySettings_Response = (function() {
    
        /**
         * Properties of a CPlayer_GetPrivacySettings_Response.
         * @exports ICPlayer_GetPrivacySettings_Response
         * @interface ICPlayer_GetPrivacySettings_Response
         * @property {ICPrivacySettings|null} [privacy_settings] CPlayer_GetPrivacySettings_Response privacy_settings
         */
    
        /**
         * Constructs a new CPlayer_GetPrivacySettings_Response.
         * @exports CPlayer_GetPrivacySettings_Response
         * @classdesc Represents a CPlayer_GetPrivacySettings_Response.
         * @implements ICPlayer_GetPrivacySettings_Response
         * @constructor
         * @param {ICPlayer_GetPrivacySettings_Response=} [properties] Properties to set
         */
        function CPlayer_GetPrivacySettings_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetPrivacySettings_Response privacy_settings.
         * @member {ICPrivacySettings|null|undefined} privacy_settings
         * @memberof CPlayer_GetPrivacySettings_Response
         * @instance
         */
        CPlayer_GetPrivacySettings_Response.prototype.privacy_settings = null;
    
        /**
         * Creates a new CPlayer_GetPrivacySettings_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetPrivacySettings_Response
         * @static
         * @param {ICPlayer_GetPrivacySettings_Response=} [properties] Properties to set
         * @returns {CPlayer_GetPrivacySettings_Response} CPlayer_GetPrivacySettings_Response instance
         */
        CPlayer_GetPrivacySettings_Response.create = function create(properties) {
            return new CPlayer_GetPrivacySettings_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetPrivacySettings_Response message. Does not implicitly {@link CPlayer_GetPrivacySettings_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetPrivacySettings_Response
         * @static
         * @param {ICPlayer_GetPrivacySettings_Response} message CPlayer_GetPrivacySettings_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetPrivacySettings_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.privacy_settings != null && Object.hasOwnProperty.call(message, "privacy_settings"))
                $root.CPrivacySettings.encode(message.privacy_settings, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetPrivacySettings_Response message, length delimited. Does not implicitly {@link CPlayer_GetPrivacySettings_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetPrivacySettings_Response
         * @static
         * @param {ICPlayer_GetPrivacySettings_Response} message CPlayer_GetPrivacySettings_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetPrivacySettings_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetPrivacySettings_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetPrivacySettings_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetPrivacySettings_Response} CPlayer_GetPrivacySettings_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetPrivacySettings_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetPrivacySettings_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.privacy_settings = $root.CPrivacySettings.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetPrivacySettings_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetPrivacySettings_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetPrivacySettings_Response} CPlayer_GetPrivacySettings_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetPrivacySettings_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetPrivacySettings_Response message.
         * @function verify
         * @memberof CPlayer_GetPrivacySettings_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetPrivacySettings_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.privacy_settings != null && message.hasOwnProperty("privacy_settings")) {
                var error = $root.CPrivacySettings.verify(message.privacy_settings);
                if (error)
                    return "privacy_settings." + error;
            }
            return null;
        };
    
        /**
         * Creates a CPlayer_GetPrivacySettings_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetPrivacySettings_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetPrivacySettings_Response} CPlayer_GetPrivacySettings_Response
         */
        CPlayer_GetPrivacySettings_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetPrivacySettings_Response)
                return object;
            var message = new $root.CPlayer_GetPrivacySettings_Response();
            if (object.privacy_settings != null) {
                if (typeof object.privacy_settings !== "object")
                    throw TypeError(".CPlayer_GetPrivacySettings_Response.privacy_settings: object expected");
                message.privacy_settings = $root.CPrivacySettings.fromObject(object.privacy_settings);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetPrivacySettings_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetPrivacySettings_Response
         * @static
         * @param {CPlayer_GetPrivacySettings_Response} message CPlayer_GetPrivacySettings_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetPrivacySettings_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.privacy_settings = null;
            if (message.privacy_settings != null && message.hasOwnProperty("privacy_settings"))
                object.privacy_settings = $root.CPrivacySettings.toObject(message.privacy_settings, options);
            return object;
        };
    
        /**
         * Converts this CPlayer_GetPrivacySettings_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_GetPrivacySettings_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetPrivacySettings_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetPrivacySettings_Response;
    })();
    
    $root.CPlayer_GetDurationControl_Request = (function() {
    
        /**
         * Properties of a CPlayer_GetDurationControl_Request.
         * @exports ICPlayer_GetDurationControl_Request
         * @interface ICPlayer_GetDurationControl_Request
         * @property {number|null} [appid] CPlayer_GetDurationControl_Request appid
         */
    
        /**
         * Constructs a new CPlayer_GetDurationControl_Request.
         * @exports CPlayer_GetDurationControl_Request
         * @classdesc Represents a CPlayer_GetDurationControl_Request.
         * @implements ICPlayer_GetDurationControl_Request
         * @constructor
         * @param {ICPlayer_GetDurationControl_Request=} [properties] Properties to set
         */
        function CPlayer_GetDurationControl_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetDurationControl_Request appid.
         * @member {number} appid
         * @memberof CPlayer_GetDurationControl_Request
         * @instance
         */
        CPlayer_GetDurationControl_Request.prototype.appid = 0;
    
        /**
         * Creates a new CPlayer_GetDurationControl_Request instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetDurationControl_Request
         * @static
         * @param {ICPlayer_GetDurationControl_Request=} [properties] Properties to set
         * @returns {CPlayer_GetDurationControl_Request} CPlayer_GetDurationControl_Request instance
         */
        CPlayer_GetDurationControl_Request.create = function create(properties) {
            return new CPlayer_GetDurationControl_Request(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetDurationControl_Request message. Does not implicitly {@link CPlayer_GetDurationControl_Request.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetDurationControl_Request
         * @static
         * @param {ICPlayer_GetDurationControl_Request} message CPlayer_GetDurationControl_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetDurationControl_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appid != null && Object.hasOwnProperty.call(message, "appid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetDurationControl_Request message, length delimited. Does not implicitly {@link CPlayer_GetDurationControl_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetDurationControl_Request
         * @static
         * @param {ICPlayer_GetDurationControl_Request} message CPlayer_GetDurationControl_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetDurationControl_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetDurationControl_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetDurationControl_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetDurationControl_Request} CPlayer_GetDurationControl_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetDurationControl_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetDurationControl_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.appid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetDurationControl_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetDurationControl_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetDurationControl_Request} CPlayer_GetDurationControl_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetDurationControl_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetDurationControl_Request message.
         * @function verify
         * @memberof CPlayer_GetDurationControl_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetDurationControl_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_GetDurationControl_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetDurationControl_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetDurationControl_Request} CPlayer_GetDurationControl_Request
         */
        CPlayer_GetDurationControl_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetDurationControl_Request)
                return object;
            var message = new $root.CPlayer_GetDurationControl_Request();
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetDurationControl_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetDurationControl_Request
         * @static
         * @param {CPlayer_GetDurationControl_Request} message CPlayer_GetDurationControl_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetDurationControl_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.appid = 0;
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            return object;
        };
    
        /**
         * Converts this CPlayer_GetDurationControl_Request to JSON.
         * @function toJSON
         * @memberof CPlayer_GetDurationControl_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetDurationControl_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetDurationControl_Request;
    })();
    
    $root.CPlayer_GetDurationControl_Response = (function() {
    
        /**
         * Properties of a CPlayer_GetDurationControl_Response.
         * @exports ICPlayer_GetDurationControl_Response
         * @interface ICPlayer_GetDurationControl_Response
         * @property {boolean|null} [is_enabled] CPlayer_GetDurationControl_Response is_enabled
         * @property {number|null} [seconds] CPlayer_GetDurationControl_Response seconds
         * @property {number|null} [seconds_today] CPlayer_GetDurationControl_Response seconds_today
         * @property {boolean|null} [is_steamchina_account] CPlayer_GetDurationControl_Response is_steamchina_account
         * @property {boolean|null} [is_age_verified] CPlayer_GetDurationControl_Response is_age_verified
         * @property {number|null} [seconds_allowed_today] CPlayer_GetDurationControl_Response seconds_allowed_today
         */
    
        /**
         * Constructs a new CPlayer_GetDurationControl_Response.
         * @exports CPlayer_GetDurationControl_Response
         * @classdesc Represents a CPlayer_GetDurationControl_Response.
         * @implements ICPlayer_GetDurationControl_Response
         * @constructor
         * @param {ICPlayer_GetDurationControl_Response=} [properties] Properties to set
         */
        function CPlayer_GetDurationControl_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_GetDurationControl_Response is_enabled.
         * @member {boolean} is_enabled
         * @memberof CPlayer_GetDurationControl_Response
         * @instance
         */
        CPlayer_GetDurationControl_Response.prototype.is_enabled = false;
    
        /**
         * CPlayer_GetDurationControl_Response seconds.
         * @member {number} seconds
         * @memberof CPlayer_GetDurationControl_Response
         * @instance
         */
        CPlayer_GetDurationControl_Response.prototype.seconds = 0;
    
        /**
         * CPlayer_GetDurationControl_Response seconds_today.
         * @member {number} seconds_today
         * @memberof CPlayer_GetDurationControl_Response
         * @instance
         */
        CPlayer_GetDurationControl_Response.prototype.seconds_today = 0;
    
        /**
         * CPlayer_GetDurationControl_Response is_steamchina_account.
         * @member {boolean} is_steamchina_account
         * @memberof CPlayer_GetDurationControl_Response
         * @instance
         */
        CPlayer_GetDurationControl_Response.prototype.is_steamchina_account = false;
    
        /**
         * CPlayer_GetDurationControl_Response is_age_verified.
         * @member {boolean} is_age_verified
         * @memberof CPlayer_GetDurationControl_Response
         * @instance
         */
        CPlayer_GetDurationControl_Response.prototype.is_age_verified = false;
    
        /**
         * CPlayer_GetDurationControl_Response seconds_allowed_today.
         * @member {number} seconds_allowed_today
         * @memberof CPlayer_GetDurationControl_Response
         * @instance
         */
        CPlayer_GetDurationControl_Response.prototype.seconds_allowed_today = 0;
    
        /**
         * Creates a new CPlayer_GetDurationControl_Response instance using the specified properties.
         * @function create
         * @memberof CPlayer_GetDurationControl_Response
         * @static
         * @param {ICPlayer_GetDurationControl_Response=} [properties] Properties to set
         * @returns {CPlayer_GetDurationControl_Response} CPlayer_GetDurationControl_Response instance
         */
        CPlayer_GetDurationControl_Response.create = function create(properties) {
            return new CPlayer_GetDurationControl_Response(properties);
        };
    
        /**
         * Encodes the specified CPlayer_GetDurationControl_Response message. Does not implicitly {@link CPlayer_GetDurationControl_Response.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_GetDurationControl_Response
         * @static
         * @param {ICPlayer_GetDurationControl_Response} message CPlayer_GetDurationControl_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetDurationControl_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.is_enabled != null && Object.hasOwnProperty.call(message, "is_enabled"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.is_enabled);
            if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seconds);
            if (message.seconds_today != null && Object.hasOwnProperty.call(message, "seconds_today"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.seconds_today);
            if (message.is_steamchina_account != null && Object.hasOwnProperty.call(message, "is_steamchina_account"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.is_steamchina_account);
            if (message.is_age_verified != null && Object.hasOwnProperty.call(message, "is_age_verified"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.is_age_verified);
            if (message.seconds_allowed_today != null && Object.hasOwnProperty.call(message, "seconds_allowed_today"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.seconds_allowed_today);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_GetDurationControl_Response message, length delimited. Does not implicitly {@link CPlayer_GetDurationControl_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_GetDurationControl_Response
         * @static
         * @param {ICPlayer_GetDurationControl_Response} message CPlayer_GetDurationControl_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_GetDurationControl_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_GetDurationControl_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_GetDurationControl_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_GetDurationControl_Response} CPlayer_GetDurationControl_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetDurationControl_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_GetDurationControl_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.is_enabled = reader.bool();
                    break;
                case 2:
                    message.seconds = reader.int32();
                    break;
                case 3:
                    message.seconds_today = reader.int32();
                    break;
                case 4:
                    message.is_steamchina_account = reader.bool();
                    break;
                case 5:
                    message.is_age_verified = reader.bool();
                    break;
                case 6:
                    message.seconds_allowed_today = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_GetDurationControl_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_GetDurationControl_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_GetDurationControl_Response} CPlayer_GetDurationControl_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_GetDurationControl_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_GetDurationControl_Response message.
         * @function verify
         * @memberof CPlayer_GetDurationControl_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_GetDurationControl_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.is_enabled != null && message.hasOwnProperty("is_enabled"))
                if (typeof message.is_enabled !== "boolean")
                    return "is_enabled: boolean expected";
            if (message.seconds != null && message.hasOwnProperty("seconds"))
                if (!$util.isInteger(message.seconds))
                    return "seconds: integer expected";
            if (message.seconds_today != null && message.hasOwnProperty("seconds_today"))
                if (!$util.isInteger(message.seconds_today))
                    return "seconds_today: integer expected";
            if (message.is_steamchina_account != null && message.hasOwnProperty("is_steamchina_account"))
                if (typeof message.is_steamchina_account !== "boolean")
                    return "is_steamchina_account: boolean expected";
            if (message.is_age_verified != null && message.hasOwnProperty("is_age_verified"))
                if (typeof message.is_age_verified !== "boolean")
                    return "is_age_verified: boolean expected";
            if (message.seconds_allowed_today != null && message.hasOwnProperty("seconds_allowed_today"))
                if (!$util.isInteger(message.seconds_allowed_today))
                    return "seconds_allowed_today: integer expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_GetDurationControl_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_GetDurationControl_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_GetDurationControl_Response} CPlayer_GetDurationControl_Response
         */
        CPlayer_GetDurationControl_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_GetDurationControl_Response)
                return object;
            var message = new $root.CPlayer_GetDurationControl_Response();
            if (object.is_enabled != null)
                message.is_enabled = Boolean(object.is_enabled);
            if (object.seconds != null)
                message.seconds = object.seconds | 0;
            if (object.seconds_today != null)
                message.seconds_today = object.seconds_today | 0;
            if (object.is_steamchina_account != null)
                message.is_steamchina_account = Boolean(object.is_steamchina_account);
            if (object.is_age_verified != null)
                message.is_age_verified = Boolean(object.is_age_verified);
            if (object.seconds_allowed_today != null)
                message.seconds_allowed_today = object.seconds_allowed_today >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_GetDurationControl_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_GetDurationControl_Response
         * @static
         * @param {CPlayer_GetDurationControl_Response} message CPlayer_GetDurationControl_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_GetDurationControl_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.is_enabled = false;
                object.seconds = 0;
                object.seconds_today = 0;
                object.is_steamchina_account = false;
                object.is_age_verified = false;
                object.seconds_allowed_today = 0;
            }
            if (message.is_enabled != null && message.hasOwnProperty("is_enabled"))
                object.is_enabled = message.is_enabled;
            if (message.seconds != null && message.hasOwnProperty("seconds"))
                object.seconds = message.seconds;
            if (message.seconds_today != null && message.hasOwnProperty("seconds_today"))
                object.seconds_today = message.seconds_today;
            if (message.is_steamchina_account != null && message.hasOwnProperty("is_steamchina_account"))
                object.is_steamchina_account = message.is_steamchina_account;
            if (message.is_age_verified != null && message.hasOwnProperty("is_age_verified"))
                object.is_age_verified = message.is_age_verified;
            if (message.seconds_allowed_today != null && message.hasOwnProperty("seconds_allowed_today"))
                object.seconds_allowed_today = message.seconds_allowed_today;
            return object;
        };
    
        /**
         * Converts this CPlayer_GetDurationControl_Response to JSON.
         * @function toJSON
         * @memberof CPlayer_GetDurationControl_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_GetDurationControl_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_GetDurationControl_Response;
    })();
    
    $root.CPlayer_LastPlayedTimes_Notification = (function() {
    
        /**
         * Properties of a CPlayer_LastPlayedTimes_Notification.
         * @exports ICPlayer_LastPlayedTimes_Notification
         * @interface ICPlayer_LastPlayedTimes_Notification
         * @property {Array.<CPlayer_GetLastPlayedTimes_Response.IGame>|null} [games] CPlayer_LastPlayedTimes_Notification games
         */
    
        /**
         * Constructs a new CPlayer_LastPlayedTimes_Notification.
         * @exports CPlayer_LastPlayedTimes_Notification
         * @classdesc Represents a CPlayer_LastPlayedTimes_Notification.
         * @implements ICPlayer_LastPlayedTimes_Notification
         * @constructor
         * @param {ICPlayer_LastPlayedTimes_Notification=} [properties] Properties to set
         */
        function CPlayer_LastPlayedTimes_Notification(properties) {
            this.games = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_LastPlayedTimes_Notification games.
         * @member {Array.<CPlayer_GetLastPlayedTimes_Response.IGame>} games
         * @memberof CPlayer_LastPlayedTimes_Notification
         * @instance
         */
        CPlayer_LastPlayedTimes_Notification.prototype.games = $util.emptyArray;
    
        /**
         * Creates a new CPlayer_LastPlayedTimes_Notification instance using the specified properties.
         * @function create
         * @memberof CPlayer_LastPlayedTimes_Notification
         * @static
         * @param {ICPlayer_LastPlayedTimes_Notification=} [properties] Properties to set
         * @returns {CPlayer_LastPlayedTimes_Notification} CPlayer_LastPlayedTimes_Notification instance
         */
        CPlayer_LastPlayedTimes_Notification.create = function create(properties) {
            return new CPlayer_LastPlayedTimes_Notification(properties);
        };
    
        /**
         * Encodes the specified CPlayer_LastPlayedTimes_Notification message. Does not implicitly {@link CPlayer_LastPlayedTimes_Notification.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_LastPlayedTimes_Notification
         * @static
         * @param {ICPlayer_LastPlayedTimes_Notification} message CPlayer_LastPlayedTimes_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_LastPlayedTimes_Notification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.games != null && message.games.length)
                for (var i = 0; i < message.games.length; ++i)
                    $root.CPlayer_GetLastPlayedTimes_Response.Game.encode(message.games[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_LastPlayedTimes_Notification message, length delimited. Does not implicitly {@link CPlayer_LastPlayedTimes_Notification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_LastPlayedTimes_Notification
         * @static
         * @param {ICPlayer_LastPlayedTimes_Notification} message CPlayer_LastPlayedTimes_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_LastPlayedTimes_Notification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_LastPlayedTimes_Notification message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_LastPlayedTimes_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_LastPlayedTimes_Notification} CPlayer_LastPlayedTimes_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_LastPlayedTimes_Notification.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_LastPlayedTimes_Notification();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.games && message.games.length))
                        message.games = [];
                    message.games.push($root.CPlayer_GetLastPlayedTimes_Response.Game.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_LastPlayedTimes_Notification message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_LastPlayedTimes_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_LastPlayedTimes_Notification} CPlayer_LastPlayedTimes_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_LastPlayedTimes_Notification.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_LastPlayedTimes_Notification message.
         * @function verify
         * @memberof CPlayer_LastPlayedTimes_Notification
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_LastPlayedTimes_Notification.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.games != null && message.hasOwnProperty("games")) {
                if (!Array.isArray(message.games))
                    return "games: array expected";
                for (var i = 0; i < message.games.length; ++i) {
                    var error = $root.CPlayer_GetLastPlayedTimes_Response.Game.verify(message.games[i]);
                    if (error)
                        return "games." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CPlayer_LastPlayedTimes_Notification message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_LastPlayedTimes_Notification
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_LastPlayedTimes_Notification} CPlayer_LastPlayedTimes_Notification
         */
        CPlayer_LastPlayedTimes_Notification.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_LastPlayedTimes_Notification)
                return object;
            var message = new $root.CPlayer_LastPlayedTimes_Notification();
            if (object.games) {
                if (!Array.isArray(object.games))
                    throw TypeError(".CPlayer_LastPlayedTimes_Notification.games: array expected");
                message.games = [];
                for (var i = 0; i < object.games.length; ++i) {
                    if (typeof object.games[i] !== "object")
                        throw TypeError(".CPlayer_LastPlayedTimes_Notification.games: object expected");
                    message.games[i] = $root.CPlayer_GetLastPlayedTimes_Response.Game.fromObject(object.games[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_LastPlayedTimes_Notification message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_LastPlayedTimes_Notification
         * @static
         * @param {CPlayer_LastPlayedTimes_Notification} message CPlayer_LastPlayedTimes_Notification
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_LastPlayedTimes_Notification.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.games = [];
            if (message.games && message.games.length) {
                object.games = [];
                for (var j = 0; j < message.games.length; ++j)
                    object.games[j] = $root.CPlayer_GetLastPlayedTimes_Response.Game.toObject(message.games[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CPlayer_LastPlayedTimes_Notification to JSON.
         * @function toJSON
         * @memberof CPlayer_LastPlayedTimes_Notification
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_LastPlayedTimes_Notification.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_LastPlayedTimes_Notification;
    })();
    
    $root.CPlayer_FriendNicknameChanged_Notification = (function() {
    
        /**
         * Properties of a CPlayer_FriendNicknameChanged_Notification.
         * @exports ICPlayer_FriendNicknameChanged_Notification
         * @interface ICPlayer_FriendNicknameChanged_Notification
         * @property {number|null} [accountid] CPlayer_FriendNicknameChanged_Notification accountid
         * @property {string|null} [nickname] CPlayer_FriendNicknameChanged_Notification nickname
         * @property {boolean|null} [is_echo_to_self] CPlayer_FriendNicknameChanged_Notification is_echo_to_self
         */
    
        /**
         * Constructs a new CPlayer_FriendNicknameChanged_Notification.
         * @exports CPlayer_FriendNicknameChanged_Notification
         * @classdesc Represents a CPlayer_FriendNicknameChanged_Notification.
         * @implements ICPlayer_FriendNicknameChanged_Notification
         * @constructor
         * @param {ICPlayer_FriendNicknameChanged_Notification=} [properties] Properties to set
         */
        function CPlayer_FriendNicknameChanged_Notification(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_FriendNicknameChanged_Notification accountid.
         * @member {number} accountid
         * @memberof CPlayer_FriendNicknameChanged_Notification
         * @instance
         */
        CPlayer_FriendNicknameChanged_Notification.prototype.accountid = 0;
    
        /**
         * CPlayer_FriendNicknameChanged_Notification nickname.
         * @member {string} nickname
         * @memberof CPlayer_FriendNicknameChanged_Notification
         * @instance
         */
        CPlayer_FriendNicknameChanged_Notification.prototype.nickname = "";
    
        /**
         * CPlayer_FriendNicknameChanged_Notification is_echo_to_self.
         * @member {boolean} is_echo_to_self
         * @memberof CPlayer_FriendNicknameChanged_Notification
         * @instance
         */
        CPlayer_FriendNicknameChanged_Notification.prototype.is_echo_to_self = false;
    
        /**
         * Creates a new CPlayer_FriendNicknameChanged_Notification instance using the specified properties.
         * @function create
         * @memberof CPlayer_FriendNicknameChanged_Notification
         * @static
         * @param {ICPlayer_FriendNicknameChanged_Notification=} [properties] Properties to set
         * @returns {CPlayer_FriendNicknameChanged_Notification} CPlayer_FriendNicknameChanged_Notification instance
         */
        CPlayer_FriendNicknameChanged_Notification.create = function create(properties) {
            return new CPlayer_FriendNicknameChanged_Notification(properties);
        };
    
        /**
         * Encodes the specified CPlayer_FriendNicknameChanged_Notification message. Does not implicitly {@link CPlayer_FriendNicknameChanged_Notification.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_FriendNicknameChanged_Notification
         * @static
         * @param {ICPlayer_FriendNicknameChanged_Notification} message CPlayer_FriendNicknameChanged_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_FriendNicknameChanged_Notification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.accountid != null && Object.hasOwnProperty.call(message, "accountid"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.accountid);
            if (message.nickname != null && Object.hasOwnProperty.call(message, "nickname"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.nickname);
            if (message.is_echo_to_self != null && Object.hasOwnProperty.call(message, "is_echo_to_self"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.is_echo_to_self);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_FriendNicknameChanged_Notification message, length delimited. Does not implicitly {@link CPlayer_FriendNicknameChanged_Notification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_FriendNicknameChanged_Notification
         * @static
         * @param {ICPlayer_FriendNicknameChanged_Notification} message CPlayer_FriendNicknameChanged_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_FriendNicknameChanged_Notification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_FriendNicknameChanged_Notification message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_FriendNicknameChanged_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_FriendNicknameChanged_Notification} CPlayer_FriendNicknameChanged_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_FriendNicknameChanged_Notification.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_FriendNicknameChanged_Notification();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.accountid = reader.fixed32();
                    break;
                case 2:
                    message.nickname = reader.string();
                    break;
                case 3:
                    message.is_echo_to_self = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_FriendNicknameChanged_Notification message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_FriendNicknameChanged_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_FriendNicknameChanged_Notification} CPlayer_FriendNicknameChanged_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_FriendNicknameChanged_Notification.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_FriendNicknameChanged_Notification message.
         * @function verify
         * @memberof CPlayer_FriendNicknameChanged_Notification
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_FriendNicknameChanged_Notification.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                if (!$util.isInteger(message.accountid))
                    return "accountid: integer expected";
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                if (!$util.isString(message.nickname))
                    return "nickname: string expected";
            if (message.is_echo_to_self != null && message.hasOwnProperty("is_echo_to_self"))
                if (typeof message.is_echo_to_self !== "boolean")
                    return "is_echo_to_self: boolean expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_FriendNicknameChanged_Notification message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_FriendNicknameChanged_Notification
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_FriendNicknameChanged_Notification} CPlayer_FriendNicknameChanged_Notification
         */
        CPlayer_FriendNicknameChanged_Notification.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_FriendNicknameChanged_Notification)
                return object;
            var message = new $root.CPlayer_FriendNicknameChanged_Notification();
            if (object.accountid != null)
                message.accountid = object.accountid >>> 0;
            if (object.nickname != null)
                message.nickname = String(object.nickname);
            if (object.is_echo_to_self != null)
                message.is_echo_to_self = Boolean(object.is_echo_to_self);
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_FriendNicknameChanged_Notification message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_FriendNicknameChanged_Notification
         * @static
         * @param {CPlayer_FriendNicknameChanged_Notification} message CPlayer_FriendNicknameChanged_Notification
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_FriendNicknameChanged_Notification.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.accountid = 0;
                object.nickname = "";
                object.is_echo_to_self = false;
            }
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                object.accountid = message.accountid;
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                object.nickname = message.nickname;
            if (message.is_echo_to_self != null && message.hasOwnProperty("is_echo_to_self"))
                object.is_echo_to_self = message.is_echo_to_self;
            return object;
        };
    
        /**
         * Converts this CPlayer_FriendNicknameChanged_Notification to JSON.
         * @function toJSON
         * @memberof CPlayer_FriendNicknameChanged_Notification
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_FriendNicknameChanged_Notification.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_FriendNicknameChanged_Notification;
    })();
    
    $root.CPlayer_FriendEquippedProfileItemsChanged_Notification = (function() {
    
        /**
         * Properties of a CPlayer_FriendEquippedProfileItemsChanged_Notification.
         * @exports ICPlayer_FriendEquippedProfileItemsChanged_Notification
         * @interface ICPlayer_FriendEquippedProfileItemsChanged_Notification
         * @property {number|null} [accountid] CPlayer_FriendEquippedProfileItemsChanged_Notification accountid
         */
    
        /**
         * Constructs a new CPlayer_FriendEquippedProfileItemsChanged_Notification.
         * @exports CPlayer_FriendEquippedProfileItemsChanged_Notification
         * @classdesc Represents a CPlayer_FriendEquippedProfileItemsChanged_Notification.
         * @implements ICPlayer_FriendEquippedProfileItemsChanged_Notification
         * @constructor
         * @param {ICPlayer_FriendEquippedProfileItemsChanged_Notification=} [properties] Properties to set
         */
        function CPlayer_FriendEquippedProfileItemsChanged_Notification(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_FriendEquippedProfileItemsChanged_Notification accountid.
         * @member {number} accountid
         * @memberof CPlayer_FriendEquippedProfileItemsChanged_Notification
         * @instance
         */
        CPlayer_FriendEquippedProfileItemsChanged_Notification.prototype.accountid = 0;
    
        /**
         * Creates a new CPlayer_FriendEquippedProfileItemsChanged_Notification instance using the specified properties.
         * @function create
         * @memberof CPlayer_FriendEquippedProfileItemsChanged_Notification
         * @static
         * @param {ICPlayer_FriendEquippedProfileItemsChanged_Notification=} [properties] Properties to set
         * @returns {CPlayer_FriendEquippedProfileItemsChanged_Notification} CPlayer_FriendEquippedProfileItemsChanged_Notification instance
         */
        CPlayer_FriendEquippedProfileItemsChanged_Notification.create = function create(properties) {
            return new CPlayer_FriendEquippedProfileItemsChanged_Notification(properties);
        };
    
        /**
         * Encodes the specified CPlayer_FriendEquippedProfileItemsChanged_Notification message. Does not implicitly {@link CPlayer_FriendEquippedProfileItemsChanged_Notification.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_FriendEquippedProfileItemsChanged_Notification
         * @static
         * @param {ICPlayer_FriendEquippedProfileItemsChanged_Notification} message CPlayer_FriendEquippedProfileItemsChanged_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_FriendEquippedProfileItemsChanged_Notification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.accountid != null && Object.hasOwnProperty.call(message, "accountid"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.accountid);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_FriendEquippedProfileItemsChanged_Notification message, length delimited. Does not implicitly {@link CPlayer_FriendEquippedProfileItemsChanged_Notification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_FriendEquippedProfileItemsChanged_Notification
         * @static
         * @param {ICPlayer_FriendEquippedProfileItemsChanged_Notification} message CPlayer_FriendEquippedProfileItemsChanged_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_FriendEquippedProfileItemsChanged_Notification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_FriendEquippedProfileItemsChanged_Notification message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_FriendEquippedProfileItemsChanged_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_FriendEquippedProfileItemsChanged_Notification} CPlayer_FriendEquippedProfileItemsChanged_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_FriendEquippedProfileItemsChanged_Notification.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_FriendEquippedProfileItemsChanged_Notification();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.accountid = reader.fixed32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_FriendEquippedProfileItemsChanged_Notification message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_FriendEquippedProfileItemsChanged_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_FriendEquippedProfileItemsChanged_Notification} CPlayer_FriendEquippedProfileItemsChanged_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_FriendEquippedProfileItemsChanged_Notification.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_FriendEquippedProfileItemsChanged_Notification message.
         * @function verify
         * @memberof CPlayer_FriendEquippedProfileItemsChanged_Notification
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_FriendEquippedProfileItemsChanged_Notification.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                if (!$util.isInteger(message.accountid))
                    return "accountid: integer expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_FriendEquippedProfileItemsChanged_Notification message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_FriendEquippedProfileItemsChanged_Notification
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_FriendEquippedProfileItemsChanged_Notification} CPlayer_FriendEquippedProfileItemsChanged_Notification
         */
        CPlayer_FriendEquippedProfileItemsChanged_Notification.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_FriendEquippedProfileItemsChanged_Notification)
                return object;
            var message = new $root.CPlayer_FriendEquippedProfileItemsChanged_Notification();
            if (object.accountid != null)
                message.accountid = object.accountid >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_FriendEquippedProfileItemsChanged_Notification message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_FriendEquippedProfileItemsChanged_Notification
         * @static
         * @param {CPlayer_FriendEquippedProfileItemsChanged_Notification} message CPlayer_FriendEquippedProfileItemsChanged_Notification
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_FriendEquippedProfileItemsChanged_Notification.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.accountid = 0;
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                object.accountid = message.accountid;
            return object;
        };
    
        /**
         * Converts this CPlayer_FriendEquippedProfileItemsChanged_Notification to JSON.
         * @function toJSON
         * @memberof CPlayer_FriendEquippedProfileItemsChanged_Notification
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_FriendEquippedProfileItemsChanged_Notification.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_FriendEquippedProfileItemsChanged_Notification;
    })();
    
    $root.CPlayer_NewSteamAnnouncementState_Notification = (function() {
    
        /**
         * Properties of a CPlayer_NewSteamAnnouncementState_Notification.
         * @exports ICPlayer_NewSteamAnnouncementState_Notification
         * @interface ICPlayer_NewSteamAnnouncementState_Notification
         * @property {number|null} [state] CPlayer_NewSteamAnnouncementState_Notification state
         * @property {string|null} [announcement_headline] CPlayer_NewSteamAnnouncementState_Notification announcement_headline
         * @property {string|null} [announcement_url] CPlayer_NewSteamAnnouncementState_Notification announcement_url
         * @property {number|null} [time_posted] CPlayer_NewSteamAnnouncementState_Notification time_posted
         * @property {number|Long|null} [announcement_gid] CPlayer_NewSteamAnnouncementState_Notification announcement_gid
         */
    
        /**
         * Constructs a new CPlayer_NewSteamAnnouncementState_Notification.
         * @exports CPlayer_NewSteamAnnouncementState_Notification
         * @classdesc Represents a CPlayer_NewSteamAnnouncementState_Notification.
         * @implements ICPlayer_NewSteamAnnouncementState_Notification
         * @constructor
         * @param {ICPlayer_NewSteamAnnouncementState_Notification=} [properties] Properties to set
         */
        function CPlayer_NewSteamAnnouncementState_Notification(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_NewSteamAnnouncementState_Notification state.
         * @member {number} state
         * @memberof CPlayer_NewSteamAnnouncementState_Notification
         * @instance
         */
        CPlayer_NewSteamAnnouncementState_Notification.prototype.state = 0;
    
        /**
         * CPlayer_NewSteamAnnouncementState_Notification announcement_headline.
         * @member {string} announcement_headline
         * @memberof CPlayer_NewSteamAnnouncementState_Notification
         * @instance
         */
        CPlayer_NewSteamAnnouncementState_Notification.prototype.announcement_headline = "";
    
        /**
         * CPlayer_NewSteamAnnouncementState_Notification announcement_url.
         * @member {string} announcement_url
         * @memberof CPlayer_NewSteamAnnouncementState_Notification
         * @instance
         */
        CPlayer_NewSteamAnnouncementState_Notification.prototype.announcement_url = "";
    
        /**
         * CPlayer_NewSteamAnnouncementState_Notification time_posted.
         * @member {number} time_posted
         * @memberof CPlayer_NewSteamAnnouncementState_Notification
         * @instance
         */
        CPlayer_NewSteamAnnouncementState_Notification.prototype.time_posted = 0;
    
        /**
         * CPlayer_NewSteamAnnouncementState_Notification announcement_gid.
         * @member {number|Long} announcement_gid
         * @memberof CPlayer_NewSteamAnnouncementState_Notification
         * @instance
         */
        CPlayer_NewSteamAnnouncementState_Notification.prototype.announcement_gid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CPlayer_NewSteamAnnouncementState_Notification instance using the specified properties.
         * @function create
         * @memberof CPlayer_NewSteamAnnouncementState_Notification
         * @static
         * @param {ICPlayer_NewSteamAnnouncementState_Notification=} [properties] Properties to set
         * @returns {CPlayer_NewSteamAnnouncementState_Notification} CPlayer_NewSteamAnnouncementState_Notification instance
         */
        CPlayer_NewSteamAnnouncementState_Notification.create = function create(properties) {
            return new CPlayer_NewSteamAnnouncementState_Notification(properties);
        };
    
        /**
         * Encodes the specified CPlayer_NewSteamAnnouncementState_Notification message. Does not implicitly {@link CPlayer_NewSteamAnnouncementState_Notification.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_NewSteamAnnouncementState_Notification
         * @static
         * @param {ICPlayer_NewSteamAnnouncementState_Notification} message CPlayer_NewSteamAnnouncementState_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_NewSteamAnnouncementState_Notification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.state);
            if (message.announcement_headline != null && Object.hasOwnProperty.call(message, "announcement_headline"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.announcement_headline);
            if (message.announcement_url != null && Object.hasOwnProperty.call(message, "announcement_url"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.announcement_url);
            if (message.time_posted != null && Object.hasOwnProperty.call(message, "time_posted"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.time_posted);
            if (message.announcement_gid != null && Object.hasOwnProperty.call(message, "announcement_gid"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.announcement_gid);
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_NewSteamAnnouncementState_Notification message, length delimited. Does not implicitly {@link CPlayer_NewSteamAnnouncementState_Notification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_NewSteamAnnouncementState_Notification
         * @static
         * @param {ICPlayer_NewSteamAnnouncementState_Notification} message CPlayer_NewSteamAnnouncementState_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_NewSteamAnnouncementState_Notification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_NewSteamAnnouncementState_Notification message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_NewSteamAnnouncementState_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_NewSteamAnnouncementState_Notification} CPlayer_NewSteamAnnouncementState_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_NewSteamAnnouncementState_Notification.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_NewSteamAnnouncementState_Notification();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.state = reader.int32();
                    break;
                case 2:
                    message.announcement_headline = reader.string();
                    break;
                case 3:
                    message.announcement_url = reader.string();
                    break;
                case 4:
                    message.time_posted = reader.uint32();
                    break;
                case 5:
                    message.announcement_gid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_NewSteamAnnouncementState_Notification message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_NewSteamAnnouncementState_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_NewSteamAnnouncementState_Notification} CPlayer_NewSteamAnnouncementState_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_NewSteamAnnouncementState_Notification.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_NewSteamAnnouncementState_Notification message.
         * @function verify
         * @memberof CPlayer_NewSteamAnnouncementState_Notification
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_NewSteamAnnouncementState_Notification.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.state != null && message.hasOwnProperty("state"))
                if (!$util.isInteger(message.state))
                    return "state: integer expected";
            if (message.announcement_headline != null && message.hasOwnProperty("announcement_headline"))
                if (!$util.isString(message.announcement_headline))
                    return "announcement_headline: string expected";
            if (message.announcement_url != null && message.hasOwnProperty("announcement_url"))
                if (!$util.isString(message.announcement_url))
                    return "announcement_url: string expected";
            if (message.time_posted != null && message.hasOwnProperty("time_posted"))
                if (!$util.isInteger(message.time_posted))
                    return "time_posted: integer expected";
            if (message.announcement_gid != null && message.hasOwnProperty("announcement_gid"))
                if (!$util.isInteger(message.announcement_gid) && !(message.announcement_gid && $util.isInteger(message.announcement_gid.low) && $util.isInteger(message.announcement_gid.high)))
                    return "announcement_gid: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CPlayer_NewSteamAnnouncementState_Notification message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_NewSteamAnnouncementState_Notification
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_NewSteamAnnouncementState_Notification} CPlayer_NewSteamAnnouncementState_Notification
         */
        CPlayer_NewSteamAnnouncementState_Notification.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_NewSteamAnnouncementState_Notification)
                return object;
            var message = new $root.CPlayer_NewSteamAnnouncementState_Notification();
            if (object.state != null)
                message.state = object.state | 0;
            if (object.announcement_headline != null)
                message.announcement_headline = String(object.announcement_headline);
            if (object.announcement_url != null)
                message.announcement_url = String(object.announcement_url);
            if (object.time_posted != null)
                message.time_posted = object.time_posted >>> 0;
            if (object.announcement_gid != null)
                if ($util.Long)
                    (message.announcement_gid = $util.Long.fromValue(object.announcement_gid)).unsigned = true;
                else if (typeof object.announcement_gid === "string")
                    message.announcement_gid = parseInt(object.announcement_gid, 10);
                else if (typeof object.announcement_gid === "number")
                    message.announcement_gid = object.announcement_gid;
                else if (typeof object.announcement_gid === "object")
                    message.announcement_gid = new $util.LongBits(object.announcement_gid.low >>> 0, object.announcement_gid.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_NewSteamAnnouncementState_Notification message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_NewSteamAnnouncementState_Notification
         * @static
         * @param {CPlayer_NewSteamAnnouncementState_Notification} message CPlayer_NewSteamAnnouncementState_Notification
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_NewSteamAnnouncementState_Notification.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.state = 0;
                object.announcement_headline = "";
                object.announcement_url = "";
                object.time_posted = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.announcement_gid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.announcement_gid = options.longs === String ? "0" : 0;
            }
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = message.state;
            if (message.announcement_headline != null && message.hasOwnProperty("announcement_headline"))
                object.announcement_headline = message.announcement_headline;
            if (message.announcement_url != null && message.hasOwnProperty("announcement_url"))
                object.announcement_url = message.announcement_url;
            if (message.time_posted != null && message.hasOwnProperty("time_posted"))
                object.time_posted = message.time_posted;
            if (message.announcement_gid != null && message.hasOwnProperty("announcement_gid"))
                if (typeof message.announcement_gid === "number")
                    object.announcement_gid = options.longs === String ? String(message.announcement_gid) : message.announcement_gid;
                else
                    object.announcement_gid = options.longs === String ? $util.Long.prototype.toString.call(message.announcement_gid) : options.longs === Number ? new $util.LongBits(message.announcement_gid.low >>> 0, message.announcement_gid.high >>> 0).toNumber(true) : message.announcement_gid;
            return object;
        };
    
        /**
         * Converts this CPlayer_NewSteamAnnouncementState_Notification to JSON.
         * @function toJSON
         * @memberof CPlayer_NewSteamAnnouncementState_Notification
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_NewSteamAnnouncementState_Notification.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_NewSteamAnnouncementState_Notification;
    })();
    
    $root.CPlayer_CommunityPreferencesChanged_Notification = (function() {
    
        /**
         * Properties of a CPlayer_CommunityPreferencesChanged_Notification.
         * @exports ICPlayer_CommunityPreferencesChanged_Notification
         * @interface ICPlayer_CommunityPreferencesChanged_Notification
         * @property {ICPlayer_CommunityPreferences|null} [preferences] CPlayer_CommunityPreferencesChanged_Notification preferences
         */
    
        /**
         * Constructs a new CPlayer_CommunityPreferencesChanged_Notification.
         * @exports CPlayer_CommunityPreferencesChanged_Notification
         * @classdesc Represents a CPlayer_CommunityPreferencesChanged_Notification.
         * @implements ICPlayer_CommunityPreferencesChanged_Notification
         * @constructor
         * @param {ICPlayer_CommunityPreferencesChanged_Notification=} [properties] Properties to set
         */
        function CPlayer_CommunityPreferencesChanged_Notification(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_CommunityPreferencesChanged_Notification preferences.
         * @member {ICPlayer_CommunityPreferences|null|undefined} preferences
         * @memberof CPlayer_CommunityPreferencesChanged_Notification
         * @instance
         */
        CPlayer_CommunityPreferencesChanged_Notification.prototype.preferences = null;
    
        /**
         * Creates a new CPlayer_CommunityPreferencesChanged_Notification instance using the specified properties.
         * @function create
         * @memberof CPlayer_CommunityPreferencesChanged_Notification
         * @static
         * @param {ICPlayer_CommunityPreferencesChanged_Notification=} [properties] Properties to set
         * @returns {CPlayer_CommunityPreferencesChanged_Notification} CPlayer_CommunityPreferencesChanged_Notification instance
         */
        CPlayer_CommunityPreferencesChanged_Notification.create = function create(properties) {
            return new CPlayer_CommunityPreferencesChanged_Notification(properties);
        };
    
        /**
         * Encodes the specified CPlayer_CommunityPreferencesChanged_Notification message. Does not implicitly {@link CPlayer_CommunityPreferencesChanged_Notification.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_CommunityPreferencesChanged_Notification
         * @static
         * @param {ICPlayer_CommunityPreferencesChanged_Notification} message CPlayer_CommunityPreferencesChanged_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_CommunityPreferencesChanged_Notification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.preferences != null && Object.hasOwnProperty.call(message, "preferences"))
                $root.CPlayer_CommunityPreferences.encode(message.preferences, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_CommunityPreferencesChanged_Notification message, length delimited. Does not implicitly {@link CPlayer_CommunityPreferencesChanged_Notification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_CommunityPreferencesChanged_Notification
         * @static
         * @param {ICPlayer_CommunityPreferencesChanged_Notification} message CPlayer_CommunityPreferencesChanged_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_CommunityPreferencesChanged_Notification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_CommunityPreferencesChanged_Notification message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_CommunityPreferencesChanged_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_CommunityPreferencesChanged_Notification} CPlayer_CommunityPreferencesChanged_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_CommunityPreferencesChanged_Notification.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_CommunityPreferencesChanged_Notification();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.preferences = $root.CPlayer_CommunityPreferences.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_CommunityPreferencesChanged_Notification message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_CommunityPreferencesChanged_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_CommunityPreferencesChanged_Notification} CPlayer_CommunityPreferencesChanged_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_CommunityPreferencesChanged_Notification.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_CommunityPreferencesChanged_Notification message.
         * @function verify
         * @memberof CPlayer_CommunityPreferencesChanged_Notification
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_CommunityPreferencesChanged_Notification.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.preferences != null && message.hasOwnProperty("preferences")) {
                var error = $root.CPlayer_CommunityPreferences.verify(message.preferences);
                if (error)
                    return "preferences." + error;
            }
            return null;
        };
    
        /**
         * Creates a CPlayer_CommunityPreferencesChanged_Notification message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_CommunityPreferencesChanged_Notification
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_CommunityPreferencesChanged_Notification} CPlayer_CommunityPreferencesChanged_Notification
         */
        CPlayer_CommunityPreferencesChanged_Notification.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_CommunityPreferencesChanged_Notification)
                return object;
            var message = new $root.CPlayer_CommunityPreferencesChanged_Notification();
            if (object.preferences != null) {
                if (typeof object.preferences !== "object")
                    throw TypeError(".CPlayer_CommunityPreferencesChanged_Notification.preferences: object expected");
                message.preferences = $root.CPlayer_CommunityPreferences.fromObject(object.preferences);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_CommunityPreferencesChanged_Notification message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_CommunityPreferencesChanged_Notification
         * @static
         * @param {CPlayer_CommunityPreferencesChanged_Notification} message CPlayer_CommunityPreferencesChanged_Notification
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_CommunityPreferencesChanged_Notification.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.preferences = null;
            if (message.preferences != null && message.hasOwnProperty("preferences"))
                object.preferences = $root.CPlayer_CommunityPreferences.toObject(message.preferences, options);
            return object;
        };
    
        /**
         * Converts this CPlayer_CommunityPreferencesChanged_Notification to JSON.
         * @function toJSON
         * @memberof CPlayer_CommunityPreferencesChanged_Notification
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_CommunityPreferencesChanged_Notification.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_CommunityPreferencesChanged_Notification;
    })();
    
    $root.CPlayer_PerFriendPreferencesChanged_Notification = (function() {
    
        /**
         * Properties of a CPlayer_PerFriendPreferencesChanged_Notification.
         * @exports ICPlayer_PerFriendPreferencesChanged_Notification
         * @interface ICPlayer_PerFriendPreferencesChanged_Notification
         * @property {number|null} [accountid] CPlayer_PerFriendPreferencesChanged_Notification accountid
         * @property {IPerFriendPreferences|null} [preferences] CPlayer_PerFriendPreferencesChanged_Notification preferences
         */
    
        /**
         * Constructs a new CPlayer_PerFriendPreferencesChanged_Notification.
         * @exports CPlayer_PerFriendPreferencesChanged_Notification
         * @classdesc Represents a CPlayer_PerFriendPreferencesChanged_Notification.
         * @implements ICPlayer_PerFriendPreferencesChanged_Notification
         * @constructor
         * @param {ICPlayer_PerFriendPreferencesChanged_Notification=} [properties] Properties to set
         */
        function CPlayer_PerFriendPreferencesChanged_Notification(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_PerFriendPreferencesChanged_Notification accountid.
         * @member {number} accountid
         * @memberof CPlayer_PerFriendPreferencesChanged_Notification
         * @instance
         */
        CPlayer_PerFriendPreferencesChanged_Notification.prototype.accountid = 0;
    
        /**
         * CPlayer_PerFriendPreferencesChanged_Notification preferences.
         * @member {IPerFriendPreferences|null|undefined} preferences
         * @memberof CPlayer_PerFriendPreferencesChanged_Notification
         * @instance
         */
        CPlayer_PerFriendPreferencesChanged_Notification.prototype.preferences = null;
    
        /**
         * Creates a new CPlayer_PerFriendPreferencesChanged_Notification instance using the specified properties.
         * @function create
         * @memberof CPlayer_PerFriendPreferencesChanged_Notification
         * @static
         * @param {ICPlayer_PerFriendPreferencesChanged_Notification=} [properties] Properties to set
         * @returns {CPlayer_PerFriendPreferencesChanged_Notification} CPlayer_PerFriendPreferencesChanged_Notification instance
         */
        CPlayer_PerFriendPreferencesChanged_Notification.create = function create(properties) {
            return new CPlayer_PerFriendPreferencesChanged_Notification(properties);
        };
    
        /**
         * Encodes the specified CPlayer_PerFriendPreferencesChanged_Notification message. Does not implicitly {@link CPlayer_PerFriendPreferencesChanged_Notification.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_PerFriendPreferencesChanged_Notification
         * @static
         * @param {ICPlayer_PerFriendPreferencesChanged_Notification} message CPlayer_PerFriendPreferencesChanged_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_PerFriendPreferencesChanged_Notification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.accountid != null && Object.hasOwnProperty.call(message, "accountid"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.accountid);
            if (message.preferences != null && Object.hasOwnProperty.call(message, "preferences"))
                $root.PerFriendPreferences.encode(message.preferences, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_PerFriendPreferencesChanged_Notification message, length delimited. Does not implicitly {@link CPlayer_PerFriendPreferencesChanged_Notification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_PerFriendPreferencesChanged_Notification
         * @static
         * @param {ICPlayer_PerFriendPreferencesChanged_Notification} message CPlayer_PerFriendPreferencesChanged_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_PerFriendPreferencesChanged_Notification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_PerFriendPreferencesChanged_Notification message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_PerFriendPreferencesChanged_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_PerFriendPreferencesChanged_Notification} CPlayer_PerFriendPreferencesChanged_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_PerFriendPreferencesChanged_Notification.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_PerFriendPreferencesChanged_Notification();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.accountid = reader.fixed32();
                    break;
                case 2:
                    message.preferences = $root.PerFriendPreferences.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_PerFriendPreferencesChanged_Notification message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_PerFriendPreferencesChanged_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_PerFriendPreferencesChanged_Notification} CPlayer_PerFriendPreferencesChanged_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_PerFriendPreferencesChanged_Notification.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_PerFriendPreferencesChanged_Notification message.
         * @function verify
         * @memberof CPlayer_PerFriendPreferencesChanged_Notification
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_PerFriendPreferencesChanged_Notification.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                if (!$util.isInteger(message.accountid))
                    return "accountid: integer expected";
            if (message.preferences != null && message.hasOwnProperty("preferences")) {
                var error = $root.PerFriendPreferences.verify(message.preferences);
                if (error)
                    return "preferences." + error;
            }
            return null;
        };
    
        /**
         * Creates a CPlayer_PerFriendPreferencesChanged_Notification message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_PerFriendPreferencesChanged_Notification
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_PerFriendPreferencesChanged_Notification} CPlayer_PerFriendPreferencesChanged_Notification
         */
        CPlayer_PerFriendPreferencesChanged_Notification.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_PerFriendPreferencesChanged_Notification)
                return object;
            var message = new $root.CPlayer_PerFriendPreferencesChanged_Notification();
            if (object.accountid != null)
                message.accountid = object.accountid >>> 0;
            if (object.preferences != null) {
                if (typeof object.preferences !== "object")
                    throw TypeError(".CPlayer_PerFriendPreferencesChanged_Notification.preferences: object expected");
                message.preferences = $root.PerFriendPreferences.fromObject(object.preferences);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_PerFriendPreferencesChanged_Notification message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_PerFriendPreferencesChanged_Notification
         * @static
         * @param {CPlayer_PerFriendPreferencesChanged_Notification} message CPlayer_PerFriendPreferencesChanged_Notification
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_PerFriendPreferencesChanged_Notification.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.accountid = 0;
                object.preferences = null;
            }
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                object.accountid = message.accountid;
            if (message.preferences != null && message.hasOwnProperty("preferences"))
                object.preferences = $root.PerFriendPreferences.toObject(message.preferences, options);
            return object;
        };
    
        /**
         * Converts this CPlayer_PerFriendPreferencesChanged_Notification to JSON.
         * @function toJSON
         * @memberof CPlayer_PerFriendPreferencesChanged_Notification
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_PerFriendPreferencesChanged_Notification.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_PerFriendPreferencesChanged_Notification;
    })();
    
    $root.CPlayer_PrivacySettingsChanged_Notification = (function() {
    
        /**
         * Properties of a CPlayer_PrivacySettingsChanged_Notification.
         * @exports ICPlayer_PrivacySettingsChanged_Notification
         * @interface ICPlayer_PrivacySettingsChanged_Notification
         * @property {ICPrivacySettings|null} [privacy_settings] CPlayer_PrivacySettingsChanged_Notification privacy_settings
         */
    
        /**
         * Constructs a new CPlayer_PrivacySettingsChanged_Notification.
         * @exports CPlayer_PrivacySettingsChanged_Notification
         * @classdesc Represents a CPlayer_PrivacySettingsChanged_Notification.
         * @implements ICPlayer_PrivacySettingsChanged_Notification
         * @constructor
         * @param {ICPlayer_PrivacySettingsChanged_Notification=} [properties] Properties to set
         */
        function CPlayer_PrivacySettingsChanged_Notification(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPlayer_PrivacySettingsChanged_Notification privacy_settings.
         * @member {ICPrivacySettings|null|undefined} privacy_settings
         * @memberof CPlayer_PrivacySettingsChanged_Notification
         * @instance
         */
        CPlayer_PrivacySettingsChanged_Notification.prototype.privacy_settings = null;
    
        /**
         * Creates a new CPlayer_PrivacySettingsChanged_Notification instance using the specified properties.
         * @function create
         * @memberof CPlayer_PrivacySettingsChanged_Notification
         * @static
         * @param {ICPlayer_PrivacySettingsChanged_Notification=} [properties] Properties to set
         * @returns {CPlayer_PrivacySettingsChanged_Notification} CPlayer_PrivacySettingsChanged_Notification instance
         */
        CPlayer_PrivacySettingsChanged_Notification.create = function create(properties) {
            return new CPlayer_PrivacySettingsChanged_Notification(properties);
        };
    
        /**
         * Encodes the specified CPlayer_PrivacySettingsChanged_Notification message. Does not implicitly {@link CPlayer_PrivacySettingsChanged_Notification.verify|verify} messages.
         * @function encode
         * @memberof CPlayer_PrivacySettingsChanged_Notification
         * @static
         * @param {ICPlayer_PrivacySettingsChanged_Notification} message CPlayer_PrivacySettingsChanged_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_PrivacySettingsChanged_Notification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.privacy_settings != null && Object.hasOwnProperty.call(message, "privacy_settings"))
                $root.CPrivacySettings.encode(message.privacy_settings, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CPlayer_PrivacySettingsChanged_Notification message, length delimited. Does not implicitly {@link CPlayer_PrivacySettingsChanged_Notification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPlayer_PrivacySettingsChanged_Notification
         * @static
         * @param {ICPlayer_PrivacySettingsChanged_Notification} message CPlayer_PrivacySettingsChanged_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPlayer_PrivacySettingsChanged_Notification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPlayer_PrivacySettingsChanged_Notification message from the specified reader or buffer.
         * @function decode
         * @memberof CPlayer_PrivacySettingsChanged_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPlayer_PrivacySettingsChanged_Notification} CPlayer_PrivacySettingsChanged_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_PrivacySettingsChanged_Notification.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPlayer_PrivacySettingsChanged_Notification();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.privacy_settings = $root.CPrivacySettings.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPlayer_PrivacySettingsChanged_Notification message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPlayer_PrivacySettingsChanged_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPlayer_PrivacySettingsChanged_Notification} CPlayer_PrivacySettingsChanged_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPlayer_PrivacySettingsChanged_Notification.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPlayer_PrivacySettingsChanged_Notification message.
         * @function verify
         * @memberof CPlayer_PrivacySettingsChanged_Notification
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPlayer_PrivacySettingsChanged_Notification.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.privacy_settings != null && message.hasOwnProperty("privacy_settings")) {
                var error = $root.CPrivacySettings.verify(message.privacy_settings);
                if (error)
                    return "privacy_settings." + error;
            }
            return null;
        };
    
        /**
         * Creates a CPlayer_PrivacySettingsChanged_Notification message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPlayer_PrivacySettingsChanged_Notification
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPlayer_PrivacySettingsChanged_Notification} CPlayer_PrivacySettingsChanged_Notification
         */
        CPlayer_PrivacySettingsChanged_Notification.fromObject = function fromObject(object) {
            if (object instanceof $root.CPlayer_PrivacySettingsChanged_Notification)
                return object;
            var message = new $root.CPlayer_PrivacySettingsChanged_Notification();
            if (object.privacy_settings != null) {
                if (typeof object.privacy_settings !== "object")
                    throw TypeError(".CPlayer_PrivacySettingsChanged_Notification.privacy_settings: object expected");
                message.privacy_settings = $root.CPrivacySettings.fromObject(object.privacy_settings);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CPlayer_PrivacySettingsChanged_Notification message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPlayer_PrivacySettingsChanged_Notification
         * @static
         * @param {CPlayer_PrivacySettingsChanged_Notification} message CPlayer_PrivacySettingsChanged_Notification
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPlayer_PrivacySettingsChanged_Notification.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.privacy_settings = null;
            if (message.privacy_settings != null && message.hasOwnProperty("privacy_settings"))
                object.privacy_settings = $root.CPrivacySettings.toObject(message.privacy_settings, options);
            return object;
        };
    
        /**
         * Converts this CPlayer_PrivacySettingsChanged_Notification to JSON.
         * @function toJSON
         * @memberof CPlayer_PrivacySettingsChanged_Notification
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPlayer_PrivacySettingsChanged_Notification.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPlayer_PrivacySettingsChanged_Notification;
    })();
    
    $root.Player = (function() {
    
        /**
         * Constructs a new Player service.
         * @exports Player
         * @classdesc Represents a Player
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function Player(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }
    
        (Player.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Player;
    
        /**
         * Creates new Player service using the specified rpc implementation.
         * @function create
         * @memberof Player
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {Player} RPC service. Useful where requests and/or responses are streamed.
         */
        Player.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };
    
        /**
         * Callback as used by {@link Player#getMutualFriendsForIncomingInvites}.
         * @memberof Player
         * @typedef GetMutualFriendsForIncomingInvitesCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_GetMutualFriendsForIncomingInvites_Response} [response] CPlayer_GetMutualFriendsForIncomingInvites_Response
         */
    
        /**
         * Calls GetMutualFriendsForIncomingInvites.
         * @function getMutualFriendsForIncomingInvites
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetMutualFriendsForIncomingInvites_Request} request CPlayer_GetMutualFriendsForIncomingInvites_Request message or plain object
         * @param {Player.GetMutualFriendsForIncomingInvitesCallback} callback Node-style callback called with the error, if any, and CPlayer_GetMutualFriendsForIncomingInvites_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.getMutualFriendsForIncomingInvites = function getMutualFriendsForIncomingInvites(request, callback) {
            return this.rpcCall(getMutualFriendsForIncomingInvites, $root.CPlayer_GetMutualFriendsForIncomingInvites_Request, $root.CPlayer_GetMutualFriendsForIncomingInvites_Response, request, callback);
        }, "name", { value: "GetMutualFriendsForIncomingInvites" });
    
        /**
         * Calls GetMutualFriendsForIncomingInvites.
         * @function getMutualFriendsForIncomingInvites
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetMutualFriendsForIncomingInvites_Request} request CPlayer_GetMutualFriendsForIncomingInvites_Request message or plain object
         * @returns {Promise<CPlayer_GetMutualFriendsForIncomingInvites_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#getOwnedGames}.
         * @memberof Player
         * @typedef GetOwnedGamesCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_GetOwnedGames_Response} [response] CPlayer_GetOwnedGames_Response
         */
    
        /**
         * Calls GetOwnedGames.
         * @function getOwnedGames
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetOwnedGames_Request} request CPlayer_GetOwnedGames_Request message or plain object
         * @param {Player.GetOwnedGamesCallback} callback Node-style callback called with the error, if any, and CPlayer_GetOwnedGames_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.getOwnedGames = function getOwnedGames(request, callback) {
            return this.rpcCall(getOwnedGames, $root.CPlayer_GetOwnedGames_Request, $root.CPlayer_GetOwnedGames_Response, request, callback);
        }, "name", { value: "GetOwnedGames" });
    
        /**
         * Calls GetOwnedGames.
         * @function getOwnedGames
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetOwnedGames_Request} request CPlayer_GetOwnedGames_Request message or plain object
         * @returns {Promise<CPlayer_GetOwnedGames_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#getPlayNext}.
         * @memberof Player
         * @typedef GetPlayNextCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_GetPlayNext_Response} [response] CPlayer_GetPlayNext_Response
         */
    
        /**
         * Calls GetPlayNext.
         * @function getPlayNext
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetPlayNext_Request} request CPlayer_GetPlayNext_Request message or plain object
         * @param {Player.GetPlayNextCallback} callback Node-style callback called with the error, if any, and CPlayer_GetPlayNext_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.getPlayNext = function getPlayNext(request, callback) {
            return this.rpcCall(getPlayNext, $root.CPlayer_GetPlayNext_Request, $root.CPlayer_GetPlayNext_Response, request, callback);
        }, "name", { value: "GetPlayNext" });
    
        /**
         * Calls GetPlayNext.
         * @function getPlayNext
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetPlayNext_Request} request CPlayer_GetPlayNext_Request message or plain object
         * @returns {Promise<CPlayer_GetPlayNext_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#getFriendsGameplayInfo}.
         * @memberof Player
         * @typedef GetFriendsGameplayInfoCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_GetFriendsGameplayInfo_Response} [response] CPlayer_GetFriendsGameplayInfo_Response
         */
    
        /**
         * Calls GetFriendsGameplayInfo.
         * @function getFriendsGameplayInfo
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetFriendsGameplayInfo_Request} request CPlayer_GetFriendsGameplayInfo_Request message or plain object
         * @param {Player.GetFriendsGameplayInfoCallback} callback Node-style callback called with the error, if any, and CPlayer_GetFriendsGameplayInfo_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.getFriendsGameplayInfo = function getFriendsGameplayInfo(request, callback) {
            return this.rpcCall(getFriendsGameplayInfo, $root.CPlayer_GetFriendsGameplayInfo_Request, $root.CPlayer_GetFriendsGameplayInfo_Response, request, callback);
        }, "name", { value: "GetFriendsGameplayInfo" });
    
        /**
         * Calls GetFriendsGameplayInfo.
         * @function getFriendsGameplayInfo
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetFriendsGameplayInfo_Request} request CPlayer_GetFriendsGameplayInfo_Request message or plain object
         * @returns {Promise<CPlayer_GetFriendsGameplayInfo_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#getFriendsAppsActivity}.
         * @memberof Player
         * @typedef GetFriendsAppsActivityCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_GetFriendsAppsActivity_Response} [response] CPlayer_GetFriendsAppsActivity_Response
         */
    
        /**
         * Calls GetFriendsAppsActivity.
         * @function getFriendsAppsActivity
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetFriendsAppsActivity_Request} request CPlayer_GetFriendsAppsActivity_Request message or plain object
         * @param {Player.GetFriendsAppsActivityCallback} callback Node-style callback called with the error, if any, and CPlayer_GetFriendsAppsActivity_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.getFriendsAppsActivity = function getFriendsAppsActivity(request, callback) {
            return this.rpcCall(getFriendsAppsActivity, $root.CPlayer_GetFriendsAppsActivity_Request, $root.CPlayer_GetFriendsAppsActivity_Response, request, callback);
        }, "name", { value: "GetFriendsAppsActivity" });
    
        /**
         * Calls GetFriendsAppsActivity.
         * @function getFriendsAppsActivity
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetFriendsAppsActivity_Request} request CPlayer_GetFriendsAppsActivity_Request message or plain object
         * @returns {Promise<CPlayer_GetFriendsAppsActivity_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#getGameBadgeLevels}.
         * @memberof Player
         * @typedef GetGameBadgeLevelsCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_GetGameBadgeLevels_Response} [response] CPlayer_GetGameBadgeLevels_Response
         */
    
        /**
         * Calls GetGameBadgeLevels.
         * @function getGameBadgeLevels
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetGameBadgeLevels_Request} request CPlayer_GetGameBadgeLevels_Request message or plain object
         * @param {Player.GetGameBadgeLevelsCallback} callback Node-style callback called with the error, if any, and CPlayer_GetGameBadgeLevels_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.getGameBadgeLevels = function getGameBadgeLevels(request, callback) {
            return this.rpcCall(getGameBadgeLevels, $root.CPlayer_GetGameBadgeLevels_Request, $root.CPlayer_GetGameBadgeLevels_Response, request, callback);
        }, "name", { value: "GetGameBadgeLevels" });
    
        /**
         * Calls GetGameBadgeLevels.
         * @function getGameBadgeLevels
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetGameBadgeLevels_Request} request CPlayer_GetGameBadgeLevels_Request message or plain object
         * @returns {Promise<CPlayer_GetGameBadgeLevels_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#getProfileBackground}.
         * @memberof Player
         * @typedef GetProfileBackgroundCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_GetProfileBackground_Response} [response] CPlayer_GetProfileBackground_Response
         */
    
        /**
         * Calls GetProfileBackground.
         * @function getProfileBackground
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetProfileBackground_Request} request CPlayer_GetProfileBackground_Request message or plain object
         * @param {Player.GetProfileBackgroundCallback} callback Node-style callback called with the error, if any, and CPlayer_GetProfileBackground_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.getProfileBackground = function getProfileBackground(request, callback) {
            return this.rpcCall(getProfileBackground, $root.CPlayer_GetProfileBackground_Request, $root.CPlayer_GetProfileBackground_Response, request, callback);
        }, "name", { value: "GetProfileBackground" });
    
        /**
         * Calls GetProfileBackground.
         * @function getProfileBackground
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetProfileBackground_Request} request CPlayer_GetProfileBackground_Request message or plain object
         * @returns {Promise<CPlayer_GetProfileBackground_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#setProfileBackground}.
         * @memberof Player
         * @typedef SetProfileBackgroundCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_SetProfileBackground_Response} [response] CPlayer_SetProfileBackground_Response
         */
    
        /**
         * Calls SetProfileBackground.
         * @function setProfileBackground
         * @memberof Player
         * @instance
         * @param {ICPlayer_SetProfileBackground_Request} request CPlayer_SetProfileBackground_Request message or plain object
         * @param {Player.SetProfileBackgroundCallback} callback Node-style callback called with the error, if any, and CPlayer_SetProfileBackground_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.setProfileBackground = function setProfileBackground(request, callback) {
            return this.rpcCall(setProfileBackground, $root.CPlayer_SetProfileBackground_Request, $root.CPlayer_SetProfileBackground_Response, request, callback);
        }, "name", { value: "SetProfileBackground" });
    
        /**
         * Calls SetProfileBackground.
         * @function setProfileBackground
         * @memberof Player
         * @instance
         * @param {ICPlayer_SetProfileBackground_Request} request CPlayer_SetProfileBackground_Request message or plain object
         * @returns {Promise<CPlayer_SetProfileBackground_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#getMiniProfileBackground}.
         * @memberof Player
         * @typedef GetMiniProfileBackgroundCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_GetMiniProfileBackground_Response} [response] CPlayer_GetMiniProfileBackground_Response
         */
    
        /**
         * Calls GetMiniProfileBackground.
         * @function getMiniProfileBackground
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetMiniProfileBackground_Request} request CPlayer_GetMiniProfileBackground_Request message or plain object
         * @param {Player.GetMiniProfileBackgroundCallback} callback Node-style callback called with the error, if any, and CPlayer_GetMiniProfileBackground_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.getMiniProfileBackground = function getMiniProfileBackground(request, callback) {
            return this.rpcCall(getMiniProfileBackground, $root.CPlayer_GetMiniProfileBackground_Request, $root.CPlayer_GetMiniProfileBackground_Response, request, callback);
        }, "name", { value: "GetMiniProfileBackground" });
    
        /**
         * Calls GetMiniProfileBackground.
         * @function getMiniProfileBackground
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetMiniProfileBackground_Request} request CPlayer_GetMiniProfileBackground_Request message or plain object
         * @returns {Promise<CPlayer_GetMiniProfileBackground_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#setMiniProfileBackground}.
         * @memberof Player
         * @typedef SetMiniProfileBackgroundCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_SetMiniProfileBackground_Response} [response] CPlayer_SetMiniProfileBackground_Response
         */
    
        /**
         * Calls SetMiniProfileBackground.
         * @function setMiniProfileBackground
         * @memberof Player
         * @instance
         * @param {ICPlayer_SetMiniProfileBackground_Request} request CPlayer_SetMiniProfileBackground_Request message or plain object
         * @param {Player.SetMiniProfileBackgroundCallback} callback Node-style callback called with the error, if any, and CPlayer_SetMiniProfileBackground_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.setMiniProfileBackground = function setMiniProfileBackground(request, callback) {
            return this.rpcCall(setMiniProfileBackground, $root.CPlayer_SetMiniProfileBackground_Request, $root.CPlayer_SetMiniProfileBackground_Response, request, callback);
        }, "name", { value: "SetMiniProfileBackground" });
    
        /**
         * Calls SetMiniProfileBackground.
         * @function setMiniProfileBackground
         * @memberof Player
         * @instance
         * @param {ICPlayer_SetMiniProfileBackground_Request} request CPlayer_SetMiniProfileBackground_Request message or plain object
         * @returns {Promise<CPlayer_SetMiniProfileBackground_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#getAvatarFrame}.
         * @memberof Player
         * @typedef GetAvatarFrameCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_GetAvatarFrame_Response} [response] CPlayer_GetAvatarFrame_Response
         */
    
        /**
         * Calls GetAvatarFrame.
         * @function getAvatarFrame
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetAvatarFrame_Request} request CPlayer_GetAvatarFrame_Request message or plain object
         * @param {Player.GetAvatarFrameCallback} callback Node-style callback called with the error, if any, and CPlayer_GetAvatarFrame_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.getAvatarFrame = function getAvatarFrame(request, callback) {
            return this.rpcCall(getAvatarFrame, $root.CPlayer_GetAvatarFrame_Request, $root.CPlayer_GetAvatarFrame_Response, request, callback);
        }, "name", { value: "GetAvatarFrame" });
    
        /**
         * Calls GetAvatarFrame.
         * @function getAvatarFrame
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetAvatarFrame_Request} request CPlayer_GetAvatarFrame_Request message or plain object
         * @returns {Promise<CPlayer_GetAvatarFrame_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#setAvatarFrame}.
         * @memberof Player
         * @typedef SetAvatarFrameCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_SetAvatarFrame_Response} [response] CPlayer_SetAvatarFrame_Response
         */
    
        /**
         * Calls SetAvatarFrame.
         * @function setAvatarFrame
         * @memberof Player
         * @instance
         * @param {ICPlayer_SetAvatarFrame_Request} request CPlayer_SetAvatarFrame_Request message or plain object
         * @param {Player.SetAvatarFrameCallback} callback Node-style callback called with the error, if any, and CPlayer_SetAvatarFrame_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.setAvatarFrame = function setAvatarFrame(request, callback) {
            return this.rpcCall(setAvatarFrame, $root.CPlayer_SetAvatarFrame_Request, $root.CPlayer_SetAvatarFrame_Response, request, callback);
        }, "name", { value: "SetAvatarFrame" });
    
        /**
         * Calls SetAvatarFrame.
         * @function setAvatarFrame
         * @memberof Player
         * @instance
         * @param {ICPlayer_SetAvatarFrame_Request} request CPlayer_SetAvatarFrame_Request message or plain object
         * @returns {Promise<CPlayer_SetAvatarFrame_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#getAnimatedAvatar}.
         * @memberof Player
         * @typedef GetAnimatedAvatarCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_GetAnimatedAvatar_Response} [response] CPlayer_GetAnimatedAvatar_Response
         */
    
        /**
         * Calls GetAnimatedAvatar.
         * @function getAnimatedAvatar
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetAnimatedAvatar_Request} request CPlayer_GetAnimatedAvatar_Request message or plain object
         * @param {Player.GetAnimatedAvatarCallback} callback Node-style callback called with the error, if any, and CPlayer_GetAnimatedAvatar_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.getAnimatedAvatar = function getAnimatedAvatar(request, callback) {
            return this.rpcCall(getAnimatedAvatar, $root.CPlayer_GetAnimatedAvatar_Request, $root.CPlayer_GetAnimatedAvatar_Response, request, callback);
        }, "name", { value: "GetAnimatedAvatar" });
    
        /**
         * Calls GetAnimatedAvatar.
         * @function getAnimatedAvatar
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetAnimatedAvatar_Request} request CPlayer_GetAnimatedAvatar_Request message or plain object
         * @returns {Promise<CPlayer_GetAnimatedAvatar_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#setAnimatedAvatar}.
         * @memberof Player
         * @typedef SetAnimatedAvatarCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_SetAnimatedAvatar_Response} [response] CPlayer_SetAnimatedAvatar_Response
         */
    
        /**
         * Calls SetAnimatedAvatar.
         * @function setAnimatedAvatar
         * @memberof Player
         * @instance
         * @param {ICPlayer_SetAnimatedAvatar_Request} request CPlayer_SetAnimatedAvatar_Request message or plain object
         * @param {Player.SetAnimatedAvatarCallback} callback Node-style callback called with the error, if any, and CPlayer_SetAnimatedAvatar_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.setAnimatedAvatar = function setAnimatedAvatar(request, callback) {
            return this.rpcCall(setAnimatedAvatar, $root.CPlayer_SetAnimatedAvatar_Request, $root.CPlayer_SetAnimatedAvatar_Response, request, callback);
        }, "name", { value: "SetAnimatedAvatar" });
    
        /**
         * Calls SetAnimatedAvatar.
         * @function setAnimatedAvatar
         * @memberof Player
         * @instance
         * @param {ICPlayer_SetAnimatedAvatar_Request} request CPlayer_SetAnimatedAvatar_Request message or plain object
         * @returns {Promise<CPlayer_SetAnimatedAvatar_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#getProfileItemsOwned}.
         * @memberof Player
         * @typedef GetProfileItemsOwnedCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_GetProfileItemsOwned_Response} [response] CPlayer_GetProfileItemsOwned_Response
         */
    
        /**
         * Calls GetProfileItemsOwned.
         * @function getProfileItemsOwned
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetProfileItemsOwned_Request} request CPlayer_GetProfileItemsOwned_Request message or plain object
         * @param {Player.GetProfileItemsOwnedCallback} callback Node-style callback called with the error, if any, and CPlayer_GetProfileItemsOwned_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.getProfileItemsOwned = function getProfileItemsOwned(request, callback) {
            return this.rpcCall(getProfileItemsOwned, $root.CPlayer_GetProfileItemsOwned_Request, $root.CPlayer_GetProfileItemsOwned_Response, request, callback);
        }, "name", { value: "GetProfileItemsOwned" });
    
        /**
         * Calls GetProfileItemsOwned.
         * @function getProfileItemsOwned
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetProfileItemsOwned_Request} request CPlayer_GetProfileItemsOwned_Request message or plain object
         * @returns {Promise<CPlayer_GetProfileItemsOwned_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#getProfileItemsEquipped}.
         * @memberof Player
         * @typedef GetProfileItemsEquippedCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_GetProfileItemsEquipped_Response} [response] CPlayer_GetProfileItemsEquipped_Response
         */
    
        /**
         * Calls GetProfileItemsEquipped.
         * @function getProfileItemsEquipped
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetProfileItemsEquipped_Request} request CPlayer_GetProfileItemsEquipped_Request message or plain object
         * @param {Player.GetProfileItemsEquippedCallback} callback Node-style callback called with the error, if any, and CPlayer_GetProfileItemsEquipped_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.getProfileItemsEquipped = function getProfileItemsEquipped(request, callback) {
            return this.rpcCall(getProfileItemsEquipped, $root.CPlayer_GetProfileItemsEquipped_Request, $root.CPlayer_GetProfileItemsEquipped_Response, request, callback);
        }, "name", { value: "GetProfileItemsEquipped" });
    
        /**
         * Calls GetProfileItemsEquipped.
         * @function getProfileItemsEquipped
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetProfileItemsEquipped_Request} request CPlayer_GetProfileItemsEquipped_Request message or plain object
         * @returns {Promise<CPlayer_GetProfileItemsEquipped_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#setEquippedProfileItemFlags}.
         * @memberof Player
         * @typedef SetEquippedProfileItemFlagsCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_SetEquippedProfileItemFlags_Response} [response] CPlayer_SetEquippedProfileItemFlags_Response
         */
    
        /**
         * Calls SetEquippedProfileItemFlags.
         * @function setEquippedProfileItemFlags
         * @memberof Player
         * @instance
         * @param {ICPlayer_SetEquippedProfileItemFlags_Request} request CPlayer_SetEquippedProfileItemFlags_Request message or plain object
         * @param {Player.SetEquippedProfileItemFlagsCallback} callback Node-style callback called with the error, if any, and CPlayer_SetEquippedProfileItemFlags_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.setEquippedProfileItemFlags = function setEquippedProfileItemFlags(request, callback) {
            return this.rpcCall(setEquippedProfileItemFlags, $root.CPlayer_SetEquippedProfileItemFlags_Request, $root.CPlayer_SetEquippedProfileItemFlags_Response, request, callback);
        }, "name", { value: "SetEquippedProfileItemFlags" });
    
        /**
         * Calls SetEquippedProfileItemFlags.
         * @function setEquippedProfileItemFlags
         * @memberof Player
         * @instance
         * @param {ICPlayer_SetEquippedProfileItemFlags_Request} request CPlayer_SetEquippedProfileItemFlags_Request message or plain object
         * @returns {Promise<CPlayer_SetEquippedProfileItemFlags_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#getEmoticonList}.
         * @memberof Player
         * @typedef GetEmoticonListCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_GetEmoticonList_Response} [response] CPlayer_GetEmoticonList_Response
         */
    
        /**
         * Calls GetEmoticonList.
         * @function getEmoticonList
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetEmoticonList_Request} request CPlayer_GetEmoticonList_Request message or plain object
         * @param {Player.GetEmoticonListCallback} callback Node-style callback called with the error, if any, and CPlayer_GetEmoticonList_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.getEmoticonList = function getEmoticonList(request, callback) {
            return this.rpcCall(getEmoticonList, $root.CPlayer_GetEmoticonList_Request, $root.CPlayer_GetEmoticonList_Response, request, callback);
        }, "name", { value: "GetEmoticonList" });
    
        /**
         * Calls GetEmoticonList.
         * @function getEmoticonList
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetEmoticonList_Request} request CPlayer_GetEmoticonList_Request message or plain object
         * @returns {Promise<CPlayer_GetEmoticonList_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#getAchievementsProgress}.
         * @memberof Player
         * @typedef GetAchievementsProgressCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_GetAchievementsProgress_Response} [response] CPlayer_GetAchievementsProgress_Response
         */
    
        /**
         * Calls GetAchievementsProgress.
         * @function getAchievementsProgress
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetAchievementsProgress_Request} request CPlayer_GetAchievementsProgress_Request message or plain object
         * @param {Player.GetAchievementsProgressCallback} callback Node-style callback called with the error, if any, and CPlayer_GetAchievementsProgress_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.getAchievementsProgress = function getAchievementsProgress(request, callback) {
            return this.rpcCall(getAchievementsProgress, $root.CPlayer_GetAchievementsProgress_Request, $root.CPlayer_GetAchievementsProgress_Response, request, callback);
        }, "name", { value: "GetAchievementsProgress" });
    
        /**
         * Calls GetAchievementsProgress.
         * @function getAchievementsProgress
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetAchievementsProgress_Request} request CPlayer_GetAchievementsProgress_Request message or plain object
         * @returns {Promise<CPlayer_GetAchievementsProgress_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#getFavoriteBadge}.
         * @memberof Player
         * @typedef GetFavoriteBadgeCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_GetFavoriteBadge_Response} [response] CPlayer_GetFavoriteBadge_Response
         */
    
        /**
         * Calls GetFavoriteBadge.
         * @function getFavoriteBadge
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetFavoriteBadge_Request} request CPlayer_GetFavoriteBadge_Request message or plain object
         * @param {Player.GetFavoriteBadgeCallback} callback Node-style callback called with the error, if any, and CPlayer_GetFavoriteBadge_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.getFavoriteBadge = function getFavoriteBadge(request, callback) {
            return this.rpcCall(getFavoriteBadge, $root.CPlayer_GetFavoriteBadge_Request, $root.CPlayer_GetFavoriteBadge_Response, request, callback);
        }, "name", { value: "GetFavoriteBadge" });
    
        /**
         * Calls GetFavoriteBadge.
         * @function getFavoriteBadge
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetFavoriteBadge_Request} request CPlayer_GetFavoriteBadge_Request message or plain object
         * @returns {Promise<CPlayer_GetFavoriteBadge_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#setFavoriteBadge}.
         * @memberof Player
         * @typedef SetFavoriteBadgeCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_SetFavoriteBadge_Response} [response] CPlayer_SetFavoriteBadge_Response
         */
    
        /**
         * Calls SetFavoriteBadge.
         * @function setFavoriteBadge
         * @memberof Player
         * @instance
         * @param {ICPlayer_SetFavoriteBadge_Request} request CPlayer_SetFavoriteBadge_Request message or plain object
         * @param {Player.SetFavoriteBadgeCallback} callback Node-style callback called with the error, if any, and CPlayer_SetFavoriteBadge_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.setFavoriteBadge = function setFavoriteBadge(request, callback) {
            return this.rpcCall(setFavoriteBadge, $root.CPlayer_SetFavoriteBadge_Request, $root.CPlayer_SetFavoriteBadge_Response, request, callback);
        }, "name", { value: "SetFavoriteBadge" });
    
        /**
         * Calls SetFavoriteBadge.
         * @function setFavoriteBadge
         * @memberof Player
         * @instance
         * @param {ICPlayer_SetFavoriteBadge_Request} request CPlayer_SetFavoriteBadge_Request message or plain object
         * @returns {Promise<CPlayer_SetFavoriteBadge_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#getProfileCustomization}.
         * @memberof Player
         * @typedef GetProfileCustomizationCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_GetProfileCustomization_Response} [response] CPlayer_GetProfileCustomization_Response
         */
    
        /**
         * Calls GetProfileCustomization.
         * @function getProfileCustomization
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetProfileCustomization_Request} request CPlayer_GetProfileCustomization_Request message or plain object
         * @param {Player.GetProfileCustomizationCallback} callback Node-style callback called with the error, if any, and CPlayer_GetProfileCustomization_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.getProfileCustomization = function getProfileCustomization(request, callback) {
            return this.rpcCall(getProfileCustomization, $root.CPlayer_GetProfileCustomization_Request, $root.CPlayer_GetProfileCustomization_Response, request, callback);
        }, "name", { value: "GetProfileCustomization" });
    
        /**
         * Calls GetProfileCustomization.
         * @function getProfileCustomization
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetProfileCustomization_Request} request CPlayer_GetProfileCustomization_Request message or plain object
         * @returns {Promise<CPlayer_GetProfileCustomization_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#getProfileThemesAvailable}.
         * @memberof Player
         * @typedef GetProfileThemesAvailableCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_GetProfileThemesAvailable_Response} [response] CPlayer_GetProfileThemesAvailable_Response
         */
    
        /**
         * Calls GetProfileThemesAvailable.
         * @function getProfileThemesAvailable
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetProfileThemesAvailable_Request} request CPlayer_GetProfileThemesAvailable_Request message or plain object
         * @param {Player.GetProfileThemesAvailableCallback} callback Node-style callback called with the error, if any, and CPlayer_GetProfileThemesAvailable_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.getProfileThemesAvailable = function getProfileThemesAvailable(request, callback) {
            return this.rpcCall(getProfileThemesAvailable, $root.CPlayer_GetProfileThemesAvailable_Request, $root.CPlayer_GetProfileThemesAvailable_Response, request, callback);
        }, "name", { value: "GetProfileThemesAvailable" });
    
        /**
         * Calls GetProfileThemesAvailable.
         * @function getProfileThemesAvailable
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetProfileThemesAvailable_Request} request CPlayer_GetProfileThemesAvailable_Request message or plain object
         * @returns {Promise<CPlayer_GetProfileThemesAvailable_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#setProfileTheme}.
         * @memberof Player
         * @typedef SetProfileThemeCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_SetProfileTheme_Response} [response] CPlayer_SetProfileTheme_Response
         */
    
        /**
         * Calls SetProfileTheme.
         * @function setProfileTheme
         * @memberof Player
         * @instance
         * @param {ICPlayer_SetProfileTheme_Request} request CPlayer_SetProfileTheme_Request message or plain object
         * @param {Player.SetProfileThemeCallback} callback Node-style callback called with the error, if any, and CPlayer_SetProfileTheme_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.setProfileTheme = function setProfileTheme(request, callback) {
            return this.rpcCall(setProfileTheme, $root.CPlayer_SetProfileTheme_Request, $root.CPlayer_SetProfileTheme_Response, request, callback);
        }, "name", { value: "SetProfileTheme" });
    
        /**
         * Calls SetProfileTheme.
         * @function setProfileTheme
         * @memberof Player
         * @instance
         * @param {ICPlayer_SetProfileTheme_Request} request CPlayer_SetProfileTheme_Request message or plain object
         * @returns {Promise<CPlayer_SetProfileTheme_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#postStatusToFriends}.
         * @memberof Player
         * @typedef PostStatusToFriendsCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_PostStatusToFriends_Response} [response] CPlayer_PostStatusToFriends_Response
         */
    
        /**
         * Calls PostStatusToFriends.
         * @function postStatusToFriends
         * @memberof Player
         * @instance
         * @param {ICPlayer_PostStatusToFriends_Request} request CPlayer_PostStatusToFriends_Request message or plain object
         * @param {Player.PostStatusToFriendsCallback} callback Node-style callback called with the error, if any, and CPlayer_PostStatusToFriends_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.postStatusToFriends = function postStatusToFriends(request, callback) {
            return this.rpcCall(postStatusToFriends, $root.CPlayer_PostStatusToFriends_Request, $root.CPlayer_PostStatusToFriends_Response, request, callback);
        }, "name", { value: "PostStatusToFriends" });
    
        /**
         * Calls PostStatusToFriends.
         * @function postStatusToFriends
         * @memberof Player
         * @instance
         * @param {ICPlayer_PostStatusToFriends_Request} request CPlayer_PostStatusToFriends_Request message or plain object
         * @returns {Promise<CPlayer_PostStatusToFriends_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#getPostedStatus}.
         * @memberof Player
         * @typedef GetPostedStatusCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_GetPostedStatus_Response} [response] CPlayer_GetPostedStatus_Response
         */
    
        /**
         * Calls GetPostedStatus.
         * @function getPostedStatus
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetPostedStatus_Request} request CPlayer_GetPostedStatus_Request message or plain object
         * @param {Player.GetPostedStatusCallback} callback Node-style callback called with the error, if any, and CPlayer_GetPostedStatus_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.getPostedStatus = function getPostedStatus(request, callback) {
            return this.rpcCall(getPostedStatus, $root.CPlayer_GetPostedStatus_Request, $root.CPlayer_GetPostedStatus_Response, request, callback);
        }, "name", { value: "GetPostedStatus" });
    
        /**
         * Calls GetPostedStatus.
         * @function getPostedStatus
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetPostedStatus_Request} request CPlayer_GetPostedStatus_Request message or plain object
         * @returns {Promise<CPlayer_GetPostedStatus_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#deletePostedStatus}.
         * @memberof Player
         * @typedef DeletePostedStatusCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_DeletePostedStatus_Response} [response] CPlayer_DeletePostedStatus_Response
         */
    
        /**
         * Calls DeletePostedStatus.
         * @function deletePostedStatus
         * @memberof Player
         * @instance
         * @param {ICPlayer_DeletePostedStatus_Request} request CPlayer_DeletePostedStatus_Request message or plain object
         * @param {Player.DeletePostedStatusCallback} callback Node-style callback called with the error, if any, and CPlayer_DeletePostedStatus_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.deletePostedStatus = function deletePostedStatus(request, callback) {
            return this.rpcCall(deletePostedStatus, $root.CPlayer_DeletePostedStatus_Request, $root.CPlayer_DeletePostedStatus_Response, request, callback);
        }, "name", { value: "DeletePostedStatus" });
    
        /**
         * Calls DeletePostedStatus.
         * @function deletePostedStatus
         * @memberof Player
         * @instance
         * @param {ICPlayer_DeletePostedStatus_Request} request CPlayer_DeletePostedStatus_Request message or plain object
         * @returns {Promise<CPlayer_DeletePostedStatus_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#clientGetLastPlayedTimes}.
         * @memberof Player
         * @typedef ClientGetLastPlayedTimesCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_GetLastPlayedTimes_Response} [response] CPlayer_GetLastPlayedTimes_Response
         */
    
        /**
         * Calls ClientGetLastPlayedTimes.
         * @function clientGetLastPlayedTimes
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetLastPlayedTimes_Request} request CPlayer_GetLastPlayedTimes_Request message or plain object
         * @param {Player.ClientGetLastPlayedTimesCallback} callback Node-style callback called with the error, if any, and CPlayer_GetLastPlayedTimes_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.clientGetLastPlayedTimes = function clientGetLastPlayedTimes(request, callback) {
            return this.rpcCall(clientGetLastPlayedTimes, $root.CPlayer_GetLastPlayedTimes_Request, $root.CPlayer_GetLastPlayedTimes_Response, request, callback);
        }, "name", { value: "ClientGetLastPlayedTimes" });
    
        /**
         * Calls ClientGetLastPlayedTimes.
         * @function clientGetLastPlayedTimes
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetLastPlayedTimes_Request} request CPlayer_GetLastPlayedTimes_Request message or plain object
         * @returns {Promise<CPlayer_GetLastPlayedTimes_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#acceptSSA}.
         * @memberof Player
         * @typedef AcceptSSACallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_AcceptSSA_Response} [response] CPlayer_AcceptSSA_Response
         */
    
        /**
         * Calls AcceptSSA.
         * @function acceptSSA
         * @memberof Player
         * @instance
         * @param {ICPlayer_AcceptSSA_Request} request CPlayer_AcceptSSA_Request message or plain object
         * @param {Player.AcceptSSACallback} callback Node-style callback called with the error, if any, and CPlayer_AcceptSSA_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.acceptSSA = function acceptSSA(request, callback) {
            return this.rpcCall(acceptSSA, $root.CPlayer_AcceptSSA_Request, $root.CPlayer_AcceptSSA_Response, request, callback);
        }, "name", { value: "AcceptSSA" });
    
        /**
         * Calls AcceptSSA.
         * @function acceptSSA
         * @memberof Player
         * @instance
         * @param {ICPlayer_AcceptSSA_Request} request CPlayer_AcceptSSA_Request message or plain object
         * @returns {Promise<CPlayer_AcceptSSA_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#getNicknameList}.
         * @memberof Player
         * @typedef GetNicknameListCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_GetNicknameList_Response} [response] CPlayer_GetNicknameList_Response
         */
    
        /**
         * Calls GetNicknameList.
         * @function getNicknameList
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetNicknameList_Request} request CPlayer_GetNicknameList_Request message or plain object
         * @param {Player.GetNicknameListCallback} callback Node-style callback called with the error, if any, and CPlayer_GetNicknameList_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.getNicknameList = function getNicknameList(request, callback) {
            return this.rpcCall(getNicknameList, $root.CPlayer_GetNicknameList_Request, $root.CPlayer_GetNicknameList_Response, request, callback);
        }, "name", { value: "GetNicknameList" });
    
        /**
         * Calls GetNicknameList.
         * @function getNicknameList
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetNicknameList_Request} request CPlayer_GetNicknameList_Request message or plain object
         * @returns {Promise<CPlayer_GetNicknameList_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#getPerFriendPreferences}.
         * @memberof Player
         * @typedef GetPerFriendPreferencesCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_GetPerFriendPreferences_Response} [response] CPlayer_GetPerFriendPreferences_Response
         */
    
        /**
         * Calls GetPerFriendPreferences.
         * @function getPerFriendPreferences
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetPerFriendPreferences_Request} request CPlayer_GetPerFriendPreferences_Request message or plain object
         * @param {Player.GetPerFriendPreferencesCallback} callback Node-style callback called with the error, if any, and CPlayer_GetPerFriendPreferences_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.getPerFriendPreferences = function getPerFriendPreferences(request, callback) {
            return this.rpcCall(getPerFriendPreferences, $root.CPlayer_GetPerFriendPreferences_Request, $root.CPlayer_GetPerFriendPreferences_Response, request, callback);
        }, "name", { value: "GetPerFriendPreferences" });
    
        /**
         * Calls GetPerFriendPreferences.
         * @function getPerFriendPreferences
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetPerFriendPreferences_Request} request CPlayer_GetPerFriendPreferences_Request message or plain object
         * @returns {Promise<CPlayer_GetPerFriendPreferences_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#setPerFriendPreferences}.
         * @memberof Player
         * @typedef SetPerFriendPreferencesCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_SetPerFriendPreferences_Response} [response] CPlayer_SetPerFriendPreferences_Response
         */
    
        /**
         * Calls SetPerFriendPreferences.
         * @function setPerFriendPreferences
         * @memberof Player
         * @instance
         * @param {ICPlayer_SetPerFriendPreferences_Request} request CPlayer_SetPerFriendPreferences_Request message or plain object
         * @param {Player.SetPerFriendPreferencesCallback} callback Node-style callback called with the error, if any, and CPlayer_SetPerFriendPreferences_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.setPerFriendPreferences = function setPerFriendPreferences(request, callback) {
            return this.rpcCall(setPerFriendPreferences, $root.CPlayer_SetPerFriendPreferences_Request, $root.CPlayer_SetPerFriendPreferences_Response, request, callback);
        }, "name", { value: "SetPerFriendPreferences" });
    
        /**
         * Calls SetPerFriendPreferences.
         * @function setPerFriendPreferences
         * @memberof Player
         * @instance
         * @param {ICPlayer_SetPerFriendPreferences_Request} request CPlayer_SetPerFriendPreferences_Request message or plain object
         * @returns {Promise<CPlayer_SetPerFriendPreferences_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#addFriend}.
         * @memberof Player
         * @typedef AddFriendCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_AddFriend_Response} [response] CPlayer_AddFriend_Response
         */
    
        /**
         * Calls AddFriend.
         * @function addFriend
         * @memberof Player
         * @instance
         * @param {ICPlayer_AddFriend_Request} request CPlayer_AddFriend_Request message or plain object
         * @param {Player.AddFriendCallback} callback Node-style callback called with the error, if any, and CPlayer_AddFriend_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.addFriend = function addFriend(request, callback) {
            return this.rpcCall(addFriend, $root.CPlayer_AddFriend_Request, $root.CPlayer_AddFriend_Response, request, callback);
        }, "name", { value: "AddFriend" });
    
        /**
         * Calls AddFriend.
         * @function addFriend
         * @memberof Player
         * @instance
         * @param {ICPlayer_AddFriend_Request} request CPlayer_AddFriend_Request message or plain object
         * @returns {Promise<CPlayer_AddFriend_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#removeFriend}.
         * @memberof Player
         * @typedef RemoveFriendCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_RemoveFriend_Response} [response] CPlayer_RemoveFriend_Response
         */
    
        /**
         * Calls RemoveFriend.
         * @function removeFriend
         * @memberof Player
         * @instance
         * @param {ICPlayer_RemoveFriend_Request} request CPlayer_RemoveFriend_Request message or plain object
         * @param {Player.RemoveFriendCallback} callback Node-style callback called with the error, if any, and CPlayer_RemoveFriend_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.removeFriend = function removeFriend(request, callback) {
            return this.rpcCall(removeFriend, $root.CPlayer_RemoveFriend_Request, $root.CPlayer_RemoveFriend_Response, request, callback);
        }, "name", { value: "RemoveFriend" });
    
        /**
         * Calls RemoveFriend.
         * @function removeFriend
         * @memberof Player
         * @instance
         * @param {ICPlayer_RemoveFriend_Request} request CPlayer_RemoveFriend_Request message or plain object
         * @returns {Promise<CPlayer_RemoveFriend_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#ignoreFriend}.
         * @memberof Player
         * @typedef IgnoreFriendCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_IgnoreFriend_Response} [response] CPlayer_IgnoreFriend_Response
         */
    
        /**
         * Calls IgnoreFriend.
         * @function ignoreFriend
         * @memberof Player
         * @instance
         * @param {ICPlayer_IgnoreFriend_Request} request CPlayer_IgnoreFriend_Request message or plain object
         * @param {Player.IgnoreFriendCallback} callback Node-style callback called with the error, if any, and CPlayer_IgnoreFriend_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.ignoreFriend = function ignoreFriend(request, callback) {
            return this.rpcCall(ignoreFriend, $root.CPlayer_IgnoreFriend_Request, $root.CPlayer_IgnoreFriend_Response, request, callback);
        }, "name", { value: "IgnoreFriend" });
    
        /**
         * Calls IgnoreFriend.
         * @function ignoreFriend
         * @memberof Player
         * @instance
         * @param {ICPlayer_IgnoreFriend_Request} request CPlayer_IgnoreFriend_Request message or plain object
         * @returns {Promise<CPlayer_IgnoreFriend_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#getCommunityPreferences}.
         * @memberof Player
         * @typedef GetCommunityPreferencesCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_GetCommunityPreferences_Response} [response] CPlayer_GetCommunityPreferences_Response
         */
    
        /**
         * Calls GetCommunityPreferences.
         * @function getCommunityPreferences
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetCommunityPreferences_Request} request CPlayer_GetCommunityPreferences_Request message or plain object
         * @param {Player.GetCommunityPreferencesCallback} callback Node-style callback called with the error, if any, and CPlayer_GetCommunityPreferences_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.getCommunityPreferences = function getCommunityPreferences(request, callback) {
            return this.rpcCall(getCommunityPreferences, $root.CPlayer_GetCommunityPreferences_Request, $root.CPlayer_GetCommunityPreferences_Response, request, callback);
        }, "name", { value: "GetCommunityPreferences" });
    
        /**
         * Calls GetCommunityPreferences.
         * @function getCommunityPreferences
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetCommunityPreferences_Request} request CPlayer_GetCommunityPreferences_Request message or plain object
         * @returns {Promise<CPlayer_GetCommunityPreferences_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#setCommunityPreferences}.
         * @memberof Player
         * @typedef SetCommunityPreferencesCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_SetCommunityPreferences_Response} [response] CPlayer_SetCommunityPreferences_Response
         */
    
        /**
         * Calls SetCommunityPreferences.
         * @function setCommunityPreferences
         * @memberof Player
         * @instance
         * @param {ICPlayer_SetCommunityPreferences_Request} request CPlayer_SetCommunityPreferences_Request message or plain object
         * @param {Player.SetCommunityPreferencesCallback} callback Node-style callback called with the error, if any, and CPlayer_SetCommunityPreferences_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.setCommunityPreferences = function setCommunityPreferences(request, callback) {
            return this.rpcCall(setCommunityPreferences, $root.CPlayer_SetCommunityPreferences_Request, $root.CPlayer_SetCommunityPreferences_Response, request, callback);
        }, "name", { value: "SetCommunityPreferences" });
    
        /**
         * Calls SetCommunityPreferences.
         * @function setCommunityPreferences
         * @memberof Player
         * @instance
         * @param {ICPlayer_SetCommunityPreferences_Request} request CPlayer_SetCommunityPreferences_Request message or plain object
         * @returns {Promise<CPlayer_SetCommunityPreferences_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#getNewSteamAnnouncementState}.
         * @memberof Player
         * @typedef GetNewSteamAnnouncementStateCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_GetNewSteamAnnouncementState_Response} [response] CPlayer_GetNewSteamAnnouncementState_Response
         */
    
        /**
         * Calls GetNewSteamAnnouncementState.
         * @function getNewSteamAnnouncementState
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetNewSteamAnnouncementState_Request} request CPlayer_GetNewSteamAnnouncementState_Request message or plain object
         * @param {Player.GetNewSteamAnnouncementStateCallback} callback Node-style callback called with the error, if any, and CPlayer_GetNewSteamAnnouncementState_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.getNewSteamAnnouncementState = function getNewSteamAnnouncementState(request, callback) {
            return this.rpcCall(getNewSteamAnnouncementState, $root.CPlayer_GetNewSteamAnnouncementState_Request, $root.CPlayer_GetNewSteamAnnouncementState_Response, request, callback);
        }, "name", { value: "GetNewSteamAnnouncementState" });
    
        /**
         * Calls GetNewSteamAnnouncementState.
         * @function getNewSteamAnnouncementState
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetNewSteamAnnouncementState_Request} request CPlayer_GetNewSteamAnnouncementState_Request message or plain object
         * @returns {Promise<CPlayer_GetNewSteamAnnouncementState_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#updateSteamAnnouncementLastRead}.
         * @memberof Player
         * @typedef UpdateSteamAnnouncementLastReadCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_UpdateSteamAnnouncementLastRead_Response} [response] CPlayer_UpdateSteamAnnouncementLastRead_Response
         */
    
        /**
         * Calls UpdateSteamAnnouncementLastRead.
         * @function updateSteamAnnouncementLastRead
         * @memberof Player
         * @instance
         * @param {ICPlayer_UpdateSteamAnnouncementLastRead_Request} request CPlayer_UpdateSteamAnnouncementLastRead_Request message or plain object
         * @param {Player.UpdateSteamAnnouncementLastReadCallback} callback Node-style callback called with the error, if any, and CPlayer_UpdateSteamAnnouncementLastRead_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.updateSteamAnnouncementLastRead = function updateSteamAnnouncementLastRead(request, callback) {
            return this.rpcCall(updateSteamAnnouncementLastRead, $root.CPlayer_UpdateSteamAnnouncementLastRead_Request, $root.CPlayer_UpdateSteamAnnouncementLastRead_Response, request, callback);
        }, "name", { value: "UpdateSteamAnnouncementLastRead" });
    
        /**
         * Calls UpdateSteamAnnouncementLastRead.
         * @function updateSteamAnnouncementLastRead
         * @memberof Player
         * @instance
         * @param {ICPlayer_UpdateSteamAnnouncementLastRead_Request} request CPlayer_UpdateSteamAnnouncementLastRead_Request message or plain object
         * @returns {Promise<CPlayer_UpdateSteamAnnouncementLastRead_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#getPrivacySettings}.
         * @memberof Player
         * @typedef GetPrivacySettingsCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_GetPrivacySettings_Response} [response] CPlayer_GetPrivacySettings_Response
         */
    
        /**
         * Calls GetPrivacySettings.
         * @function getPrivacySettings
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetPrivacySettings_Request} request CPlayer_GetPrivacySettings_Request message or plain object
         * @param {Player.GetPrivacySettingsCallback} callback Node-style callback called with the error, if any, and CPlayer_GetPrivacySettings_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.getPrivacySettings = function getPrivacySettings(request, callback) {
            return this.rpcCall(getPrivacySettings, $root.CPlayer_GetPrivacySettings_Request, $root.CPlayer_GetPrivacySettings_Response, request, callback);
        }, "name", { value: "GetPrivacySettings" });
    
        /**
         * Calls GetPrivacySettings.
         * @function getPrivacySettings
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetPrivacySettings_Request} request CPlayer_GetPrivacySettings_Request message or plain object
         * @returns {Promise<CPlayer_GetPrivacySettings_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Player#getDurationControl}.
         * @memberof Player
         * @typedef GetDurationControlCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CPlayer_GetDurationControl_Response} [response] CPlayer_GetDurationControl_Response
         */
    
        /**
         * Calls GetDurationControl.
         * @function getDurationControl
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetDurationControl_Request} request CPlayer_GetDurationControl_Request message or plain object
         * @param {Player.GetDurationControlCallback} callback Node-style callback called with the error, if any, and CPlayer_GetDurationControl_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Player.prototype.getDurationControl = function getDurationControl(request, callback) {
            return this.rpcCall(getDurationControl, $root.CPlayer_GetDurationControl_Request, $root.CPlayer_GetDurationControl_Response, request, callback);
        }, "name", { value: "GetDurationControl" });
    
        /**
         * Calls GetDurationControl.
         * @function getDurationControl
         * @memberof Player
         * @instance
         * @param {ICPlayer_GetDurationControl_Request} request CPlayer_GetDurationControl_Request message or plain object
         * @returns {Promise<CPlayer_GetDurationControl_Response>} Promise
         * @variation 2
         */
    
        return Player;
    })();
    
    $root.PlayerClient = (function() {
    
        /**
         * Constructs a new PlayerClient service.
         * @exports PlayerClient
         * @classdesc Represents a PlayerClient
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function PlayerClient(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }
    
        (PlayerClient.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = PlayerClient;
    
        /**
         * Creates new PlayerClient service using the specified rpc implementation.
         * @function create
         * @memberof PlayerClient
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {PlayerClient} RPC service. Useful where requests and/or responses are streamed.
         */
        PlayerClient.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };
    
        /**
         * Callback as used by {@link PlayerClient#notifyLastPlayedTimes}.
         * @memberof PlayerClient
         * @typedef NotifyLastPlayedTimesCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {NoResponse} [response] NoResponse
         */
    
        /**
         * Calls NotifyLastPlayedTimes.
         * @function notifyLastPlayedTimes
         * @memberof PlayerClient
         * @instance
         * @param {ICPlayer_LastPlayedTimes_Notification} request CPlayer_LastPlayedTimes_Notification message or plain object
         * @param {PlayerClient.NotifyLastPlayedTimesCallback} callback Node-style callback called with the error, if any, and NoResponse
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(PlayerClient.prototype.notifyLastPlayedTimes = function notifyLastPlayedTimes(request, callback) {
            return this.rpcCall(notifyLastPlayedTimes, $root.CPlayer_LastPlayedTimes_Notification, $root.NoResponse, request, callback);
        }, "name", { value: "NotifyLastPlayedTimes" });
    
        /**
         * Calls NotifyLastPlayedTimes.
         * @function notifyLastPlayedTimes
         * @memberof PlayerClient
         * @instance
         * @param {ICPlayer_LastPlayedTimes_Notification} request CPlayer_LastPlayedTimes_Notification message or plain object
         * @returns {Promise<NoResponse>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link PlayerClient#notifyFriendNicknameChanged}.
         * @memberof PlayerClient
         * @typedef NotifyFriendNicknameChangedCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {NoResponse} [response] NoResponse
         */
    
        /**
         * Calls NotifyFriendNicknameChanged.
         * @function notifyFriendNicknameChanged
         * @memberof PlayerClient
         * @instance
         * @param {ICPlayer_FriendNicknameChanged_Notification} request CPlayer_FriendNicknameChanged_Notification message or plain object
         * @param {PlayerClient.NotifyFriendNicknameChangedCallback} callback Node-style callback called with the error, if any, and NoResponse
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(PlayerClient.prototype.notifyFriendNicknameChanged = function notifyFriendNicknameChanged(request, callback) {
            return this.rpcCall(notifyFriendNicknameChanged, $root.CPlayer_FriendNicknameChanged_Notification, $root.NoResponse, request, callback);
        }, "name", { value: "NotifyFriendNicknameChanged" });
    
        /**
         * Calls NotifyFriendNicknameChanged.
         * @function notifyFriendNicknameChanged
         * @memberof PlayerClient
         * @instance
         * @param {ICPlayer_FriendNicknameChanged_Notification} request CPlayer_FriendNicknameChanged_Notification message or plain object
         * @returns {Promise<NoResponse>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link PlayerClient#notifyFriendEquippedProfileItemsChanged}.
         * @memberof PlayerClient
         * @typedef NotifyFriendEquippedProfileItemsChangedCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {NoResponse} [response] NoResponse
         */
    
        /**
         * Calls NotifyFriendEquippedProfileItemsChanged.
         * @function notifyFriendEquippedProfileItemsChanged
         * @memberof PlayerClient
         * @instance
         * @param {ICPlayer_FriendEquippedProfileItemsChanged_Notification} request CPlayer_FriendEquippedProfileItemsChanged_Notification message or plain object
         * @param {PlayerClient.NotifyFriendEquippedProfileItemsChangedCallback} callback Node-style callback called with the error, if any, and NoResponse
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(PlayerClient.prototype.notifyFriendEquippedProfileItemsChanged = function notifyFriendEquippedProfileItemsChanged(request, callback) {
            return this.rpcCall(notifyFriendEquippedProfileItemsChanged, $root.CPlayer_FriendEquippedProfileItemsChanged_Notification, $root.NoResponse, request, callback);
        }, "name", { value: "NotifyFriendEquippedProfileItemsChanged" });
    
        /**
         * Calls NotifyFriendEquippedProfileItemsChanged.
         * @function notifyFriendEquippedProfileItemsChanged
         * @memberof PlayerClient
         * @instance
         * @param {ICPlayer_FriendEquippedProfileItemsChanged_Notification} request CPlayer_FriendEquippedProfileItemsChanged_Notification message or plain object
         * @returns {Promise<NoResponse>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link PlayerClient#notifyNewSteamAnnouncementState}.
         * @memberof PlayerClient
         * @typedef NotifyNewSteamAnnouncementStateCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {NoResponse} [response] NoResponse
         */
    
        /**
         * Calls NotifyNewSteamAnnouncementState.
         * @function notifyNewSteamAnnouncementState
         * @memberof PlayerClient
         * @instance
         * @param {ICPlayer_NewSteamAnnouncementState_Notification} request CPlayer_NewSteamAnnouncementState_Notification message or plain object
         * @param {PlayerClient.NotifyNewSteamAnnouncementStateCallback} callback Node-style callback called with the error, if any, and NoResponse
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(PlayerClient.prototype.notifyNewSteamAnnouncementState = function notifyNewSteamAnnouncementState(request, callback) {
            return this.rpcCall(notifyNewSteamAnnouncementState, $root.CPlayer_NewSteamAnnouncementState_Notification, $root.NoResponse, request, callback);
        }, "name", { value: "NotifyNewSteamAnnouncementState" });
    
        /**
         * Calls NotifyNewSteamAnnouncementState.
         * @function notifyNewSteamAnnouncementState
         * @memberof PlayerClient
         * @instance
         * @param {ICPlayer_NewSteamAnnouncementState_Notification} request CPlayer_NewSteamAnnouncementState_Notification message or plain object
         * @returns {Promise<NoResponse>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link PlayerClient#notifyCommunityPreferencesChanged}.
         * @memberof PlayerClient
         * @typedef NotifyCommunityPreferencesChangedCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {NoResponse} [response] NoResponse
         */
    
        /**
         * Calls NotifyCommunityPreferencesChanged.
         * @function notifyCommunityPreferencesChanged
         * @memberof PlayerClient
         * @instance
         * @param {ICPlayer_CommunityPreferencesChanged_Notification} request CPlayer_CommunityPreferencesChanged_Notification message or plain object
         * @param {PlayerClient.NotifyCommunityPreferencesChangedCallback} callback Node-style callback called with the error, if any, and NoResponse
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(PlayerClient.prototype.notifyCommunityPreferencesChanged = function notifyCommunityPreferencesChanged(request, callback) {
            return this.rpcCall(notifyCommunityPreferencesChanged, $root.CPlayer_CommunityPreferencesChanged_Notification, $root.NoResponse, request, callback);
        }, "name", { value: "NotifyCommunityPreferencesChanged" });
    
        /**
         * Calls NotifyCommunityPreferencesChanged.
         * @function notifyCommunityPreferencesChanged
         * @memberof PlayerClient
         * @instance
         * @param {ICPlayer_CommunityPreferencesChanged_Notification} request CPlayer_CommunityPreferencesChanged_Notification message or plain object
         * @returns {Promise<NoResponse>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link PlayerClient#notifyPerFriendPreferencesChanged}.
         * @memberof PlayerClient
         * @typedef NotifyPerFriendPreferencesChangedCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {NoResponse} [response] NoResponse
         */
    
        /**
         * Calls NotifyPerFriendPreferencesChanged.
         * @function notifyPerFriendPreferencesChanged
         * @memberof PlayerClient
         * @instance
         * @param {ICPlayer_PerFriendPreferencesChanged_Notification} request CPlayer_PerFriendPreferencesChanged_Notification message or plain object
         * @param {PlayerClient.NotifyPerFriendPreferencesChangedCallback} callback Node-style callback called with the error, if any, and NoResponse
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(PlayerClient.prototype.notifyPerFriendPreferencesChanged = function notifyPerFriendPreferencesChanged(request, callback) {
            return this.rpcCall(notifyPerFriendPreferencesChanged, $root.CPlayer_PerFriendPreferencesChanged_Notification, $root.NoResponse, request, callback);
        }, "name", { value: "NotifyPerFriendPreferencesChanged" });
    
        /**
         * Calls NotifyPerFriendPreferencesChanged.
         * @function notifyPerFriendPreferencesChanged
         * @memberof PlayerClient
         * @instance
         * @param {ICPlayer_PerFriendPreferencesChanged_Notification} request CPlayer_PerFriendPreferencesChanged_Notification message or plain object
         * @returns {Promise<NoResponse>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link PlayerClient#notifyPrivacyPrivacySettingsChanged}.
         * @memberof PlayerClient
         * @typedef NotifyPrivacyPrivacySettingsChangedCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {NoResponse} [response] NoResponse
         */
    
        /**
         * Calls NotifyPrivacyPrivacySettingsChanged.
         * @function notifyPrivacyPrivacySettingsChanged
         * @memberof PlayerClient
         * @instance
         * @param {ICPlayer_PrivacySettingsChanged_Notification} request CPlayer_PrivacySettingsChanged_Notification message or plain object
         * @param {PlayerClient.NotifyPrivacyPrivacySettingsChangedCallback} callback Node-style callback called with the error, if any, and NoResponse
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(PlayerClient.prototype.notifyPrivacyPrivacySettingsChanged = function notifyPrivacyPrivacySettingsChanged(request, callback) {
            return this.rpcCall(notifyPrivacyPrivacySettingsChanged, $root.CPlayer_PrivacySettingsChanged_Notification, $root.NoResponse, request, callback);
        }, "name", { value: "NotifyPrivacyPrivacySettingsChanged" });
    
        /**
         * Calls NotifyPrivacyPrivacySettingsChanged.
         * @function notifyPrivacyPrivacySettingsChanged
         * @memberof PlayerClient
         * @instance
         * @param {ICPlayer_PrivacySettingsChanged_Notification} request CPlayer_PrivacySettingsChanged_Notification message or plain object
         * @returns {Promise<NoResponse>} Promise
         * @variation 2
         */
    
        return PlayerClient;
    })();
    
    /**
     * EProtoExecutionSite enum.
     * @exports EProtoExecutionSite
     * @enum {number}
     * @property {number} k_EProtoExecutionSiteUnknown=0 k_EProtoExecutionSiteUnknown value
     * @property {number} k_EProtoExecutionSiteSteamClient=2 k_EProtoExecutionSiteSteamClient value
     */
    $root.EProtoExecutionSite = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "k_EProtoExecutionSiteUnknown"] = 0;
        values[valuesById[2] = "k_EProtoExecutionSiteSteamClient"] = 2;
        return values;
    })();
    
    $root.NoResponse = (function() {
    
        /**
         * Properties of a NoResponse.
         * @exports INoResponse
         * @interface INoResponse
         */
    
        /**
         * Constructs a new NoResponse.
         * @exports NoResponse
         * @classdesc Represents a NoResponse.
         * @implements INoResponse
         * @constructor
         * @param {INoResponse=} [properties] Properties to set
         */
        function NoResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new NoResponse instance using the specified properties.
         * @function create
         * @memberof NoResponse
         * @static
         * @param {INoResponse=} [properties] Properties to set
         * @returns {NoResponse} NoResponse instance
         */
        NoResponse.create = function create(properties) {
            return new NoResponse(properties);
        };
    
        /**
         * Encodes the specified NoResponse message. Does not implicitly {@link NoResponse.verify|verify} messages.
         * @function encode
         * @memberof NoResponse
         * @static
         * @param {INoResponse} message NoResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NoResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified NoResponse message, length delimited. Does not implicitly {@link NoResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof NoResponse
         * @static
         * @param {INoResponse} message NoResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NoResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a NoResponse message from the specified reader or buffer.
         * @function decode
         * @memberof NoResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {NoResponse} NoResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NoResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.NoResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a NoResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof NoResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {NoResponse} NoResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NoResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a NoResponse message.
         * @function verify
         * @memberof NoResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        NoResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a NoResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof NoResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {NoResponse} NoResponse
         */
        NoResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.NoResponse)
                return object;
            return new $root.NoResponse();
        };
    
        /**
         * Creates a plain object from a NoResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof NoResponse
         * @static
         * @param {NoResponse} message NoResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        NoResponse.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this NoResponse to JSON.
         * @function toJSON
         * @memberof NoResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        NoResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return NoResponse;
    })();
    
    $root.google = (function() {
    
        /**
         * Namespace google.
         * @exports google
         * @namespace
         */
        var google = {};
    
        google.protobuf = (function() {
    
            /**
             * Namespace protobuf.
             * @memberof google
             * @namespace
             */
            var protobuf = {};
    
            protobuf.FileDescriptorSet = (function() {
    
                /**
                 * Properties of a FileDescriptorSet.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorSet
                 * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
                 */
    
                /**
                 * Constructs a new FileDescriptorSet.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorSet.
                 * @implements IFileDescriptorSet
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 */
                function FileDescriptorSet(properties) {
                    this.file = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorSet file.
                 * @member {Array.<google.protobuf.IFileDescriptorProto>} file
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 */
                FileDescriptorSet.prototype.file = $util.emptyArray;
    
                /**
                 * Creates a new FileDescriptorSet instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet instance
                 */
                FileDescriptorSet.create = function create(properties) {
                    return new FileDescriptorSet(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.file != null && message.file.length)
                        for (var i = 0; i < message.file.length; ++i)
                            $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.file && message.file.length))
                                message.file = [];
                            message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorSet message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorSet.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.file != null && message.hasOwnProperty("file")) {
                        if (!Array.isArray(message.file))
                            return "file: array expected";
                        for (var i = 0; i < message.file.length; ++i) {
                            var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                            if (error)
                                return "file." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 */
                FileDescriptorSet.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorSet)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorSet();
                    if (object.file) {
                        if (!Array.isArray(object.file))
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                        message.file = [];
                        for (var i = 0; i < object.file.length; ++i) {
                            if (typeof object.file[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                            message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorSet.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.file = [];
                    if (message.file && message.file.length) {
                        object.file = [];
                        for (var j = 0; j < message.file.length; ++j)
                            object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorSet to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorSet.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FileDescriptorSet;
            })();
    
            protobuf.FileDescriptorProto = (function() {
    
                /**
                 * Properties of a FileDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorProto
                 * @property {string|null} [name] FileDescriptorProto name
                 * @property {string|null} ["package"] FileDescriptorProto package
                 * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
                 * @property {Array.<number>|null} [public_dependency] FileDescriptorProto public_dependency
                 * @property {Array.<number>|null} [weak_dependency] FileDescriptorProto weak_dependency
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [message_type] FileDescriptorProto message_type
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enum_type] FileDescriptorProto enum_type
                 * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
                 * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
                 * @property {google.protobuf.ISourceCodeInfo|null} [source_code_info] FileDescriptorProto source_code_info
                 * @property {string|null} [syntax] FileDescriptorProto syntax
                 */
    
                /**
                 * Constructs a new FileDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorProto.
                 * @implements IFileDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 */
                function FileDescriptorProto(properties) {
                    this.dependency = [];
                    this.public_dependency = [];
                    this.weak_dependency = [];
                    this.message_type = [];
                    this.enum_type = [];
                    this.service = [];
                    this.extension = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.name = "";
    
                /**
                 * FileDescriptorProto package.
                 * @member {string} package
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype["package"] = "";
    
                /**
                 * FileDescriptorProto dependency.
                 * @member {Array.<string>} dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto public_dependency.
                 * @member {Array.<number>} public_dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.public_dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto weak_dependency.
                 * @member {Array.<number>} weak_dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.weak_dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto message_type.
                 * @member {Array.<google.protobuf.IDescriptorProto>} message_type
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.message_type = $util.emptyArray;
    
                /**
                 * FileDescriptorProto enum_type.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enum_type
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.enum_type = $util.emptyArray;
    
                /**
                 * FileDescriptorProto service.
                 * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.service = $util.emptyArray;
    
                /**
                 * FileDescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * FileDescriptorProto options.
                 * @member {google.protobuf.IFileOptions|null|undefined} options
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.options = null;
    
                /**
                 * FileDescriptorProto source_code_info.
                 * @member {google.protobuf.ISourceCodeInfo|null|undefined} source_code_info
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.source_code_info = null;
    
                /**
                 * FileDescriptorProto syntax.
                 * @member {string} syntax
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.syntax = "";
    
                /**
                 * Creates a new FileDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto instance
                 */
                FileDescriptorProto.create = function create(properties) {
                    return new FileDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                    if (message.dependency != null && message.dependency.length)
                        for (var i = 0; i < message.dependency.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                    if (message.message_type != null && message.message_type.length)
                        for (var i = 0; i < message.message_type.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.message_type[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.enum_type != null && message.enum_type.length)
                        for (var i = 0; i < message.enum_type.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enum_type[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.service != null && message.service.length)
                        for (var i = 0; i < message.service.length; ++i)
                            $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.source_code_info != null && Object.hasOwnProperty.call(message, "source_code_info"))
                        $root.google.protobuf.SourceCodeInfo.encode(message.source_code_info, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.public_dependency != null && message.public_dependency.length)
                        for (var i = 0; i < message.public_dependency.length; ++i)
                            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.public_dependency[i]);
                    if (message.weak_dependency != null && message.weak_dependency.length)
                        for (var i = 0; i < message.weak_dependency.length; ++i)
                            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weak_dependency[i]);
                    if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message["package"] = reader.string();
                            break;
                        case 3:
                            if (!(message.dependency && message.dependency.length))
                                message.dependency = [];
                            message.dependency.push(reader.string());
                            break;
                        case 10:
                            if (!(message.public_dependency && message.public_dependency.length))
                                message.public_dependency = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.public_dependency.push(reader.int32());
                            } else
                                message.public_dependency.push(reader.int32());
                            break;
                        case 11:
                            if (!(message.weak_dependency && message.weak_dependency.length))
                                message.weak_dependency = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.weak_dependency.push(reader.int32());
                            } else
                                message.weak_dependency.push(reader.int32());
                            break;
                        case 4:
                            if (!(message.message_type && message.message_type.length))
                                message.message_type = [];
                            message.message_type.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.enum_type && message.enum_type.length))
                                message.enum_type = [];
                            message.enum_type.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 6:
                            if (!(message.service && message.service.length))
                                message.service = [];
                            message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 7:
                            if (!(message.extension && message.extension.length))
                                message.extension = [];
                            message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 8:
                            message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                            break;
                        case 9:
                            message.source_code_info = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                            break;
                        case 12:
                            message.syntax = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        if (!$util.isString(message["package"]))
                            return "package: string expected";
                    if (message.dependency != null && message.hasOwnProperty("dependency")) {
                        if (!Array.isArray(message.dependency))
                            return "dependency: array expected";
                        for (var i = 0; i < message.dependency.length; ++i)
                            if (!$util.isString(message.dependency[i]))
                                return "dependency: string[] expected";
                    }
                    if (message.public_dependency != null && message.hasOwnProperty("public_dependency")) {
                        if (!Array.isArray(message.public_dependency))
                            return "public_dependency: array expected";
                        for (var i = 0; i < message.public_dependency.length; ++i)
                            if (!$util.isInteger(message.public_dependency[i]))
                                return "public_dependency: integer[] expected";
                    }
                    if (message.weak_dependency != null && message.hasOwnProperty("weak_dependency")) {
                        if (!Array.isArray(message.weak_dependency))
                            return "weak_dependency: array expected";
                        for (var i = 0; i < message.weak_dependency.length; ++i)
                            if (!$util.isInteger(message.weak_dependency[i]))
                                return "weak_dependency: integer[] expected";
                    }
                    if (message.message_type != null && message.hasOwnProperty("message_type")) {
                        if (!Array.isArray(message.message_type))
                            return "message_type: array expected";
                        for (var i = 0; i < message.message_type.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.message_type[i]);
                            if (error)
                                return "message_type." + error;
                        }
                    }
                    if (message.enum_type != null && message.hasOwnProperty("enum_type")) {
                        if (!Array.isArray(message.enum_type))
                            return "enum_type: array expected";
                        for (var i = 0; i < message.enum_type.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enum_type[i]);
                            if (error)
                                return "enum_type." + error;
                        }
                    }
                    if (message.service != null && message.hasOwnProperty("service")) {
                        if (!Array.isArray(message.service))
                            return "service: array expected";
                        for (var i = 0; i < message.service.length; ++i) {
                            var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                            if (error)
                                return "service." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FileOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.source_code_info != null && message.hasOwnProperty("source_code_info")) {
                        var error = $root.google.protobuf.SourceCodeInfo.verify(message.source_code_info);
                        if (error)
                            return "source_code_info." + error;
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        if (!$util.isString(message.syntax))
                            return "syntax: string expected";
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 */
                FileDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object["package"] != null)
                        message["package"] = String(object["package"]);
                    if (object.dependency) {
                        if (!Array.isArray(object.dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                        message.dependency = [];
                        for (var i = 0; i < object.dependency.length; ++i)
                            message.dependency[i] = String(object.dependency[i]);
                    }
                    if (object.public_dependency) {
                        if (!Array.isArray(object.public_dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.public_dependency: array expected");
                        message.public_dependency = [];
                        for (var i = 0; i < object.public_dependency.length; ++i)
                            message.public_dependency[i] = object.public_dependency[i] | 0;
                    }
                    if (object.weak_dependency) {
                        if (!Array.isArray(object.weak_dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.weak_dependency: array expected");
                        message.weak_dependency = [];
                        for (var i = 0; i < object.weak_dependency.length; ++i)
                            message.weak_dependency[i] = object.weak_dependency[i] | 0;
                    }
                    if (object.message_type) {
                        if (!Array.isArray(object.message_type))
                            throw TypeError(".google.protobuf.FileDescriptorProto.message_type: array expected");
                        message.message_type = [];
                        for (var i = 0; i < object.message_type.length; ++i) {
                            if (typeof object.message_type[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.message_type: object expected");
                            message.message_type[i] = $root.google.protobuf.DescriptorProto.fromObject(object.message_type[i]);
                        }
                    }
                    if (object.enum_type) {
                        if (!Array.isArray(object.enum_type))
                            throw TypeError(".google.protobuf.FileDescriptorProto.enum_type: array expected");
                        message.enum_type = [];
                        for (var i = 0; i < object.enum_type.length; ++i) {
                            if (typeof object.enum_type[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.enum_type: object expected");
                            message.enum_type[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enum_type[i]);
                        }
                    }
                    if (object.service) {
                        if (!Array.isArray(object.service))
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                        message.service = [];
                        for (var i = 0; i < object.service.length; ++i) {
                            if (typeof object.service[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                            message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                    }
                    if (object.source_code_info != null) {
                        if (typeof object.source_code_info !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.source_code_info: object expected");
                        message.source_code_info = $root.google.protobuf.SourceCodeInfo.fromObject(object.source_code_info);
                    }
                    if (object.syntax != null)
                        message.syntax = String(object.syntax);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.dependency = [];
                        object.message_type = [];
                        object.enum_type = [];
                        object.service = [];
                        object.extension = [];
                        object.public_dependency = [];
                        object.weak_dependency = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object["package"] = "";
                        object.options = null;
                        object.source_code_info = null;
                        object.syntax = "";
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        object["package"] = message["package"];
                    if (message.dependency && message.dependency.length) {
                        object.dependency = [];
                        for (var j = 0; j < message.dependency.length; ++j)
                            object.dependency[j] = message.dependency[j];
                    }
                    if (message.message_type && message.message_type.length) {
                        object.message_type = [];
                        for (var j = 0; j < message.message_type.length; ++j)
                            object.message_type[j] = $root.google.protobuf.DescriptorProto.toObject(message.message_type[j], options);
                    }
                    if (message.enum_type && message.enum_type.length) {
                        object.enum_type = [];
                        for (var j = 0; j < message.enum_type.length; ++j)
                            object.enum_type[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enum_type[j], options);
                    }
                    if (message.service && message.service.length) {
                        object.service = [];
                        for (var j = 0; j < message.service.length; ++j)
                            object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                    if (message.source_code_info != null && message.hasOwnProperty("source_code_info"))
                        object.source_code_info = $root.google.protobuf.SourceCodeInfo.toObject(message.source_code_info, options);
                    if (message.public_dependency && message.public_dependency.length) {
                        object.public_dependency = [];
                        for (var j = 0; j < message.public_dependency.length; ++j)
                            object.public_dependency[j] = message.public_dependency[j];
                    }
                    if (message.weak_dependency && message.weak_dependency.length) {
                        object.weak_dependency = [];
                        for (var j = 0; j < message.weak_dependency.length; ++j)
                            object.weak_dependency[j] = message.weak_dependency[j];
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        object.syntax = message.syntax;
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FileDescriptorProto;
            })();
    
            protobuf.DescriptorProto = (function() {
    
                /**
                 * Properties of a DescriptorProto.
                 * @memberof google.protobuf
                 * @interface IDescriptorProto
                 * @property {string|null} [name] DescriptorProto name
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [nested_type] DescriptorProto nested_type
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enum_type] DescriptorProto enum_type
                 * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extension_range] DescriptorProto extension_range
                 * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneof_decl] DescriptorProto oneof_decl
                 * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
                 * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reserved_range] DescriptorProto reserved_range
                 * @property {Array.<string>|null} [reserved_name] DescriptorProto reserved_name
                 */
    
                /**
                 * Constructs a new DescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a DescriptorProto.
                 * @implements IDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 */
                function DescriptorProto(properties) {
                    this.field = [];
                    this.extension = [];
                    this.nested_type = [];
                    this.enum_type = [];
                    this.extension_range = [];
                    this.oneof_decl = [];
                    this.reserved_range = [];
                    this.reserved_name = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.name = "";
    
                /**
                 * DescriptorProto field.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.field = $util.emptyArray;
    
                /**
                 * DescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * DescriptorProto nested_type.
                 * @member {Array.<google.protobuf.IDescriptorProto>} nested_type
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.nested_type = $util.emptyArray;
    
                /**
                 * DescriptorProto enum_type.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enum_type
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.enum_type = $util.emptyArray;
    
                /**
                 * DescriptorProto extension_range.
                 * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extension_range
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extension_range = $util.emptyArray;
    
                /**
                 * DescriptorProto oneof_decl.
                 * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneof_decl
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.oneof_decl = $util.emptyArray;
    
                /**
                 * DescriptorProto options.
                 * @member {google.protobuf.IMessageOptions|null|undefined} options
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.options = null;
    
                /**
                 * DescriptorProto reserved_range.
                 * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reserved_range
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reserved_range = $util.emptyArray;
    
                /**
                 * DescriptorProto reserved_name.
                 * @member {Array.<string>} reserved_name
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reserved_name = $util.emptyArray;
    
                /**
                 * Creates a new DescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto instance
                 */
                DescriptorProto.create = function create(properties) {
                    return new DescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.field != null && message.field.length)
                        for (var i = 0; i < message.field.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.nested_type != null && message.nested_type.length)
                        for (var i = 0; i < message.nested_type.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.nested_type[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.enum_type != null && message.enum_type.length)
                        for (var i = 0; i < message.enum_type.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enum_type[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.extension_range != null && message.extension_range.length)
                        for (var i = 0; i < message.extension_range.length; ++i)
                            $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extension_range[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.oneof_decl != null && message.oneof_decl.length)
                        for (var i = 0; i < message.oneof_decl.length; ++i)
                            $root.google.protobuf.OneofDescriptorProto.encode(message.oneof_decl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.reserved_range != null && message.reserved_range.length)
                        for (var i = 0; i < message.reserved_range.length; ++i)
                            $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reserved_range[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.reserved_name != null && message.reserved_name.length)
                        for (var i = 0; i < message.reserved_name.length; ++i)
                            writer.uint32(/* id 10, wireType 2 =*/82).string(message.reserved_name[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.field && message.field.length))
                                message.field = [];
                            message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 6:
                            if (!(message.extension && message.extension.length))
                                message.extension = [];
                            message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            if (!(message.nested_type && message.nested_type.length))
                                message.nested_type = [];
                            message.nested_type.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 4:
                            if (!(message.enum_type && message.enum_type.length))
                                message.enum_type = [];
                            message.enum_type.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.extension_range && message.extension_range.length))
                                message.extension_range = [];
                            message.extension_range.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                            break;
                        case 8:
                            if (!(message.oneof_decl && message.oneof_decl.length))
                                message.oneof_decl = [];
                            message.oneof_decl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 7:
                            message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                            break;
                        case 9:
                            if (!(message.reserved_range && message.reserved_range.length))
                                message.reserved_range = [];
                            message.reserved_range.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                            break;
                        case 10:
                            if (!(message.reserved_name && message.reserved_name.length))
                                message.reserved_name = [];
                            message.reserved_name.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.field != null && message.hasOwnProperty("field")) {
                        if (!Array.isArray(message.field))
                            return "field: array expected";
                        for (var i = 0; i < message.field.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                            if (error)
                                return "field." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.nested_type != null && message.hasOwnProperty("nested_type")) {
                        if (!Array.isArray(message.nested_type))
                            return "nested_type: array expected";
                        for (var i = 0; i < message.nested_type.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.nested_type[i]);
                            if (error)
                                return "nested_type." + error;
                        }
                    }
                    if (message.enum_type != null && message.hasOwnProperty("enum_type")) {
                        if (!Array.isArray(message.enum_type))
                            return "enum_type: array expected";
                        for (var i = 0; i < message.enum_type.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enum_type[i]);
                            if (error)
                                return "enum_type." + error;
                        }
                    }
                    if (message.extension_range != null && message.hasOwnProperty("extension_range")) {
                        if (!Array.isArray(message.extension_range))
                            return "extension_range: array expected";
                        for (var i = 0; i < message.extension_range.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extension_range[i]);
                            if (error)
                                return "extension_range." + error;
                        }
                    }
                    if (message.oneof_decl != null && message.hasOwnProperty("oneof_decl")) {
                        if (!Array.isArray(message.oneof_decl))
                            return "oneof_decl: array expected";
                        for (var i = 0; i < message.oneof_decl.length; ++i) {
                            var error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneof_decl[i]);
                            if (error)
                                return "oneof_decl." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MessageOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reserved_range != null && message.hasOwnProperty("reserved_range")) {
                        if (!Array.isArray(message.reserved_range))
                            return "reserved_range: array expected";
                        for (var i = 0; i < message.reserved_range.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reserved_range[i]);
                            if (error)
                                return "reserved_range." + error;
                        }
                    }
                    if (message.reserved_name != null && message.hasOwnProperty("reserved_name")) {
                        if (!Array.isArray(message.reserved_name))
                            return "reserved_name: array expected";
                        for (var i = 0; i < message.reserved_name.length; ++i)
                            if (!$util.isString(message.reserved_name[i]))
                                return "reserved_name: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 */
                DescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.DescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.field) {
                        if (!Array.isArray(object.field))
                            throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                        message.field = [];
                        for (var i = 0; i < object.field.length; ++i) {
                            if (typeof object.field[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                            message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.nested_type) {
                        if (!Array.isArray(object.nested_type))
                            throw TypeError(".google.protobuf.DescriptorProto.nested_type: array expected");
                        message.nested_type = [];
                        for (var i = 0; i < object.nested_type.length; ++i) {
                            if (typeof object.nested_type[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.nested_type: object expected");
                            message.nested_type[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nested_type[i]);
                        }
                    }
                    if (object.enum_type) {
                        if (!Array.isArray(object.enum_type))
                            throw TypeError(".google.protobuf.DescriptorProto.enum_type: array expected");
                        message.enum_type = [];
                        for (var i = 0; i < object.enum_type.length; ++i) {
                            if (typeof object.enum_type[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.enum_type: object expected");
                            message.enum_type[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enum_type[i]);
                        }
                    }
                    if (object.extension_range) {
                        if (!Array.isArray(object.extension_range))
                            throw TypeError(".google.protobuf.DescriptorProto.extension_range: array expected");
                        message.extension_range = [];
                        for (var i = 0; i < object.extension_range.length; ++i) {
                            if (typeof object.extension_range[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extension_range: object expected");
                            message.extension_range[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extension_range[i]);
                        }
                    }
                    if (object.oneof_decl) {
                        if (!Array.isArray(object.oneof_decl))
                            throw TypeError(".google.protobuf.DescriptorProto.oneof_decl: array expected");
                        message.oneof_decl = [];
                        for (var i = 0; i < object.oneof_decl.length; ++i) {
                            if (typeof object.oneof_decl[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.oneof_decl: object expected");
                            message.oneof_decl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneof_decl[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                    }
                    if (object.reserved_range) {
                        if (!Array.isArray(object.reserved_range))
                            throw TypeError(".google.protobuf.DescriptorProto.reserved_range: array expected");
                        message.reserved_range = [];
                        for (var i = 0; i < object.reserved_range.length; ++i) {
                            if (typeof object.reserved_range[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.reserved_range: object expected");
                            message.reserved_range[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reserved_range[i]);
                        }
                    }
                    if (object.reserved_name) {
                        if (!Array.isArray(object.reserved_name))
                            throw TypeError(".google.protobuf.DescriptorProto.reserved_name: array expected");
                        message.reserved_name = [];
                        for (var i = 0; i < object.reserved_name.length; ++i)
                            message.reserved_name[i] = String(object.reserved_name[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.DescriptorProto} message DescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.field = [];
                        object.nested_type = [];
                        object.enum_type = [];
                        object.extension_range = [];
                        object.extension = [];
                        object.oneof_decl = [];
                        object.reserved_range = [];
                        object.reserved_name = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.field && message.field.length) {
                        object.field = [];
                        for (var j = 0; j < message.field.length; ++j)
                            object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                    }
                    if (message.nested_type && message.nested_type.length) {
                        object.nested_type = [];
                        for (var j = 0; j < message.nested_type.length; ++j)
                            object.nested_type[j] = $root.google.protobuf.DescriptorProto.toObject(message.nested_type[j], options);
                    }
                    if (message.enum_type && message.enum_type.length) {
                        object.enum_type = [];
                        for (var j = 0; j < message.enum_type.length; ++j)
                            object.enum_type[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enum_type[j], options);
                    }
                    if (message.extension_range && message.extension_range.length) {
                        object.extension_range = [];
                        for (var j = 0; j < message.extension_range.length; ++j)
                            object.extension_range[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extension_range[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                    if (message.oneof_decl && message.oneof_decl.length) {
                        object.oneof_decl = [];
                        for (var j = 0; j < message.oneof_decl.length; ++j)
                            object.oneof_decl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneof_decl[j], options);
                    }
                    if (message.reserved_range && message.reserved_range.length) {
                        object.reserved_range = [];
                        for (var j = 0; j < message.reserved_range.length; ++j)
                            object.reserved_range[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reserved_range[j], options);
                    }
                    if (message.reserved_name && message.reserved_name.length) {
                        object.reserved_name = [];
                        for (var j = 0; j < message.reserved_name.length; ++j)
                            object.reserved_name[j] = message.reserved_name[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this DescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                DescriptorProto.ExtensionRange = (function() {
    
                    /**
                     * Properties of an ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IExtensionRange
                     * @property {number|null} [start] ExtensionRange start
                     * @property {number|null} [end] ExtensionRange end
                     */
    
                    /**
                     * Constructs a new ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents an ExtensionRange.
                     * @implements IExtensionRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     */
                    function ExtensionRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ExtensionRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.start = 0;
    
                    /**
                     * ExtensionRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.end = 0;
    
                    /**
                     * Creates a new ExtensionRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange instance
                     */
                    ExtensionRange.create = function create(properties) {
                        return new ExtensionRange(properties);
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.start = reader.int32();
                                break;
                            case 2:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an ExtensionRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ExtensionRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     */
                    ExtensionRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ExtensionRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this ExtensionRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ExtensionRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ExtensionRange;
                })();
    
                DescriptorProto.ReservedRange = (function() {
    
                    /**
                     * Properties of a ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IReservedRange
                     * @property {number|null} [start] ReservedRange start
                     * @property {number|null} [end] ReservedRange end
                     */
    
                    /**
                     * Constructs a new ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents a ReservedRange.
                     * @implements IReservedRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     */
                    function ReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.start = 0;
    
                    /**
                     * ReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new ReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange instance
                     */
                    ReservedRange.create = function create(properties) {
                        return new ReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.start = reader.int32();
                                break;
                            case 2:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     */
                    ReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this ReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ReservedRange;
                })();
    
                return DescriptorProto;
            })();
    
            protobuf.FieldDescriptorProto = (function() {
    
                /**
                 * Properties of a FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFieldDescriptorProto
                 * @property {string|null} [name] FieldDescriptorProto name
                 * @property {number|null} [number] FieldDescriptorProto number
                 * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
                 * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
                 * @property {string|null} [type_name] FieldDescriptorProto type_name
                 * @property {string|null} [extendee] FieldDescriptorProto extendee
                 * @property {string|null} [default_value] FieldDescriptorProto default_value
                 * @property {number|null} [oneof_index] FieldDescriptorProto oneof_index
                 * @property {string|null} [json_name] FieldDescriptorProto json_name
                 * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
                 */
    
                /**
                 * Constructs a new FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldDescriptorProto.
                 * @implements IFieldDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 */
                function FieldDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.name = "";
    
                /**
                 * FieldDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.number = 0;
    
                /**
                 * FieldDescriptorProto label.
                 * @member {google.protobuf.FieldDescriptorProto.Label} label
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.label = 1;
    
                /**
                 * FieldDescriptorProto type.
                 * @member {google.protobuf.FieldDescriptorProto.Type} type
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.type = 1;
    
                /**
                 * FieldDescriptorProto type_name.
                 * @member {string} type_name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.type_name = "";
    
                /**
                 * FieldDescriptorProto extendee.
                 * @member {string} extendee
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.extendee = "";
    
                /**
                 * FieldDescriptorProto default_value.
                 * @member {string} default_value
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.default_value = "";
    
                /**
                 * FieldDescriptorProto oneof_index.
                 * @member {number} oneof_index
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.oneof_index = 0;
    
                /**
                 * FieldDescriptorProto json_name.
                 * @member {string} json_name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.json_name = "";
    
                /**
                 * FieldDescriptorProto options.
                 * @member {google.protobuf.IFieldOptions|null|undefined} options
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new FieldDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto instance
                 */
                FieldDescriptorProto.create = function create(properties) {
                    return new FieldDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                    if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                    if (message.type_name != null && Object.hasOwnProperty.call(message, "type_name"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.type_name);
                    if (message.default_value != null && Object.hasOwnProperty.call(message, "default_value"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.default_value);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.oneof_index != null && Object.hasOwnProperty.call(message, "oneof_index"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneof_index);
                    if (message.json_name != null && Object.hasOwnProperty.call(message, "json_name"))
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.json_name);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 3:
                            message.number = reader.int32();
                            break;
                        case 4:
                            message.label = reader.int32();
                            break;
                        case 5:
                            message.type = reader.int32();
                            break;
                        case 6:
                            message.type_name = reader.string();
                            break;
                        case 2:
                            message.extendee = reader.string();
                            break;
                        case 7:
                            message.default_value = reader.string();
                            break;
                        case 9:
                            message.oneof_index = reader.int32();
                            break;
                        case 10:
                            message.json_name = reader.string();
                            break;
                        case 8:
                            message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.label != null && message.hasOwnProperty("label"))
                        switch (message.label) {
                        default:
                            return "label: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                            break;
                        }
                    if (message.type_name != null && message.hasOwnProperty("type_name"))
                        if (!$util.isString(message.type_name))
                            return "type_name: string expected";
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        if (!$util.isString(message.extendee))
                            return "extendee: string expected";
                    if (message.default_value != null && message.hasOwnProperty("default_value"))
                        if (!$util.isString(message.default_value))
                            return "default_value: string expected";
                    if (message.oneof_index != null && message.hasOwnProperty("oneof_index"))
                        if (!$util.isInteger(message.oneof_index))
                            return "oneof_index: integer expected";
                    if (message.json_name != null && message.hasOwnProperty("json_name"))
                        if (!$util.isString(message.json_name))
                            return "json_name: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FieldOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 */
                FieldDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FieldDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    switch (object.label) {
                    case "LABEL_OPTIONAL":
                    case 1:
                        message.label = 1;
                        break;
                    case "LABEL_REQUIRED":
                    case 2:
                        message.label = 2;
                        break;
                    case "LABEL_REPEATED":
                    case 3:
                        message.label = 3;
                        break;
                    }
                    switch (object.type) {
                    case "TYPE_DOUBLE":
                    case 1:
                        message.type = 1;
                        break;
                    case "TYPE_FLOAT":
                    case 2:
                        message.type = 2;
                        break;
                    case "TYPE_INT64":
                    case 3:
                        message.type = 3;
                        break;
                    case "TYPE_UINT64":
                    case 4:
                        message.type = 4;
                        break;
                    case "TYPE_INT32":
                    case 5:
                        message.type = 5;
                        break;
                    case "TYPE_FIXED64":
                    case 6:
                        message.type = 6;
                        break;
                    case "TYPE_FIXED32":
                    case 7:
                        message.type = 7;
                        break;
                    case "TYPE_BOOL":
                    case 8:
                        message.type = 8;
                        break;
                    case "TYPE_STRING":
                    case 9:
                        message.type = 9;
                        break;
                    case "TYPE_GROUP":
                    case 10:
                        message.type = 10;
                        break;
                    case "TYPE_MESSAGE":
                    case 11:
                        message.type = 11;
                        break;
                    case "TYPE_BYTES":
                    case 12:
                        message.type = 12;
                        break;
                    case "TYPE_UINT32":
                    case 13:
                        message.type = 13;
                        break;
                    case "TYPE_ENUM":
                    case 14:
                        message.type = 14;
                        break;
                    case "TYPE_SFIXED32":
                    case 15:
                        message.type = 15;
                        break;
                    case "TYPE_SFIXED64":
                    case 16:
                        message.type = 16;
                        break;
                    case "TYPE_SINT32":
                    case 17:
                        message.type = 17;
                        break;
                    case "TYPE_SINT64":
                    case 18:
                        message.type = 18;
                        break;
                    }
                    if (object.type_name != null)
                        message.type_name = String(object.type_name);
                    if (object.extendee != null)
                        message.extendee = String(object.extendee);
                    if (object.default_value != null)
                        message.default_value = String(object.default_value);
                    if (object.oneof_index != null)
                        message.oneof_index = object.oneof_index | 0;
                    if (object.json_name != null)
                        message.json_name = String(object.json_name);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.extendee = "";
                        object.number = 0;
                        object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                        object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                        object.type_name = "";
                        object.default_value = "";
                        object.options = null;
                        object.oneof_index = 0;
                        object.json_name = "";
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        object.extendee = message.extendee;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.label != null && message.hasOwnProperty("label"))
                        object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                    if (message.type_name != null && message.hasOwnProperty("type_name"))
                        object.type_name = message.type_name;
                    if (message.default_value != null && message.hasOwnProperty("default_value"))
                        object.default_value = message.default_value;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                    if (message.oneof_index != null && message.hasOwnProperty("oneof_index"))
                        object.oneof_index = message.oneof_index;
                    if (message.json_name != null && message.hasOwnProperty("json_name"))
                        object.json_name = message.json_name;
                    return object;
                };
    
                /**
                 * Converts this FieldDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Type enum.
                 * @name google.protobuf.FieldDescriptorProto.Type
                 * @enum {number}
                 * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
                 * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
                 * @property {number} TYPE_INT64=3 TYPE_INT64 value
                 * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
                 * @property {number} TYPE_INT32=5 TYPE_INT32 value
                 * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
                 * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
                 * @property {number} TYPE_BOOL=8 TYPE_BOOL value
                 * @property {number} TYPE_STRING=9 TYPE_STRING value
                 * @property {number} TYPE_GROUP=10 TYPE_GROUP value
                 * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
                 * @property {number} TYPE_BYTES=12 TYPE_BYTES value
                 * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
                 * @property {number} TYPE_ENUM=14 TYPE_ENUM value
                 * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
                 * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
                 * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
                 * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
                 */
                FieldDescriptorProto.Type = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                    values[valuesById[2] = "TYPE_FLOAT"] = 2;
                    values[valuesById[3] = "TYPE_INT64"] = 3;
                    values[valuesById[4] = "TYPE_UINT64"] = 4;
                    values[valuesById[5] = "TYPE_INT32"] = 5;
                    values[valuesById[6] = "TYPE_FIXED64"] = 6;
                    values[valuesById[7] = "TYPE_FIXED32"] = 7;
                    values[valuesById[8] = "TYPE_BOOL"] = 8;
                    values[valuesById[9] = "TYPE_STRING"] = 9;
                    values[valuesById[10] = "TYPE_GROUP"] = 10;
                    values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                    values[valuesById[12] = "TYPE_BYTES"] = 12;
                    values[valuesById[13] = "TYPE_UINT32"] = 13;
                    values[valuesById[14] = "TYPE_ENUM"] = 14;
                    values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                    values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                    values[valuesById[17] = "TYPE_SINT32"] = 17;
                    values[valuesById[18] = "TYPE_SINT64"] = 18;
                    return values;
                })();
    
                /**
                 * Label enum.
                 * @name google.protobuf.FieldDescriptorProto.Label
                 * @enum {number}
                 * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
                 * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
                 * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
                 */
                FieldDescriptorProto.Label = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                    values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                    values[valuesById[3] = "LABEL_REPEATED"] = 3;
                    return values;
                })();
    
                return FieldDescriptorProto;
            })();
    
            protobuf.OneofDescriptorProto = (function() {
    
                /**
                 * Properties of an OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IOneofDescriptorProto
                 * @property {string|null} [name] OneofDescriptorProto name
                 * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
                 */
    
                /**
                 * Constructs a new OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofDescriptorProto.
                 * @implements IOneofDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 */
                function OneofDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.name = "";
    
                /**
                 * OneofDescriptorProto options.
                 * @member {google.protobuf.IOneofOptions|null|undefined} options
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new OneofDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto instance
                 */
                OneofDescriptorProto.create = function create(properties) {
                    return new OneofDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.OneofOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 */
                OneofDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.OneofDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this OneofDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return OneofDescriptorProto;
            })();
    
            protobuf.EnumDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumDescriptorProto
                 * @property {string|null} [name] EnumDescriptorProto name
                 * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
                 * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
                 */
    
                /**
                 * Constructs a new EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumDescriptorProto.
                 * @implements IEnumDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 */
                function EnumDescriptorProto(properties) {
                    this.value = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.name = "";
    
                /**
                 * EnumDescriptorProto value.
                 * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.value = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto options.
                 * @member {google.protobuf.IEnumOptions|null|undefined} options
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new EnumDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto instance
                 */
                EnumDescriptorProto.create = function create(properties) {
                    return new EnumDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.value != null && message.value.length)
                        for (var i = 0; i < message.value.length; ++i)
                            $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.value && message.value.length))
                                message.value = [];
                            message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.value != null && message.hasOwnProperty("value")) {
                        if (!Array.isArray(message.value))
                            return "value: array expected";
                        for (var i = 0; i < message.value.length; ++i) {
                            var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                            if (error)
                                return "value." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 */
                EnumDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.value) {
                        if (!Array.isArray(object.value))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                        message.value = [];
                        for (var i = 0; i < object.value.length; ++i) {
                            if (typeof object.value[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                            message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.value = [];
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.value && message.value.length) {
                        object.value = [];
                        for (var j = 0; j < message.value.length; ++j)
                            object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this EnumDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumDescriptorProto;
            })();
    
            protobuf.EnumValueDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumValueDescriptorProto
                 * @property {string|null} [name] EnumValueDescriptorProto name
                 * @property {number|null} [number] EnumValueDescriptorProto number
                 * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
                 */
    
                /**
                 * Constructs a new EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueDescriptorProto.
                 * @implements IEnumValueDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 */
                function EnumValueDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.name = "";
    
                /**
                 * EnumValueDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.number = 0;
    
                /**
                 * EnumValueDescriptorProto options.
                 * @member {google.protobuf.IEnumValueOptions|null|undefined} options
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new EnumValueDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto instance
                 */
                EnumValueDescriptorProto.create = function create(properties) {
                    return new EnumValueDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.number = reader.int32();
                            break;
                        case 3:
                            message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 */
                EnumValueDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumValueDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.number = 0;
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this EnumValueDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumValueDescriptorProto;
            })();
    
            protobuf.ServiceDescriptorProto = (function() {
    
                /**
                 * Properties of a ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IServiceDescriptorProto
                 * @property {string|null} [name] ServiceDescriptorProto name
                 * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
                 * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
                 */
    
                /**
                 * Constructs a new ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceDescriptorProto.
                 * @implements IServiceDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 */
                function ServiceDescriptorProto(properties) {
                    this.method = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.name = "";
    
                /**
                 * ServiceDescriptorProto method.
                 * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.method = $util.emptyArray;
    
                /**
                 * ServiceDescriptorProto options.
                 * @member {google.protobuf.IServiceOptions|null|undefined} options
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new ServiceDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto instance
                 */
                ServiceDescriptorProto.create = function create(properties) {
                    return new ServiceDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.method != null && message.method.length)
                        for (var i = 0; i < message.method.length; ++i)
                            $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.method && message.method.length))
                                message.method = [];
                            message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.method != null && message.hasOwnProperty("method")) {
                        if (!Array.isArray(message.method))
                            return "method: array expected";
                        for (var i = 0; i < message.method.length; ++i) {
                            var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                            if (error)
                                return "method." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 */
                ServiceDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.ServiceDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.method) {
                        if (!Array.isArray(object.method))
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                        message.method = [];
                        for (var i = 0; i < object.method.length; ++i) {
                            if (typeof object.method[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                            message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.method = [];
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.method && message.method.length) {
                        object.method = [];
                        for (var j = 0; j < message.method.length; ++j)
                            object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this ServiceDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ServiceDescriptorProto;
            })();
    
            protobuf.MethodDescriptorProto = (function() {
    
                /**
                 * Properties of a MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IMethodDescriptorProto
                 * @property {string|null} [name] MethodDescriptorProto name
                 * @property {string|null} [input_type] MethodDescriptorProto input_type
                 * @property {string|null} [output_type] MethodDescriptorProto output_type
                 * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
                 * @property {boolean|null} [client_streaming] MethodDescriptorProto client_streaming
                 * @property {boolean|null} [server_streaming] MethodDescriptorProto server_streaming
                 */
    
                /**
                 * Constructs a new MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodDescriptorProto.
                 * @implements IMethodDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 */
                function MethodDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.name = "";
    
                /**
                 * MethodDescriptorProto input_type.
                 * @member {string} input_type
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.input_type = "";
    
                /**
                 * MethodDescriptorProto output_type.
                 * @member {string} output_type
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.output_type = "";
    
                /**
                 * MethodDescriptorProto options.
                 * @member {google.protobuf.IMethodOptions|null|undefined} options
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.options = null;
    
                /**
                 * MethodDescriptorProto client_streaming.
                 * @member {boolean} client_streaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.client_streaming = false;
    
                /**
                 * MethodDescriptorProto server_streaming.
                 * @member {boolean} server_streaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.server_streaming = false;
    
                /**
                 * Creates a new MethodDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto instance
                 */
                MethodDescriptorProto.create = function create(properties) {
                    return new MethodDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.input_type != null && Object.hasOwnProperty.call(message, "input_type"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.input_type);
                    if (message.output_type != null && Object.hasOwnProperty.call(message, "output_type"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.output_type);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.client_streaming != null && Object.hasOwnProperty.call(message, "client_streaming"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.client_streaming);
                    if (message.server_streaming != null && Object.hasOwnProperty.call(message, "server_streaming"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.server_streaming);
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.input_type = reader.string();
                            break;
                        case 3:
                            message.output_type = reader.string();
                            break;
                        case 4:
                            message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.client_streaming = reader.bool();
                            break;
                        case 6:
                            message.server_streaming = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.input_type != null && message.hasOwnProperty("input_type"))
                        if (!$util.isString(message.input_type))
                            return "input_type: string expected";
                    if (message.output_type != null && message.hasOwnProperty("output_type"))
                        if (!$util.isString(message.output_type))
                            return "output_type: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MethodOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.client_streaming != null && message.hasOwnProperty("client_streaming"))
                        if (typeof message.client_streaming !== "boolean")
                            return "client_streaming: boolean expected";
                    if (message.server_streaming != null && message.hasOwnProperty("server_streaming"))
                        if (typeof message.server_streaming !== "boolean")
                            return "server_streaming: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 */
                MethodDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.MethodDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.input_type != null)
                        message.input_type = String(object.input_type);
                    if (object.output_type != null)
                        message.output_type = String(object.output_type);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                    }
                    if (object.client_streaming != null)
                        message.client_streaming = Boolean(object.client_streaming);
                    if (object.server_streaming != null)
                        message.server_streaming = Boolean(object.server_streaming);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.input_type = "";
                        object.output_type = "";
                        object.options = null;
                        object.client_streaming = false;
                        object.server_streaming = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.input_type != null && message.hasOwnProperty("input_type"))
                        object.input_type = message.input_type;
                    if (message.output_type != null && message.hasOwnProperty("output_type"))
                        object.output_type = message.output_type;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                    if (message.client_streaming != null && message.hasOwnProperty("client_streaming"))
                        object.client_streaming = message.client_streaming;
                    if (message.server_streaming != null && message.hasOwnProperty("server_streaming"))
                        object.server_streaming = message.server_streaming;
                    return object;
                };
    
                /**
                 * Converts this MethodDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MethodDescriptorProto;
            })();
    
            protobuf.FileOptions = (function() {
    
                /**
                 * Properties of a FileOptions.
                 * @memberof google.protobuf
                 * @interface IFileOptions
                 * @property {string|null} [java_package] FileOptions java_package
                 * @property {string|null} [java_outer_classname] FileOptions java_outer_classname
                 * @property {boolean|null} [java_multiple_files] FileOptions java_multiple_files
                 * @property {boolean|null} [java_generate_equals_and_hash] FileOptions java_generate_equals_and_hash
                 * @property {boolean|null} [java_string_check_utf8] FileOptions java_string_check_utf8
                 * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimize_for] FileOptions optimize_for
                 * @property {string|null} [go_package] FileOptions go_package
                 * @property {boolean|null} [cc_generic_services] FileOptions cc_generic_services
                 * @property {boolean|null} [java_generic_services] FileOptions java_generic_services
                 * @property {boolean|null} [py_generic_services] FileOptions py_generic_services
                 * @property {boolean|null} [deprecated] FileOptions deprecated
                 * @property {boolean|null} [cc_enable_arenas] FileOptions cc_enable_arenas
                 * @property {string|null} [objc_class_prefix] FileOptions objc_class_prefix
                 * @property {string|null} [csharp_namespace] FileOptions csharp_namespace
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] FileOptions uninterpreted_option
                 */
    
                /**
                 * Constructs a new FileOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileOptions.
                 * @implements IFileOptions
                 * @constructor
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 */
                function FileOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileOptions java_package.
                 * @member {string} java_package
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_package = "";
    
                /**
                 * FileOptions java_outer_classname.
                 * @member {string} java_outer_classname
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_outer_classname = "";
    
                /**
                 * FileOptions java_multiple_files.
                 * @member {boolean} java_multiple_files
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_multiple_files = false;
    
                /**
                 * FileOptions java_generate_equals_and_hash.
                 * @member {boolean} java_generate_equals_and_hash
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_generate_equals_and_hash = false;
    
                /**
                 * FileOptions java_string_check_utf8.
                 * @member {boolean} java_string_check_utf8
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_string_check_utf8 = false;
    
                /**
                 * FileOptions optimize_for.
                 * @member {google.protobuf.FileOptions.OptimizeMode} optimize_for
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.optimize_for = 1;
    
                /**
                 * FileOptions go_package.
                 * @member {string} go_package
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.go_package = "";
    
                /**
                 * FileOptions cc_generic_services.
                 * @member {boolean} cc_generic_services
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.cc_generic_services = false;
    
                /**
                 * FileOptions java_generic_services.
                 * @member {boolean} java_generic_services
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_generic_services = false;
    
                /**
                 * FileOptions py_generic_services.
                 * @member {boolean} py_generic_services
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.py_generic_services = false;
    
                /**
                 * FileOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.deprecated = false;
    
                /**
                 * FileOptions cc_enable_arenas.
                 * @member {boolean} cc_enable_arenas
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.cc_enable_arenas = false;
    
                /**
                 * FileOptions objc_class_prefix.
                 * @member {string} objc_class_prefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.objc_class_prefix = "";
    
                /**
                 * FileOptions csharp_namespace.
                 * @member {string} csharp_namespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.csharp_namespace = "";
    
                /**
                 * FileOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * Creates a new FileOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FileOptions} FileOptions instance
                 */
                FileOptions.create = function create(properties) {
                    return new FileOptions(properties);
                };
    
                /**
                 * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.java_package != null && Object.hasOwnProperty.call(message, "java_package"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.java_package);
                    if (message.java_outer_classname != null && Object.hasOwnProperty.call(message, "java_outer_classname"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.java_outer_classname);
                    if (message.optimize_for != null && Object.hasOwnProperty.call(message, "optimize_for"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimize_for);
                    if (message.java_multiple_files != null && Object.hasOwnProperty.call(message, "java_multiple_files"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.java_multiple_files);
                    if (message.go_package != null && Object.hasOwnProperty.call(message, "go_package"))
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.go_package);
                    if (message.cc_generic_services != null && Object.hasOwnProperty.call(message, "cc_generic_services"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.cc_generic_services);
                    if (message.java_generic_services != null && Object.hasOwnProperty.call(message, "java_generic_services"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.java_generic_services);
                    if (message.py_generic_services != null && Object.hasOwnProperty.call(message, "py_generic_services"))
                        writer.uint32(/* id 18, wireType 0 =*/144).bool(message.py_generic_services);
                    if (message.java_generate_equals_and_hash != null && Object.hasOwnProperty.call(message, "java_generate_equals_and_hash"))
                        writer.uint32(/* id 20, wireType 0 =*/160).bool(message.java_generate_equals_and_hash);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                    if (message.java_string_check_utf8 != null && Object.hasOwnProperty.call(message, "java_string_check_utf8"))
                        writer.uint32(/* id 27, wireType 0 =*/216).bool(message.java_string_check_utf8);
                    if (message.cc_enable_arenas != null && Object.hasOwnProperty.call(message, "cc_enable_arenas"))
                        writer.uint32(/* id 31, wireType 0 =*/248).bool(message.cc_enable_arenas);
                    if (message.objc_class_prefix != null && Object.hasOwnProperty.call(message, "objc_class_prefix"))
                        writer.uint32(/* id 36, wireType 2 =*/290).string(message.objc_class_prefix);
                    if (message.csharp_namespace != null && Object.hasOwnProperty.call(message, "csharp_namespace"))
                        writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharp_namespace);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.java_package = reader.string();
                            break;
                        case 8:
                            message.java_outer_classname = reader.string();
                            break;
                        case 10:
                            message.java_multiple_files = reader.bool();
                            break;
                        case 20:
                            message.java_generate_equals_and_hash = reader.bool();
                            break;
                        case 27:
                            message.java_string_check_utf8 = reader.bool();
                            break;
                        case 9:
                            message.optimize_for = reader.int32();
                            break;
                        case 11:
                            message.go_package = reader.string();
                            break;
                        case 16:
                            message.cc_generic_services = reader.bool();
                            break;
                        case 17:
                            message.java_generic_services = reader.bool();
                            break;
                        case 18:
                            message.py_generic_services = reader.bool();
                            break;
                        case 23:
                            message.deprecated = reader.bool();
                            break;
                        case 31:
                            message.cc_enable_arenas = reader.bool();
                            break;
                        case 36:
                            message.objc_class_prefix = reader.string();
                            break;
                        case 37:
                            message.csharp_namespace = reader.string();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileOptions message.
                 * @function verify
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.java_package != null && message.hasOwnProperty("java_package"))
                        if (!$util.isString(message.java_package))
                            return "java_package: string expected";
                    if (message.java_outer_classname != null && message.hasOwnProperty("java_outer_classname"))
                        if (!$util.isString(message.java_outer_classname))
                            return "java_outer_classname: string expected";
                    if (message.java_multiple_files != null && message.hasOwnProperty("java_multiple_files"))
                        if (typeof message.java_multiple_files !== "boolean")
                            return "java_multiple_files: boolean expected";
                    if (message.java_generate_equals_and_hash != null && message.hasOwnProperty("java_generate_equals_and_hash"))
                        if (typeof message.java_generate_equals_and_hash !== "boolean")
                            return "java_generate_equals_and_hash: boolean expected";
                    if (message.java_string_check_utf8 != null && message.hasOwnProperty("java_string_check_utf8"))
                        if (typeof message.java_string_check_utf8 !== "boolean")
                            return "java_string_check_utf8: boolean expected";
                    if (message.optimize_for != null && message.hasOwnProperty("optimize_for"))
                        switch (message.optimize_for) {
                        default:
                            return "optimize_for: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.go_package != null && message.hasOwnProperty("go_package"))
                        if (!$util.isString(message.go_package))
                            return "go_package: string expected";
                    if (message.cc_generic_services != null && message.hasOwnProperty("cc_generic_services"))
                        if (typeof message.cc_generic_services !== "boolean")
                            return "cc_generic_services: boolean expected";
                    if (message.java_generic_services != null && message.hasOwnProperty("java_generic_services"))
                        if (typeof message.java_generic_services !== "boolean")
                            return "java_generic_services: boolean expected";
                    if (message.py_generic_services != null && message.hasOwnProperty("py_generic_services"))
                        if (typeof message.py_generic_services !== "boolean")
                            return "py_generic_services: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.cc_enable_arenas != null && message.hasOwnProperty("cc_enable_arenas"))
                        if (typeof message.cc_enable_arenas !== "boolean")
                            return "cc_enable_arenas: boolean expected";
                    if (message.objc_class_prefix != null && message.hasOwnProperty("objc_class_prefix"))
                        if (!$util.isString(message.objc_class_prefix))
                            return "objc_class_prefix: string expected";
                    if (message.csharp_namespace != null && message.hasOwnProperty("csharp_namespace"))
                        if (!$util.isString(message.csharp_namespace))
                            return "csharp_namespace: string expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileOptions} FileOptions
                 */
                FileOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileOptions)
                        return object;
                    var message = new $root.google.protobuf.FileOptions();
                    if (object.java_package != null)
                        message.java_package = String(object.java_package);
                    if (object.java_outer_classname != null)
                        message.java_outer_classname = String(object.java_outer_classname);
                    if (object.java_multiple_files != null)
                        message.java_multiple_files = Boolean(object.java_multiple_files);
                    if (object.java_generate_equals_and_hash != null)
                        message.java_generate_equals_and_hash = Boolean(object.java_generate_equals_and_hash);
                    if (object.java_string_check_utf8 != null)
                        message.java_string_check_utf8 = Boolean(object.java_string_check_utf8);
                    switch (object.optimize_for) {
                    case "SPEED":
                    case 1:
                        message.optimize_for = 1;
                        break;
                    case "CODE_SIZE":
                    case 2:
                        message.optimize_for = 2;
                        break;
                    case "LITE_RUNTIME":
                    case 3:
                        message.optimize_for = 3;
                        break;
                    }
                    if (object.go_package != null)
                        message.go_package = String(object.go_package);
                    if (object.cc_generic_services != null)
                        message.cc_generic_services = Boolean(object.cc_generic_services);
                    if (object.java_generic_services != null)
                        message.java_generic_services = Boolean(object.java_generic_services);
                    if (object.py_generic_services != null)
                        message.py_generic_services = Boolean(object.py_generic_services);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.cc_enable_arenas != null)
                        message.cc_enable_arenas = Boolean(object.cc_enable_arenas);
                    if (object.objc_class_prefix != null)
                        message.objc_class_prefix = String(object.objc_class_prefix);
                    if (object.csharp_namespace != null)
                        message.csharp_namespace = String(object.csharp_namespace);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.FileOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.FileOptions} message FileOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.java_package = "";
                        object.java_outer_classname = "";
                        object.optimize_for = options.enums === String ? "SPEED" : 1;
                        object.java_multiple_files = false;
                        object.go_package = "";
                        object.cc_generic_services = false;
                        object.java_generic_services = false;
                        object.py_generic_services = false;
                        object.java_generate_equals_and_hash = false;
                        object.deprecated = false;
                        object.java_string_check_utf8 = false;
                        object.cc_enable_arenas = false;
                        object.objc_class_prefix = "";
                        object.csharp_namespace = "";
                    }
                    if (message.java_package != null && message.hasOwnProperty("java_package"))
                        object.java_package = message.java_package;
                    if (message.java_outer_classname != null && message.hasOwnProperty("java_outer_classname"))
                        object.java_outer_classname = message.java_outer_classname;
                    if (message.optimize_for != null && message.hasOwnProperty("optimize_for"))
                        object.optimize_for = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimize_for] : message.optimize_for;
                    if (message.java_multiple_files != null && message.hasOwnProperty("java_multiple_files"))
                        object.java_multiple_files = message.java_multiple_files;
                    if (message.go_package != null && message.hasOwnProperty("go_package"))
                        object.go_package = message.go_package;
                    if (message.cc_generic_services != null && message.hasOwnProperty("cc_generic_services"))
                        object.cc_generic_services = message.cc_generic_services;
                    if (message.java_generic_services != null && message.hasOwnProperty("java_generic_services"))
                        object.java_generic_services = message.java_generic_services;
                    if (message.py_generic_services != null && message.hasOwnProperty("py_generic_services"))
                        object.py_generic_services = message.py_generic_services;
                    if (message.java_generate_equals_and_hash != null && message.hasOwnProperty("java_generate_equals_and_hash"))
                        object.java_generate_equals_and_hash = message.java_generate_equals_and_hash;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.java_string_check_utf8 != null && message.hasOwnProperty("java_string_check_utf8"))
                        object.java_string_check_utf8 = message.java_string_check_utf8;
                    if (message.cc_enable_arenas != null && message.hasOwnProperty("cc_enable_arenas"))
                        object.cc_enable_arenas = message.cc_enable_arenas;
                    if (message.objc_class_prefix != null && message.hasOwnProperty("objc_class_prefix"))
                        object.objc_class_prefix = message.objc_class_prefix;
                    if (message.csharp_namespace != null && message.hasOwnProperty("csharp_namespace"))
                        object.csharp_namespace = message.csharp_namespace;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * OptimizeMode enum.
                 * @name google.protobuf.FileOptions.OptimizeMode
                 * @enum {number}
                 * @property {number} SPEED=1 SPEED value
                 * @property {number} CODE_SIZE=2 CODE_SIZE value
                 * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
                 */
                FileOptions.OptimizeMode = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "SPEED"] = 1;
                    values[valuesById[2] = "CODE_SIZE"] = 2;
                    values[valuesById[3] = "LITE_RUNTIME"] = 3;
                    return values;
                })();
    
                return FileOptions;
            })();
    
            protobuf.MessageOptions = (function() {
    
                /**
                 * Properties of a MessageOptions.
                 * @memberof google.protobuf
                 * @interface IMessageOptions
                 * @property {boolean|null} [message_set_wire_format] MessageOptions message_set_wire_format
                 * @property {boolean|null} [no_standard_descriptor_accessor] MessageOptions no_standard_descriptor_accessor
                 * @property {boolean|null} [deprecated] MessageOptions deprecated
                 * @property {boolean|null} [map_entry] MessageOptions map_entry
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] MessageOptions uninterpreted_option
                 */
    
                /**
                 * Constructs a new MessageOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MessageOptions.
                 * @implements IMessageOptions
                 * @constructor
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 */
                function MessageOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MessageOptions message_set_wire_format.
                 * @member {boolean} message_set_wire_format
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.message_set_wire_format = false;
    
                /**
                 * MessageOptions no_standard_descriptor_accessor.
                 * @member {boolean} no_standard_descriptor_accessor
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.no_standard_descriptor_accessor = false;
    
                /**
                 * MessageOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.deprecated = false;
    
                /**
                 * MessageOptions map_entry.
                 * @member {boolean} map_entry
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.map_entry = false;
    
                /**
                 * MessageOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * Creates a new MessageOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MessageOptions} MessageOptions instance
                 */
                MessageOptions.create = function create(properties) {
                    return new MessageOptions(properties);
                };
    
                /**
                 * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.message_set_wire_format != null && Object.hasOwnProperty.call(message, "message_set_wire_format"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.message_set_wire_format);
                    if (message.no_standard_descriptor_accessor != null && Object.hasOwnProperty.call(message, "no_standard_descriptor_accessor"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.no_standard_descriptor_accessor);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.map_entry != null && Object.hasOwnProperty.call(message, "map_entry"))
                        writer.uint32(/* id 7, wireType 0 =*/56).bool(message.map_entry);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.message_set_wire_format = reader.bool();
                            break;
                        case 2:
                            message.no_standard_descriptor_accessor = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 7:
                            message.map_entry = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MessageOptions message.
                 * @function verify
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MessageOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.message_set_wire_format != null && message.hasOwnProperty("message_set_wire_format"))
                        if (typeof message.message_set_wire_format !== "boolean")
                            return "message_set_wire_format: boolean expected";
                    if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty("no_standard_descriptor_accessor"))
                        if (typeof message.no_standard_descriptor_accessor !== "boolean")
                            return "no_standard_descriptor_accessor: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.map_entry != null && message.hasOwnProperty("map_entry"))
                        if (typeof message.map_entry !== "boolean")
                            return "map_entry: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 */
                MessageOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MessageOptions)
                        return object;
                    var message = new $root.google.protobuf.MessageOptions();
                    if (object.message_set_wire_format != null)
                        message.message_set_wire_format = Boolean(object.message_set_wire_format);
                    if (object.no_standard_descriptor_accessor != null)
                        message.no_standard_descriptor_accessor = Boolean(object.no_standard_descriptor_accessor);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.map_entry != null)
                        message.map_entry = Boolean(object.map_entry);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.MessageOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.MessageOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.MessageOptions} message MessageOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MessageOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.message_set_wire_format = false;
                        object.no_standard_descriptor_accessor = false;
                        object.deprecated = false;
                        object.map_entry = false;
                    }
                    if (message.message_set_wire_format != null && message.hasOwnProperty("message_set_wire_format"))
                        object.message_set_wire_format = message.message_set_wire_format;
                    if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty("no_standard_descriptor_accessor"))
                        object.no_standard_descriptor_accessor = message.no_standard_descriptor_accessor;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.map_entry != null && message.hasOwnProperty("map_entry"))
                        object.map_entry = message.map_entry;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this MessageOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MessageOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MessageOptions;
            })();
    
            protobuf.FieldOptions = (function() {
    
                /**
                 * Properties of a FieldOptions.
                 * @memberof google.protobuf
                 * @interface IFieldOptions
                 * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
                 * @property {boolean|null} [packed] FieldOptions packed
                 * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
                 * @property {boolean|null} [lazy] FieldOptions lazy
                 * @property {boolean|null} [deprecated] FieldOptions deprecated
                 * @property {boolean|null} [weak] FieldOptions weak
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] FieldOptions uninterpreted_option
                 * @property {string|null} [".description"] FieldOptions .description
                 */
    
                /**
                 * Constructs a new FieldOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldOptions.
                 * @implements IFieldOptions
                 * @constructor
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 */
                function FieldOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldOptions ctype.
                 * @member {google.protobuf.FieldOptions.CType} ctype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.ctype = 0;
    
                /**
                 * FieldOptions packed.
                 * @member {boolean} packed
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.packed = false;
    
                /**
                 * FieldOptions jstype.
                 * @member {google.protobuf.FieldOptions.JSType} jstype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.jstype = 0;
    
                /**
                 * FieldOptions lazy.
                 * @member {boolean} lazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.lazy = false;
    
                /**
                 * FieldOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.deprecated = false;
    
                /**
                 * FieldOptions weak.
                 * @member {boolean} weak
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.weak = false;
    
                /**
                 * FieldOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * FieldOptions .description.
                 * @member {string} .description
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".description"] = "";
    
                /**
                 * Creates a new FieldOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FieldOptions} FieldOptions instance
                 */
                FieldOptions.create = function create(properties) {
                    return new FieldOptions(properties);
                };
    
                /**
                 * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                    if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.lazy != null && Object.hasOwnProperty.call(message, "lazy"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                    if (message.jstype != null && Object.hasOwnProperty.call(message, "jstype"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);
                    if (message.weak != null && Object.hasOwnProperty.call(message, "weak"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".description"] != null && Object.hasOwnProperty.call(message, ".description"))
                        writer.uint32(/* id 50000, wireType 2 =*/400002).string(message[".description"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.ctype = reader.int32();
                            break;
                        case 2:
                            message.packed = reader.bool();
                            break;
                        case 6:
                            message.jstype = reader.int32();
                            break;
                        case 5:
                            message.lazy = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 10:
                            message.weak = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 50000:
                            message[".description"] = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldOptions message.
                 * @function verify
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        switch (message.ctype) {
                        default:
                            return "ctype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        if (typeof message.packed !== "boolean")
                            return "packed: boolean expected";
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        switch (message.jstype) {
                        default:
                            return "jstype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        if (typeof message.lazy !== "boolean")
                            return "lazy: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        if (typeof message.weak !== "boolean")
                            return "weak: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".description"] != null && message.hasOwnProperty(".description"))
                        if (!$util.isString(message[".description"]))
                            return ".description: string expected";
                    return null;
                };
    
                /**
                 * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 */
                FieldOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldOptions)
                        return object;
                    var message = new $root.google.protobuf.FieldOptions();
                    switch (object.ctype) {
                    case "STRING":
                    case 0:
                        message.ctype = 0;
                        break;
                    case "CORD":
                    case 1:
                        message.ctype = 1;
                        break;
                    case "STRING_PIECE":
                    case 2:
                        message.ctype = 2;
                        break;
                    }
                    if (object.packed != null)
                        message.packed = Boolean(object.packed);
                    switch (object.jstype) {
                    case "JS_NORMAL":
                    case 0:
                        message.jstype = 0;
                        break;
                    case "JS_STRING":
                    case 1:
                        message.jstype = 1;
                        break;
                    case "JS_NUMBER":
                    case 2:
                        message.jstype = 2;
                        break;
                    }
                    if (object.lazy != null)
                        message.lazy = Boolean(object.lazy);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.weak != null)
                        message.weak = Boolean(object.weak);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.FieldOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.FieldOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".description"] != null)
                        message[".description"] = String(object[".description"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.FieldOptions} message FieldOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.ctype = options.enums === String ? "STRING" : 0;
                        object.packed = false;
                        object.deprecated = false;
                        object.lazy = false;
                        object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                        object.weak = false;
                        object[".description"] = "";
                    }
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        object.packed = message.packed;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        object.lazy = message.lazy;
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        object.weak = message.weak;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".description"] != null && message.hasOwnProperty(".description"))
                        object[".description"] = message[".description"];
                    return object;
                };
    
                /**
                 * Converts this FieldOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * CType enum.
                 * @name google.protobuf.FieldOptions.CType
                 * @enum {number}
                 * @property {number} STRING=0 STRING value
                 * @property {number} CORD=1 CORD value
                 * @property {number} STRING_PIECE=2 STRING_PIECE value
                 */
                FieldOptions.CType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STRING"] = 0;
                    values[valuesById[1] = "CORD"] = 1;
                    values[valuesById[2] = "STRING_PIECE"] = 2;
                    return values;
                })();
    
                /**
                 * JSType enum.
                 * @name google.protobuf.FieldOptions.JSType
                 * @enum {number}
                 * @property {number} JS_NORMAL=0 JS_NORMAL value
                 * @property {number} JS_STRING=1 JS_STRING value
                 * @property {number} JS_NUMBER=2 JS_NUMBER value
                 */
                FieldOptions.JSType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "JS_NORMAL"] = 0;
                    values[valuesById[1] = "JS_STRING"] = 1;
                    values[valuesById[2] = "JS_NUMBER"] = 2;
                    return values;
                })();
    
                return FieldOptions;
            })();
    
            protobuf.OneofOptions = (function() {
    
                /**
                 * Properties of an OneofOptions.
                 * @memberof google.protobuf
                 * @interface IOneofOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] OneofOptions uninterpreted_option
                 */
    
                /**
                 * Constructs a new OneofOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofOptions.
                 * @implements IOneofOptions
                 * @constructor
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 */
                function OneofOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 */
                OneofOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * Creates a new OneofOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 * @returns {google.protobuf.OneofOptions} OneofOptions instance
                 */
                OneofOptions.create = function create(properties) {
                    return new OneofOptions(properties);
                };
    
                /**
                 * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofOptions message.
                 * @function verify
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 */
                OneofOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofOptions)
                        return object;
                    var message = new $root.google.protobuf.OneofOptions();
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.OneofOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.OneofOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.OneofOptions} message OneofOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this OneofOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return OneofOptions;
            })();
    
            protobuf.EnumOptions = (function() {
    
                /**
                 * Properties of an EnumOptions.
                 * @memberof google.protobuf
                 * @interface IEnumOptions
                 * @property {boolean|null} [allow_alias] EnumOptions allow_alias
                 * @property {boolean|null} [deprecated] EnumOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] EnumOptions uninterpreted_option
                 * @property {string|null} [".enum_description"] EnumOptions .enum_description
                 */
    
                /**
                 * Constructs a new EnumOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumOptions.
                 * @implements IEnumOptions
                 * @constructor
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 */
                function EnumOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumOptions allow_alias.
                 * @member {boolean} allow_alias
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.allow_alias = false;
    
                /**
                 * EnumOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.deprecated = false;
    
                /**
                 * EnumOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * EnumOptions .enum_description.
                 * @member {string} .enum_description
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype[".enum_description"] = "";
    
                /**
                 * Creates a new EnumOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumOptions} EnumOptions instance
                 */
                EnumOptions.create = function create(properties) {
                    return new EnumOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.allow_alias != null && Object.hasOwnProperty.call(message, "allow_alias"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allow_alias);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".enum_description"] != null && Object.hasOwnProperty.call(message, ".enum_description"))
                        writer.uint32(/* id 50000, wireType 2 =*/400002).string(message[".enum_description"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.allow_alias = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 50000:
                            message[".enum_description"] = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.allow_alias != null && message.hasOwnProperty("allow_alias"))
                        if (typeof message.allow_alias !== "boolean")
                            return "allow_alias: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".enum_description"] != null && message.hasOwnProperty(".enum_description"))
                        if (!$util.isString(message[".enum_description"]))
                            return ".enum_description: string expected";
                    return null;
                };
    
                /**
                 * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 */
                EnumOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumOptions();
                    if (object.allow_alias != null)
                        message.allow_alias = Boolean(object.allow_alias);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.EnumOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.EnumOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".enum_description"] != null)
                        message[".enum_description"] = String(object[".enum_description"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.EnumOptions} message EnumOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.allow_alias = false;
                        object.deprecated = false;
                        object[".enum_description"] = "";
                    }
                    if (message.allow_alias != null && message.hasOwnProperty("allow_alias"))
                        object.allow_alias = message.allow_alias;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".enum_description"] != null && message.hasOwnProperty(".enum_description"))
                        object[".enum_description"] = message[".enum_description"];
                    return object;
                };
    
                /**
                 * Converts this EnumOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumOptions;
            })();
    
            protobuf.EnumValueOptions = (function() {
    
                /**
                 * Properties of an EnumValueOptions.
                 * @memberof google.protobuf
                 * @interface IEnumValueOptions
                 * @property {boolean|null} [deprecated] EnumValueOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] EnumValueOptions uninterpreted_option
                 * @property {string|null} [".enum_value_description"] EnumValueOptions .enum_value_description
                 */
    
                /**
                 * Constructs a new EnumValueOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueOptions.
                 * @implements IEnumValueOptions
                 * @constructor
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 */
                function EnumValueOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.deprecated = false;
    
                /**
                 * EnumValueOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * EnumValueOptions .enum_value_description.
                 * @member {string} .enum_value_description
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype[".enum_value_description"] = "";
    
                /**
                 * Creates a new EnumValueOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions instance
                 */
                EnumValueOptions.create = function create(properties) {
                    return new EnumValueOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".enum_value_description"] != null && Object.hasOwnProperty.call(message, ".enum_value_description"))
                        writer.uint32(/* id 50000, wireType 2 =*/400002).string(message[".enum_value_description"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 50000:
                            message[".enum_value_description"] = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".enum_value_description"] != null && message.hasOwnProperty(".enum_value_description"))
                        if (!$util.isString(message[".enum_value_description"]))
                            return ".enum_value_description: string expected";
                    return null;
                };
    
                /**
                 * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 */
                EnumValueOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumValueOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.EnumValueOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".enum_value_description"] != null)
                        message[".enum_value_description"] = String(object[".enum_value_description"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object[".enum_value_description"] = "";
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".enum_value_description"] != null && message.hasOwnProperty(".enum_value_description"))
                        object[".enum_value_description"] = message[".enum_value_description"];
                    return object;
                };
    
                /**
                 * Converts this EnumValueOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumValueOptions;
            })();
    
            protobuf.ServiceOptions = (function() {
    
                /**
                 * Properties of a ServiceOptions.
                 * @memberof google.protobuf
                 * @interface IServiceOptions
                 * @property {boolean|null} [deprecated] ServiceOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] ServiceOptions uninterpreted_option
                 * @property {string|null} [".service_description"] ServiceOptions .service_description
                 * @property {EProtoExecutionSite|null} [".service_execution_site"] ServiceOptions .service_execution_site
                 */
    
                /**
                 * Constructs a new ServiceOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceOptions.
                 * @implements IServiceOptions
                 * @constructor
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 */
                function ServiceOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.deprecated = false;
    
                /**
                 * ServiceOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * ServiceOptions .service_description.
                 * @member {string} .service_description
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".service_description"] = "";
    
                /**
                 * ServiceOptions .service_execution_site.
                 * @member {EProtoExecutionSite} .service_execution_site
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".service_execution_site"] = 0;
    
                /**
                 * Creates a new ServiceOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions instance
                 */
                ServiceOptions.create = function create(properties) {
                    return new ServiceOptions(properties);
                };
    
                /**
                 * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".service_description"] != null && Object.hasOwnProperty.call(message, ".service_description"))
                        writer.uint32(/* id 50000, wireType 2 =*/400002).string(message[".service_description"]);
                    if (message[".service_execution_site"] != null && Object.hasOwnProperty.call(message, ".service_execution_site"))
                        writer.uint32(/* id 50008, wireType 0 =*/400064).int32(message[".service_execution_site"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 50000:
                            message[".service_description"] = reader.string();
                            break;
                        case 50008:
                            message[".service_execution_site"] = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceOptions message.
                 * @function verify
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".service_description"] != null && message.hasOwnProperty(".service_description"))
                        if (!$util.isString(message[".service_description"]))
                            return ".service_description: string expected";
                    if (message[".service_execution_site"] != null && message.hasOwnProperty(".service_execution_site"))
                        switch (message[".service_execution_site"]) {
                        default:
                            return ".service_execution_site: enum value expected";
                        case 0:
                        case 2:
                            break;
                        }
                    return null;
                };
    
                /**
                 * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 */
                ServiceOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceOptions)
                        return object;
                    var message = new $root.google.protobuf.ServiceOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".service_description"] != null)
                        message[".service_description"] = String(object[".service_description"]);
                    switch (object[".service_execution_site"]) {
                    case "k_EProtoExecutionSiteUnknown":
                    case 0:
                        message[".service_execution_site"] = 0;
                        break;
                    case "k_EProtoExecutionSiteSteamClient":
                    case 2:
                        message[".service_execution_site"] = 2;
                        break;
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.ServiceOptions} message ServiceOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object[".service_description"] = "";
                        object[".service_execution_site"] = options.enums === String ? "k_EProtoExecutionSiteUnknown" : 0;
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".service_description"] != null && message.hasOwnProperty(".service_description"))
                        object[".service_description"] = message[".service_description"];
                    if (message[".service_execution_site"] != null && message.hasOwnProperty(".service_execution_site"))
                        object[".service_execution_site"] = options.enums === String ? $root.EProtoExecutionSite[message[".service_execution_site"]] : message[".service_execution_site"];
                    return object;
                };
    
                /**
                 * Converts this ServiceOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ServiceOptions;
            })();
    
            protobuf.MethodOptions = (function() {
    
                /**
                 * Properties of a MethodOptions.
                 * @memberof google.protobuf
                 * @interface IMethodOptions
                 * @property {boolean|null} [deprecated] MethodOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] MethodOptions uninterpreted_option
                 * @property {string|null} [".method_description"] MethodOptions .method_description
                 */
    
                /**
                 * Constructs a new MethodOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodOptions.
                 * @implements IMethodOptions
                 * @constructor
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 */
                function MethodOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.deprecated = false;
    
                /**
                 * MethodOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * MethodOptions .method_description.
                 * @member {string} .method_description
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".method_description"] = "";
    
                /**
                 * Creates a new MethodOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MethodOptions} MethodOptions instance
                 */
                MethodOptions.create = function create(properties) {
                    return new MethodOptions(properties);
                };
    
                /**
                 * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".method_description"] != null && Object.hasOwnProperty.call(message, ".method_description"))
                        writer.uint32(/* id 50000, wireType 2 =*/400002).string(message[".method_description"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 50000:
                            message[".method_description"] = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodOptions message.
                 * @function verify
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".method_description"] != null && message.hasOwnProperty(".method_description"))
                        if (!$util.isString(message[".method_description"]))
                            return ".method_description: string expected";
                    return null;
                };
    
                /**
                 * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 */
                MethodOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodOptions)
                        return object;
                    var message = new $root.google.protobuf.MethodOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.MethodOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.MethodOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".method_description"] != null)
                        message[".method_description"] = String(object[".method_description"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.MethodOptions} message MethodOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object[".method_description"] = "";
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".method_description"] != null && message.hasOwnProperty(".method_description"))
                        object[".method_description"] = message[".method_description"];
                    return object;
                };
    
                /**
                 * Converts this MethodOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MethodOptions;
            })();
    
            protobuf.UninterpretedOption = (function() {
    
                /**
                 * Properties of an UninterpretedOption.
                 * @memberof google.protobuf
                 * @interface IUninterpretedOption
                 * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
                 * @property {string|null} [identifier_value] UninterpretedOption identifier_value
                 * @property {number|Long|null} [positive_int_value] UninterpretedOption positive_int_value
                 * @property {number|Long|null} [negative_int_value] UninterpretedOption negative_int_value
                 * @property {number|null} [double_value] UninterpretedOption double_value
                 * @property {Uint8Array|null} [string_value] UninterpretedOption string_value
                 * @property {string|null} [aggregate_value] UninterpretedOption aggregate_value
                 */
    
                /**
                 * Constructs a new UninterpretedOption.
                 * @memberof google.protobuf
                 * @classdesc Represents an UninterpretedOption.
                 * @implements IUninterpretedOption
                 * @constructor
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 */
                function UninterpretedOption(properties) {
                    this.name = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UninterpretedOption name.
                 * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.name = $util.emptyArray;
    
                /**
                 * UninterpretedOption identifier_value.
                 * @member {string} identifier_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.identifier_value = "";
    
                /**
                 * UninterpretedOption positive_int_value.
                 * @member {number|Long} positive_int_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.positive_int_value = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * UninterpretedOption negative_int_value.
                 * @member {number|Long} negative_int_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.negative_int_value = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * UninterpretedOption double_value.
                 * @member {number} double_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.double_value = 0;
    
                /**
                 * UninterpretedOption string_value.
                 * @member {Uint8Array} string_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.string_value = $util.newBuffer([]);
    
                /**
                 * UninterpretedOption aggregate_value.
                 * @member {string} aggregate_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.aggregate_value = "";
    
                /**
                 * Creates a new UninterpretedOption instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption instance
                 */
                UninterpretedOption.create = function create(properties) {
                    return new UninterpretedOption(properties);
                };
    
                /**
                 * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.name.length)
                        for (var i = 0; i < message.name.length; ++i)
                            $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.identifier_value != null && Object.hasOwnProperty.call(message, "identifier_value"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifier_value);
                    if (message.positive_int_value != null && Object.hasOwnProperty.call(message, "positive_int_value"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positive_int_value);
                    if (message.negative_int_value != null && Object.hasOwnProperty.call(message, "negative_int_value"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negative_int_value);
                    if (message.double_value != null && Object.hasOwnProperty.call(message, "double_value"))
                        writer.uint32(/* id 6, wireType 1 =*/49).double(message.double_value);
                    if (message.string_value != null && Object.hasOwnProperty.call(message, "string_value"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.string_value);
                    if (message.aggregate_value != null && Object.hasOwnProperty.call(message, "aggregate_value"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregate_value);
                    return writer;
                };
    
                /**
                 * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            if (!(message.name && message.name.length))
                                message.name = [];
                            message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.identifier_value = reader.string();
                            break;
                        case 4:
                            message.positive_int_value = reader.uint64();
                            break;
                        case 5:
                            message.negative_int_value = reader.int64();
                            break;
                        case 6:
                            message.double_value = reader.double();
                            break;
                        case 7:
                            message.string_value = reader.bytes();
                            break;
                        case 8:
                            message.aggregate_value = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an UninterpretedOption message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UninterpretedOption.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name")) {
                        if (!Array.isArray(message.name))
                            return "name: array expected";
                        for (var i = 0; i < message.name.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                            if (error)
                                return "name." + error;
                        }
                    }
                    if (message.identifier_value != null && message.hasOwnProperty("identifier_value"))
                        if (!$util.isString(message.identifier_value))
                            return "identifier_value: string expected";
                    if (message.positive_int_value != null && message.hasOwnProperty("positive_int_value"))
                        if (!$util.isInteger(message.positive_int_value) && !(message.positive_int_value && $util.isInteger(message.positive_int_value.low) && $util.isInteger(message.positive_int_value.high)))
                            return "positive_int_value: integer|Long expected";
                    if (message.negative_int_value != null && message.hasOwnProperty("negative_int_value"))
                        if (!$util.isInteger(message.negative_int_value) && !(message.negative_int_value && $util.isInteger(message.negative_int_value.low) && $util.isInteger(message.negative_int_value.high)))
                            return "negative_int_value: integer|Long expected";
                    if (message.double_value != null && message.hasOwnProperty("double_value"))
                        if (typeof message.double_value !== "number")
                            return "double_value: number expected";
                    if (message.string_value != null && message.hasOwnProperty("string_value"))
                        if (!(message.string_value && typeof message.string_value.length === "number" || $util.isString(message.string_value)))
                            return "string_value: buffer expected";
                    if (message.aggregate_value != null && message.hasOwnProperty("aggregate_value"))
                        if (!$util.isString(message.aggregate_value))
                            return "aggregate_value: string expected";
                    return null;
                };
    
                /**
                 * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 */
                UninterpretedOption.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption)
                        return object;
                    var message = new $root.google.protobuf.UninterpretedOption();
                    if (object.name) {
                        if (!Array.isArray(object.name))
                            throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                        message.name = [];
                        for (var i = 0; i < object.name.length; ++i) {
                            if (typeof object.name[i] !== "object")
                                throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                            message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                        }
                    }
                    if (object.identifier_value != null)
                        message.identifier_value = String(object.identifier_value);
                    if (object.positive_int_value != null)
                        if ($util.Long)
                            (message.positive_int_value = $util.Long.fromValue(object.positive_int_value)).unsigned = true;
                        else if (typeof object.positive_int_value === "string")
                            message.positive_int_value = parseInt(object.positive_int_value, 10);
                        else if (typeof object.positive_int_value === "number")
                            message.positive_int_value = object.positive_int_value;
                        else if (typeof object.positive_int_value === "object")
                            message.positive_int_value = new $util.LongBits(object.positive_int_value.low >>> 0, object.positive_int_value.high >>> 0).toNumber(true);
                    if (object.negative_int_value != null)
                        if ($util.Long)
                            (message.negative_int_value = $util.Long.fromValue(object.negative_int_value)).unsigned = false;
                        else if (typeof object.negative_int_value === "string")
                            message.negative_int_value = parseInt(object.negative_int_value, 10);
                        else if (typeof object.negative_int_value === "number")
                            message.negative_int_value = object.negative_int_value;
                        else if (typeof object.negative_int_value === "object")
                            message.negative_int_value = new $util.LongBits(object.negative_int_value.low >>> 0, object.negative_int_value.high >>> 0).toNumber();
                    if (object.double_value != null)
                        message.double_value = Number(object.double_value);
                    if (object.string_value != null)
                        if (typeof object.string_value === "string")
                            $util.base64.decode(object.string_value, message.string_value = $util.newBuffer($util.base64.length(object.string_value)), 0);
                        else if (object.string_value.length)
                            message.string_value = object.string_value;
                    if (object.aggregate_value != null)
                        message.aggregate_value = String(object.aggregate_value);
                    return message;
                };
    
                /**
                 * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UninterpretedOption.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.name = [];
                    if (options.defaults) {
                        object.identifier_value = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.positive_int_value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.positive_int_value = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.negative_int_value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.negative_int_value = options.longs === String ? "0" : 0;
                        object.double_value = 0;
                        if (options.bytes === String)
                            object.string_value = "";
                        else {
                            object.string_value = [];
                            if (options.bytes !== Array)
                                object.string_value = $util.newBuffer(object.string_value);
                        }
                        object.aggregate_value = "";
                    }
                    if (message.name && message.name.length) {
                        object.name = [];
                        for (var j = 0; j < message.name.length; ++j)
                            object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                    }
                    if (message.identifier_value != null && message.hasOwnProperty("identifier_value"))
                        object.identifier_value = message.identifier_value;
                    if (message.positive_int_value != null && message.hasOwnProperty("positive_int_value"))
                        if (typeof message.positive_int_value === "number")
                            object.positive_int_value = options.longs === String ? String(message.positive_int_value) : message.positive_int_value;
                        else
                            object.positive_int_value = options.longs === String ? $util.Long.prototype.toString.call(message.positive_int_value) : options.longs === Number ? new $util.LongBits(message.positive_int_value.low >>> 0, message.positive_int_value.high >>> 0).toNumber(true) : message.positive_int_value;
                    if (message.negative_int_value != null && message.hasOwnProperty("negative_int_value"))
                        if (typeof message.negative_int_value === "number")
                            object.negative_int_value = options.longs === String ? String(message.negative_int_value) : message.negative_int_value;
                        else
                            object.negative_int_value = options.longs === String ? $util.Long.prototype.toString.call(message.negative_int_value) : options.longs === Number ? new $util.LongBits(message.negative_int_value.low >>> 0, message.negative_int_value.high >>> 0).toNumber() : message.negative_int_value;
                    if (message.double_value != null && message.hasOwnProperty("double_value"))
                        object.double_value = options.json && !isFinite(message.double_value) ? String(message.double_value) : message.double_value;
                    if (message.string_value != null && message.hasOwnProperty("string_value"))
                        object.string_value = options.bytes === String ? $util.base64.encode(message.string_value, 0, message.string_value.length) : options.bytes === Array ? Array.prototype.slice.call(message.string_value) : message.string_value;
                    if (message.aggregate_value != null && message.hasOwnProperty("aggregate_value"))
                        object.aggregate_value = message.aggregate_value;
                    return object;
                };
    
                /**
                 * Converts this UninterpretedOption to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UninterpretedOption.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                UninterpretedOption.NamePart = (function() {
    
                    /**
                     * Properties of a NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @interface INamePart
                     * @property {string} name_part NamePart name_part
                     * @property {boolean} is_extension NamePart is_extension
                     */
    
                    /**
                     * Constructs a new NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @classdesc Represents a NamePart.
                     * @implements INamePart
                     * @constructor
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     */
                    function NamePart(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NamePart name_part.
                     * @member {string} name_part
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.name_part = "";
    
                    /**
                     * NamePart is_extension.
                     * @member {boolean} is_extension
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.is_extension = false;
    
                    /**
                     * Creates a new NamePart instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart instance
                     */
                    NamePart.create = function create(properties) {
                        return new NamePart(properties);
                    };
    
                    /**
                     * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name_part);
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.is_extension);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name_part = reader.string();
                                break;
                            case 2:
                                message.is_extension = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        if (!message.hasOwnProperty("name_part"))
                            throw $util.ProtocolError("missing required 'name_part'", { instance: message });
                        if (!message.hasOwnProperty("is_extension"))
                            throw $util.ProtocolError("missing required 'is_extension'", { instance: message });
                        return message;
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NamePart message.
                     * @function verify
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NamePart.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (!$util.isString(message.name_part))
                            return "name_part: string expected";
                        if (typeof message.is_extension !== "boolean")
                            return "is_extension: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     */
                    NamePart.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                            return object;
                        var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        if (object.name_part != null)
                            message.name_part = String(object.name_part);
                        if (object.is_extension != null)
                            message.is_extension = Boolean(object.is_extension);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NamePart.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name_part = "";
                            object.is_extension = false;
                        }
                        if (message.name_part != null && message.hasOwnProperty("name_part"))
                            object.name_part = message.name_part;
                        if (message.is_extension != null && message.hasOwnProperty("is_extension"))
                            object.is_extension = message.is_extension;
                        return object;
                    };
    
                    /**
                     * Converts this NamePart to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NamePart.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return NamePart;
                })();
    
                return UninterpretedOption;
            })();
    
            protobuf.SourceCodeInfo = (function() {
    
                /**
                 * Properties of a SourceCodeInfo.
                 * @memberof google.protobuf
                 * @interface ISourceCodeInfo
                 * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
                 */
    
                /**
                 * Constructs a new SourceCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a SourceCodeInfo.
                 * @implements ISourceCodeInfo
                 * @constructor
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 */
                function SourceCodeInfo(properties) {
                    this.location = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SourceCodeInfo location.
                 * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 */
                SourceCodeInfo.prototype.location = $util.emptyArray;
    
                /**
                 * Creates a new SourceCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo instance
                 */
                SourceCodeInfo.create = function create(properties) {
                    return new SourceCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.location != null && message.location.length)
                        for (var i = 0; i < message.location.length; ++i)
                            $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.location && message.location.length))
                                message.location = [];
                            message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SourceCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SourceCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.location != null && message.hasOwnProperty("location")) {
                        if (!Array.isArray(message.location))
                            return "location: array expected";
                        for (var i = 0; i < message.location.length; ++i) {
                            var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                            if (error)
                                return "location." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 */
                SourceCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.SourceCodeInfo();
                    if (object.location) {
                        if (!Array.isArray(object.location))
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                        message.location = [];
                        for (var i = 0; i < object.location.length; ++i) {
                            if (typeof object.location[i] !== "object")
                                throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                            message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SourceCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.location = [];
                    if (message.location && message.location.length) {
                        object.location = [];
                        for (var j = 0; j < message.location.length; ++j)
                            object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this SourceCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SourceCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                SourceCodeInfo.Location = (function() {
    
                    /**
                     * Properties of a Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @interface ILocation
                     * @property {Array.<number>|null} [path] Location path
                     * @property {Array.<number>|null} [span] Location span
                     * @property {string|null} [leading_comments] Location leading_comments
                     * @property {string|null} [trailing_comments] Location trailing_comments
                     * @property {Array.<string>|null} [leading_detached_comments] Location leading_detached_comments
                     */
    
                    /**
                     * Constructs a new Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @classdesc Represents a Location.
                     * @implements ILocation
                     * @constructor
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     */
                    function Location(properties) {
                        this.path = [];
                        this.span = [];
                        this.leading_detached_comments = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Location path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.path = $util.emptyArray;
    
                    /**
                     * Location span.
                     * @member {Array.<number>} span
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.span = $util.emptyArray;
    
                    /**
                     * Location leading_comments.
                     * @member {string} leading_comments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leading_comments = "";
    
                    /**
                     * Location trailing_comments.
                     * @member {string} trailing_comments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.trailing_comments = "";
    
                    /**
                     * Location leading_detached_comments.
                     * @member {Array.<string>} leading_detached_comments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leading_detached_comments = $util.emptyArray;
    
                    /**
                     * Creates a new Location instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location instance
                     */
                    Location.create = function create(properties) {
                        return new Location(properties);
                    };
    
                    /**
                     * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.span != null && message.span.length) {
                            writer.uint32(/* id 2, wireType 2 =*/18).fork();
                            for (var i = 0; i < message.span.length; ++i)
                                writer.int32(message.span[i]);
                            writer.ldelim();
                        }
                        if (message.leading_comments != null && Object.hasOwnProperty.call(message, "leading_comments"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.leading_comments);
                        if (message.trailing_comments != null && Object.hasOwnProperty.call(message, "trailing_comments"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailing_comments);
                        if (message.leading_detached_comments != null && message.leading_detached_comments.length)
                            for (var i = 0; i < message.leading_detached_comments.length; ++i)
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.leading_detached_comments[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.path && message.path.length))
                                    message.path = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.path.push(reader.int32());
                                } else
                                    message.path.push(reader.int32());
                                break;
                            case 2:
                                if (!(message.span && message.span.length))
                                    message.span = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.span.push(reader.int32());
                                } else
                                    message.span.push(reader.int32());
                                break;
                            case 3:
                                message.leading_comments = reader.string();
                                break;
                            case 4:
                                message.trailing_comments = reader.string();
                                break;
                            case 6:
                                if (!(message.leading_detached_comments && message.leading_detached_comments.length))
                                    message.leading_detached_comments = [];
                                message.leading_detached_comments.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Location message.
                     * @function verify
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Location.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.span != null && message.hasOwnProperty("span")) {
                            if (!Array.isArray(message.span))
                                return "span: array expected";
                            for (var i = 0; i < message.span.length; ++i)
                                if (!$util.isInteger(message.span[i]))
                                    return "span: integer[] expected";
                        }
                        if (message.leading_comments != null && message.hasOwnProperty("leading_comments"))
                            if (!$util.isString(message.leading_comments))
                                return "leading_comments: string expected";
                        if (message.trailing_comments != null && message.hasOwnProperty("trailing_comments"))
                            if (!$util.isString(message.trailing_comments))
                                return "trailing_comments: string expected";
                        if (message.leading_detached_comments != null && message.hasOwnProperty("leading_detached_comments")) {
                            if (!Array.isArray(message.leading_detached_comments))
                                return "leading_detached_comments: array expected";
                            for (var i = 0; i < message.leading_detached_comments.length; ++i)
                                if (!$util.isString(message.leading_detached_comments[i]))
                                    return "leading_detached_comments: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Location message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     */
                    Location.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                            return object;
                        var message = new $root.google.protobuf.SourceCodeInfo.Location();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.span) {
                            if (!Array.isArray(object.span))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                            message.span = [];
                            for (var i = 0; i < object.span.length; ++i)
                                message.span[i] = object.span[i] | 0;
                        }
                        if (object.leading_comments != null)
                            message.leading_comments = String(object.leading_comments);
                        if (object.trailing_comments != null)
                            message.trailing_comments = String(object.trailing_comments);
                        if (object.leading_detached_comments) {
                            if (!Array.isArray(object.leading_detached_comments))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.leading_detached_comments: array expected");
                            message.leading_detached_comments = [];
                            for (var i = 0; i < object.leading_detached_comments.length; ++i)
                                message.leading_detached_comments[i] = String(object.leading_detached_comments[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Location message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.Location} message Location
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Location.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.path = [];
                            object.span = [];
                            object.leading_detached_comments = [];
                        }
                        if (options.defaults) {
                            object.leading_comments = "";
                            object.trailing_comments = "";
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.span && message.span.length) {
                            object.span = [];
                            for (var j = 0; j < message.span.length; ++j)
                                object.span[j] = message.span[j];
                        }
                        if (message.leading_comments != null && message.hasOwnProperty("leading_comments"))
                            object.leading_comments = message.leading_comments;
                        if (message.trailing_comments != null && message.hasOwnProperty("trailing_comments"))
                            object.trailing_comments = message.trailing_comments;
                        if (message.leading_detached_comments && message.leading_detached_comments.length) {
                            object.leading_detached_comments = [];
                            for (var j = 0; j < message.leading_detached_comments.length; ++j)
                                object.leading_detached_comments[j] = message.leading_detached_comments[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Location to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Location.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Location;
                })();
    
                return SourceCodeInfo;
            })();
    
            protobuf.GeneratedCodeInfo = (function() {
    
                /**
                 * Properties of a GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @interface IGeneratedCodeInfo
                 * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
                 */
    
                /**
                 * Constructs a new GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a GeneratedCodeInfo.
                 * @implements IGeneratedCodeInfo
                 * @constructor
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 */
                function GeneratedCodeInfo(properties) {
                    this.annotation = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GeneratedCodeInfo annotation.
                 * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 */
                GeneratedCodeInfo.prototype.annotation = $util.emptyArray;
    
                /**
                 * Creates a new GeneratedCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo instance
                 */
                GeneratedCodeInfo.create = function create(properties) {
                    return new GeneratedCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.annotation != null && message.annotation.length)
                        for (var i = 0; i < message.annotation.length; ++i)
                            $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.annotation && message.annotation.length))
                                message.annotation = [];
                            message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GeneratedCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GeneratedCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.annotation != null && message.hasOwnProperty("annotation")) {
                        if (!Array.isArray(message.annotation))
                            return "annotation: array expected";
                        for (var i = 0; i < message.annotation.length; ++i) {
                            var error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                            if (error)
                                return "annotation." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 */
                GeneratedCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.GeneratedCodeInfo();
                    if (object.annotation) {
                        if (!Array.isArray(object.annotation))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                        message.annotation = [];
                        for (var i = 0; i < object.annotation.length; ++i) {
                            if (typeof object.annotation[i] !== "object")
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                            message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GeneratedCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.annotation = [];
                    if (message.annotation && message.annotation.length) {
                        object.annotation = [];
                        for (var j = 0; j < message.annotation.length; ++j)
                            object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this GeneratedCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                GeneratedCodeInfo.Annotation = (function() {
    
                    /**
                     * Properties of an Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @interface IAnnotation
                     * @property {Array.<number>|null} [path] Annotation path
                     * @property {string|null} [source_file] Annotation source_file
                     * @property {number|null} [begin] Annotation begin
                     * @property {number|null} [end] Annotation end
                     */
    
                    /**
                     * Constructs a new Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @classdesc Represents an Annotation.
                     * @implements IAnnotation
                     * @constructor
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     */
                    function Annotation(properties) {
                        this.path = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Annotation path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.path = $util.emptyArray;
    
                    /**
                     * Annotation source_file.
                     * @member {string} source_file
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.source_file = "";
    
                    /**
                     * Annotation begin.
                     * @member {number} begin
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.begin = 0;
    
                    /**
                     * Annotation end.
                     * @member {number} end
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.end = 0;
    
                    /**
                     * Creates a new Annotation instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation instance
                     */
                    Annotation.create = function create(properties) {
                        return new Annotation(properties);
                    };
    
                    /**
                     * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.source_file != null && Object.hasOwnProperty.call(message, "source_file"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.source_file);
                        if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.path && message.path.length))
                                    message.path = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.path.push(reader.int32());
                                } else
                                    message.path.push(reader.int32());
                                break;
                            case 2:
                                message.source_file = reader.string();
                                break;
                            case 3:
                                message.begin = reader.int32();
                                break;
                            case 4:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Annotation message.
                     * @function verify
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Annotation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.source_file != null && message.hasOwnProperty("source_file"))
                            if (!$util.isString(message.source_file))
                                return "source_file: string expected";
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            if (!$util.isInteger(message.begin))
                                return "begin: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     */
                    Annotation.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                            return object;
                        var message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.source_file != null)
                            message.source_file = String(object.source_file);
                        if (object.begin != null)
                            message.begin = object.begin | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Annotation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.path = [];
                        if (options.defaults) {
                            object.source_file = "";
                            object.begin = 0;
                            object.end = 0;
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.source_file != null && message.hasOwnProperty("source_file"))
                            object.source_file = message.source_file;
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            object.begin = message.begin;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this Annotation to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Annotation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Annotation;
                })();
    
                return GeneratedCodeInfo;
            })();
    
            return protobuf;
        })();
    
        return google;
    })();

    return $root;
});
