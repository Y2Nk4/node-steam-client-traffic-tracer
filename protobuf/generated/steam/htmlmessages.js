/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
(function(global, factory) { /* global define, require, module */

    /* AMD */ if (typeof define === 'function' && define.amd)
        define(["protobufjs/minimal"], factory);

    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)
        module.exports = factory(require("protobufjs/minimal"));

})(this, function($protobuf) {
    "use strict";

    // Common aliases
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    
    // Exported root namespace
    var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});
    
    /**
     * EJSRegisterMethodType enum.
     * @exports EJSRegisterMethodType
     * @enum {number}
     * @property {number} k_EJSRegisterMethodType_Invalid=0 k_EJSRegisterMethodType_Invalid value
     * @property {number} k_EJSRegisterMethodType_Function=1 k_EJSRegisterMethodType_Function value
     * @property {number} k_EJSRegisterMethodType_Callback=2 k_EJSRegisterMethodType_Callback value
     * @property {number} k_EJSRegisterMethodType_Promise=3 k_EJSRegisterMethodType_Promise value
     */
    $root.EJSRegisterMethodType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "k_EJSRegisterMethodType_Invalid"] = 0;
        values[valuesById[1] = "k_EJSRegisterMethodType_Function"] = 1;
        values[valuesById[2] = "k_EJSRegisterMethodType_Callback"] = 2;
        values[valuesById[3] = "k_EJSRegisterMethodType_Promise"] = 3;
        return values;
    })();
    
    $root.CMsgKeyUp = (function() {
    
        /**
         * Properties of a CMsgKeyUp.
         * @exports ICMsgKeyUp
         * @interface ICMsgKeyUp
         * @property {number|null} [browser_handle] CMsgKeyUp browser_handle
         * @property {number|null} [keyCode] CMsgKeyUp keyCode
         * @property {number|null} [modifiers] CMsgKeyUp modifiers
         * @property {number|null} [nativeKeyCode] CMsgKeyUp nativeKeyCode
         */
    
        /**
         * Constructs a new CMsgKeyUp.
         * @exports CMsgKeyUp
         * @classdesc Represents a CMsgKeyUp.
         * @implements ICMsgKeyUp
         * @constructor
         * @param {ICMsgKeyUp=} [properties] Properties to set
         */
        function CMsgKeyUp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgKeyUp browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgKeyUp
         * @instance
         */
        CMsgKeyUp.prototype.browser_handle = 0;
    
        /**
         * CMsgKeyUp keyCode.
         * @member {number} keyCode
         * @memberof CMsgKeyUp
         * @instance
         */
        CMsgKeyUp.prototype.keyCode = 0;
    
        /**
         * CMsgKeyUp modifiers.
         * @member {number} modifiers
         * @memberof CMsgKeyUp
         * @instance
         */
        CMsgKeyUp.prototype.modifiers = 0;
    
        /**
         * CMsgKeyUp nativeKeyCode.
         * @member {number} nativeKeyCode
         * @memberof CMsgKeyUp
         * @instance
         */
        CMsgKeyUp.prototype.nativeKeyCode = 0;
    
        /**
         * Creates a new CMsgKeyUp instance using the specified properties.
         * @function create
         * @memberof CMsgKeyUp
         * @static
         * @param {ICMsgKeyUp=} [properties] Properties to set
         * @returns {CMsgKeyUp} CMsgKeyUp instance
         */
        CMsgKeyUp.create = function create(properties) {
            return new CMsgKeyUp(properties);
        };
    
        /**
         * Encodes the specified CMsgKeyUp message. Does not implicitly {@link CMsgKeyUp.verify|verify} messages.
         * @function encode
         * @memberof CMsgKeyUp
         * @static
         * @param {ICMsgKeyUp} message CMsgKeyUp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgKeyUp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.keyCode != null && Object.hasOwnProperty.call(message, "keyCode"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.keyCode);
            if (message.modifiers != null && Object.hasOwnProperty.call(message, "modifiers"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.modifiers);
            if (message.nativeKeyCode != null && Object.hasOwnProperty.call(message, "nativeKeyCode"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.nativeKeyCode);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgKeyUp message, length delimited. Does not implicitly {@link CMsgKeyUp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgKeyUp
         * @static
         * @param {ICMsgKeyUp} message CMsgKeyUp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgKeyUp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgKeyUp message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgKeyUp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgKeyUp} CMsgKeyUp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgKeyUp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgKeyUp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.keyCode = reader.uint32();
                    break;
                case 3:
                    message.modifiers = reader.uint32();
                    break;
                case 4:
                    message.nativeKeyCode = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgKeyUp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgKeyUp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgKeyUp} CMsgKeyUp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgKeyUp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgKeyUp message.
         * @function verify
         * @memberof CMsgKeyUp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgKeyUp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.keyCode != null && message.hasOwnProperty("keyCode"))
                if (!$util.isInteger(message.keyCode))
                    return "keyCode: integer expected";
            if (message.modifiers != null && message.hasOwnProperty("modifiers"))
                if (!$util.isInteger(message.modifiers))
                    return "modifiers: integer expected";
            if (message.nativeKeyCode != null && message.hasOwnProperty("nativeKeyCode"))
                if (!$util.isInteger(message.nativeKeyCode))
                    return "nativeKeyCode: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgKeyUp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgKeyUp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgKeyUp} CMsgKeyUp
         */
        CMsgKeyUp.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgKeyUp)
                return object;
            var message = new $root.CMsgKeyUp();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.keyCode != null)
                message.keyCode = object.keyCode >>> 0;
            if (object.modifiers != null)
                message.modifiers = object.modifiers >>> 0;
            if (object.nativeKeyCode != null)
                message.nativeKeyCode = object.nativeKeyCode >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgKeyUp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgKeyUp
         * @static
         * @param {CMsgKeyUp} message CMsgKeyUp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgKeyUp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.keyCode = 0;
                object.modifiers = 0;
                object.nativeKeyCode = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.keyCode != null && message.hasOwnProperty("keyCode"))
                object.keyCode = message.keyCode;
            if (message.modifiers != null && message.hasOwnProperty("modifiers"))
                object.modifiers = message.modifiers;
            if (message.nativeKeyCode != null && message.hasOwnProperty("nativeKeyCode"))
                object.nativeKeyCode = message.nativeKeyCode;
            return object;
        };
    
        /**
         * Converts this CMsgKeyUp to JSON.
         * @function toJSON
         * @memberof CMsgKeyUp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgKeyUp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgKeyUp;
    })();
    
    $root.CMsgKeyDown = (function() {
    
        /**
         * Properties of a CMsgKeyDown.
         * @exports ICMsgKeyDown
         * @interface ICMsgKeyDown
         * @property {number|null} [browser_handle] CMsgKeyDown browser_handle
         * @property {number|null} [keyCode] CMsgKeyDown keyCode
         * @property {number|null} [modifiers] CMsgKeyDown modifiers
         * @property {boolean|null} [is_system_key] CMsgKeyDown is_system_key
         * @property {number|null} [nativeKeyCode] CMsgKeyDown nativeKeyCode
         */
    
        /**
         * Constructs a new CMsgKeyDown.
         * @exports CMsgKeyDown
         * @classdesc Represents a CMsgKeyDown.
         * @implements ICMsgKeyDown
         * @constructor
         * @param {ICMsgKeyDown=} [properties] Properties to set
         */
        function CMsgKeyDown(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgKeyDown browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgKeyDown
         * @instance
         */
        CMsgKeyDown.prototype.browser_handle = 0;
    
        /**
         * CMsgKeyDown keyCode.
         * @member {number} keyCode
         * @memberof CMsgKeyDown
         * @instance
         */
        CMsgKeyDown.prototype.keyCode = 0;
    
        /**
         * CMsgKeyDown modifiers.
         * @member {number} modifiers
         * @memberof CMsgKeyDown
         * @instance
         */
        CMsgKeyDown.prototype.modifiers = 0;
    
        /**
         * CMsgKeyDown is_system_key.
         * @member {boolean} is_system_key
         * @memberof CMsgKeyDown
         * @instance
         */
        CMsgKeyDown.prototype.is_system_key = false;
    
        /**
         * CMsgKeyDown nativeKeyCode.
         * @member {number} nativeKeyCode
         * @memberof CMsgKeyDown
         * @instance
         */
        CMsgKeyDown.prototype.nativeKeyCode = 0;
    
        /**
         * Creates a new CMsgKeyDown instance using the specified properties.
         * @function create
         * @memberof CMsgKeyDown
         * @static
         * @param {ICMsgKeyDown=} [properties] Properties to set
         * @returns {CMsgKeyDown} CMsgKeyDown instance
         */
        CMsgKeyDown.create = function create(properties) {
            return new CMsgKeyDown(properties);
        };
    
        /**
         * Encodes the specified CMsgKeyDown message. Does not implicitly {@link CMsgKeyDown.verify|verify} messages.
         * @function encode
         * @memberof CMsgKeyDown
         * @static
         * @param {ICMsgKeyDown} message CMsgKeyDown message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgKeyDown.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.keyCode != null && Object.hasOwnProperty.call(message, "keyCode"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.keyCode);
            if (message.modifiers != null && Object.hasOwnProperty.call(message, "modifiers"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.modifiers);
            if (message.is_system_key != null && Object.hasOwnProperty.call(message, "is_system_key"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.is_system_key);
            if (message.nativeKeyCode != null && Object.hasOwnProperty.call(message, "nativeKeyCode"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.nativeKeyCode);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgKeyDown message, length delimited. Does not implicitly {@link CMsgKeyDown.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgKeyDown
         * @static
         * @param {ICMsgKeyDown} message CMsgKeyDown message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgKeyDown.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgKeyDown message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgKeyDown
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgKeyDown} CMsgKeyDown
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgKeyDown.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgKeyDown();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.keyCode = reader.uint32();
                    break;
                case 3:
                    message.modifiers = reader.uint32();
                    break;
                case 4:
                    message.is_system_key = reader.bool();
                    break;
                case 5:
                    message.nativeKeyCode = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgKeyDown message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgKeyDown
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgKeyDown} CMsgKeyDown
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgKeyDown.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgKeyDown message.
         * @function verify
         * @memberof CMsgKeyDown
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgKeyDown.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.keyCode != null && message.hasOwnProperty("keyCode"))
                if (!$util.isInteger(message.keyCode))
                    return "keyCode: integer expected";
            if (message.modifiers != null && message.hasOwnProperty("modifiers"))
                if (!$util.isInteger(message.modifiers))
                    return "modifiers: integer expected";
            if (message.is_system_key != null && message.hasOwnProperty("is_system_key"))
                if (typeof message.is_system_key !== "boolean")
                    return "is_system_key: boolean expected";
            if (message.nativeKeyCode != null && message.hasOwnProperty("nativeKeyCode"))
                if (!$util.isInteger(message.nativeKeyCode))
                    return "nativeKeyCode: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgKeyDown message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgKeyDown
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgKeyDown} CMsgKeyDown
         */
        CMsgKeyDown.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgKeyDown)
                return object;
            var message = new $root.CMsgKeyDown();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.keyCode != null)
                message.keyCode = object.keyCode >>> 0;
            if (object.modifiers != null)
                message.modifiers = object.modifiers >>> 0;
            if (object.is_system_key != null)
                message.is_system_key = Boolean(object.is_system_key);
            if (object.nativeKeyCode != null)
                message.nativeKeyCode = object.nativeKeyCode >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgKeyDown message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgKeyDown
         * @static
         * @param {CMsgKeyDown} message CMsgKeyDown
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgKeyDown.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.keyCode = 0;
                object.modifiers = 0;
                object.is_system_key = false;
                object.nativeKeyCode = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.keyCode != null && message.hasOwnProperty("keyCode"))
                object.keyCode = message.keyCode;
            if (message.modifiers != null && message.hasOwnProperty("modifiers"))
                object.modifiers = message.modifiers;
            if (message.is_system_key != null && message.hasOwnProperty("is_system_key"))
                object.is_system_key = message.is_system_key;
            if (message.nativeKeyCode != null && message.hasOwnProperty("nativeKeyCode"))
                object.nativeKeyCode = message.nativeKeyCode;
            return object;
        };
    
        /**
         * Converts this CMsgKeyDown to JSON.
         * @function toJSON
         * @memberof CMsgKeyDown
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgKeyDown.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgKeyDown;
    })();
    
    $root.CMsgKeyChar = (function() {
    
        /**
         * Properties of a CMsgKeyChar.
         * @exports ICMsgKeyChar
         * @interface ICMsgKeyChar
         * @property {number|null} [browser_handle] CMsgKeyChar browser_handle
         * @property {number|null} [unichar] CMsgKeyChar unichar
         * @property {number|null} [modifiers] CMsgKeyChar modifiers
         * @property {number|null} [keyCode] CMsgKeyChar keyCode
         * @property {number|null} [nativeKeyCode] CMsgKeyChar nativeKeyCode
         */
    
        /**
         * Constructs a new CMsgKeyChar.
         * @exports CMsgKeyChar
         * @classdesc Represents a CMsgKeyChar.
         * @implements ICMsgKeyChar
         * @constructor
         * @param {ICMsgKeyChar=} [properties] Properties to set
         */
        function CMsgKeyChar(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgKeyChar browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgKeyChar
         * @instance
         */
        CMsgKeyChar.prototype.browser_handle = 0;
    
        /**
         * CMsgKeyChar unichar.
         * @member {number} unichar
         * @memberof CMsgKeyChar
         * @instance
         */
        CMsgKeyChar.prototype.unichar = 0;
    
        /**
         * CMsgKeyChar modifiers.
         * @member {number} modifiers
         * @memberof CMsgKeyChar
         * @instance
         */
        CMsgKeyChar.prototype.modifiers = 0;
    
        /**
         * CMsgKeyChar keyCode.
         * @member {number} keyCode
         * @memberof CMsgKeyChar
         * @instance
         */
        CMsgKeyChar.prototype.keyCode = 0;
    
        /**
         * CMsgKeyChar nativeKeyCode.
         * @member {number} nativeKeyCode
         * @memberof CMsgKeyChar
         * @instance
         */
        CMsgKeyChar.prototype.nativeKeyCode = 0;
    
        /**
         * Creates a new CMsgKeyChar instance using the specified properties.
         * @function create
         * @memberof CMsgKeyChar
         * @static
         * @param {ICMsgKeyChar=} [properties] Properties to set
         * @returns {CMsgKeyChar} CMsgKeyChar instance
         */
        CMsgKeyChar.create = function create(properties) {
            return new CMsgKeyChar(properties);
        };
    
        /**
         * Encodes the specified CMsgKeyChar message. Does not implicitly {@link CMsgKeyChar.verify|verify} messages.
         * @function encode
         * @memberof CMsgKeyChar
         * @static
         * @param {ICMsgKeyChar} message CMsgKeyChar message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgKeyChar.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.unichar != null && Object.hasOwnProperty.call(message, "unichar"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.unichar);
            if (message.modifiers != null && Object.hasOwnProperty.call(message, "modifiers"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.modifiers);
            if (message.keyCode != null && Object.hasOwnProperty.call(message, "keyCode"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.keyCode);
            if (message.nativeKeyCode != null && Object.hasOwnProperty.call(message, "nativeKeyCode"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.nativeKeyCode);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgKeyChar message, length delimited. Does not implicitly {@link CMsgKeyChar.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgKeyChar
         * @static
         * @param {ICMsgKeyChar} message CMsgKeyChar message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgKeyChar.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgKeyChar message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgKeyChar
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgKeyChar} CMsgKeyChar
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgKeyChar.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgKeyChar();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.unichar = reader.uint32();
                    break;
                case 3:
                    message.modifiers = reader.uint32();
                    break;
                case 4:
                    message.keyCode = reader.uint32();
                    break;
                case 5:
                    message.nativeKeyCode = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgKeyChar message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgKeyChar
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgKeyChar} CMsgKeyChar
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgKeyChar.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgKeyChar message.
         * @function verify
         * @memberof CMsgKeyChar
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgKeyChar.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.unichar != null && message.hasOwnProperty("unichar"))
                if (!$util.isInteger(message.unichar))
                    return "unichar: integer expected";
            if (message.modifiers != null && message.hasOwnProperty("modifiers"))
                if (!$util.isInteger(message.modifiers))
                    return "modifiers: integer expected";
            if (message.keyCode != null && message.hasOwnProperty("keyCode"))
                if (!$util.isInteger(message.keyCode))
                    return "keyCode: integer expected";
            if (message.nativeKeyCode != null && message.hasOwnProperty("nativeKeyCode"))
                if (!$util.isInteger(message.nativeKeyCode))
                    return "nativeKeyCode: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgKeyChar message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgKeyChar
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgKeyChar} CMsgKeyChar
         */
        CMsgKeyChar.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgKeyChar)
                return object;
            var message = new $root.CMsgKeyChar();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.unichar != null)
                message.unichar = object.unichar >>> 0;
            if (object.modifiers != null)
                message.modifiers = object.modifiers >>> 0;
            if (object.keyCode != null)
                message.keyCode = object.keyCode >>> 0;
            if (object.nativeKeyCode != null)
                message.nativeKeyCode = object.nativeKeyCode >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgKeyChar message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgKeyChar
         * @static
         * @param {CMsgKeyChar} message CMsgKeyChar
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgKeyChar.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.unichar = 0;
                object.modifiers = 0;
                object.keyCode = 0;
                object.nativeKeyCode = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.unichar != null && message.hasOwnProperty("unichar"))
                object.unichar = message.unichar;
            if (message.modifiers != null && message.hasOwnProperty("modifiers"))
                object.modifiers = message.modifiers;
            if (message.keyCode != null && message.hasOwnProperty("keyCode"))
                object.keyCode = message.keyCode;
            if (message.nativeKeyCode != null && message.hasOwnProperty("nativeKeyCode"))
                object.nativeKeyCode = message.nativeKeyCode;
            return object;
        };
    
        /**
         * Converts this CMsgKeyChar to JSON.
         * @function toJSON
         * @memberof CMsgKeyChar
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgKeyChar.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgKeyChar;
    })();
    
    $root.CMsgMouseDown = (function() {
    
        /**
         * Properties of a CMsgMouseDown.
         * @exports ICMsgMouseDown
         * @interface ICMsgMouseDown
         * @property {number|null} [browser_handle] CMsgMouseDown browser_handle
         * @property {number|null} [mouse_button] CMsgMouseDown mouse_button
         * @property {number|null} [modifiers] CMsgMouseDown modifiers
         */
    
        /**
         * Constructs a new CMsgMouseDown.
         * @exports CMsgMouseDown
         * @classdesc Represents a CMsgMouseDown.
         * @implements ICMsgMouseDown
         * @constructor
         * @param {ICMsgMouseDown=} [properties] Properties to set
         */
        function CMsgMouseDown(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgMouseDown browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgMouseDown
         * @instance
         */
        CMsgMouseDown.prototype.browser_handle = 0;
    
        /**
         * CMsgMouseDown mouse_button.
         * @member {number} mouse_button
         * @memberof CMsgMouseDown
         * @instance
         */
        CMsgMouseDown.prototype.mouse_button = 0;
    
        /**
         * CMsgMouseDown modifiers.
         * @member {number} modifiers
         * @memberof CMsgMouseDown
         * @instance
         */
        CMsgMouseDown.prototype.modifiers = 0;
    
        /**
         * Creates a new CMsgMouseDown instance using the specified properties.
         * @function create
         * @memberof CMsgMouseDown
         * @static
         * @param {ICMsgMouseDown=} [properties] Properties to set
         * @returns {CMsgMouseDown} CMsgMouseDown instance
         */
        CMsgMouseDown.create = function create(properties) {
            return new CMsgMouseDown(properties);
        };
    
        /**
         * Encodes the specified CMsgMouseDown message. Does not implicitly {@link CMsgMouseDown.verify|verify} messages.
         * @function encode
         * @memberof CMsgMouseDown
         * @static
         * @param {ICMsgMouseDown} message CMsgMouseDown message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgMouseDown.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.mouse_button != null && Object.hasOwnProperty.call(message, "mouse_button"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.mouse_button);
            if (message.modifiers != null && Object.hasOwnProperty.call(message, "modifiers"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.modifiers);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgMouseDown message, length delimited. Does not implicitly {@link CMsgMouseDown.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgMouseDown
         * @static
         * @param {ICMsgMouseDown} message CMsgMouseDown message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgMouseDown.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgMouseDown message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgMouseDown
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgMouseDown} CMsgMouseDown
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgMouseDown.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgMouseDown();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.mouse_button = reader.uint32();
                    break;
                case 3:
                    message.modifiers = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgMouseDown message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgMouseDown
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgMouseDown} CMsgMouseDown
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgMouseDown.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgMouseDown message.
         * @function verify
         * @memberof CMsgMouseDown
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgMouseDown.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.mouse_button != null && message.hasOwnProperty("mouse_button"))
                if (!$util.isInteger(message.mouse_button))
                    return "mouse_button: integer expected";
            if (message.modifiers != null && message.hasOwnProperty("modifiers"))
                if (!$util.isInteger(message.modifiers))
                    return "modifiers: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgMouseDown message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgMouseDown
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgMouseDown} CMsgMouseDown
         */
        CMsgMouseDown.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgMouseDown)
                return object;
            var message = new $root.CMsgMouseDown();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.mouse_button != null)
                message.mouse_button = object.mouse_button >>> 0;
            if (object.modifiers != null)
                message.modifiers = object.modifiers >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgMouseDown message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgMouseDown
         * @static
         * @param {CMsgMouseDown} message CMsgMouseDown
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgMouseDown.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.mouse_button = 0;
                object.modifiers = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.mouse_button != null && message.hasOwnProperty("mouse_button"))
                object.mouse_button = message.mouse_button;
            if (message.modifiers != null && message.hasOwnProperty("modifiers"))
                object.modifiers = message.modifiers;
            return object;
        };
    
        /**
         * Converts this CMsgMouseDown to JSON.
         * @function toJSON
         * @memberof CMsgMouseDown
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgMouseDown.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgMouseDown;
    })();
    
    $root.CMsgMouseUp = (function() {
    
        /**
         * Properties of a CMsgMouseUp.
         * @exports ICMsgMouseUp
         * @interface ICMsgMouseUp
         * @property {number|null} [browser_handle] CMsgMouseUp browser_handle
         * @property {number|null} [mouse_button] CMsgMouseUp mouse_button
         * @property {number|null} [modifiers] CMsgMouseUp modifiers
         * @property {boolean|null} [is_off_panel] CMsgMouseUp is_off_panel
         * @property {number|null} [x] CMsgMouseUp x
         * @property {number|null} [y] CMsgMouseUp y
         */
    
        /**
         * Constructs a new CMsgMouseUp.
         * @exports CMsgMouseUp
         * @classdesc Represents a CMsgMouseUp.
         * @implements ICMsgMouseUp
         * @constructor
         * @param {ICMsgMouseUp=} [properties] Properties to set
         */
        function CMsgMouseUp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgMouseUp browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgMouseUp
         * @instance
         */
        CMsgMouseUp.prototype.browser_handle = 0;
    
        /**
         * CMsgMouseUp mouse_button.
         * @member {number} mouse_button
         * @memberof CMsgMouseUp
         * @instance
         */
        CMsgMouseUp.prototype.mouse_button = 0;
    
        /**
         * CMsgMouseUp modifiers.
         * @member {number} modifiers
         * @memberof CMsgMouseUp
         * @instance
         */
        CMsgMouseUp.prototype.modifiers = 0;
    
        /**
         * CMsgMouseUp is_off_panel.
         * @member {boolean} is_off_panel
         * @memberof CMsgMouseUp
         * @instance
         */
        CMsgMouseUp.prototype.is_off_panel = false;
    
        /**
         * CMsgMouseUp x.
         * @member {number} x
         * @memberof CMsgMouseUp
         * @instance
         */
        CMsgMouseUp.prototype.x = 0;
    
        /**
         * CMsgMouseUp y.
         * @member {number} y
         * @memberof CMsgMouseUp
         * @instance
         */
        CMsgMouseUp.prototype.y = 0;
    
        /**
         * Creates a new CMsgMouseUp instance using the specified properties.
         * @function create
         * @memberof CMsgMouseUp
         * @static
         * @param {ICMsgMouseUp=} [properties] Properties to set
         * @returns {CMsgMouseUp} CMsgMouseUp instance
         */
        CMsgMouseUp.create = function create(properties) {
            return new CMsgMouseUp(properties);
        };
    
        /**
         * Encodes the specified CMsgMouseUp message. Does not implicitly {@link CMsgMouseUp.verify|verify} messages.
         * @function encode
         * @memberof CMsgMouseUp
         * @static
         * @param {ICMsgMouseUp} message CMsgMouseUp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgMouseUp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.mouse_button != null && Object.hasOwnProperty.call(message, "mouse_button"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.mouse_button);
            if (message.modifiers != null && Object.hasOwnProperty.call(message, "modifiers"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.modifiers);
            if (message.is_off_panel != null && Object.hasOwnProperty.call(message, "is_off_panel"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.is_off_panel);
            if (message.x != null && Object.hasOwnProperty.call(message, "x"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.x);
            if (message.y != null && Object.hasOwnProperty.call(message, "y"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.y);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgMouseUp message, length delimited. Does not implicitly {@link CMsgMouseUp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgMouseUp
         * @static
         * @param {ICMsgMouseUp} message CMsgMouseUp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgMouseUp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgMouseUp message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgMouseUp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgMouseUp} CMsgMouseUp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgMouseUp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgMouseUp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.mouse_button = reader.uint32();
                    break;
                case 3:
                    message.modifiers = reader.uint32();
                    break;
                case 4:
                    message.is_off_panel = reader.bool();
                    break;
                case 5:
                    message.x = reader.int32();
                    break;
                case 6:
                    message.y = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgMouseUp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgMouseUp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgMouseUp} CMsgMouseUp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgMouseUp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgMouseUp message.
         * @function verify
         * @memberof CMsgMouseUp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgMouseUp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.mouse_button != null && message.hasOwnProperty("mouse_button"))
                if (!$util.isInteger(message.mouse_button))
                    return "mouse_button: integer expected";
            if (message.modifiers != null && message.hasOwnProperty("modifiers"))
                if (!$util.isInteger(message.modifiers))
                    return "modifiers: integer expected";
            if (message.is_off_panel != null && message.hasOwnProperty("is_off_panel"))
                if (typeof message.is_off_panel !== "boolean")
                    return "is_off_panel: boolean expected";
            if (message.x != null && message.hasOwnProperty("x"))
                if (!$util.isInteger(message.x))
                    return "x: integer expected";
            if (message.y != null && message.hasOwnProperty("y"))
                if (!$util.isInteger(message.y))
                    return "y: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgMouseUp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgMouseUp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgMouseUp} CMsgMouseUp
         */
        CMsgMouseUp.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgMouseUp)
                return object;
            var message = new $root.CMsgMouseUp();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.mouse_button != null)
                message.mouse_button = object.mouse_button >>> 0;
            if (object.modifiers != null)
                message.modifiers = object.modifiers >>> 0;
            if (object.is_off_panel != null)
                message.is_off_panel = Boolean(object.is_off_panel);
            if (object.x != null)
                message.x = object.x | 0;
            if (object.y != null)
                message.y = object.y | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgMouseUp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgMouseUp
         * @static
         * @param {CMsgMouseUp} message CMsgMouseUp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgMouseUp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.mouse_button = 0;
                object.modifiers = 0;
                object.is_off_panel = false;
                object.x = 0;
                object.y = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.mouse_button != null && message.hasOwnProperty("mouse_button"))
                object.mouse_button = message.mouse_button;
            if (message.modifiers != null && message.hasOwnProperty("modifiers"))
                object.modifiers = message.modifiers;
            if (message.is_off_panel != null && message.hasOwnProperty("is_off_panel"))
                object.is_off_panel = message.is_off_panel;
            if (message.x != null && message.hasOwnProperty("x"))
                object.x = message.x;
            if (message.y != null && message.hasOwnProperty("y"))
                object.y = message.y;
            return object;
        };
    
        /**
         * Converts this CMsgMouseUp to JSON.
         * @function toJSON
         * @memberof CMsgMouseUp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgMouseUp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgMouseUp;
    })();
    
    $root.CMsgMouseDblClick = (function() {
    
        /**
         * Properties of a CMsgMouseDblClick.
         * @exports ICMsgMouseDblClick
         * @interface ICMsgMouseDblClick
         * @property {number|null} [browser_handle] CMsgMouseDblClick browser_handle
         * @property {number|null} [mouse_button] CMsgMouseDblClick mouse_button
         * @property {number|null} [modifiers] CMsgMouseDblClick modifiers
         */
    
        /**
         * Constructs a new CMsgMouseDblClick.
         * @exports CMsgMouseDblClick
         * @classdesc Represents a CMsgMouseDblClick.
         * @implements ICMsgMouseDblClick
         * @constructor
         * @param {ICMsgMouseDblClick=} [properties] Properties to set
         */
        function CMsgMouseDblClick(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgMouseDblClick browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgMouseDblClick
         * @instance
         */
        CMsgMouseDblClick.prototype.browser_handle = 0;
    
        /**
         * CMsgMouseDblClick mouse_button.
         * @member {number} mouse_button
         * @memberof CMsgMouseDblClick
         * @instance
         */
        CMsgMouseDblClick.prototype.mouse_button = 0;
    
        /**
         * CMsgMouseDblClick modifiers.
         * @member {number} modifiers
         * @memberof CMsgMouseDblClick
         * @instance
         */
        CMsgMouseDblClick.prototype.modifiers = 0;
    
        /**
         * Creates a new CMsgMouseDblClick instance using the specified properties.
         * @function create
         * @memberof CMsgMouseDblClick
         * @static
         * @param {ICMsgMouseDblClick=} [properties] Properties to set
         * @returns {CMsgMouseDblClick} CMsgMouseDblClick instance
         */
        CMsgMouseDblClick.create = function create(properties) {
            return new CMsgMouseDblClick(properties);
        };
    
        /**
         * Encodes the specified CMsgMouseDblClick message. Does not implicitly {@link CMsgMouseDblClick.verify|verify} messages.
         * @function encode
         * @memberof CMsgMouseDblClick
         * @static
         * @param {ICMsgMouseDblClick} message CMsgMouseDblClick message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgMouseDblClick.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.mouse_button != null && Object.hasOwnProperty.call(message, "mouse_button"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.mouse_button);
            if (message.modifiers != null && Object.hasOwnProperty.call(message, "modifiers"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.modifiers);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgMouseDblClick message, length delimited. Does not implicitly {@link CMsgMouseDblClick.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgMouseDblClick
         * @static
         * @param {ICMsgMouseDblClick} message CMsgMouseDblClick message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgMouseDblClick.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgMouseDblClick message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgMouseDblClick
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgMouseDblClick} CMsgMouseDblClick
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgMouseDblClick.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgMouseDblClick();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.mouse_button = reader.uint32();
                    break;
                case 3:
                    message.modifiers = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgMouseDblClick message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgMouseDblClick
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgMouseDblClick} CMsgMouseDblClick
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgMouseDblClick.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgMouseDblClick message.
         * @function verify
         * @memberof CMsgMouseDblClick
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgMouseDblClick.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.mouse_button != null && message.hasOwnProperty("mouse_button"))
                if (!$util.isInteger(message.mouse_button))
                    return "mouse_button: integer expected";
            if (message.modifiers != null && message.hasOwnProperty("modifiers"))
                if (!$util.isInteger(message.modifiers))
                    return "modifiers: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgMouseDblClick message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgMouseDblClick
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgMouseDblClick} CMsgMouseDblClick
         */
        CMsgMouseDblClick.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgMouseDblClick)
                return object;
            var message = new $root.CMsgMouseDblClick();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.mouse_button != null)
                message.mouse_button = object.mouse_button >>> 0;
            if (object.modifiers != null)
                message.modifiers = object.modifiers >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgMouseDblClick message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgMouseDblClick
         * @static
         * @param {CMsgMouseDblClick} message CMsgMouseDblClick
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgMouseDblClick.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.mouse_button = 0;
                object.modifiers = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.mouse_button != null && message.hasOwnProperty("mouse_button"))
                object.mouse_button = message.mouse_button;
            if (message.modifiers != null && message.hasOwnProperty("modifiers"))
                object.modifiers = message.modifiers;
            return object;
        };
    
        /**
         * Converts this CMsgMouseDblClick to JSON.
         * @function toJSON
         * @memberof CMsgMouseDblClick
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgMouseDblClick.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgMouseDblClick;
    })();
    
    $root.CMsgMouseWheel = (function() {
    
        /**
         * Properties of a CMsgMouseWheel.
         * @exports ICMsgMouseWheel
         * @interface ICMsgMouseWheel
         * @property {number|null} [browser_handle] CMsgMouseWheel browser_handle
         * @property {number|null} [deltax] CMsgMouseWheel deltax
         * @property {number|null} [deltay] CMsgMouseWheel deltay
         * @property {number|null} [modifiers] CMsgMouseWheel modifiers
         */
    
        /**
         * Constructs a new CMsgMouseWheel.
         * @exports CMsgMouseWheel
         * @classdesc Represents a CMsgMouseWheel.
         * @implements ICMsgMouseWheel
         * @constructor
         * @param {ICMsgMouseWheel=} [properties] Properties to set
         */
        function CMsgMouseWheel(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgMouseWheel browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgMouseWheel
         * @instance
         */
        CMsgMouseWheel.prototype.browser_handle = 0;
    
        /**
         * CMsgMouseWheel deltax.
         * @member {number} deltax
         * @memberof CMsgMouseWheel
         * @instance
         */
        CMsgMouseWheel.prototype.deltax = 0;
    
        /**
         * CMsgMouseWheel deltay.
         * @member {number} deltay
         * @memberof CMsgMouseWheel
         * @instance
         */
        CMsgMouseWheel.prototype.deltay = 0;
    
        /**
         * CMsgMouseWheel modifiers.
         * @member {number} modifiers
         * @memberof CMsgMouseWheel
         * @instance
         */
        CMsgMouseWheel.prototype.modifiers = 0;
    
        /**
         * Creates a new CMsgMouseWheel instance using the specified properties.
         * @function create
         * @memberof CMsgMouseWheel
         * @static
         * @param {ICMsgMouseWheel=} [properties] Properties to set
         * @returns {CMsgMouseWheel} CMsgMouseWheel instance
         */
        CMsgMouseWheel.create = function create(properties) {
            return new CMsgMouseWheel(properties);
        };
    
        /**
         * Encodes the specified CMsgMouseWheel message. Does not implicitly {@link CMsgMouseWheel.verify|verify} messages.
         * @function encode
         * @memberof CMsgMouseWheel
         * @static
         * @param {ICMsgMouseWheel} message CMsgMouseWheel message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgMouseWheel.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.deltax != null && Object.hasOwnProperty.call(message, "deltax"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.deltax);
            if (message.deltay != null && Object.hasOwnProperty.call(message, "deltay"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.deltay);
            if (message.modifiers != null && Object.hasOwnProperty.call(message, "modifiers"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.modifiers);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgMouseWheel message, length delimited. Does not implicitly {@link CMsgMouseWheel.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgMouseWheel
         * @static
         * @param {ICMsgMouseWheel} message CMsgMouseWheel message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgMouseWheel.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgMouseWheel message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgMouseWheel
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgMouseWheel} CMsgMouseWheel
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgMouseWheel.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgMouseWheel();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.deltax = reader.int32();
                    break;
                case 3:
                    message.deltay = reader.int32();
                    break;
                case 4:
                    message.modifiers = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgMouseWheel message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgMouseWheel
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgMouseWheel} CMsgMouseWheel
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgMouseWheel.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgMouseWheel message.
         * @function verify
         * @memberof CMsgMouseWheel
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgMouseWheel.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.deltax != null && message.hasOwnProperty("deltax"))
                if (!$util.isInteger(message.deltax))
                    return "deltax: integer expected";
            if (message.deltay != null && message.hasOwnProperty("deltay"))
                if (!$util.isInteger(message.deltay))
                    return "deltay: integer expected";
            if (message.modifiers != null && message.hasOwnProperty("modifiers"))
                if (!$util.isInteger(message.modifiers))
                    return "modifiers: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgMouseWheel message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgMouseWheel
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgMouseWheel} CMsgMouseWheel
         */
        CMsgMouseWheel.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgMouseWheel)
                return object;
            var message = new $root.CMsgMouseWheel();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.deltax != null)
                message.deltax = object.deltax | 0;
            if (object.deltay != null)
                message.deltay = object.deltay | 0;
            if (object.modifiers != null)
                message.modifiers = object.modifiers >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgMouseWheel message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgMouseWheel
         * @static
         * @param {CMsgMouseWheel} message CMsgMouseWheel
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgMouseWheel.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.deltax = 0;
                object.deltay = 0;
                object.modifiers = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.deltax != null && message.hasOwnProperty("deltax"))
                object.deltax = message.deltax;
            if (message.deltay != null && message.hasOwnProperty("deltay"))
                object.deltay = message.deltay;
            if (message.modifiers != null && message.hasOwnProperty("modifiers"))
                object.modifiers = message.modifiers;
            return object;
        };
    
        /**
         * Converts this CMsgMouseWheel to JSON.
         * @function toJSON
         * @memberof CMsgMouseWheel
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgMouseWheel.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgMouseWheel;
    })();
    
    $root.CMsgMouseMove = (function() {
    
        /**
         * Properties of a CMsgMouseMove.
         * @exports ICMsgMouseMove
         * @interface ICMsgMouseMove
         * @property {number|null} [browser_handle] CMsgMouseMove browser_handle
         * @property {number|null} [x] CMsgMouseMove x
         * @property {number|null} [y] CMsgMouseMove y
         * @property {number|null} [modifiers] CMsgMouseMove modifiers
         */
    
        /**
         * Constructs a new CMsgMouseMove.
         * @exports CMsgMouseMove
         * @classdesc Represents a CMsgMouseMove.
         * @implements ICMsgMouseMove
         * @constructor
         * @param {ICMsgMouseMove=} [properties] Properties to set
         */
        function CMsgMouseMove(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgMouseMove browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgMouseMove
         * @instance
         */
        CMsgMouseMove.prototype.browser_handle = 0;
    
        /**
         * CMsgMouseMove x.
         * @member {number} x
         * @memberof CMsgMouseMove
         * @instance
         */
        CMsgMouseMove.prototype.x = 0;
    
        /**
         * CMsgMouseMove y.
         * @member {number} y
         * @memberof CMsgMouseMove
         * @instance
         */
        CMsgMouseMove.prototype.y = 0;
    
        /**
         * CMsgMouseMove modifiers.
         * @member {number} modifiers
         * @memberof CMsgMouseMove
         * @instance
         */
        CMsgMouseMove.prototype.modifiers = 0;
    
        /**
         * Creates a new CMsgMouseMove instance using the specified properties.
         * @function create
         * @memberof CMsgMouseMove
         * @static
         * @param {ICMsgMouseMove=} [properties] Properties to set
         * @returns {CMsgMouseMove} CMsgMouseMove instance
         */
        CMsgMouseMove.create = function create(properties) {
            return new CMsgMouseMove(properties);
        };
    
        /**
         * Encodes the specified CMsgMouseMove message. Does not implicitly {@link CMsgMouseMove.verify|verify} messages.
         * @function encode
         * @memberof CMsgMouseMove
         * @static
         * @param {ICMsgMouseMove} message CMsgMouseMove message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgMouseMove.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.x != null && Object.hasOwnProperty.call(message, "x"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.x);
            if (message.y != null && Object.hasOwnProperty.call(message, "y"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.y);
            if (message.modifiers != null && Object.hasOwnProperty.call(message, "modifiers"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.modifiers);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgMouseMove message, length delimited. Does not implicitly {@link CMsgMouseMove.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgMouseMove
         * @static
         * @param {ICMsgMouseMove} message CMsgMouseMove message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgMouseMove.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgMouseMove message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgMouseMove
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgMouseMove} CMsgMouseMove
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgMouseMove.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgMouseMove();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.x = reader.int32();
                    break;
                case 3:
                    message.y = reader.int32();
                    break;
                case 4:
                    message.modifiers = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgMouseMove message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgMouseMove
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgMouseMove} CMsgMouseMove
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgMouseMove.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgMouseMove message.
         * @function verify
         * @memberof CMsgMouseMove
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgMouseMove.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.x != null && message.hasOwnProperty("x"))
                if (!$util.isInteger(message.x))
                    return "x: integer expected";
            if (message.y != null && message.hasOwnProperty("y"))
                if (!$util.isInteger(message.y))
                    return "y: integer expected";
            if (message.modifiers != null && message.hasOwnProperty("modifiers"))
                if (!$util.isInteger(message.modifiers))
                    return "modifiers: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgMouseMove message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgMouseMove
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgMouseMove} CMsgMouseMove
         */
        CMsgMouseMove.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgMouseMove)
                return object;
            var message = new $root.CMsgMouseMove();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.x != null)
                message.x = object.x | 0;
            if (object.y != null)
                message.y = object.y | 0;
            if (object.modifiers != null)
                message.modifiers = object.modifiers >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgMouseMove message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgMouseMove
         * @static
         * @param {CMsgMouseMove} message CMsgMouseMove
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgMouseMove.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.x = 0;
                object.y = 0;
                object.modifiers = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.x != null && message.hasOwnProperty("x"))
                object.x = message.x;
            if (message.y != null && message.hasOwnProperty("y"))
                object.y = message.y;
            if (message.modifiers != null && message.hasOwnProperty("modifiers"))
                object.modifiers = message.modifiers;
            return object;
        };
    
        /**
         * Converts this CMsgMouseMove to JSON.
         * @function toJSON
         * @memberof CMsgMouseMove
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgMouseMove.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgMouseMove;
    })();
    
    $root.CMsgMouseLeave = (function() {
    
        /**
         * Properties of a CMsgMouseLeave.
         * @exports ICMsgMouseLeave
         * @interface ICMsgMouseLeave
         * @property {number|null} [browser_handle] CMsgMouseLeave browser_handle
         */
    
        /**
         * Constructs a new CMsgMouseLeave.
         * @exports CMsgMouseLeave
         * @classdesc Represents a CMsgMouseLeave.
         * @implements ICMsgMouseLeave
         * @constructor
         * @param {ICMsgMouseLeave=} [properties] Properties to set
         */
        function CMsgMouseLeave(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgMouseLeave browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgMouseLeave
         * @instance
         */
        CMsgMouseLeave.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgMouseLeave instance using the specified properties.
         * @function create
         * @memberof CMsgMouseLeave
         * @static
         * @param {ICMsgMouseLeave=} [properties] Properties to set
         * @returns {CMsgMouseLeave} CMsgMouseLeave instance
         */
        CMsgMouseLeave.create = function create(properties) {
            return new CMsgMouseLeave(properties);
        };
    
        /**
         * Encodes the specified CMsgMouseLeave message. Does not implicitly {@link CMsgMouseLeave.verify|verify} messages.
         * @function encode
         * @memberof CMsgMouseLeave
         * @static
         * @param {ICMsgMouseLeave} message CMsgMouseLeave message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgMouseLeave.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgMouseLeave message, length delimited. Does not implicitly {@link CMsgMouseLeave.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgMouseLeave
         * @static
         * @param {ICMsgMouseLeave} message CMsgMouseLeave message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgMouseLeave.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgMouseLeave message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgMouseLeave
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgMouseLeave} CMsgMouseLeave
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgMouseLeave.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgMouseLeave();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgMouseLeave message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgMouseLeave
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgMouseLeave} CMsgMouseLeave
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgMouseLeave.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgMouseLeave message.
         * @function verify
         * @memberof CMsgMouseLeave
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgMouseLeave.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgMouseLeave message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgMouseLeave
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgMouseLeave} CMsgMouseLeave
         */
        CMsgMouseLeave.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgMouseLeave)
                return object;
            var message = new $root.CMsgMouseLeave();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgMouseLeave message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgMouseLeave
         * @static
         * @param {CMsgMouseLeave} message CMsgMouseLeave
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgMouseLeave.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgMouseLeave to JSON.
         * @function toJSON
         * @memberof CMsgMouseLeave
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgMouseLeave.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgMouseLeave;
    })();
    
    $root.CMsgBrowserCreate = (function() {
    
        /**
         * Properties of a CMsgBrowserCreate.
         * @exports ICMsgBrowserCreate
         * @interface ICMsgBrowserCreate
         * @property {number|null} [request_id] CMsgBrowserCreate request_id
         * @property {string|null} [useragent] CMsgBrowserCreate useragent
         * @property {string|null} [user_css] CMsgBrowserCreate user_css
         * @property {boolean|null} [native_dropdowns] CMsgBrowserCreate native_dropdowns
         * @property {number|null} [dpi_scaling] CMsgBrowserCreate dpi_scaling
         * @property {boolean|null} [offscreen] CMsgBrowserCreate offscreen
         * @property {number|null} [initial_width] CMsgBrowserCreate initial_width
         * @property {number|null} [initial_height] CMsgBrowserCreate initial_height
         * @property {string|null} [window_icon] CMsgBrowserCreate window_icon
         * @property {boolean|null} [borderless] CMsgBrowserCreate borderless
         * @property {string|null} [vroverlay_key] CMsgBrowserCreate vroverlay_key
         * @property {number|null} [browser_type] CMsgBrowserCreate browser_type
         * @property {number|null} [initial_top] CMsgBrowserCreate initial_top
         * @property {number|null} [initial_left] CMsgBrowserCreate initial_left
         * @property {boolean|null} [only_allow_trusted_popups] CMsgBrowserCreate only_allow_trusted_popups
         * @property {string|null} [initial_url] CMsgBrowserCreate initial_url
         * @property {number|Long|null} [hwnd_parent] CMsgBrowserCreate hwnd_parent
         */
    
        /**
         * Constructs a new CMsgBrowserCreate.
         * @exports CMsgBrowserCreate
         * @classdesc Represents a CMsgBrowserCreate.
         * @implements ICMsgBrowserCreate
         * @constructor
         * @param {ICMsgBrowserCreate=} [properties] Properties to set
         */
        function CMsgBrowserCreate(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgBrowserCreate request_id.
         * @member {number} request_id
         * @memberof CMsgBrowserCreate
         * @instance
         */
        CMsgBrowserCreate.prototype.request_id = 0;
    
        /**
         * CMsgBrowserCreate useragent.
         * @member {string} useragent
         * @memberof CMsgBrowserCreate
         * @instance
         */
        CMsgBrowserCreate.prototype.useragent = "";
    
        /**
         * CMsgBrowserCreate user_css.
         * @member {string} user_css
         * @memberof CMsgBrowserCreate
         * @instance
         */
        CMsgBrowserCreate.prototype.user_css = "";
    
        /**
         * CMsgBrowserCreate native_dropdowns.
         * @member {boolean} native_dropdowns
         * @memberof CMsgBrowserCreate
         * @instance
         */
        CMsgBrowserCreate.prototype.native_dropdowns = false;
    
        /**
         * CMsgBrowserCreate dpi_scaling.
         * @member {number} dpi_scaling
         * @memberof CMsgBrowserCreate
         * @instance
         */
        CMsgBrowserCreate.prototype.dpi_scaling = 0;
    
        /**
         * CMsgBrowserCreate offscreen.
         * @member {boolean} offscreen
         * @memberof CMsgBrowserCreate
         * @instance
         */
        CMsgBrowserCreate.prototype.offscreen = true;
    
        /**
         * CMsgBrowserCreate initial_width.
         * @member {number} initial_width
         * @memberof CMsgBrowserCreate
         * @instance
         */
        CMsgBrowserCreate.prototype.initial_width = 0;
    
        /**
         * CMsgBrowserCreate initial_height.
         * @member {number} initial_height
         * @memberof CMsgBrowserCreate
         * @instance
         */
        CMsgBrowserCreate.prototype.initial_height = 0;
    
        /**
         * CMsgBrowserCreate window_icon.
         * @member {string} window_icon
         * @memberof CMsgBrowserCreate
         * @instance
         */
        CMsgBrowserCreate.prototype.window_icon = "";
    
        /**
         * CMsgBrowserCreate borderless.
         * @member {boolean} borderless
         * @memberof CMsgBrowserCreate
         * @instance
         */
        CMsgBrowserCreate.prototype.borderless = false;
    
        /**
         * CMsgBrowserCreate vroverlay_key.
         * @member {string} vroverlay_key
         * @memberof CMsgBrowserCreate
         * @instance
         */
        CMsgBrowserCreate.prototype.vroverlay_key = "";
    
        /**
         * CMsgBrowserCreate browser_type.
         * @member {number} browser_type
         * @memberof CMsgBrowserCreate
         * @instance
         */
        CMsgBrowserCreate.prototype.browser_type = 0;
    
        /**
         * CMsgBrowserCreate initial_top.
         * @member {number} initial_top
         * @memberof CMsgBrowserCreate
         * @instance
         */
        CMsgBrowserCreate.prototype.initial_top = -2147483648;
    
        /**
         * CMsgBrowserCreate initial_left.
         * @member {number} initial_left
         * @memberof CMsgBrowserCreate
         * @instance
         */
        CMsgBrowserCreate.prototype.initial_left = -2147483648;
    
        /**
         * CMsgBrowserCreate only_allow_trusted_popups.
         * @member {boolean} only_allow_trusted_popups
         * @memberof CMsgBrowserCreate
         * @instance
         */
        CMsgBrowserCreate.prototype.only_allow_trusted_popups = false;
    
        /**
         * CMsgBrowserCreate initial_url.
         * @member {string} initial_url
         * @memberof CMsgBrowserCreate
         * @instance
         */
        CMsgBrowserCreate.prototype.initial_url = "";
    
        /**
         * CMsgBrowserCreate hwnd_parent.
         * @member {number|Long} hwnd_parent
         * @memberof CMsgBrowserCreate
         * @instance
         */
        CMsgBrowserCreate.prototype.hwnd_parent = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CMsgBrowserCreate instance using the specified properties.
         * @function create
         * @memberof CMsgBrowserCreate
         * @static
         * @param {ICMsgBrowserCreate=} [properties] Properties to set
         * @returns {CMsgBrowserCreate} CMsgBrowserCreate instance
         */
        CMsgBrowserCreate.create = function create(properties) {
            return new CMsgBrowserCreate(properties);
        };
    
        /**
         * Encodes the specified CMsgBrowserCreate message. Does not implicitly {@link CMsgBrowserCreate.verify|verify} messages.
         * @function encode
         * @memberof CMsgBrowserCreate
         * @static
         * @param {ICMsgBrowserCreate} message CMsgBrowserCreate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgBrowserCreate.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.request_id != null && Object.hasOwnProperty.call(message, "request_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.request_id);
            if (message.useragent != null && Object.hasOwnProperty.call(message, "useragent"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.useragent);
            if (message.user_css != null && Object.hasOwnProperty.call(message, "user_css"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.user_css);
            if (message.native_dropdowns != null && Object.hasOwnProperty.call(message, "native_dropdowns"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.native_dropdowns);
            if (message.dpi_scaling != null && Object.hasOwnProperty.call(message, "dpi_scaling"))
                writer.uint32(/* id 7, wireType 5 =*/61).float(message.dpi_scaling);
            if (message.offscreen != null && Object.hasOwnProperty.call(message, "offscreen"))
                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.offscreen);
            if (message.initial_width != null && Object.hasOwnProperty.call(message, "initial_width"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.initial_width);
            if (message.initial_height != null && Object.hasOwnProperty.call(message, "initial_height"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.initial_height);
            if (message.window_icon != null && Object.hasOwnProperty.call(message, "window_icon"))
                writer.uint32(/* id 11, wireType 2 =*/90).string(message.window_icon);
            if (message.borderless != null && Object.hasOwnProperty.call(message, "borderless"))
                writer.uint32(/* id 12, wireType 0 =*/96).bool(message.borderless);
            if (message.vroverlay_key != null && Object.hasOwnProperty.call(message, "vroverlay_key"))
                writer.uint32(/* id 13, wireType 2 =*/106).string(message.vroverlay_key);
            if (message.browser_type != null && Object.hasOwnProperty.call(message, "browser_type"))
                writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.browser_type);
            if (message.initial_top != null && Object.hasOwnProperty.call(message, "initial_top"))
                writer.uint32(/* id 15, wireType 0 =*/120).int32(message.initial_top);
            if (message.initial_left != null && Object.hasOwnProperty.call(message, "initial_left"))
                writer.uint32(/* id 16, wireType 0 =*/128).int32(message.initial_left);
            if (message.only_allow_trusted_popups != null && Object.hasOwnProperty.call(message, "only_allow_trusted_popups"))
                writer.uint32(/* id 17, wireType 0 =*/136).bool(message.only_allow_trusted_popups);
            if (message.initial_url != null && Object.hasOwnProperty.call(message, "initial_url"))
                writer.uint32(/* id 18, wireType 2 =*/146).string(message.initial_url);
            if (message.hwnd_parent != null && Object.hasOwnProperty.call(message, "hwnd_parent"))
                writer.uint32(/* id 19, wireType 1 =*/153).fixed64(message.hwnd_parent);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgBrowserCreate message, length delimited. Does not implicitly {@link CMsgBrowserCreate.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgBrowserCreate
         * @static
         * @param {ICMsgBrowserCreate} message CMsgBrowserCreate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgBrowserCreate.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgBrowserCreate message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgBrowserCreate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgBrowserCreate} CMsgBrowserCreate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgBrowserCreate.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBrowserCreate();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.request_id = reader.uint32();
                    break;
                case 3:
                    message.useragent = reader.string();
                    break;
                case 5:
                    message.user_css = reader.string();
                    break;
                case 6:
                    message.native_dropdowns = reader.bool();
                    break;
                case 7:
                    message.dpi_scaling = reader.float();
                    break;
                case 8:
                    message.offscreen = reader.bool();
                    break;
                case 9:
                    message.initial_width = reader.uint32();
                    break;
                case 10:
                    message.initial_height = reader.uint32();
                    break;
                case 11:
                    message.window_icon = reader.string();
                    break;
                case 12:
                    message.borderless = reader.bool();
                    break;
                case 13:
                    message.vroverlay_key = reader.string();
                    break;
                case 14:
                    message.browser_type = reader.uint32();
                    break;
                case 15:
                    message.initial_top = reader.int32();
                    break;
                case 16:
                    message.initial_left = reader.int32();
                    break;
                case 17:
                    message.only_allow_trusted_popups = reader.bool();
                    break;
                case 18:
                    message.initial_url = reader.string();
                    break;
                case 19:
                    message.hwnd_parent = reader.fixed64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgBrowserCreate message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgBrowserCreate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgBrowserCreate} CMsgBrowserCreate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgBrowserCreate.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgBrowserCreate message.
         * @function verify
         * @memberof CMsgBrowserCreate
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgBrowserCreate.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.request_id != null && message.hasOwnProperty("request_id"))
                if (!$util.isInteger(message.request_id))
                    return "request_id: integer expected";
            if (message.useragent != null && message.hasOwnProperty("useragent"))
                if (!$util.isString(message.useragent))
                    return "useragent: string expected";
            if (message.user_css != null && message.hasOwnProperty("user_css"))
                if (!$util.isString(message.user_css))
                    return "user_css: string expected";
            if (message.native_dropdowns != null && message.hasOwnProperty("native_dropdowns"))
                if (typeof message.native_dropdowns !== "boolean")
                    return "native_dropdowns: boolean expected";
            if (message.dpi_scaling != null && message.hasOwnProperty("dpi_scaling"))
                if (typeof message.dpi_scaling !== "number")
                    return "dpi_scaling: number expected";
            if (message.offscreen != null && message.hasOwnProperty("offscreen"))
                if (typeof message.offscreen !== "boolean")
                    return "offscreen: boolean expected";
            if (message.initial_width != null && message.hasOwnProperty("initial_width"))
                if (!$util.isInteger(message.initial_width))
                    return "initial_width: integer expected";
            if (message.initial_height != null && message.hasOwnProperty("initial_height"))
                if (!$util.isInteger(message.initial_height))
                    return "initial_height: integer expected";
            if (message.window_icon != null && message.hasOwnProperty("window_icon"))
                if (!$util.isString(message.window_icon))
                    return "window_icon: string expected";
            if (message.borderless != null && message.hasOwnProperty("borderless"))
                if (typeof message.borderless !== "boolean")
                    return "borderless: boolean expected";
            if (message.vroverlay_key != null && message.hasOwnProperty("vroverlay_key"))
                if (!$util.isString(message.vroverlay_key))
                    return "vroverlay_key: string expected";
            if (message.browser_type != null && message.hasOwnProperty("browser_type"))
                if (!$util.isInteger(message.browser_type))
                    return "browser_type: integer expected";
            if (message.initial_top != null && message.hasOwnProperty("initial_top"))
                if (!$util.isInteger(message.initial_top))
                    return "initial_top: integer expected";
            if (message.initial_left != null && message.hasOwnProperty("initial_left"))
                if (!$util.isInteger(message.initial_left))
                    return "initial_left: integer expected";
            if (message.only_allow_trusted_popups != null && message.hasOwnProperty("only_allow_trusted_popups"))
                if (typeof message.only_allow_trusted_popups !== "boolean")
                    return "only_allow_trusted_popups: boolean expected";
            if (message.initial_url != null && message.hasOwnProperty("initial_url"))
                if (!$util.isString(message.initial_url))
                    return "initial_url: string expected";
            if (message.hwnd_parent != null && message.hasOwnProperty("hwnd_parent"))
                if (!$util.isInteger(message.hwnd_parent) && !(message.hwnd_parent && $util.isInteger(message.hwnd_parent.low) && $util.isInteger(message.hwnd_parent.high)))
                    return "hwnd_parent: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgBrowserCreate message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgBrowserCreate
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgBrowserCreate} CMsgBrowserCreate
         */
        CMsgBrowserCreate.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgBrowserCreate)
                return object;
            var message = new $root.CMsgBrowserCreate();
            if (object.request_id != null)
                message.request_id = object.request_id >>> 0;
            if (object.useragent != null)
                message.useragent = String(object.useragent);
            if (object.user_css != null)
                message.user_css = String(object.user_css);
            if (object.native_dropdowns != null)
                message.native_dropdowns = Boolean(object.native_dropdowns);
            if (object.dpi_scaling != null)
                message.dpi_scaling = Number(object.dpi_scaling);
            if (object.offscreen != null)
                message.offscreen = Boolean(object.offscreen);
            if (object.initial_width != null)
                message.initial_width = object.initial_width >>> 0;
            if (object.initial_height != null)
                message.initial_height = object.initial_height >>> 0;
            if (object.window_icon != null)
                message.window_icon = String(object.window_icon);
            if (object.borderless != null)
                message.borderless = Boolean(object.borderless);
            if (object.vroverlay_key != null)
                message.vroverlay_key = String(object.vroverlay_key);
            if (object.browser_type != null)
                message.browser_type = object.browser_type >>> 0;
            if (object.initial_top != null)
                message.initial_top = object.initial_top | 0;
            if (object.initial_left != null)
                message.initial_left = object.initial_left | 0;
            if (object.only_allow_trusted_popups != null)
                message.only_allow_trusted_popups = Boolean(object.only_allow_trusted_popups);
            if (object.initial_url != null)
                message.initial_url = String(object.initial_url);
            if (object.hwnd_parent != null)
                if ($util.Long)
                    (message.hwnd_parent = $util.Long.fromValue(object.hwnd_parent)).unsigned = false;
                else if (typeof object.hwnd_parent === "string")
                    message.hwnd_parent = parseInt(object.hwnd_parent, 10);
                else if (typeof object.hwnd_parent === "number")
                    message.hwnd_parent = object.hwnd_parent;
                else if (typeof object.hwnd_parent === "object")
                    message.hwnd_parent = new $util.LongBits(object.hwnd_parent.low >>> 0, object.hwnd_parent.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgBrowserCreate message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgBrowserCreate
         * @static
         * @param {CMsgBrowserCreate} message CMsgBrowserCreate
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgBrowserCreate.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.request_id = 0;
                object.useragent = "";
                object.user_css = "";
                object.native_dropdowns = false;
                object.dpi_scaling = 0;
                object.offscreen = true;
                object.initial_width = 0;
                object.initial_height = 0;
                object.window_icon = "";
                object.borderless = false;
                object.vroverlay_key = "";
                object.browser_type = 0;
                object.initial_top = -2147483648;
                object.initial_left = -2147483648;
                object.only_allow_trusted_popups = false;
                object.initial_url = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.hwnd_parent = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.hwnd_parent = options.longs === String ? "0" : 0;
            }
            if (message.request_id != null && message.hasOwnProperty("request_id"))
                object.request_id = message.request_id;
            if (message.useragent != null && message.hasOwnProperty("useragent"))
                object.useragent = message.useragent;
            if (message.user_css != null && message.hasOwnProperty("user_css"))
                object.user_css = message.user_css;
            if (message.native_dropdowns != null && message.hasOwnProperty("native_dropdowns"))
                object.native_dropdowns = message.native_dropdowns;
            if (message.dpi_scaling != null && message.hasOwnProperty("dpi_scaling"))
                object.dpi_scaling = options.json && !isFinite(message.dpi_scaling) ? String(message.dpi_scaling) : message.dpi_scaling;
            if (message.offscreen != null && message.hasOwnProperty("offscreen"))
                object.offscreen = message.offscreen;
            if (message.initial_width != null && message.hasOwnProperty("initial_width"))
                object.initial_width = message.initial_width;
            if (message.initial_height != null && message.hasOwnProperty("initial_height"))
                object.initial_height = message.initial_height;
            if (message.window_icon != null && message.hasOwnProperty("window_icon"))
                object.window_icon = message.window_icon;
            if (message.borderless != null && message.hasOwnProperty("borderless"))
                object.borderless = message.borderless;
            if (message.vroverlay_key != null && message.hasOwnProperty("vroverlay_key"))
                object.vroverlay_key = message.vroverlay_key;
            if (message.browser_type != null && message.hasOwnProperty("browser_type"))
                object.browser_type = message.browser_type;
            if (message.initial_top != null && message.hasOwnProperty("initial_top"))
                object.initial_top = message.initial_top;
            if (message.initial_left != null && message.hasOwnProperty("initial_left"))
                object.initial_left = message.initial_left;
            if (message.only_allow_trusted_popups != null && message.hasOwnProperty("only_allow_trusted_popups"))
                object.only_allow_trusted_popups = message.only_allow_trusted_popups;
            if (message.initial_url != null && message.hasOwnProperty("initial_url"))
                object.initial_url = message.initial_url;
            if (message.hwnd_parent != null && message.hasOwnProperty("hwnd_parent"))
                if (typeof message.hwnd_parent === "number")
                    object.hwnd_parent = options.longs === String ? String(message.hwnd_parent) : message.hwnd_parent;
                else
                    object.hwnd_parent = options.longs === String ? $util.Long.prototype.toString.call(message.hwnd_parent) : options.longs === Number ? new $util.LongBits(message.hwnd_parent.low >>> 0, message.hwnd_parent.high >>> 0).toNumber() : message.hwnd_parent;
            return object;
        };
    
        /**
         * Converts this CMsgBrowserCreate to JSON.
         * @function toJSON
         * @memberof CMsgBrowserCreate
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgBrowserCreate.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgBrowserCreate;
    })();
    
    $root.CMsgBrowserCreateResponse = (function() {
    
        /**
         * Properties of a CMsgBrowserCreateResponse.
         * @exports ICMsgBrowserCreateResponse
         * @interface ICMsgBrowserCreateResponse
         * @property {number|null} [browser_handle] CMsgBrowserCreateResponse browser_handle
         * @property {number|null} [request_id] CMsgBrowserCreateResponse request_id
         */
    
        /**
         * Constructs a new CMsgBrowserCreateResponse.
         * @exports CMsgBrowserCreateResponse
         * @classdesc Represents a CMsgBrowserCreateResponse.
         * @implements ICMsgBrowserCreateResponse
         * @constructor
         * @param {ICMsgBrowserCreateResponse=} [properties] Properties to set
         */
        function CMsgBrowserCreateResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgBrowserCreateResponse browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgBrowserCreateResponse
         * @instance
         */
        CMsgBrowserCreateResponse.prototype.browser_handle = 0;
    
        /**
         * CMsgBrowserCreateResponse request_id.
         * @member {number} request_id
         * @memberof CMsgBrowserCreateResponse
         * @instance
         */
        CMsgBrowserCreateResponse.prototype.request_id = 0;
    
        /**
         * Creates a new CMsgBrowserCreateResponse instance using the specified properties.
         * @function create
         * @memberof CMsgBrowserCreateResponse
         * @static
         * @param {ICMsgBrowserCreateResponse=} [properties] Properties to set
         * @returns {CMsgBrowserCreateResponse} CMsgBrowserCreateResponse instance
         */
        CMsgBrowserCreateResponse.create = function create(properties) {
            return new CMsgBrowserCreateResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgBrowserCreateResponse message. Does not implicitly {@link CMsgBrowserCreateResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgBrowserCreateResponse
         * @static
         * @param {ICMsgBrowserCreateResponse} message CMsgBrowserCreateResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgBrowserCreateResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.request_id != null && Object.hasOwnProperty.call(message, "request_id"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.request_id);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgBrowserCreateResponse message, length delimited. Does not implicitly {@link CMsgBrowserCreateResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgBrowserCreateResponse
         * @static
         * @param {ICMsgBrowserCreateResponse} message CMsgBrowserCreateResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgBrowserCreateResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgBrowserCreateResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgBrowserCreateResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgBrowserCreateResponse} CMsgBrowserCreateResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgBrowserCreateResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBrowserCreateResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.request_id = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgBrowserCreateResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgBrowserCreateResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgBrowserCreateResponse} CMsgBrowserCreateResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgBrowserCreateResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgBrowserCreateResponse message.
         * @function verify
         * @memberof CMsgBrowserCreateResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgBrowserCreateResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.request_id != null && message.hasOwnProperty("request_id"))
                if (!$util.isInteger(message.request_id))
                    return "request_id: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgBrowserCreateResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgBrowserCreateResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgBrowserCreateResponse} CMsgBrowserCreateResponse
         */
        CMsgBrowserCreateResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgBrowserCreateResponse)
                return object;
            var message = new $root.CMsgBrowserCreateResponse();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.request_id != null)
                message.request_id = object.request_id >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgBrowserCreateResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgBrowserCreateResponse
         * @static
         * @param {CMsgBrowserCreateResponse} message CMsgBrowserCreateResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgBrowserCreateResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.request_id = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.request_id != null && message.hasOwnProperty("request_id"))
                object.request_id = message.request_id;
            return object;
        };
    
        /**
         * Converts this CMsgBrowserCreateResponse to JSON.
         * @function toJSON
         * @memberof CMsgBrowserCreateResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgBrowserCreateResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgBrowserCreateResponse;
    })();
    
    $root.CMsgBrowserRemove = (function() {
    
        /**
         * Properties of a CMsgBrowserRemove.
         * @exports ICMsgBrowserRemove
         * @interface ICMsgBrowserRemove
         * @property {number|null} [browser_handle] CMsgBrowserRemove browser_handle
         */
    
        /**
         * Constructs a new CMsgBrowserRemove.
         * @exports CMsgBrowserRemove
         * @classdesc Represents a CMsgBrowserRemove.
         * @implements ICMsgBrowserRemove
         * @constructor
         * @param {ICMsgBrowserRemove=} [properties] Properties to set
         */
        function CMsgBrowserRemove(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgBrowserRemove browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgBrowserRemove
         * @instance
         */
        CMsgBrowserRemove.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgBrowserRemove instance using the specified properties.
         * @function create
         * @memberof CMsgBrowserRemove
         * @static
         * @param {ICMsgBrowserRemove=} [properties] Properties to set
         * @returns {CMsgBrowserRemove} CMsgBrowserRemove instance
         */
        CMsgBrowserRemove.create = function create(properties) {
            return new CMsgBrowserRemove(properties);
        };
    
        /**
         * Encodes the specified CMsgBrowserRemove message. Does not implicitly {@link CMsgBrowserRemove.verify|verify} messages.
         * @function encode
         * @memberof CMsgBrowserRemove
         * @static
         * @param {ICMsgBrowserRemove} message CMsgBrowserRemove message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgBrowserRemove.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgBrowserRemove message, length delimited. Does not implicitly {@link CMsgBrowserRemove.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgBrowserRemove
         * @static
         * @param {ICMsgBrowserRemove} message CMsgBrowserRemove message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgBrowserRemove.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgBrowserRemove message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgBrowserRemove
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgBrowserRemove} CMsgBrowserRemove
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgBrowserRemove.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBrowserRemove();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgBrowserRemove message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgBrowserRemove
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgBrowserRemove} CMsgBrowserRemove
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgBrowserRemove.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgBrowserRemove message.
         * @function verify
         * @memberof CMsgBrowserRemove
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgBrowserRemove.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgBrowserRemove message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgBrowserRemove
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgBrowserRemove} CMsgBrowserRemove
         */
        CMsgBrowserRemove.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgBrowserRemove)
                return object;
            var message = new $root.CMsgBrowserRemove();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgBrowserRemove message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgBrowserRemove
         * @static
         * @param {CMsgBrowserRemove} message CMsgBrowserRemove
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgBrowserRemove.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgBrowserRemove to JSON.
         * @function toJSON
         * @memberof CMsgBrowserRemove
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgBrowserRemove.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgBrowserRemove;
    })();
    
    $root.CMsgSetLocalFileRequestMapping = (function() {
    
        /**
         * Properties of a CMsgSetLocalFileRequestMapping.
         * @exports ICMsgSetLocalFileRequestMapping
         * @interface ICMsgSetLocalFileRequestMapping
         * @property {number|null} [browser_handle] CMsgSetLocalFileRequestMapping browser_handle
         * @property {string|null} [request_url] CMsgSetLocalFileRequestMapping request_url
         * @property {string|null} [default_local_path] CMsgSetLocalFileRequestMapping default_local_path
         * @property {Array.<CMsgSetLocalFileRequestMapping.IAdditionalRoute>|null} [routes] CMsgSetLocalFileRequestMapping routes
         */
    
        /**
         * Constructs a new CMsgSetLocalFileRequestMapping.
         * @exports CMsgSetLocalFileRequestMapping
         * @classdesc Represents a CMsgSetLocalFileRequestMapping.
         * @implements ICMsgSetLocalFileRequestMapping
         * @constructor
         * @param {ICMsgSetLocalFileRequestMapping=} [properties] Properties to set
         */
        function CMsgSetLocalFileRequestMapping(properties) {
            this.routes = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSetLocalFileRequestMapping browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgSetLocalFileRequestMapping
         * @instance
         */
        CMsgSetLocalFileRequestMapping.prototype.browser_handle = 0;
    
        /**
         * CMsgSetLocalFileRequestMapping request_url.
         * @member {string} request_url
         * @memberof CMsgSetLocalFileRequestMapping
         * @instance
         */
        CMsgSetLocalFileRequestMapping.prototype.request_url = "";
    
        /**
         * CMsgSetLocalFileRequestMapping default_local_path.
         * @member {string} default_local_path
         * @memberof CMsgSetLocalFileRequestMapping
         * @instance
         */
        CMsgSetLocalFileRequestMapping.prototype.default_local_path = "";
    
        /**
         * CMsgSetLocalFileRequestMapping routes.
         * @member {Array.<CMsgSetLocalFileRequestMapping.IAdditionalRoute>} routes
         * @memberof CMsgSetLocalFileRequestMapping
         * @instance
         */
        CMsgSetLocalFileRequestMapping.prototype.routes = $util.emptyArray;
    
        /**
         * Creates a new CMsgSetLocalFileRequestMapping instance using the specified properties.
         * @function create
         * @memberof CMsgSetLocalFileRequestMapping
         * @static
         * @param {ICMsgSetLocalFileRequestMapping=} [properties] Properties to set
         * @returns {CMsgSetLocalFileRequestMapping} CMsgSetLocalFileRequestMapping instance
         */
        CMsgSetLocalFileRequestMapping.create = function create(properties) {
            return new CMsgSetLocalFileRequestMapping(properties);
        };
    
        /**
         * Encodes the specified CMsgSetLocalFileRequestMapping message. Does not implicitly {@link CMsgSetLocalFileRequestMapping.verify|verify} messages.
         * @function encode
         * @memberof CMsgSetLocalFileRequestMapping
         * @static
         * @param {ICMsgSetLocalFileRequestMapping} message CMsgSetLocalFileRequestMapping message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSetLocalFileRequestMapping.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.request_url != null && Object.hasOwnProperty.call(message, "request_url"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.request_url);
            if (message.default_local_path != null && Object.hasOwnProperty.call(message, "default_local_path"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.default_local_path);
            if (message.routes != null && message.routes.length)
                for (var i = 0; i < message.routes.length; ++i)
                    $root.CMsgSetLocalFileRequestMapping.AdditionalRoute.encode(message.routes[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSetLocalFileRequestMapping message, length delimited. Does not implicitly {@link CMsgSetLocalFileRequestMapping.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSetLocalFileRequestMapping
         * @static
         * @param {ICMsgSetLocalFileRequestMapping} message CMsgSetLocalFileRequestMapping message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSetLocalFileRequestMapping.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSetLocalFileRequestMapping message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSetLocalFileRequestMapping
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSetLocalFileRequestMapping} CMsgSetLocalFileRequestMapping
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSetLocalFileRequestMapping.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSetLocalFileRequestMapping();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.request_url = reader.string();
                    break;
                case 3:
                    message.default_local_path = reader.string();
                    break;
                case 4:
                    if (!(message.routes && message.routes.length))
                        message.routes = [];
                    message.routes.push($root.CMsgSetLocalFileRequestMapping.AdditionalRoute.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSetLocalFileRequestMapping message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSetLocalFileRequestMapping
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSetLocalFileRequestMapping} CMsgSetLocalFileRequestMapping
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSetLocalFileRequestMapping.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSetLocalFileRequestMapping message.
         * @function verify
         * @memberof CMsgSetLocalFileRequestMapping
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSetLocalFileRequestMapping.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.request_url != null && message.hasOwnProperty("request_url"))
                if (!$util.isString(message.request_url))
                    return "request_url: string expected";
            if (message.default_local_path != null && message.hasOwnProperty("default_local_path"))
                if (!$util.isString(message.default_local_path))
                    return "default_local_path: string expected";
            if (message.routes != null && message.hasOwnProperty("routes")) {
                if (!Array.isArray(message.routes))
                    return "routes: array expected";
                for (var i = 0; i < message.routes.length; ++i) {
                    var error = $root.CMsgSetLocalFileRequestMapping.AdditionalRoute.verify(message.routes[i]);
                    if (error)
                        return "routes." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgSetLocalFileRequestMapping message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSetLocalFileRequestMapping
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSetLocalFileRequestMapping} CMsgSetLocalFileRequestMapping
         */
        CMsgSetLocalFileRequestMapping.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSetLocalFileRequestMapping)
                return object;
            var message = new $root.CMsgSetLocalFileRequestMapping();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.request_url != null)
                message.request_url = String(object.request_url);
            if (object.default_local_path != null)
                message.default_local_path = String(object.default_local_path);
            if (object.routes) {
                if (!Array.isArray(object.routes))
                    throw TypeError(".CMsgSetLocalFileRequestMapping.routes: array expected");
                message.routes = [];
                for (var i = 0; i < object.routes.length; ++i) {
                    if (typeof object.routes[i] !== "object")
                        throw TypeError(".CMsgSetLocalFileRequestMapping.routes: object expected");
                    message.routes[i] = $root.CMsgSetLocalFileRequestMapping.AdditionalRoute.fromObject(object.routes[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSetLocalFileRequestMapping message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSetLocalFileRequestMapping
         * @static
         * @param {CMsgSetLocalFileRequestMapping} message CMsgSetLocalFileRequestMapping
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSetLocalFileRequestMapping.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.routes = [];
            if (options.defaults) {
                object.browser_handle = 0;
                object.request_url = "";
                object.default_local_path = "";
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.request_url != null && message.hasOwnProperty("request_url"))
                object.request_url = message.request_url;
            if (message.default_local_path != null && message.hasOwnProperty("default_local_path"))
                object.default_local_path = message.default_local_path;
            if (message.routes && message.routes.length) {
                object.routes = [];
                for (var j = 0; j < message.routes.length; ++j)
                    object.routes[j] = $root.CMsgSetLocalFileRequestMapping.AdditionalRoute.toObject(message.routes[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgSetLocalFileRequestMapping to JSON.
         * @function toJSON
         * @memberof CMsgSetLocalFileRequestMapping
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSetLocalFileRequestMapping.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgSetLocalFileRequestMapping.AdditionalRoute = (function() {
    
            /**
             * Properties of an AdditionalRoute.
             * @memberof CMsgSetLocalFileRequestMapping
             * @interface IAdditionalRoute
             * @property {string|null} [relative_url] AdditionalRoute relative_url
             * @property {string|null} [local_path] AdditionalRoute local_path
             * @property {string|null} [allowed_extensions] AdditionalRoute allowed_extensions
             */
    
            /**
             * Constructs a new AdditionalRoute.
             * @memberof CMsgSetLocalFileRequestMapping
             * @classdesc Represents an AdditionalRoute.
             * @implements IAdditionalRoute
             * @constructor
             * @param {CMsgSetLocalFileRequestMapping.IAdditionalRoute=} [properties] Properties to set
             */
            function AdditionalRoute(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * AdditionalRoute relative_url.
             * @member {string} relative_url
             * @memberof CMsgSetLocalFileRequestMapping.AdditionalRoute
             * @instance
             */
            AdditionalRoute.prototype.relative_url = "";
    
            /**
             * AdditionalRoute local_path.
             * @member {string} local_path
             * @memberof CMsgSetLocalFileRequestMapping.AdditionalRoute
             * @instance
             */
            AdditionalRoute.prototype.local_path = "";
    
            /**
             * AdditionalRoute allowed_extensions.
             * @member {string} allowed_extensions
             * @memberof CMsgSetLocalFileRequestMapping.AdditionalRoute
             * @instance
             */
            AdditionalRoute.prototype.allowed_extensions = "";
    
            /**
             * Creates a new AdditionalRoute instance using the specified properties.
             * @function create
             * @memberof CMsgSetLocalFileRequestMapping.AdditionalRoute
             * @static
             * @param {CMsgSetLocalFileRequestMapping.IAdditionalRoute=} [properties] Properties to set
             * @returns {CMsgSetLocalFileRequestMapping.AdditionalRoute} AdditionalRoute instance
             */
            AdditionalRoute.create = function create(properties) {
                return new AdditionalRoute(properties);
            };
    
            /**
             * Encodes the specified AdditionalRoute message. Does not implicitly {@link CMsgSetLocalFileRequestMapping.AdditionalRoute.verify|verify} messages.
             * @function encode
             * @memberof CMsgSetLocalFileRequestMapping.AdditionalRoute
             * @static
             * @param {CMsgSetLocalFileRequestMapping.IAdditionalRoute} message AdditionalRoute message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AdditionalRoute.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.relative_url != null && Object.hasOwnProperty.call(message, "relative_url"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.relative_url);
                if (message.local_path != null && Object.hasOwnProperty.call(message, "local_path"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.local_path);
                if (message.allowed_extensions != null && Object.hasOwnProperty.call(message, "allowed_extensions"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.allowed_extensions);
                return writer;
            };
    
            /**
             * Encodes the specified AdditionalRoute message, length delimited. Does not implicitly {@link CMsgSetLocalFileRequestMapping.AdditionalRoute.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgSetLocalFileRequestMapping.AdditionalRoute
             * @static
             * @param {CMsgSetLocalFileRequestMapping.IAdditionalRoute} message AdditionalRoute message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AdditionalRoute.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an AdditionalRoute message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgSetLocalFileRequestMapping.AdditionalRoute
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgSetLocalFileRequestMapping.AdditionalRoute} AdditionalRoute
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AdditionalRoute.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSetLocalFileRequestMapping.AdditionalRoute();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.relative_url = reader.string();
                        break;
                    case 2:
                        message.local_path = reader.string();
                        break;
                    case 3:
                        message.allowed_extensions = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an AdditionalRoute message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgSetLocalFileRequestMapping.AdditionalRoute
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgSetLocalFileRequestMapping.AdditionalRoute} AdditionalRoute
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AdditionalRoute.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an AdditionalRoute message.
             * @function verify
             * @memberof CMsgSetLocalFileRequestMapping.AdditionalRoute
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AdditionalRoute.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.relative_url != null && message.hasOwnProperty("relative_url"))
                    if (!$util.isString(message.relative_url))
                        return "relative_url: string expected";
                if (message.local_path != null && message.hasOwnProperty("local_path"))
                    if (!$util.isString(message.local_path))
                        return "local_path: string expected";
                if (message.allowed_extensions != null && message.hasOwnProperty("allowed_extensions"))
                    if (!$util.isString(message.allowed_extensions))
                        return "allowed_extensions: string expected";
                return null;
            };
    
            /**
             * Creates an AdditionalRoute message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgSetLocalFileRequestMapping.AdditionalRoute
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgSetLocalFileRequestMapping.AdditionalRoute} AdditionalRoute
             */
            AdditionalRoute.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgSetLocalFileRequestMapping.AdditionalRoute)
                    return object;
                var message = new $root.CMsgSetLocalFileRequestMapping.AdditionalRoute();
                if (object.relative_url != null)
                    message.relative_url = String(object.relative_url);
                if (object.local_path != null)
                    message.local_path = String(object.local_path);
                if (object.allowed_extensions != null)
                    message.allowed_extensions = String(object.allowed_extensions);
                return message;
            };
    
            /**
             * Creates a plain object from an AdditionalRoute message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgSetLocalFileRequestMapping.AdditionalRoute
             * @static
             * @param {CMsgSetLocalFileRequestMapping.AdditionalRoute} message AdditionalRoute
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AdditionalRoute.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.relative_url = "";
                    object.local_path = "";
                    object.allowed_extensions = "";
                }
                if (message.relative_url != null && message.hasOwnProperty("relative_url"))
                    object.relative_url = message.relative_url;
                if (message.local_path != null && message.hasOwnProperty("local_path"))
                    object.local_path = message.local_path;
                if (message.allowed_extensions != null && message.hasOwnProperty("allowed_extensions"))
                    object.allowed_extensions = message.allowed_extensions;
                return object;
            };
    
            /**
             * Converts this AdditionalRoute to JSON.
             * @function toJSON
             * @memberof CMsgSetLocalFileRequestMapping.AdditionalRoute
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AdditionalRoute.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return AdditionalRoute;
        })();
    
        return CMsgSetLocalFileRequestMapping;
    })();
    
    $root.CMsgBrowserErrorStrings = (function() {
    
        /**
         * Properties of a CMsgBrowserErrorStrings.
         * @exports ICMsgBrowserErrorStrings
         * @interface ICMsgBrowserErrorStrings
         * @property {number|null} [browser_handle] CMsgBrowserErrorStrings browser_handle
         * @property {string|null} [title] CMsgBrowserErrorStrings title
         * @property {string|null} [header] CMsgBrowserErrorStrings header
         * @property {string|null} [cache_miss] CMsgBrowserErrorStrings cache_miss
         * @property {string|null} [bad_url] CMsgBrowserErrorStrings bad_url
         * @property {string|null} [connection_problem] CMsgBrowserErrorStrings connection_problem
         * @property {string|null} [proxy_problem] CMsgBrowserErrorStrings proxy_problem
         * @property {string|null} [unknown] CMsgBrowserErrorStrings unknown
         */
    
        /**
         * Constructs a new CMsgBrowserErrorStrings.
         * @exports CMsgBrowserErrorStrings
         * @classdesc Represents a CMsgBrowserErrorStrings.
         * @implements ICMsgBrowserErrorStrings
         * @constructor
         * @param {ICMsgBrowserErrorStrings=} [properties] Properties to set
         */
        function CMsgBrowserErrorStrings(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgBrowserErrorStrings browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgBrowserErrorStrings
         * @instance
         */
        CMsgBrowserErrorStrings.prototype.browser_handle = 0;
    
        /**
         * CMsgBrowserErrorStrings title.
         * @member {string} title
         * @memberof CMsgBrowserErrorStrings
         * @instance
         */
        CMsgBrowserErrorStrings.prototype.title = "";
    
        /**
         * CMsgBrowserErrorStrings header.
         * @member {string} header
         * @memberof CMsgBrowserErrorStrings
         * @instance
         */
        CMsgBrowserErrorStrings.prototype.header = "";
    
        /**
         * CMsgBrowserErrorStrings cache_miss.
         * @member {string} cache_miss
         * @memberof CMsgBrowserErrorStrings
         * @instance
         */
        CMsgBrowserErrorStrings.prototype.cache_miss = "";
    
        /**
         * CMsgBrowserErrorStrings bad_url.
         * @member {string} bad_url
         * @memberof CMsgBrowserErrorStrings
         * @instance
         */
        CMsgBrowserErrorStrings.prototype.bad_url = "";
    
        /**
         * CMsgBrowserErrorStrings connection_problem.
         * @member {string} connection_problem
         * @memberof CMsgBrowserErrorStrings
         * @instance
         */
        CMsgBrowserErrorStrings.prototype.connection_problem = "";
    
        /**
         * CMsgBrowserErrorStrings proxy_problem.
         * @member {string} proxy_problem
         * @memberof CMsgBrowserErrorStrings
         * @instance
         */
        CMsgBrowserErrorStrings.prototype.proxy_problem = "";
    
        /**
         * CMsgBrowserErrorStrings unknown.
         * @member {string} unknown
         * @memberof CMsgBrowserErrorStrings
         * @instance
         */
        CMsgBrowserErrorStrings.prototype.unknown = "";
    
        /**
         * Creates a new CMsgBrowserErrorStrings instance using the specified properties.
         * @function create
         * @memberof CMsgBrowserErrorStrings
         * @static
         * @param {ICMsgBrowserErrorStrings=} [properties] Properties to set
         * @returns {CMsgBrowserErrorStrings} CMsgBrowserErrorStrings instance
         */
        CMsgBrowserErrorStrings.create = function create(properties) {
            return new CMsgBrowserErrorStrings(properties);
        };
    
        /**
         * Encodes the specified CMsgBrowserErrorStrings message. Does not implicitly {@link CMsgBrowserErrorStrings.verify|verify} messages.
         * @function encode
         * @memberof CMsgBrowserErrorStrings
         * @static
         * @param {ICMsgBrowserErrorStrings} message CMsgBrowserErrorStrings message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgBrowserErrorStrings.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.title);
            if (message.header != null && Object.hasOwnProperty.call(message, "header"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.header);
            if (message.cache_miss != null && Object.hasOwnProperty.call(message, "cache_miss"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.cache_miss);
            if (message.bad_url != null && Object.hasOwnProperty.call(message, "bad_url"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.bad_url);
            if (message.connection_problem != null && Object.hasOwnProperty.call(message, "connection_problem"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.connection_problem);
            if (message.proxy_problem != null && Object.hasOwnProperty.call(message, "proxy_problem"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.proxy_problem);
            if (message.unknown != null && Object.hasOwnProperty.call(message, "unknown"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.unknown);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgBrowserErrorStrings message, length delimited. Does not implicitly {@link CMsgBrowserErrorStrings.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgBrowserErrorStrings
         * @static
         * @param {ICMsgBrowserErrorStrings} message CMsgBrowserErrorStrings message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgBrowserErrorStrings.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgBrowserErrorStrings message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgBrowserErrorStrings
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgBrowserErrorStrings} CMsgBrowserErrorStrings
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgBrowserErrorStrings.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBrowserErrorStrings();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.title = reader.string();
                    break;
                case 3:
                    message.header = reader.string();
                    break;
                case 4:
                    message.cache_miss = reader.string();
                    break;
                case 5:
                    message.bad_url = reader.string();
                    break;
                case 6:
                    message.connection_problem = reader.string();
                    break;
                case 7:
                    message.proxy_problem = reader.string();
                    break;
                case 8:
                    message.unknown = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgBrowserErrorStrings message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgBrowserErrorStrings
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgBrowserErrorStrings} CMsgBrowserErrorStrings
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgBrowserErrorStrings.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgBrowserErrorStrings message.
         * @function verify
         * @memberof CMsgBrowserErrorStrings
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgBrowserErrorStrings.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.title != null && message.hasOwnProperty("title"))
                if (!$util.isString(message.title))
                    return "title: string expected";
            if (message.header != null && message.hasOwnProperty("header"))
                if (!$util.isString(message.header))
                    return "header: string expected";
            if (message.cache_miss != null && message.hasOwnProperty("cache_miss"))
                if (!$util.isString(message.cache_miss))
                    return "cache_miss: string expected";
            if (message.bad_url != null && message.hasOwnProperty("bad_url"))
                if (!$util.isString(message.bad_url))
                    return "bad_url: string expected";
            if (message.connection_problem != null && message.hasOwnProperty("connection_problem"))
                if (!$util.isString(message.connection_problem))
                    return "connection_problem: string expected";
            if (message.proxy_problem != null && message.hasOwnProperty("proxy_problem"))
                if (!$util.isString(message.proxy_problem))
                    return "proxy_problem: string expected";
            if (message.unknown != null && message.hasOwnProperty("unknown"))
                if (!$util.isString(message.unknown))
                    return "unknown: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgBrowserErrorStrings message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgBrowserErrorStrings
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgBrowserErrorStrings} CMsgBrowserErrorStrings
         */
        CMsgBrowserErrorStrings.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgBrowserErrorStrings)
                return object;
            var message = new $root.CMsgBrowserErrorStrings();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.title != null)
                message.title = String(object.title);
            if (object.header != null)
                message.header = String(object.header);
            if (object.cache_miss != null)
                message.cache_miss = String(object.cache_miss);
            if (object.bad_url != null)
                message.bad_url = String(object.bad_url);
            if (object.connection_problem != null)
                message.connection_problem = String(object.connection_problem);
            if (object.proxy_problem != null)
                message.proxy_problem = String(object.proxy_problem);
            if (object.unknown != null)
                message.unknown = String(object.unknown);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgBrowserErrorStrings message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgBrowserErrorStrings
         * @static
         * @param {CMsgBrowserErrorStrings} message CMsgBrowserErrorStrings
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgBrowserErrorStrings.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.title = "";
                object.header = "";
                object.cache_miss = "";
                object.bad_url = "";
                object.connection_problem = "";
                object.proxy_problem = "";
                object.unknown = "";
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.title != null && message.hasOwnProperty("title"))
                object.title = message.title;
            if (message.header != null && message.hasOwnProperty("header"))
                object.header = message.header;
            if (message.cache_miss != null && message.hasOwnProperty("cache_miss"))
                object.cache_miss = message.cache_miss;
            if (message.bad_url != null && message.hasOwnProperty("bad_url"))
                object.bad_url = message.bad_url;
            if (message.connection_problem != null && message.hasOwnProperty("connection_problem"))
                object.connection_problem = message.connection_problem;
            if (message.proxy_problem != null && message.hasOwnProperty("proxy_problem"))
                object.proxy_problem = message.proxy_problem;
            if (message.unknown != null && message.hasOwnProperty("unknown"))
                object.unknown = message.unknown;
            return object;
        };
    
        /**
         * Converts this CMsgBrowserErrorStrings to JSON.
         * @function toJSON
         * @memberof CMsgBrowserErrorStrings
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgBrowserErrorStrings.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgBrowserErrorStrings;
    })();
    
    $root.CMsgBrowserSize = (function() {
    
        /**
         * Properties of a CMsgBrowserSize.
         * @exports ICMsgBrowserSize
         * @interface ICMsgBrowserSize
         * @property {number|null} [browser_handle] CMsgBrowserSize browser_handle
         * @property {number|null} [width] CMsgBrowserSize width
         * @property {number|null} [height] CMsgBrowserSize height
         */
    
        /**
         * Constructs a new CMsgBrowserSize.
         * @exports CMsgBrowserSize
         * @classdesc Represents a CMsgBrowserSize.
         * @implements ICMsgBrowserSize
         * @constructor
         * @param {ICMsgBrowserSize=} [properties] Properties to set
         */
        function CMsgBrowserSize(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgBrowserSize browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgBrowserSize
         * @instance
         */
        CMsgBrowserSize.prototype.browser_handle = 0;
    
        /**
         * CMsgBrowserSize width.
         * @member {number} width
         * @memberof CMsgBrowserSize
         * @instance
         */
        CMsgBrowserSize.prototype.width = 0;
    
        /**
         * CMsgBrowserSize height.
         * @member {number} height
         * @memberof CMsgBrowserSize
         * @instance
         */
        CMsgBrowserSize.prototype.height = 0;
    
        /**
         * Creates a new CMsgBrowserSize instance using the specified properties.
         * @function create
         * @memberof CMsgBrowserSize
         * @static
         * @param {ICMsgBrowserSize=} [properties] Properties to set
         * @returns {CMsgBrowserSize} CMsgBrowserSize instance
         */
        CMsgBrowserSize.create = function create(properties) {
            return new CMsgBrowserSize(properties);
        };
    
        /**
         * Encodes the specified CMsgBrowserSize message. Does not implicitly {@link CMsgBrowserSize.verify|verify} messages.
         * @function encode
         * @memberof CMsgBrowserSize
         * @static
         * @param {ICMsgBrowserSize} message CMsgBrowserSize message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgBrowserSize.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.width != null && Object.hasOwnProperty.call(message, "width"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.width);
            if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.height);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgBrowserSize message, length delimited. Does not implicitly {@link CMsgBrowserSize.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgBrowserSize
         * @static
         * @param {ICMsgBrowserSize} message CMsgBrowserSize message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgBrowserSize.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgBrowserSize message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgBrowserSize
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgBrowserSize} CMsgBrowserSize
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgBrowserSize.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBrowserSize();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.width = reader.uint32();
                    break;
                case 3:
                    message.height = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgBrowserSize message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgBrowserSize
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgBrowserSize} CMsgBrowserSize
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgBrowserSize.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgBrowserSize message.
         * @function verify
         * @memberof CMsgBrowserSize
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgBrowserSize.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.width != null && message.hasOwnProperty("width"))
                if (!$util.isInteger(message.width))
                    return "width: integer expected";
            if (message.height != null && message.hasOwnProperty("height"))
                if (!$util.isInteger(message.height))
                    return "height: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgBrowserSize message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgBrowserSize
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgBrowserSize} CMsgBrowserSize
         */
        CMsgBrowserSize.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgBrowserSize)
                return object;
            var message = new $root.CMsgBrowserSize();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.width != null)
                message.width = object.width >>> 0;
            if (object.height != null)
                message.height = object.height >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgBrowserSize message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgBrowserSize
         * @static
         * @param {CMsgBrowserSize} message CMsgBrowserSize
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgBrowserSize.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.width = 0;
                object.height = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.width != null && message.hasOwnProperty("width"))
                object.width = message.width;
            if (message.height != null && message.hasOwnProperty("height"))
                object.height = message.height;
            return object;
        };
    
        /**
         * Converts this CMsgBrowserSize to JSON.
         * @function toJSON
         * @memberof CMsgBrowserSize
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgBrowserSize.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgBrowserSize;
    })();
    
    $root.CMsgBrowserSetMinSize = (function() {
    
        /**
         * Properties of a CMsgBrowserSetMinSize.
         * @exports ICMsgBrowserSetMinSize
         * @interface ICMsgBrowserSetMinSize
         * @property {number|null} [browser_handle] CMsgBrowserSetMinSize browser_handle
         * @property {number|null} [width] CMsgBrowserSetMinSize width
         * @property {number|null} [height] CMsgBrowserSetMinSize height
         */
    
        /**
         * Constructs a new CMsgBrowserSetMinSize.
         * @exports CMsgBrowserSetMinSize
         * @classdesc Represents a CMsgBrowserSetMinSize.
         * @implements ICMsgBrowserSetMinSize
         * @constructor
         * @param {ICMsgBrowserSetMinSize=} [properties] Properties to set
         */
        function CMsgBrowserSetMinSize(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgBrowserSetMinSize browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgBrowserSetMinSize
         * @instance
         */
        CMsgBrowserSetMinSize.prototype.browser_handle = 0;
    
        /**
         * CMsgBrowserSetMinSize width.
         * @member {number} width
         * @memberof CMsgBrowserSetMinSize
         * @instance
         */
        CMsgBrowserSetMinSize.prototype.width = 0;
    
        /**
         * CMsgBrowserSetMinSize height.
         * @member {number} height
         * @memberof CMsgBrowserSetMinSize
         * @instance
         */
        CMsgBrowserSetMinSize.prototype.height = 0;
    
        /**
         * Creates a new CMsgBrowserSetMinSize instance using the specified properties.
         * @function create
         * @memberof CMsgBrowserSetMinSize
         * @static
         * @param {ICMsgBrowserSetMinSize=} [properties] Properties to set
         * @returns {CMsgBrowserSetMinSize} CMsgBrowserSetMinSize instance
         */
        CMsgBrowserSetMinSize.create = function create(properties) {
            return new CMsgBrowserSetMinSize(properties);
        };
    
        /**
         * Encodes the specified CMsgBrowserSetMinSize message. Does not implicitly {@link CMsgBrowserSetMinSize.verify|verify} messages.
         * @function encode
         * @memberof CMsgBrowserSetMinSize
         * @static
         * @param {ICMsgBrowserSetMinSize} message CMsgBrowserSetMinSize message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgBrowserSetMinSize.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.width != null && Object.hasOwnProperty.call(message, "width"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.width);
            if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.height);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgBrowserSetMinSize message, length delimited. Does not implicitly {@link CMsgBrowserSetMinSize.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgBrowserSetMinSize
         * @static
         * @param {ICMsgBrowserSetMinSize} message CMsgBrowserSetMinSize message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgBrowserSetMinSize.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgBrowserSetMinSize message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgBrowserSetMinSize
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgBrowserSetMinSize} CMsgBrowserSetMinSize
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgBrowserSetMinSize.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBrowserSetMinSize();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.width = reader.uint32();
                    break;
                case 3:
                    message.height = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgBrowserSetMinSize message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgBrowserSetMinSize
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgBrowserSetMinSize} CMsgBrowserSetMinSize
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgBrowserSetMinSize.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgBrowserSetMinSize message.
         * @function verify
         * @memberof CMsgBrowserSetMinSize
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgBrowserSetMinSize.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.width != null && message.hasOwnProperty("width"))
                if (!$util.isInteger(message.width))
                    return "width: integer expected";
            if (message.height != null && message.hasOwnProperty("height"))
                if (!$util.isInteger(message.height))
                    return "height: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgBrowserSetMinSize message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgBrowserSetMinSize
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgBrowserSetMinSize} CMsgBrowserSetMinSize
         */
        CMsgBrowserSetMinSize.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgBrowserSetMinSize)
                return object;
            var message = new $root.CMsgBrowserSetMinSize();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.width != null)
                message.width = object.width >>> 0;
            if (object.height != null)
                message.height = object.height >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgBrowserSetMinSize message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgBrowserSetMinSize
         * @static
         * @param {CMsgBrowserSetMinSize} message CMsgBrowserSetMinSize
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgBrowserSetMinSize.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.width = 0;
                object.height = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.width != null && message.hasOwnProperty("width"))
                object.width = message.width;
            if (message.height != null && message.hasOwnProperty("height"))
                object.height = message.height;
            return object;
        };
    
        /**
         * Converts this CMsgBrowserSetMinSize to JSON.
         * @function toJSON
         * @memberof CMsgBrowserSetMinSize
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgBrowserSetMinSize.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgBrowserSetMinSize;
    })();
    
    $root.CMsgBrowserPosition = (function() {
    
        /**
         * Properties of a CMsgBrowserPosition.
         * @exports ICMsgBrowserPosition
         * @interface ICMsgBrowserPosition
         * @property {number|null} [browser_handle] CMsgBrowserPosition browser_handle
         * @property {number|null} [x] CMsgBrowserPosition x
         * @property {number|null} [y] CMsgBrowserPosition y
         * @property {number|null} [x_local] CMsgBrowserPosition x_local
         * @property {number|null} [y_local] CMsgBrowserPosition y_local
         */
    
        /**
         * Constructs a new CMsgBrowserPosition.
         * @exports CMsgBrowserPosition
         * @classdesc Represents a CMsgBrowserPosition.
         * @implements ICMsgBrowserPosition
         * @constructor
         * @param {ICMsgBrowserPosition=} [properties] Properties to set
         */
        function CMsgBrowserPosition(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgBrowserPosition browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgBrowserPosition
         * @instance
         */
        CMsgBrowserPosition.prototype.browser_handle = 0;
    
        /**
         * CMsgBrowserPosition x.
         * @member {number} x
         * @memberof CMsgBrowserPosition
         * @instance
         */
        CMsgBrowserPosition.prototype.x = 0;
    
        /**
         * CMsgBrowserPosition y.
         * @member {number} y
         * @memberof CMsgBrowserPosition
         * @instance
         */
        CMsgBrowserPosition.prototype.y = 0;
    
        /**
         * CMsgBrowserPosition x_local.
         * @member {number} x_local
         * @memberof CMsgBrowserPosition
         * @instance
         */
        CMsgBrowserPosition.prototype.x_local = 0;
    
        /**
         * CMsgBrowserPosition y_local.
         * @member {number} y_local
         * @memberof CMsgBrowserPosition
         * @instance
         */
        CMsgBrowserPosition.prototype.y_local = 0;
    
        /**
         * Creates a new CMsgBrowserPosition instance using the specified properties.
         * @function create
         * @memberof CMsgBrowserPosition
         * @static
         * @param {ICMsgBrowserPosition=} [properties] Properties to set
         * @returns {CMsgBrowserPosition} CMsgBrowserPosition instance
         */
        CMsgBrowserPosition.create = function create(properties) {
            return new CMsgBrowserPosition(properties);
        };
    
        /**
         * Encodes the specified CMsgBrowserPosition message. Does not implicitly {@link CMsgBrowserPosition.verify|verify} messages.
         * @function encode
         * @memberof CMsgBrowserPosition
         * @static
         * @param {ICMsgBrowserPosition} message CMsgBrowserPosition message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgBrowserPosition.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.x != null && Object.hasOwnProperty.call(message, "x"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.x);
            if (message.y != null && Object.hasOwnProperty.call(message, "y"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.y);
            if (message.x_local != null && Object.hasOwnProperty.call(message, "x_local"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.x_local);
            if (message.y_local != null && Object.hasOwnProperty.call(message, "y_local"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.y_local);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgBrowserPosition message, length delimited. Does not implicitly {@link CMsgBrowserPosition.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgBrowserPosition
         * @static
         * @param {ICMsgBrowserPosition} message CMsgBrowserPosition message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgBrowserPosition.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgBrowserPosition message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgBrowserPosition
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgBrowserPosition} CMsgBrowserPosition
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgBrowserPosition.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBrowserPosition();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.x = reader.int32();
                    break;
                case 3:
                    message.y = reader.int32();
                    break;
                case 4:
                    message.x_local = reader.int32();
                    break;
                case 5:
                    message.y_local = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgBrowserPosition message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgBrowserPosition
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgBrowserPosition} CMsgBrowserPosition
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgBrowserPosition.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgBrowserPosition message.
         * @function verify
         * @memberof CMsgBrowserPosition
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgBrowserPosition.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.x != null && message.hasOwnProperty("x"))
                if (!$util.isInteger(message.x))
                    return "x: integer expected";
            if (message.y != null && message.hasOwnProperty("y"))
                if (!$util.isInteger(message.y))
                    return "y: integer expected";
            if (message.x_local != null && message.hasOwnProperty("x_local"))
                if (!$util.isInteger(message.x_local))
                    return "x_local: integer expected";
            if (message.y_local != null && message.hasOwnProperty("y_local"))
                if (!$util.isInteger(message.y_local))
                    return "y_local: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgBrowserPosition message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgBrowserPosition
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgBrowserPosition} CMsgBrowserPosition
         */
        CMsgBrowserPosition.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgBrowserPosition)
                return object;
            var message = new $root.CMsgBrowserPosition();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.x != null)
                message.x = object.x | 0;
            if (object.y != null)
                message.y = object.y | 0;
            if (object.x_local != null)
                message.x_local = object.x_local | 0;
            if (object.y_local != null)
                message.y_local = object.y_local | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgBrowserPosition message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgBrowserPosition
         * @static
         * @param {CMsgBrowserPosition} message CMsgBrowserPosition
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgBrowserPosition.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.x = 0;
                object.y = 0;
                object.x_local = 0;
                object.y_local = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.x != null && message.hasOwnProperty("x"))
                object.x = message.x;
            if (message.y != null && message.hasOwnProperty("y"))
                object.y = message.y;
            if (message.x_local != null && message.hasOwnProperty("x_local"))
                object.x_local = message.x_local;
            if (message.y_local != null && message.hasOwnProperty("y_local"))
                object.y_local = message.y_local;
            return object;
        };
    
        /**
         * Converts this CMsgBrowserPosition to JSON.
         * @function toJSON
         * @memberof CMsgBrowserPosition
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgBrowserPosition.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgBrowserPosition;
    })();
    
    $root.CMsgBrowserResized = (function() {
    
        /**
         * Properties of a CMsgBrowserResized.
         * @exports ICMsgBrowserResized
         * @interface ICMsgBrowserResized
         * @property {number|null} [browser_handle] CMsgBrowserResized browser_handle
         * @property {number|null} [x] CMsgBrowserResized x
         * @property {number|null} [y] CMsgBrowserResized y
         * @property {number|null} [width] CMsgBrowserResized width
         * @property {number|null} [height] CMsgBrowserResized height
         */
    
        /**
         * Constructs a new CMsgBrowserResized.
         * @exports CMsgBrowserResized
         * @classdesc Represents a CMsgBrowserResized.
         * @implements ICMsgBrowserResized
         * @constructor
         * @param {ICMsgBrowserResized=} [properties] Properties to set
         */
        function CMsgBrowserResized(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgBrowserResized browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgBrowserResized
         * @instance
         */
        CMsgBrowserResized.prototype.browser_handle = 0;
    
        /**
         * CMsgBrowserResized x.
         * @member {number} x
         * @memberof CMsgBrowserResized
         * @instance
         */
        CMsgBrowserResized.prototype.x = 0;
    
        /**
         * CMsgBrowserResized y.
         * @member {number} y
         * @memberof CMsgBrowserResized
         * @instance
         */
        CMsgBrowserResized.prototype.y = 0;
    
        /**
         * CMsgBrowserResized width.
         * @member {number} width
         * @memberof CMsgBrowserResized
         * @instance
         */
        CMsgBrowserResized.prototype.width = 0;
    
        /**
         * CMsgBrowserResized height.
         * @member {number} height
         * @memberof CMsgBrowserResized
         * @instance
         */
        CMsgBrowserResized.prototype.height = 0;
    
        /**
         * Creates a new CMsgBrowserResized instance using the specified properties.
         * @function create
         * @memberof CMsgBrowserResized
         * @static
         * @param {ICMsgBrowserResized=} [properties] Properties to set
         * @returns {CMsgBrowserResized} CMsgBrowserResized instance
         */
        CMsgBrowserResized.create = function create(properties) {
            return new CMsgBrowserResized(properties);
        };
    
        /**
         * Encodes the specified CMsgBrowserResized message. Does not implicitly {@link CMsgBrowserResized.verify|verify} messages.
         * @function encode
         * @memberof CMsgBrowserResized
         * @static
         * @param {ICMsgBrowserResized} message CMsgBrowserResized message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgBrowserResized.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.x != null && Object.hasOwnProperty.call(message, "x"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.x);
            if (message.y != null && Object.hasOwnProperty.call(message, "y"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.y);
            if (message.width != null && Object.hasOwnProperty.call(message, "width"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.width);
            if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.height);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgBrowserResized message, length delimited. Does not implicitly {@link CMsgBrowserResized.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgBrowserResized
         * @static
         * @param {ICMsgBrowserResized} message CMsgBrowserResized message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgBrowserResized.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgBrowserResized message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgBrowserResized
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgBrowserResized} CMsgBrowserResized
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgBrowserResized.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBrowserResized();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.x = reader.int32();
                    break;
                case 3:
                    message.y = reader.int32();
                    break;
                case 4:
                    message.width = reader.uint32();
                    break;
                case 5:
                    message.height = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgBrowserResized message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgBrowserResized
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgBrowserResized} CMsgBrowserResized
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgBrowserResized.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgBrowserResized message.
         * @function verify
         * @memberof CMsgBrowserResized
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgBrowserResized.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.x != null && message.hasOwnProperty("x"))
                if (!$util.isInteger(message.x))
                    return "x: integer expected";
            if (message.y != null && message.hasOwnProperty("y"))
                if (!$util.isInteger(message.y))
                    return "y: integer expected";
            if (message.width != null && message.hasOwnProperty("width"))
                if (!$util.isInteger(message.width))
                    return "width: integer expected";
            if (message.height != null && message.hasOwnProperty("height"))
                if (!$util.isInteger(message.height))
                    return "height: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgBrowserResized message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgBrowserResized
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgBrowserResized} CMsgBrowserResized
         */
        CMsgBrowserResized.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgBrowserResized)
                return object;
            var message = new $root.CMsgBrowserResized();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.x != null)
                message.x = object.x | 0;
            if (object.y != null)
                message.y = object.y | 0;
            if (object.width != null)
                message.width = object.width >>> 0;
            if (object.height != null)
                message.height = object.height >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgBrowserResized message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgBrowserResized
         * @static
         * @param {CMsgBrowserResized} message CMsgBrowserResized
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgBrowserResized.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.x = 0;
                object.y = 0;
                object.width = 0;
                object.height = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.x != null && message.hasOwnProperty("x"))
                object.x = message.x;
            if (message.y != null && message.hasOwnProperty("y"))
                object.y = message.y;
            if (message.width != null && message.hasOwnProperty("width"))
                object.width = message.width;
            if (message.height != null && message.hasOwnProperty("height"))
                object.height = message.height;
            return object;
        };
    
        /**
         * Converts this CMsgBrowserResized to JSON.
         * @function toJSON
         * @memberof CMsgBrowserResized
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgBrowserResized.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgBrowserResized;
    })();
    
    $root.CMsgPostURL = (function() {
    
        /**
         * Properties of a CMsgPostURL.
         * @exports ICMsgPostURL
         * @interface ICMsgPostURL
         * @property {number|null} [browser_handle] CMsgPostURL browser_handle
         * @property {string|null} [url] CMsgPostURL url
         * @property {string|null} [post] CMsgPostURL post
         * @property {number|null} [pageserial] CMsgPostURL pageserial
         */
    
        /**
         * Constructs a new CMsgPostURL.
         * @exports CMsgPostURL
         * @classdesc Represents a CMsgPostURL.
         * @implements ICMsgPostURL
         * @constructor
         * @param {ICMsgPostURL=} [properties] Properties to set
         */
        function CMsgPostURL(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgPostURL browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgPostURL
         * @instance
         */
        CMsgPostURL.prototype.browser_handle = 0;
    
        /**
         * CMsgPostURL url.
         * @member {string} url
         * @memberof CMsgPostURL
         * @instance
         */
        CMsgPostURL.prototype.url = "";
    
        /**
         * CMsgPostURL post.
         * @member {string} post
         * @memberof CMsgPostURL
         * @instance
         */
        CMsgPostURL.prototype.post = "";
    
        /**
         * CMsgPostURL pageserial.
         * @member {number} pageserial
         * @memberof CMsgPostURL
         * @instance
         */
        CMsgPostURL.prototype.pageserial = 0;
    
        /**
         * Creates a new CMsgPostURL instance using the specified properties.
         * @function create
         * @memberof CMsgPostURL
         * @static
         * @param {ICMsgPostURL=} [properties] Properties to set
         * @returns {CMsgPostURL} CMsgPostURL instance
         */
        CMsgPostURL.create = function create(properties) {
            return new CMsgPostURL(properties);
        };
    
        /**
         * Encodes the specified CMsgPostURL message. Does not implicitly {@link CMsgPostURL.verify|verify} messages.
         * @function encode
         * @memberof CMsgPostURL
         * @static
         * @param {ICMsgPostURL} message CMsgPostURL message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgPostURL.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);
            if (message.post != null && Object.hasOwnProperty.call(message, "post"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.post);
            if (message.pageserial != null && Object.hasOwnProperty.call(message, "pageserial"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.pageserial);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgPostURL message, length delimited. Does not implicitly {@link CMsgPostURL.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgPostURL
         * @static
         * @param {ICMsgPostURL} message CMsgPostURL message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgPostURL.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgPostURL message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgPostURL
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgPostURL} CMsgPostURL
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgPostURL.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgPostURL();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.url = reader.string();
                    break;
                case 3:
                    message.post = reader.string();
                    break;
                case 4:
                    message.pageserial = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgPostURL message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgPostURL
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgPostURL} CMsgPostURL
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgPostURL.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgPostURL message.
         * @function verify
         * @memberof CMsgPostURL
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgPostURL.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.url != null && message.hasOwnProperty("url"))
                if (!$util.isString(message.url))
                    return "url: string expected";
            if (message.post != null && message.hasOwnProperty("post"))
                if (!$util.isString(message.post))
                    return "post: string expected";
            if (message.pageserial != null && message.hasOwnProperty("pageserial"))
                if (!$util.isInteger(message.pageserial))
                    return "pageserial: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgPostURL message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgPostURL
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgPostURL} CMsgPostURL
         */
        CMsgPostURL.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgPostURL)
                return object;
            var message = new $root.CMsgPostURL();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.url != null)
                message.url = String(object.url);
            if (object.post != null)
                message.post = String(object.post);
            if (object.pageserial != null)
                message.pageserial = object.pageserial >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgPostURL message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgPostURL
         * @static
         * @param {CMsgPostURL} message CMsgPostURL
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgPostURL.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.url = "";
                object.post = "";
                object.pageserial = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.url != null && message.hasOwnProperty("url"))
                object.url = message.url;
            if (message.post != null && message.hasOwnProperty("post"))
                object.post = message.post;
            if (message.pageserial != null && message.hasOwnProperty("pageserial"))
                object.pageserial = message.pageserial;
            return object;
        };
    
        /**
         * Converts this CMsgPostURL to JSON.
         * @function toJSON
         * @memberof CMsgPostURL
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgPostURL.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgPostURL;
    })();
    
    $root.CMsgAddHeader = (function() {
    
        /**
         * Properties of a CMsgAddHeader.
         * @exports ICMsgAddHeader
         * @interface ICMsgAddHeader
         * @property {number|null} [browser_handle] CMsgAddHeader browser_handle
         * @property {string|null} [key] CMsgAddHeader key
         * @property {string|null} [value] CMsgAddHeader value
         */
    
        /**
         * Constructs a new CMsgAddHeader.
         * @exports CMsgAddHeader
         * @classdesc Represents a CMsgAddHeader.
         * @implements ICMsgAddHeader
         * @constructor
         * @param {ICMsgAddHeader=} [properties] Properties to set
         */
        function CMsgAddHeader(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgAddHeader browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgAddHeader
         * @instance
         */
        CMsgAddHeader.prototype.browser_handle = 0;
    
        /**
         * CMsgAddHeader key.
         * @member {string} key
         * @memberof CMsgAddHeader
         * @instance
         */
        CMsgAddHeader.prototype.key = "";
    
        /**
         * CMsgAddHeader value.
         * @member {string} value
         * @memberof CMsgAddHeader
         * @instance
         */
        CMsgAddHeader.prototype.value = "";
    
        /**
         * Creates a new CMsgAddHeader instance using the specified properties.
         * @function create
         * @memberof CMsgAddHeader
         * @static
         * @param {ICMsgAddHeader=} [properties] Properties to set
         * @returns {CMsgAddHeader} CMsgAddHeader instance
         */
        CMsgAddHeader.create = function create(properties) {
            return new CMsgAddHeader(properties);
        };
    
        /**
         * Encodes the specified CMsgAddHeader message. Does not implicitly {@link CMsgAddHeader.verify|verify} messages.
         * @function encode
         * @memberof CMsgAddHeader
         * @static
         * @param {ICMsgAddHeader} message CMsgAddHeader message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAddHeader.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.key);
            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.value);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgAddHeader message, length delimited. Does not implicitly {@link CMsgAddHeader.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgAddHeader
         * @static
         * @param {ICMsgAddHeader} message CMsgAddHeader message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAddHeader.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgAddHeader message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgAddHeader
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgAddHeader} CMsgAddHeader
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAddHeader.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgAddHeader();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.key = reader.string();
                    break;
                case 3:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgAddHeader message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgAddHeader
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgAddHeader} CMsgAddHeader
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAddHeader.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgAddHeader message.
         * @function verify
         * @memberof CMsgAddHeader
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgAddHeader.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.key != null && message.hasOwnProperty("key"))
                if (!$util.isString(message.key))
                    return "key: string expected";
            if (message.value != null && message.hasOwnProperty("value"))
                if (!$util.isString(message.value))
                    return "value: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgAddHeader message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgAddHeader
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgAddHeader} CMsgAddHeader
         */
        CMsgAddHeader.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgAddHeader)
                return object;
            var message = new $root.CMsgAddHeader();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.key != null)
                message.key = String(object.key);
            if (object.value != null)
                message.value = String(object.value);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgAddHeader message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgAddHeader
         * @static
         * @param {CMsgAddHeader} message CMsgAddHeader
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgAddHeader.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.key = "";
                object.value = "";
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.key != null && message.hasOwnProperty("key"))
                object.key = message.key;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = message.value;
            return object;
        };
    
        /**
         * Converts this CMsgAddHeader to JSON.
         * @function toJSON
         * @memberof CMsgAddHeader
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgAddHeader.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgAddHeader;
    })();
    
    $root.CMsgStopLoad = (function() {
    
        /**
         * Properties of a CMsgStopLoad.
         * @exports ICMsgStopLoad
         * @interface ICMsgStopLoad
         * @property {number|null} [browser_handle] CMsgStopLoad browser_handle
         */
    
        /**
         * Constructs a new CMsgStopLoad.
         * @exports CMsgStopLoad
         * @classdesc Represents a CMsgStopLoad.
         * @implements ICMsgStopLoad
         * @constructor
         * @param {ICMsgStopLoad=} [properties] Properties to set
         */
        function CMsgStopLoad(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgStopLoad browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgStopLoad
         * @instance
         */
        CMsgStopLoad.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgStopLoad instance using the specified properties.
         * @function create
         * @memberof CMsgStopLoad
         * @static
         * @param {ICMsgStopLoad=} [properties] Properties to set
         * @returns {CMsgStopLoad} CMsgStopLoad instance
         */
        CMsgStopLoad.create = function create(properties) {
            return new CMsgStopLoad(properties);
        };
    
        /**
         * Encodes the specified CMsgStopLoad message. Does not implicitly {@link CMsgStopLoad.verify|verify} messages.
         * @function encode
         * @memberof CMsgStopLoad
         * @static
         * @param {ICMsgStopLoad} message CMsgStopLoad message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgStopLoad.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgStopLoad message, length delimited. Does not implicitly {@link CMsgStopLoad.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgStopLoad
         * @static
         * @param {ICMsgStopLoad} message CMsgStopLoad message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgStopLoad.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgStopLoad message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgStopLoad
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgStopLoad} CMsgStopLoad
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgStopLoad.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgStopLoad();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgStopLoad message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgStopLoad
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgStopLoad} CMsgStopLoad
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgStopLoad.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgStopLoad message.
         * @function verify
         * @memberof CMsgStopLoad
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgStopLoad.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgStopLoad message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgStopLoad
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgStopLoad} CMsgStopLoad
         */
        CMsgStopLoad.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgStopLoad)
                return object;
            var message = new $root.CMsgStopLoad();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgStopLoad message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgStopLoad
         * @static
         * @param {CMsgStopLoad} message CMsgStopLoad
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgStopLoad.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgStopLoad to JSON.
         * @function toJSON
         * @memberof CMsgStopLoad
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgStopLoad.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgStopLoad;
    })();
    
    $root.CMsgReload = (function() {
    
        /**
         * Properties of a CMsgReload.
         * @exports ICMsgReload
         * @interface ICMsgReload
         * @property {number|null} [browser_handle] CMsgReload browser_handle
         */
    
        /**
         * Constructs a new CMsgReload.
         * @exports CMsgReload
         * @classdesc Represents a CMsgReload.
         * @implements ICMsgReload
         * @constructor
         * @param {ICMsgReload=} [properties] Properties to set
         */
        function CMsgReload(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgReload browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgReload
         * @instance
         */
        CMsgReload.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgReload instance using the specified properties.
         * @function create
         * @memberof CMsgReload
         * @static
         * @param {ICMsgReload=} [properties] Properties to set
         * @returns {CMsgReload} CMsgReload instance
         */
        CMsgReload.create = function create(properties) {
            return new CMsgReload(properties);
        };
    
        /**
         * Encodes the specified CMsgReload message. Does not implicitly {@link CMsgReload.verify|verify} messages.
         * @function encode
         * @memberof CMsgReload
         * @static
         * @param {ICMsgReload} message CMsgReload message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgReload.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgReload message, length delimited. Does not implicitly {@link CMsgReload.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgReload
         * @static
         * @param {ICMsgReload} message CMsgReload message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgReload.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgReload message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgReload
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgReload} CMsgReload
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgReload.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgReload();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgReload message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgReload
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgReload} CMsgReload
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgReload.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgReload message.
         * @function verify
         * @memberof CMsgReload
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgReload.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgReload message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgReload
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgReload} CMsgReload
         */
        CMsgReload.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgReload)
                return object;
            var message = new $root.CMsgReload();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgReload message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgReload
         * @static
         * @param {CMsgReload} message CMsgReload
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgReload.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgReload to JSON.
         * @function toJSON
         * @memberof CMsgReload
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgReload.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgReload;
    })();
    
    $root.CMsgGoForward = (function() {
    
        /**
         * Properties of a CMsgGoForward.
         * @exports ICMsgGoForward
         * @interface ICMsgGoForward
         * @property {number|null} [browser_handle] CMsgGoForward browser_handle
         */
    
        /**
         * Constructs a new CMsgGoForward.
         * @exports CMsgGoForward
         * @classdesc Represents a CMsgGoForward.
         * @implements ICMsgGoForward
         * @constructor
         * @param {ICMsgGoForward=} [properties] Properties to set
         */
        function CMsgGoForward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGoForward browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgGoForward
         * @instance
         */
        CMsgGoForward.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgGoForward instance using the specified properties.
         * @function create
         * @memberof CMsgGoForward
         * @static
         * @param {ICMsgGoForward=} [properties] Properties to set
         * @returns {CMsgGoForward} CMsgGoForward instance
         */
        CMsgGoForward.create = function create(properties) {
            return new CMsgGoForward(properties);
        };
    
        /**
         * Encodes the specified CMsgGoForward message. Does not implicitly {@link CMsgGoForward.verify|verify} messages.
         * @function encode
         * @memberof CMsgGoForward
         * @static
         * @param {ICMsgGoForward} message CMsgGoForward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGoForward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGoForward message, length delimited. Does not implicitly {@link CMsgGoForward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGoForward
         * @static
         * @param {ICMsgGoForward} message CMsgGoForward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGoForward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGoForward message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGoForward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGoForward} CMsgGoForward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGoForward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGoForward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGoForward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGoForward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGoForward} CMsgGoForward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGoForward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGoForward message.
         * @function verify
         * @memberof CMsgGoForward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGoForward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGoForward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGoForward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGoForward} CMsgGoForward
         */
        CMsgGoForward.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGoForward)
                return object;
            var message = new $root.CMsgGoForward();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGoForward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGoForward
         * @static
         * @param {CMsgGoForward} message CMsgGoForward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGoForward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgGoForward to JSON.
         * @function toJSON
         * @memberof CMsgGoForward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGoForward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGoForward;
    })();
    
    $root.CMsgGoBack = (function() {
    
        /**
         * Properties of a CMsgGoBack.
         * @exports ICMsgGoBack
         * @interface ICMsgGoBack
         * @property {number|null} [browser_handle] CMsgGoBack browser_handle
         */
    
        /**
         * Constructs a new CMsgGoBack.
         * @exports CMsgGoBack
         * @classdesc Represents a CMsgGoBack.
         * @implements ICMsgGoBack
         * @constructor
         * @param {ICMsgGoBack=} [properties] Properties to set
         */
        function CMsgGoBack(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGoBack browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgGoBack
         * @instance
         */
        CMsgGoBack.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgGoBack instance using the specified properties.
         * @function create
         * @memberof CMsgGoBack
         * @static
         * @param {ICMsgGoBack=} [properties] Properties to set
         * @returns {CMsgGoBack} CMsgGoBack instance
         */
        CMsgGoBack.create = function create(properties) {
            return new CMsgGoBack(properties);
        };
    
        /**
         * Encodes the specified CMsgGoBack message. Does not implicitly {@link CMsgGoBack.verify|verify} messages.
         * @function encode
         * @memberof CMsgGoBack
         * @static
         * @param {ICMsgGoBack} message CMsgGoBack message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGoBack.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGoBack message, length delimited. Does not implicitly {@link CMsgGoBack.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGoBack
         * @static
         * @param {ICMsgGoBack} message CMsgGoBack message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGoBack.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGoBack message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGoBack
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGoBack} CMsgGoBack
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGoBack.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGoBack();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGoBack message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGoBack
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGoBack} CMsgGoBack
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGoBack.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGoBack message.
         * @function verify
         * @memberof CMsgGoBack
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGoBack.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGoBack message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGoBack
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGoBack} CMsgGoBack
         */
        CMsgGoBack.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGoBack)
                return object;
            var message = new $root.CMsgGoBack();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGoBack message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGoBack
         * @static
         * @param {CMsgGoBack} message CMsgGoBack
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGoBack.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgGoBack to JSON.
         * @function toJSON
         * @memberof CMsgGoBack
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGoBack.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGoBack;
    })();
    
    $root.CMsgWasHidden = (function() {
    
        /**
         * Properties of a CMsgWasHidden.
         * @exports ICMsgWasHidden
         * @interface ICMsgWasHidden
         * @property {number|null} [browser_handle] CMsgWasHidden browser_handle
         * @property {boolean|null} [hidden] CMsgWasHidden hidden
         */
    
        /**
         * Constructs a new CMsgWasHidden.
         * @exports CMsgWasHidden
         * @classdesc Represents a CMsgWasHidden.
         * @implements ICMsgWasHidden
         * @constructor
         * @param {ICMsgWasHidden=} [properties] Properties to set
         */
        function CMsgWasHidden(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgWasHidden browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgWasHidden
         * @instance
         */
        CMsgWasHidden.prototype.browser_handle = 0;
    
        /**
         * CMsgWasHidden hidden.
         * @member {boolean} hidden
         * @memberof CMsgWasHidden
         * @instance
         */
        CMsgWasHidden.prototype.hidden = false;
    
        /**
         * Creates a new CMsgWasHidden instance using the specified properties.
         * @function create
         * @memberof CMsgWasHidden
         * @static
         * @param {ICMsgWasHidden=} [properties] Properties to set
         * @returns {CMsgWasHidden} CMsgWasHidden instance
         */
        CMsgWasHidden.create = function create(properties) {
            return new CMsgWasHidden(properties);
        };
    
        /**
         * Encodes the specified CMsgWasHidden message. Does not implicitly {@link CMsgWasHidden.verify|verify} messages.
         * @function encode
         * @memberof CMsgWasHidden
         * @static
         * @param {ICMsgWasHidden} message CMsgWasHidden message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgWasHidden.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.hidden != null && Object.hasOwnProperty.call(message, "hidden"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.hidden);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgWasHidden message, length delimited. Does not implicitly {@link CMsgWasHidden.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgWasHidden
         * @static
         * @param {ICMsgWasHidden} message CMsgWasHidden message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgWasHidden.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgWasHidden message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgWasHidden
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgWasHidden} CMsgWasHidden
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgWasHidden.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgWasHidden();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.hidden = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgWasHidden message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgWasHidden
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgWasHidden} CMsgWasHidden
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgWasHidden.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgWasHidden message.
         * @function verify
         * @memberof CMsgWasHidden
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgWasHidden.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.hidden != null && message.hasOwnProperty("hidden"))
                if (typeof message.hidden !== "boolean")
                    return "hidden: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgWasHidden message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgWasHidden
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgWasHidden} CMsgWasHidden
         */
        CMsgWasHidden.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgWasHidden)
                return object;
            var message = new $root.CMsgWasHidden();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.hidden != null)
                message.hidden = Boolean(object.hidden);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgWasHidden message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgWasHidden
         * @static
         * @param {CMsgWasHidden} message CMsgWasHidden
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgWasHidden.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.hidden = false;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.hidden != null && message.hasOwnProperty("hidden"))
                object.hidden = message.hidden;
            return object;
        };
    
        /**
         * Converts this CMsgWasHidden to JSON.
         * @function toJSON
         * @memberof CMsgWasHidden
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgWasHidden.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgWasHidden;
    })();
    
    $root.CMsgClearHistory = (function() {
    
        /**
         * Properties of a CMsgClearHistory.
         * @exports ICMsgClearHistory
         * @interface ICMsgClearHistory
         * @property {number|null} [browser_handle] CMsgClearHistory browser_handle
         */
    
        /**
         * Constructs a new CMsgClearHistory.
         * @exports CMsgClearHistory
         * @classdesc Represents a CMsgClearHistory.
         * @implements ICMsgClearHistory
         * @constructor
         * @param {ICMsgClearHistory=} [properties] Properties to set
         */
        function CMsgClearHistory(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgClearHistory browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgClearHistory
         * @instance
         */
        CMsgClearHistory.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgClearHistory instance using the specified properties.
         * @function create
         * @memberof CMsgClearHistory
         * @static
         * @param {ICMsgClearHistory=} [properties] Properties to set
         * @returns {CMsgClearHistory} CMsgClearHistory instance
         */
        CMsgClearHistory.create = function create(properties) {
            return new CMsgClearHistory(properties);
        };
    
        /**
         * Encodes the specified CMsgClearHistory message. Does not implicitly {@link CMsgClearHistory.verify|verify} messages.
         * @function encode
         * @memberof CMsgClearHistory
         * @static
         * @param {ICMsgClearHistory} message CMsgClearHistory message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClearHistory.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClearHistory message, length delimited. Does not implicitly {@link CMsgClearHistory.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClearHistory
         * @static
         * @param {ICMsgClearHistory} message CMsgClearHistory message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClearHistory.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClearHistory message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClearHistory
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClearHistory} CMsgClearHistory
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClearHistory.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClearHistory();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClearHistory message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClearHistory
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClearHistory} CMsgClearHistory
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClearHistory.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClearHistory message.
         * @function verify
         * @memberof CMsgClearHistory
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClearHistory.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgClearHistory message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClearHistory
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClearHistory} CMsgClearHistory
         */
        CMsgClearHistory.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClearHistory)
                return object;
            var message = new $root.CMsgClearHistory();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgClearHistory message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClearHistory
         * @static
         * @param {CMsgClearHistory} message CMsgClearHistory
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClearHistory.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgClearHistory to JSON.
         * @function toJSON
         * @memberof CMsgClearHistory
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClearHistory.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgClearHistory;
    })();
    
    $root.CMsgClearAllBrowsingData = (function() {
    
        /**
         * Properties of a CMsgClearAllBrowsingData.
         * @exports ICMsgClearAllBrowsingData
         * @interface ICMsgClearAllBrowsingData
         * @property {number|null} [browser_handle] CMsgClearAllBrowsingData browser_handle
         */
    
        /**
         * Constructs a new CMsgClearAllBrowsingData.
         * @exports CMsgClearAllBrowsingData
         * @classdesc Represents a CMsgClearAllBrowsingData.
         * @implements ICMsgClearAllBrowsingData
         * @constructor
         * @param {ICMsgClearAllBrowsingData=} [properties] Properties to set
         */
        function CMsgClearAllBrowsingData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgClearAllBrowsingData browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgClearAllBrowsingData
         * @instance
         */
        CMsgClearAllBrowsingData.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgClearAllBrowsingData instance using the specified properties.
         * @function create
         * @memberof CMsgClearAllBrowsingData
         * @static
         * @param {ICMsgClearAllBrowsingData=} [properties] Properties to set
         * @returns {CMsgClearAllBrowsingData} CMsgClearAllBrowsingData instance
         */
        CMsgClearAllBrowsingData.create = function create(properties) {
            return new CMsgClearAllBrowsingData(properties);
        };
    
        /**
         * Encodes the specified CMsgClearAllBrowsingData message. Does not implicitly {@link CMsgClearAllBrowsingData.verify|verify} messages.
         * @function encode
         * @memberof CMsgClearAllBrowsingData
         * @static
         * @param {ICMsgClearAllBrowsingData} message CMsgClearAllBrowsingData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClearAllBrowsingData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClearAllBrowsingData message, length delimited. Does not implicitly {@link CMsgClearAllBrowsingData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClearAllBrowsingData
         * @static
         * @param {ICMsgClearAllBrowsingData} message CMsgClearAllBrowsingData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClearAllBrowsingData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClearAllBrowsingData message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClearAllBrowsingData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClearAllBrowsingData} CMsgClearAllBrowsingData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClearAllBrowsingData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClearAllBrowsingData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClearAllBrowsingData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClearAllBrowsingData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClearAllBrowsingData} CMsgClearAllBrowsingData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClearAllBrowsingData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClearAllBrowsingData message.
         * @function verify
         * @memberof CMsgClearAllBrowsingData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClearAllBrowsingData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgClearAllBrowsingData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClearAllBrowsingData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClearAllBrowsingData} CMsgClearAllBrowsingData
         */
        CMsgClearAllBrowsingData.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClearAllBrowsingData)
                return object;
            var message = new $root.CMsgClearAllBrowsingData();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgClearAllBrowsingData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClearAllBrowsingData
         * @static
         * @param {CMsgClearAllBrowsingData} message CMsgClearAllBrowsingData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClearAllBrowsingData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgClearAllBrowsingData to JSON.
         * @function toJSON
         * @memberof CMsgClearAllBrowsingData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClearAllBrowsingData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgClearAllBrowsingData;
    })();
    
    $root.CMsgCopy = (function() {
    
        /**
         * Properties of a CMsgCopy.
         * @exports ICMsgCopy
         * @interface ICMsgCopy
         * @property {number|null} [browser_handle] CMsgCopy browser_handle
         */
    
        /**
         * Constructs a new CMsgCopy.
         * @exports CMsgCopy
         * @classdesc Represents a CMsgCopy.
         * @implements ICMsgCopy
         * @constructor
         * @param {ICMsgCopy=} [properties] Properties to set
         */
        function CMsgCopy(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgCopy browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgCopy
         * @instance
         */
        CMsgCopy.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgCopy instance using the specified properties.
         * @function create
         * @memberof CMsgCopy
         * @static
         * @param {ICMsgCopy=} [properties] Properties to set
         * @returns {CMsgCopy} CMsgCopy instance
         */
        CMsgCopy.create = function create(properties) {
            return new CMsgCopy(properties);
        };
    
        /**
         * Encodes the specified CMsgCopy message. Does not implicitly {@link CMsgCopy.verify|verify} messages.
         * @function encode
         * @memberof CMsgCopy
         * @static
         * @param {ICMsgCopy} message CMsgCopy message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgCopy.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgCopy message, length delimited. Does not implicitly {@link CMsgCopy.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgCopy
         * @static
         * @param {ICMsgCopy} message CMsgCopy message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgCopy.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgCopy message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgCopy
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgCopy} CMsgCopy
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgCopy.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgCopy();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgCopy message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgCopy
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgCopy} CMsgCopy
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgCopy.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgCopy message.
         * @function verify
         * @memberof CMsgCopy
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgCopy.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgCopy message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgCopy
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgCopy} CMsgCopy
         */
        CMsgCopy.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgCopy)
                return object;
            var message = new $root.CMsgCopy();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgCopy message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgCopy
         * @static
         * @param {CMsgCopy} message CMsgCopy
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgCopy.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgCopy to JSON.
         * @function toJSON
         * @memberof CMsgCopy
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgCopy.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgCopy;
    })();
    
    $root.CMsgPaste = (function() {
    
        /**
         * Properties of a CMsgPaste.
         * @exports ICMsgPaste
         * @interface ICMsgPaste
         * @property {number|null} [browser_handle] CMsgPaste browser_handle
         */
    
        /**
         * Constructs a new CMsgPaste.
         * @exports CMsgPaste
         * @classdesc Represents a CMsgPaste.
         * @implements ICMsgPaste
         * @constructor
         * @param {ICMsgPaste=} [properties] Properties to set
         */
        function CMsgPaste(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgPaste browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgPaste
         * @instance
         */
        CMsgPaste.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgPaste instance using the specified properties.
         * @function create
         * @memberof CMsgPaste
         * @static
         * @param {ICMsgPaste=} [properties] Properties to set
         * @returns {CMsgPaste} CMsgPaste instance
         */
        CMsgPaste.create = function create(properties) {
            return new CMsgPaste(properties);
        };
    
        /**
         * Encodes the specified CMsgPaste message. Does not implicitly {@link CMsgPaste.verify|verify} messages.
         * @function encode
         * @memberof CMsgPaste
         * @static
         * @param {ICMsgPaste} message CMsgPaste message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgPaste.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgPaste message, length delimited. Does not implicitly {@link CMsgPaste.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgPaste
         * @static
         * @param {ICMsgPaste} message CMsgPaste message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgPaste.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgPaste message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgPaste
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgPaste} CMsgPaste
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgPaste.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgPaste();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgPaste message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgPaste
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgPaste} CMsgPaste
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgPaste.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgPaste message.
         * @function verify
         * @memberof CMsgPaste
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgPaste.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgPaste message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgPaste
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgPaste} CMsgPaste
         */
        CMsgPaste.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgPaste)
                return object;
            var message = new $root.CMsgPaste();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgPaste message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgPaste
         * @static
         * @param {CMsgPaste} message CMsgPaste
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgPaste.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgPaste to JSON.
         * @function toJSON
         * @memberof CMsgPaste
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgPaste.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgPaste;
    })();
    
    $root.CMsgExecuteJavaScript = (function() {
    
        /**
         * Properties of a CMsgExecuteJavaScript.
         * @exports ICMsgExecuteJavaScript
         * @interface ICMsgExecuteJavaScript
         * @property {number|null} [browser_handle] CMsgExecuteJavaScript browser_handle
         * @property {string|null} [script] CMsgExecuteJavaScript script
         */
    
        /**
         * Constructs a new CMsgExecuteJavaScript.
         * @exports CMsgExecuteJavaScript
         * @classdesc Represents a CMsgExecuteJavaScript.
         * @implements ICMsgExecuteJavaScript
         * @constructor
         * @param {ICMsgExecuteJavaScript=} [properties] Properties to set
         */
        function CMsgExecuteJavaScript(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgExecuteJavaScript browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgExecuteJavaScript
         * @instance
         */
        CMsgExecuteJavaScript.prototype.browser_handle = 0;
    
        /**
         * CMsgExecuteJavaScript script.
         * @member {string} script
         * @memberof CMsgExecuteJavaScript
         * @instance
         */
        CMsgExecuteJavaScript.prototype.script = "";
    
        /**
         * Creates a new CMsgExecuteJavaScript instance using the specified properties.
         * @function create
         * @memberof CMsgExecuteJavaScript
         * @static
         * @param {ICMsgExecuteJavaScript=} [properties] Properties to set
         * @returns {CMsgExecuteJavaScript} CMsgExecuteJavaScript instance
         */
        CMsgExecuteJavaScript.create = function create(properties) {
            return new CMsgExecuteJavaScript(properties);
        };
    
        /**
         * Encodes the specified CMsgExecuteJavaScript message. Does not implicitly {@link CMsgExecuteJavaScript.verify|verify} messages.
         * @function encode
         * @memberof CMsgExecuteJavaScript
         * @static
         * @param {ICMsgExecuteJavaScript} message CMsgExecuteJavaScript message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgExecuteJavaScript.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.script != null && Object.hasOwnProperty.call(message, "script"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.script);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgExecuteJavaScript message, length delimited. Does not implicitly {@link CMsgExecuteJavaScript.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgExecuteJavaScript
         * @static
         * @param {ICMsgExecuteJavaScript} message CMsgExecuteJavaScript message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgExecuteJavaScript.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgExecuteJavaScript message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgExecuteJavaScript
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgExecuteJavaScript} CMsgExecuteJavaScript
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgExecuteJavaScript.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgExecuteJavaScript();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.script = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgExecuteJavaScript message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgExecuteJavaScript
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgExecuteJavaScript} CMsgExecuteJavaScript
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgExecuteJavaScript.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgExecuteJavaScript message.
         * @function verify
         * @memberof CMsgExecuteJavaScript
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgExecuteJavaScript.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.script != null && message.hasOwnProperty("script"))
                if (!$util.isString(message.script))
                    return "script: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgExecuteJavaScript message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgExecuteJavaScript
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgExecuteJavaScript} CMsgExecuteJavaScript
         */
        CMsgExecuteJavaScript.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgExecuteJavaScript)
                return object;
            var message = new $root.CMsgExecuteJavaScript();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.script != null)
                message.script = String(object.script);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgExecuteJavaScript message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgExecuteJavaScript
         * @static
         * @param {CMsgExecuteJavaScript} message CMsgExecuteJavaScript
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgExecuteJavaScript.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.script = "";
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.script != null && message.hasOwnProperty("script"))
                object.script = message.script;
            return object;
        };
    
        /**
         * Converts this CMsgExecuteJavaScript to JSON.
         * @function toJSON
         * @memberof CMsgExecuteJavaScript
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgExecuteJavaScript.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgExecuteJavaScript;
    })();
    
    $root.CMsgSetFocus = (function() {
    
        /**
         * Properties of a CMsgSetFocus.
         * @exports ICMsgSetFocus
         * @interface ICMsgSetFocus
         * @property {number|null} [browser_handle] CMsgSetFocus browser_handle
         * @property {boolean|null} [focus] CMsgSetFocus focus
         */
    
        /**
         * Constructs a new CMsgSetFocus.
         * @exports CMsgSetFocus
         * @classdesc Represents a CMsgSetFocus.
         * @implements ICMsgSetFocus
         * @constructor
         * @param {ICMsgSetFocus=} [properties] Properties to set
         */
        function CMsgSetFocus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSetFocus browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgSetFocus
         * @instance
         */
        CMsgSetFocus.prototype.browser_handle = 0;
    
        /**
         * CMsgSetFocus focus.
         * @member {boolean} focus
         * @memberof CMsgSetFocus
         * @instance
         */
        CMsgSetFocus.prototype.focus = false;
    
        /**
         * Creates a new CMsgSetFocus instance using the specified properties.
         * @function create
         * @memberof CMsgSetFocus
         * @static
         * @param {ICMsgSetFocus=} [properties] Properties to set
         * @returns {CMsgSetFocus} CMsgSetFocus instance
         */
        CMsgSetFocus.create = function create(properties) {
            return new CMsgSetFocus(properties);
        };
    
        /**
         * Encodes the specified CMsgSetFocus message. Does not implicitly {@link CMsgSetFocus.verify|verify} messages.
         * @function encode
         * @memberof CMsgSetFocus
         * @static
         * @param {ICMsgSetFocus} message CMsgSetFocus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSetFocus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.focus != null && Object.hasOwnProperty.call(message, "focus"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.focus);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSetFocus message, length delimited. Does not implicitly {@link CMsgSetFocus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSetFocus
         * @static
         * @param {ICMsgSetFocus} message CMsgSetFocus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSetFocus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSetFocus message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSetFocus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSetFocus} CMsgSetFocus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSetFocus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSetFocus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.focus = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSetFocus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSetFocus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSetFocus} CMsgSetFocus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSetFocus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSetFocus message.
         * @function verify
         * @memberof CMsgSetFocus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSetFocus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.focus != null && message.hasOwnProperty("focus"))
                if (typeof message.focus !== "boolean")
                    return "focus: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgSetFocus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSetFocus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSetFocus} CMsgSetFocus
         */
        CMsgSetFocus.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSetFocus)
                return object;
            var message = new $root.CMsgSetFocus();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.focus != null)
                message.focus = Boolean(object.focus);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSetFocus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSetFocus
         * @static
         * @param {CMsgSetFocus} message CMsgSetFocus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSetFocus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.focus = false;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.focus != null && message.hasOwnProperty("focus"))
                object.focus = message.focus;
            return object;
        };
    
        /**
         * Converts this CMsgSetFocus to JSON.
         * @function toJSON
         * @memberof CMsgSetFocus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSetFocus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSetFocus;
    })();
    
    $root.CMsgHorizontalScrollBarSize = (function() {
    
        /**
         * Properties of a CMsgHorizontalScrollBarSize.
         * @exports ICMsgHorizontalScrollBarSize
         * @interface ICMsgHorizontalScrollBarSize
         * @property {number|null} [browser_handle] CMsgHorizontalScrollBarSize browser_handle
         */
    
        /**
         * Constructs a new CMsgHorizontalScrollBarSize.
         * @exports CMsgHorizontalScrollBarSize
         * @classdesc Represents a CMsgHorizontalScrollBarSize.
         * @implements ICMsgHorizontalScrollBarSize
         * @constructor
         * @param {ICMsgHorizontalScrollBarSize=} [properties] Properties to set
         */
        function CMsgHorizontalScrollBarSize(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgHorizontalScrollBarSize browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgHorizontalScrollBarSize
         * @instance
         */
        CMsgHorizontalScrollBarSize.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgHorizontalScrollBarSize instance using the specified properties.
         * @function create
         * @memberof CMsgHorizontalScrollBarSize
         * @static
         * @param {ICMsgHorizontalScrollBarSize=} [properties] Properties to set
         * @returns {CMsgHorizontalScrollBarSize} CMsgHorizontalScrollBarSize instance
         */
        CMsgHorizontalScrollBarSize.create = function create(properties) {
            return new CMsgHorizontalScrollBarSize(properties);
        };
    
        /**
         * Encodes the specified CMsgHorizontalScrollBarSize message. Does not implicitly {@link CMsgHorizontalScrollBarSize.verify|verify} messages.
         * @function encode
         * @memberof CMsgHorizontalScrollBarSize
         * @static
         * @param {ICMsgHorizontalScrollBarSize} message CMsgHorizontalScrollBarSize message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgHorizontalScrollBarSize.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgHorizontalScrollBarSize message, length delimited. Does not implicitly {@link CMsgHorizontalScrollBarSize.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgHorizontalScrollBarSize
         * @static
         * @param {ICMsgHorizontalScrollBarSize} message CMsgHorizontalScrollBarSize message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgHorizontalScrollBarSize.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgHorizontalScrollBarSize message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgHorizontalScrollBarSize
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgHorizontalScrollBarSize} CMsgHorizontalScrollBarSize
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgHorizontalScrollBarSize.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgHorizontalScrollBarSize();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgHorizontalScrollBarSize message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgHorizontalScrollBarSize
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgHorizontalScrollBarSize} CMsgHorizontalScrollBarSize
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgHorizontalScrollBarSize.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgHorizontalScrollBarSize message.
         * @function verify
         * @memberof CMsgHorizontalScrollBarSize
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgHorizontalScrollBarSize.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgHorizontalScrollBarSize message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgHorizontalScrollBarSize
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgHorizontalScrollBarSize} CMsgHorizontalScrollBarSize
         */
        CMsgHorizontalScrollBarSize.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgHorizontalScrollBarSize)
                return object;
            var message = new $root.CMsgHorizontalScrollBarSize();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgHorizontalScrollBarSize message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgHorizontalScrollBarSize
         * @static
         * @param {CMsgHorizontalScrollBarSize} message CMsgHorizontalScrollBarSize
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgHorizontalScrollBarSize.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgHorizontalScrollBarSize to JSON.
         * @function toJSON
         * @memberof CMsgHorizontalScrollBarSize
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgHorizontalScrollBarSize.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgHorizontalScrollBarSize;
    })();
    
    $root.CMsgHorizontalScrollBarSizeResponse = (function() {
    
        /**
         * Properties of a CMsgHorizontalScrollBarSizeResponse.
         * @exports ICMsgHorizontalScrollBarSizeResponse
         * @interface ICMsgHorizontalScrollBarSizeResponse
         * @property {number|null} [browser_handle] CMsgHorizontalScrollBarSizeResponse browser_handle
         * @property {number|null} [scroll_max] CMsgHorizontalScrollBarSizeResponse scroll_max
         * @property {number|null} [scroll] CMsgHorizontalScrollBarSizeResponse scroll
         * @property {number|null} [zoom] CMsgHorizontalScrollBarSizeResponse zoom
         * @property {boolean|null} [visible] CMsgHorizontalScrollBarSizeResponse visible
         * @property {number|null} [page_size] CMsgHorizontalScrollBarSizeResponse page_size
         */
    
        /**
         * Constructs a new CMsgHorizontalScrollBarSizeResponse.
         * @exports CMsgHorizontalScrollBarSizeResponse
         * @classdesc Represents a CMsgHorizontalScrollBarSizeResponse.
         * @implements ICMsgHorizontalScrollBarSizeResponse
         * @constructor
         * @param {ICMsgHorizontalScrollBarSizeResponse=} [properties] Properties to set
         */
        function CMsgHorizontalScrollBarSizeResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgHorizontalScrollBarSizeResponse browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgHorizontalScrollBarSizeResponse
         * @instance
         */
        CMsgHorizontalScrollBarSizeResponse.prototype.browser_handle = 0;
    
        /**
         * CMsgHorizontalScrollBarSizeResponse scroll_max.
         * @member {number} scroll_max
         * @memberof CMsgHorizontalScrollBarSizeResponse
         * @instance
         */
        CMsgHorizontalScrollBarSizeResponse.prototype.scroll_max = 0;
    
        /**
         * CMsgHorizontalScrollBarSizeResponse scroll.
         * @member {number} scroll
         * @memberof CMsgHorizontalScrollBarSizeResponse
         * @instance
         */
        CMsgHorizontalScrollBarSizeResponse.prototype.scroll = 0;
    
        /**
         * CMsgHorizontalScrollBarSizeResponse zoom.
         * @member {number} zoom
         * @memberof CMsgHorizontalScrollBarSizeResponse
         * @instance
         */
        CMsgHorizontalScrollBarSizeResponse.prototype.zoom = 0;
    
        /**
         * CMsgHorizontalScrollBarSizeResponse visible.
         * @member {boolean} visible
         * @memberof CMsgHorizontalScrollBarSizeResponse
         * @instance
         */
        CMsgHorizontalScrollBarSizeResponse.prototype.visible = false;
    
        /**
         * CMsgHorizontalScrollBarSizeResponse page_size.
         * @member {number} page_size
         * @memberof CMsgHorizontalScrollBarSizeResponse
         * @instance
         */
        CMsgHorizontalScrollBarSizeResponse.prototype.page_size = 0;
    
        /**
         * Creates a new CMsgHorizontalScrollBarSizeResponse instance using the specified properties.
         * @function create
         * @memberof CMsgHorizontalScrollBarSizeResponse
         * @static
         * @param {ICMsgHorizontalScrollBarSizeResponse=} [properties] Properties to set
         * @returns {CMsgHorizontalScrollBarSizeResponse} CMsgHorizontalScrollBarSizeResponse instance
         */
        CMsgHorizontalScrollBarSizeResponse.create = function create(properties) {
            return new CMsgHorizontalScrollBarSizeResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgHorizontalScrollBarSizeResponse message. Does not implicitly {@link CMsgHorizontalScrollBarSizeResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgHorizontalScrollBarSizeResponse
         * @static
         * @param {ICMsgHorizontalScrollBarSizeResponse} message CMsgHorizontalScrollBarSizeResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgHorizontalScrollBarSizeResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.scroll_max != null && Object.hasOwnProperty.call(message, "scroll_max"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.scroll_max);
            if (message.scroll != null && Object.hasOwnProperty.call(message, "scroll"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.scroll);
            if (message.zoom != null && Object.hasOwnProperty.call(message, "zoom"))
                writer.uint32(/* id 8, wireType 5 =*/69).float(message.zoom);
            if (message.visible != null && Object.hasOwnProperty.call(message, "visible"))
                writer.uint32(/* id 9, wireType 0 =*/72).bool(message.visible);
            if (message.page_size != null && Object.hasOwnProperty.call(message, "page_size"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.page_size);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgHorizontalScrollBarSizeResponse message, length delimited. Does not implicitly {@link CMsgHorizontalScrollBarSizeResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgHorizontalScrollBarSizeResponse
         * @static
         * @param {ICMsgHorizontalScrollBarSizeResponse} message CMsgHorizontalScrollBarSizeResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgHorizontalScrollBarSizeResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgHorizontalScrollBarSizeResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgHorizontalScrollBarSizeResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgHorizontalScrollBarSizeResponse} CMsgHorizontalScrollBarSizeResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgHorizontalScrollBarSizeResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgHorizontalScrollBarSizeResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 6:
                    message.scroll_max = reader.uint32();
                    break;
                case 7:
                    message.scroll = reader.uint32();
                    break;
                case 8:
                    message.zoom = reader.float();
                    break;
                case 9:
                    message.visible = reader.bool();
                    break;
                case 10:
                    message.page_size = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgHorizontalScrollBarSizeResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgHorizontalScrollBarSizeResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgHorizontalScrollBarSizeResponse} CMsgHorizontalScrollBarSizeResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgHorizontalScrollBarSizeResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgHorizontalScrollBarSizeResponse message.
         * @function verify
         * @memberof CMsgHorizontalScrollBarSizeResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgHorizontalScrollBarSizeResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.scroll_max != null && message.hasOwnProperty("scroll_max"))
                if (!$util.isInteger(message.scroll_max))
                    return "scroll_max: integer expected";
            if (message.scroll != null && message.hasOwnProperty("scroll"))
                if (!$util.isInteger(message.scroll))
                    return "scroll: integer expected";
            if (message.zoom != null && message.hasOwnProperty("zoom"))
                if (typeof message.zoom !== "number")
                    return "zoom: number expected";
            if (message.visible != null && message.hasOwnProperty("visible"))
                if (typeof message.visible !== "boolean")
                    return "visible: boolean expected";
            if (message.page_size != null && message.hasOwnProperty("page_size"))
                if (!$util.isInteger(message.page_size))
                    return "page_size: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgHorizontalScrollBarSizeResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgHorizontalScrollBarSizeResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgHorizontalScrollBarSizeResponse} CMsgHorizontalScrollBarSizeResponse
         */
        CMsgHorizontalScrollBarSizeResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgHorizontalScrollBarSizeResponse)
                return object;
            var message = new $root.CMsgHorizontalScrollBarSizeResponse();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.scroll_max != null)
                message.scroll_max = object.scroll_max >>> 0;
            if (object.scroll != null)
                message.scroll = object.scroll >>> 0;
            if (object.zoom != null)
                message.zoom = Number(object.zoom);
            if (object.visible != null)
                message.visible = Boolean(object.visible);
            if (object.page_size != null)
                message.page_size = object.page_size >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgHorizontalScrollBarSizeResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgHorizontalScrollBarSizeResponse
         * @static
         * @param {CMsgHorizontalScrollBarSizeResponse} message CMsgHorizontalScrollBarSizeResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgHorizontalScrollBarSizeResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.scroll_max = 0;
                object.scroll = 0;
                object.zoom = 0;
                object.visible = false;
                object.page_size = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.scroll_max != null && message.hasOwnProperty("scroll_max"))
                object.scroll_max = message.scroll_max;
            if (message.scroll != null && message.hasOwnProperty("scroll"))
                object.scroll = message.scroll;
            if (message.zoom != null && message.hasOwnProperty("zoom"))
                object.zoom = options.json && !isFinite(message.zoom) ? String(message.zoom) : message.zoom;
            if (message.visible != null && message.hasOwnProperty("visible"))
                object.visible = message.visible;
            if (message.page_size != null && message.hasOwnProperty("page_size"))
                object.page_size = message.page_size;
            return object;
        };
    
        /**
         * Converts this CMsgHorizontalScrollBarSizeResponse to JSON.
         * @function toJSON
         * @memberof CMsgHorizontalScrollBarSizeResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgHorizontalScrollBarSizeResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgHorizontalScrollBarSizeResponse;
    })();
    
    $root.CMsgVerticalScrollBarSize = (function() {
    
        /**
         * Properties of a CMsgVerticalScrollBarSize.
         * @exports ICMsgVerticalScrollBarSize
         * @interface ICMsgVerticalScrollBarSize
         * @property {number|null} [browser_handle] CMsgVerticalScrollBarSize browser_handle
         */
    
        /**
         * Constructs a new CMsgVerticalScrollBarSize.
         * @exports CMsgVerticalScrollBarSize
         * @classdesc Represents a CMsgVerticalScrollBarSize.
         * @implements ICMsgVerticalScrollBarSize
         * @constructor
         * @param {ICMsgVerticalScrollBarSize=} [properties] Properties to set
         */
        function CMsgVerticalScrollBarSize(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgVerticalScrollBarSize browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgVerticalScrollBarSize
         * @instance
         */
        CMsgVerticalScrollBarSize.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgVerticalScrollBarSize instance using the specified properties.
         * @function create
         * @memberof CMsgVerticalScrollBarSize
         * @static
         * @param {ICMsgVerticalScrollBarSize=} [properties] Properties to set
         * @returns {CMsgVerticalScrollBarSize} CMsgVerticalScrollBarSize instance
         */
        CMsgVerticalScrollBarSize.create = function create(properties) {
            return new CMsgVerticalScrollBarSize(properties);
        };
    
        /**
         * Encodes the specified CMsgVerticalScrollBarSize message. Does not implicitly {@link CMsgVerticalScrollBarSize.verify|verify} messages.
         * @function encode
         * @memberof CMsgVerticalScrollBarSize
         * @static
         * @param {ICMsgVerticalScrollBarSize} message CMsgVerticalScrollBarSize message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgVerticalScrollBarSize.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgVerticalScrollBarSize message, length delimited. Does not implicitly {@link CMsgVerticalScrollBarSize.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgVerticalScrollBarSize
         * @static
         * @param {ICMsgVerticalScrollBarSize} message CMsgVerticalScrollBarSize message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgVerticalScrollBarSize.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgVerticalScrollBarSize message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgVerticalScrollBarSize
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgVerticalScrollBarSize} CMsgVerticalScrollBarSize
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgVerticalScrollBarSize.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgVerticalScrollBarSize();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgVerticalScrollBarSize message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgVerticalScrollBarSize
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgVerticalScrollBarSize} CMsgVerticalScrollBarSize
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgVerticalScrollBarSize.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgVerticalScrollBarSize message.
         * @function verify
         * @memberof CMsgVerticalScrollBarSize
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgVerticalScrollBarSize.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgVerticalScrollBarSize message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgVerticalScrollBarSize
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgVerticalScrollBarSize} CMsgVerticalScrollBarSize
         */
        CMsgVerticalScrollBarSize.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgVerticalScrollBarSize)
                return object;
            var message = new $root.CMsgVerticalScrollBarSize();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgVerticalScrollBarSize message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgVerticalScrollBarSize
         * @static
         * @param {CMsgVerticalScrollBarSize} message CMsgVerticalScrollBarSize
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgVerticalScrollBarSize.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgVerticalScrollBarSize to JSON.
         * @function toJSON
         * @memberof CMsgVerticalScrollBarSize
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgVerticalScrollBarSize.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgVerticalScrollBarSize;
    })();
    
    $root.CMsgVerticalScrollBarSizeResponse = (function() {
    
        /**
         * Properties of a CMsgVerticalScrollBarSizeResponse.
         * @exports ICMsgVerticalScrollBarSizeResponse
         * @interface ICMsgVerticalScrollBarSizeResponse
         * @property {number|null} [browser_handle] CMsgVerticalScrollBarSizeResponse browser_handle
         * @property {number|null} [scroll_max] CMsgVerticalScrollBarSizeResponse scroll_max
         * @property {number|null} [scroll] CMsgVerticalScrollBarSizeResponse scroll
         * @property {number|null} [zoom] CMsgVerticalScrollBarSizeResponse zoom
         * @property {boolean|null} [visible] CMsgVerticalScrollBarSizeResponse visible
         * @property {number|null} [page_size] CMsgVerticalScrollBarSizeResponse page_size
         */
    
        /**
         * Constructs a new CMsgVerticalScrollBarSizeResponse.
         * @exports CMsgVerticalScrollBarSizeResponse
         * @classdesc Represents a CMsgVerticalScrollBarSizeResponse.
         * @implements ICMsgVerticalScrollBarSizeResponse
         * @constructor
         * @param {ICMsgVerticalScrollBarSizeResponse=} [properties] Properties to set
         */
        function CMsgVerticalScrollBarSizeResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgVerticalScrollBarSizeResponse browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgVerticalScrollBarSizeResponse
         * @instance
         */
        CMsgVerticalScrollBarSizeResponse.prototype.browser_handle = 0;
    
        /**
         * CMsgVerticalScrollBarSizeResponse scroll_max.
         * @member {number} scroll_max
         * @memberof CMsgVerticalScrollBarSizeResponse
         * @instance
         */
        CMsgVerticalScrollBarSizeResponse.prototype.scroll_max = 0;
    
        /**
         * CMsgVerticalScrollBarSizeResponse scroll.
         * @member {number} scroll
         * @memberof CMsgVerticalScrollBarSizeResponse
         * @instance
         */
        CMsgVerticalScrollBarSizeResponse.prototype.scroll = 0;
    
        /**
         * CMsgVerticalScrollBarSizeResponse zoom.
         * @member {number} zoom
         * @memberof CMsgVerticalScrollBarSizeResponse
         * @instance
         */
        CMsgVerticalScrollBarSizeResponse.prototype.zoom = 0;
    
        /**
         * CMsgVerticalScrollBarSizeResponse visible.
         * @member {boolean} visible
         * @memberof CMsgVerticalScrollBarSizeResponse
         * @instance
         */
        CMsgVerticalScrollBarSizeResponse.prototype.visible = false;
    
        /**
         * CMsgVerticalScrollBarSizeResponse page_size.
         * @member {number} page_size
         * @memberof CMsgVerticalScrollBarSizeResponse
         * @instance
         */
        CMsgVerticalScrollBarSizeResponse.prototype.page_size = 0;
    
        /**
         * Creates a new CMsgVerticalScrollBarSizeResponse instance using the specified properties.
         * @function create
         * @memberof CMsgVerticalScrollBarSizeResponse
         * @static
         * @param {ICMsgVerticalScrollBarSizeResponse=} [properties] Properties to set
         * @returns {CMsgVerticalScrollBarSizeResponse} CMsgVerticalScrollBarSizeResponse instance
         */
        CMsgVerticalScrollBarSizeResponse.create = function create(properties) {
            return new CMsgVerticalScrollBarSizeResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgVerticalScrollBarSizeResponse message. Does not implicitly {@link CMsgVerticalScrollBarSizeResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgVerticalScrollBarSizeResponse
         * @static
         * @param {ICMsgVerticalScrollBarSizeResponse} message CMsgVerticalScrollBarSizeResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgVerticalScrollBarSizeResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.scroll_max != null && Object.hasOwnProperty.call(message, "scroll_max"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.scroll_max);
            if (message.scroll != null && Object.hasOwnProperty.call(message, "scroll"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.scroll);
            if (message.zoom != null && Object.hasOwnProperty.call(message, "zoom"))
                writer.uint32(/* id 8, wireType 5 =*/69).float(message.zoom);
            if (message.visible != null && Object.hasOwnProperty.call(message, "visible"))
                writer.uint32(/* id 9, wireType 0 =*/72).bool(message.visible);
            if (message.page_size != null && Object.hasOwnProperty.call(message, "page_size"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.page_size);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgVerticalScrollBarSizeResponse message, length delimited. Does not implicitly {@link CMsgVerticalScrollBarSizeResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgVerticalScrollBarSizeResponse
         * @static
         * @param {ICMsgVerticalScrollBarSizeResponse} message CMsgVerticalScrollBarSizeResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgVerticalScrollBarSizeResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgVerticalScrollBarSizeResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgVerticalScrollBarSizeResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgVerticalScrollBarSizeResponse} CMsgVerticalScrollBarSizeResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgVerticalScrollBarSizeResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgVerticalScrollBarSizeResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 6:
                    message.scroll_max = reader.uint32();
                    break;
                case 7:
                    message.scroll = reader.uint32();
                    break;
                case 8:
                    message.zoom = reader.float();
                    break;
                case 9:
                    message.visible = reader.bool();
                    break;
                case 10:
                    message.page_size = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgVerticalScrollBarSizeResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgVerticalScrollBarSizeResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgVerticalScrollBarSizeResponse} CMsgVerticalScrollBarSizeResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgVerticalScrollBarSizeResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgVerticalScrollBarSizeResponse message.
         * @function verify
         * @memberof CMsgVerticalScrollBarSizeResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgVerticalScrollBarSizeResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.scroll_max != null && message.hasOwnProperty("scroll_max"))
                if (!$util.isInteger(message.scroll_max))
                    return "scroll_max: integer expected";
            if (message.scroll != null && message.hasOwnProperty("scroll"))
                if (!$util.isInteger(message.scroll))
                    return "scroll: integer expected";
            if (message.zoom != null && message.hasOwnProperty("zoom"))
                if (typeof message.zoom !== "number")
                    return "zoom: number expected";
            if (message.visible != null && message.hasOwnProperty("visible"))
                if (typeof message.visible !== "boolean")
                    return "visible: boolean expected";
            if (message.page_size != null && message.hasOwnProperty("page_size"))
                if (!$util.isInteger(message.page_size))
                    return "page_size: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgVerticalScrollBarSizeResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgVerticalScrollBarSizeResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgVerticalScrollBarSizeResponse} CMsgVerticalScrollBarSizeResponse
         */
        CMsgVerticalScrollBarSizeResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgVerticalScrollBarSizeResponse)
                return object;
            var message = new $root.CMsgVerticalScrollBarSizeResponse();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.scroll_max != null)
                message.scroll_max = object.scroll_max >>> 0;
            if (object.scroll != null)
                message.scroll = object.scroll >>> 0;
            if (object.zoom != null)
                message.zoom = Number(object.zoom);
            if (object.visible != null)
                message.visible = Boolean(object.visible);
            if (object.page_size != null)
                message.page_size = object.page_size >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgVerticalScrollBarSizeResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgVerticalScrollBarSizeResponse
         * @static
         * @param {CMsgVerticalScrollBarSizeResponse} message CMsgVerticalScrollBarSizeResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgVerticalScrollBarSizeResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.scroll_max = 0;
                object.scroll = 0;
                object.zoom = 0;
                object.visible = false;
                object.page_size = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.scroll_max != null && message.hasOwnProperty("scroll_max"))
                object.scroll_max = message.scroll_max;
            if (message.scroll != null && message.hasOwnProperty("scroll"))
                object.scroll = message.scroll;
            if (message.zoom != null && message.hasOwnProperty("zoom"))
                object.zoom = options.json && !isFinite(message.zoom) ? String(message.zoom) : message.zoom;
            if (message.visible != null && message.hasOwnProperty("visible"))
                object.visible = message.visible;
            if (message.page_size != null && message.hasOwnProperty("page_size"))
                object.page_size = message.page_size;
            return object;
        };
    
        /**
         * Converts this CMsgVerticalScrollBarSizeResponse to JSON.
         * @function toJSON
         * @memberof CMsgVerticalScrollBarSizeResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgVerticalScrollBarSizeResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgVerticalScrollBarSizeResponse;
    })();
    
    $root.CMsgFind = (function() {
    
        /**
         * Properties of a CMsgFind.
         * @exports ICMsgFind
         * @interface ICMsgFind
         * @property {number|null} [browser_handle] CMsgFind browser_handle
         * @property {string|null} [find] CMsgFind find
         * @property {boolean|null} [infind] CMsgFind infind
         * @property {boolean|null} [reverse] CMsgFind reverse
         */
    
        /**
         * Constructs a new CMsgFind.
         * @exports CMsgFind
         * @classdesc Represents a CMsgFind.
         * @implements ICMsgFind
         * @constructor
         * @param {ICMsgFind=} [properties] Properties to set
         */
        function CMsgFind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgFind browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgFind
         * @instance
         */
        CMsgFind.prototype.browser_handle = 0;
    
        /**
         * CMsgFind find.
         * @member {string} find
         * @memberof CMsgFind
         * @instance
         */
        CMsgFind.prototype.find = "";
    
        /**
         * CMsgFind infind.
         * @member {boolean} infind
         * @memberof CMsgFind
         * @instance
         */
        CMsgFind.prototype.infind = false;
    
        /**
         * CMsgFind reverse.
         * @member {boolean} reverse
         * @memberof CMsgFind
         * @instance
         */
        CMsgFind.prototype.reverse = false;
    
        /**
         * Creates a new CMsgFind instance using the specified properties.
         * @function create
         * @memberof CMsgFind
         * @static
         * @param {ICMsgFind=} [properties] Properties to set
         * @returns {CMsgFind} CMsgFind instance
         */
        CMsgFind.create = function create(properties) {
            return new CMsgFind(properties);
        };
    
        /**
         * Encodes the specified CMsgFind message. Does not implicitly {@link CMsgFind.verify|verify} messages.
         * @function encode
         * @memberof CMsgFind
         * @static
         * @param {ICMsgFind} message CMsgFind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgFind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.find != null && Object.hasOwnProperty.call(message, "find"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.find);
            if (message.infind != null && Object.hasOwnProperty.call(message, "infind"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.infind);
            if (message.reverse != null && Object.hasOwnProperty.call(message, "reverse"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.reverse);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgFind message, length delimited. Does not implicitly {@link CMsgFind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgFind
         * @static
         * @param {ICMsgFind} message CMsgFind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgFind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgFind message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgFind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgFind} CMsgFind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgFind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgFind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.find = reader.string();
                    break;
                case 3:
                    message.infind = reader.bool();
                    break;
                case 4:
                    message.reverse = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgFind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgFind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgFind} CMsgFind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgFind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgFind message.
         * @function verify
         * @memberof CMsgFind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgFind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.find != null && message.hasOwnProperty("find"))
                if (!$util.isString(message.find))
                    return "find: string expected";
            if (message.infind != null && message.hasOwnProperty("infind"))
                if (typeof message.infind !== "boolean")
                    return "infind: boolean expected";
            if (message.reverse != null && message.hasOwnProperty("reverse"))
                if (typeof message.reverse !== "boolean")
                    return "reverse: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgFind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgFind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgFind} CMsgFind
         */
        CMsgFind.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgFind)
                return object;
            var message = new $root.CMsgFind();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.find != null)
                message.find = String(object.find);
            if (object.infind != null)
                message.infind = Boolean(object.infind);
            if (object.reverse != null)
                message.reverse = Boolean(object.reverse);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgFind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgFind
         * @static
         * @param {CMsgFind} message CMsgFind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgFind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.find = "";
                object.infind = false;
                object.reverse = false;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.find != null && message.hasOwnProperty("find"))
                object.find = message.find;
            if (message.infind != null && message.hasOwnProperty("infind"))
                object.infind = message.infind;
            if (message.reverse != null && message.hasOwnProperty("reverse"))
                object.reverse = message.reverse;
            return object;
        };
    
        /**
         * Converts this CMsgFind to JSON.
         * @function toJSON
         * @memberof CMsgFind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgFind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgFind;
    })();
    
    $root.CMsgStopFind = (function() {
    
        /**
         * Properties of a CMsgStopFind.
         * @exports ICMsgStopFind
         * @interface ICMsgStopFind
         * @property {number|null} [browser_handle] CMsgStopFind browser_handle
         */
    
        /**
         * Constructs a new CMsgStopFind.
         * @exports CMsgStopFind
         * @classdesc Represents a CMsgStopFind.
         * @implements ICMsgStopFind
         * @constructor
         * @param {ICMsgStopFind=} [properties] Properties to set
         */
        function CMsgStopFind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgStopFind browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgStopFind
         * @instance
         */
        CMsgStopFind.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgStopFind instance using the specified properties.
         * @function create
         * @memberof CMsgStopFind
         * @static
         * @param {ICMsgStopFind=} [properties] Properties to set
         * @returns {CMsgStopFind} CMsgStopFind instance
         */
        CMsgStopFind.create = function create(properties) {
            return new CMsgStopFind(properties);
        };
    
        /**
         * Encodes the specified CMsgStopFind message. Does not implicitly {@link CMsgStopFind.verify|verify} messages.
         * @function encode
         * @memberof CMsgStopFind
         * @static
         * @param {ICMsgStopFind} message CMsgStopFind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgStopFind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgStopFind message, length delimited. Does not implicitly {@link CMsgStopFind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgStopFind
         * @static
         * @param {ICMsgStopFind} message CMsgStopFind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgStopFind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgStopFind message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgStopFind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgStopFind} CMsgStopFind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgStopFind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgStopFind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgStopFind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgStopFind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgStopFind} CMsgStopFind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgStopFind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgStopFind message.
         * @function verify
         * @memberof CMsgStopFind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgStopFind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgStopFind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgStopFind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgStopFind} CMsgStopFind
         */
        CMsgStopFind.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgStopFind)
                return object;
            var message = new $root.CMsgStopFind();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgStopFind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgStopFind
         * @static
         * @param {CMsgStopFind} message CMsgStopFind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgStopFind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgStopFind to JSON.
         * @function toJSON
         * @memberof CMsgStopFind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgStopFind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgStopFind;
    })();
    
    $root.CMsgSetHorizontalScroll = (function() {
    
        /**
         * Properties of a CMsgSetHorizontalScroll.
         * @exports ICMsgSetHorizontalScroll
         * @interface ICMsgSetHorizontalScroll
         * @property {number|null} [browser_handle] CMsgSetHorizontalScroll browser_handle
         * @property {number|null} [scroll] CMsgSetHorizontalScroll scroll
         */
    
        /**
         * Constructs a new CMsgSetHorizontalScroll.
         * @exports CMsgSetHorizontalScroll
         * @classdesc Represents a CMsgSetHorizontalScroll.
         * @implements ICMsgSetHorizontalScroll
         * @constructor
         * @param {ICMsgSetHorizontalScroll=} [properties] Properties to set
         */
        function CMsgSetHorizontalScroll(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSetHorizontalScroll browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgSetHorizontalScroll
         * @instance
         */
        CMsgSetHorizontalScroll.prototype.browser_handle = 0;
    
        /**
         * CMsgSetHorizontalScroll scroll.
         * @member {number} scroll
         * @memberof CMsgSetHorizontalScroll
         * @instance
         */
        CMsgSetHorizontalScroll.prototype.scroll = 0;
    
        /**
         * Creates a new CMsgSetHorizontalScroll instance using the specified properties.
         * @function create
         * @memberof CMsgSetHorizontalScroll
         * @static
         * @param {ICMsgSetHorizontalScroll=} [properties] Properties to set
         * @returns {CMsgSetHorizontalScroll} CMsgSetHorizontalScroll instance
         */
        CMsgSetHorizontalScroll.create = function create(properties) {
            return new CMsgSetHorizontalScroll(properties);
        };
    
        /**
         * Encodes the specified CMsgSetHorizontalScroll message. Does not implicitly {@link CMsgSetHorizontalScroll.verify|verify} messages.
         * @function encode
         * @memberof CMsgSetHorizontalScroll
         * @static
         * @param {ICMsgSetHorizontalScroll} message CMsgSetHorizontalScroll message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSetHorizontalScroll.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.scroll != null && Object.hasOwnProperty.call(message, "scroll"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.scroll);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSetHorizontalScroll message, length delimited. Does not implicitly {@link CMsgSetHorizontalScroll.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSetHorizontalScroll
         * @static
         * @param {ICMsgSetHorizontalScroll} message CMsgSetHorizontalScroll message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSetHorizontalScroll.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSetHorizontalScroll message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSetHorizontalScroll
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSetHorizontalScroll} CMsgSetHorizontalScroll
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSetHorizontalScroll.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSetHorizontalScroll();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.scroll = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSetHorizontalScroll message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSetHorizontalScroll
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSetHorizontalScroll} CMsgSetHorizontalScroll
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSetHorizontalScroll.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSetHorizontalScroll message.
         * @function verify
         * @memberof CMsgSetHorizontalScroll
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSetHorizontalScroll.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.scroll != null && message.hasOwnProperty("scroll"))
                if (!$util.isInteger(message.scroll))
                    return "scroll: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSetHorizontalScroll message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSetHorizontalScroll
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSetHorizontalScroll} CMsgSetHorizontalScroll
         */
        CMsgSetHorizontalScroll.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSetHorizontalScroll)
                return object;
            var message = new $root.CMsgSetHorizontalScroll();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.scroll != null)
                message.scroll = object.scroll >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSetHorizontalScroll message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSetHorizontalScroll
         * @static
         * @param {CMsgSetHorizontalScroll} message CMsgSetHorizontalScroll
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSetHorizontalScroll.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.scroll = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.scroll != null && message.hasOwnProperty("scroll"))
                object.scroll = message.scroll;
            return object;
        };
    
        /**
         * Converts this CMsgSetHorizontalScroll to JSON.
         * @function toJSON
         * @memberof CMsgSetHorizontalScroll
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSetHorizontalScroll.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSetHorizontalScroll;
    })();
    
    $root.CMsgSetVerticalScroll = (function() {
    
        /**
         * Properties of a CMsgSetVerticalScroll.
         * @exports ICMsgSetVerticalScroll
         * @interface ICMsgSetVerticalScroll
         * @property {number|null} [browser_handle] CMsgSetVerticalScroll browser_handle
         * @property {number|null} [scroll] CMsgSetVerticalScroll scroll
         */
    
        /**
         * Constructs a new CMsgSetVerticalScroll.
         * @exports CMsgSetVerticalScroll
         * @classdesc Represents a CMsgSetVerticalScroll.
         * @implements ICMsgSetVerticalScroll
         * @constructor
         * @param {ICMsgSetVerticalScroll=} [properties] Properties to set
         */
        function CMsgSetVerticalScroll(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSetVerticalScroll browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgSetVerticalScroll
         * @instance
         */
        CMsgSetVerticalScroll.prototype.browser_handle = 0;
    
        /**
         * CMsgSetVerticalScroll scroll.
         * @member {number} scroll
         * @memberof CMsgSetVerticalScroll
         * @instance
         */
        CMsgSetVerticalScroll.prototype.scroll = 0;
    
        /**
         * Creates a new CMsgSetVerticalScroll instance using the specified properties.
         * @function create
         * @memberof CMsgSetVerticalScroll
         * @static
         * @param {ICMsgSetVerticalScroll=} [properties] Properties to set
         * @returns {CMsgSetVerticalScroll} CMsgSetVerticalScroll instance
         */
        CMsgSetVerticalScroll.create = function create(properties) {
            return new CMsgSetVerticalScroll(properties);
        };
    
        /**
         * Encodes the specified CMsgSetVerticalScroll message. Does not implicitly {@link CMsgSetVerticalScroll.verify|verify} messages.
         * @function encode
         * @memberof CMsgSetVerticalScroll
         * @static
         * @param {ICMsgSetVerticalScroll} message CMsgSetVerticalScroll message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSetVerticalScroll.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.scroll != null && Object.hasOwnProperty.call(message, "scroll"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.scroll);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSetVerticalScroll message, length delimited. Does not implicitly {@link CMsgSetVerticalScroll.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSetVerticalScroll
         * @static
         * @param {ICMsgSetVerticalScroll} message CMsgSetVerticalScroll message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSetVerticalScroll.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSetVerticalScroll message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSetVerticalScroll
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSetVerticalScroll} CMsgSetVerticalScroll
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSetVerticalScroll.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSetVerticalScroll();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.scroll = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSetVerticalScroll message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSetVerticalScroll
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSetVerticalScroll} CMsgSetVerticalScroll
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSetVerticalScroll.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSetVerticalScroll message.
         * @function verify
         * @memberof CMsgSetVerticalScroll
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSetVerticalScroll.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.scroll != null && message.hasOwnProperty("scroll"))
                if (!$util.isInteger(message.scroll))
                    return "scroll: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSetVerticalScroll message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSetVerticalScroll
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSetVerticalScroll} CMsgSetVerticalScroll
         */
        CMsgSetVerticalScroll.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSetVerticalScroll)
                return object;
            var message = new $root.CMsgSetVerticalScroll();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.scroll != null)
                message.scroll = object.scroll >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSetVerticalScroll message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSetVerticalScroll
         * @static
         * @param {CMsgSetVerticalScroll} message CMsgSetVerticalScroll
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSetVerticalScroll.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.scroll = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.scroll != null && message.hasOwnProperty("scroll"))
                object.scroll = message.scroll;
            return object;
        };
    
        /**
         * Converts this CMsgSetVerticalScroll to JSON.
         * @function toJSON
         * @memberof CMsgSetVerticalScroll
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSetVerticalScroll.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSetVerticalScroll;
    })();
    
    $root.CMsgSetZoomLevel = (function() {
    
        /**
         * Properties of a CMsgSetZoomLevel.
         * @exports ICMsgSetZoomLevel
         * @interface ICMsgSetZoomLevel
         * @property {number|null} [browser_handle] CMsgSetZoomLevel browser_handle
         * @property {number|null} [zoom] CMsgSetZoomLevel zoom
         */
    
        /**
         * Constructs a new CMsgSetZoomLevel.
         * @exports CMsgSetZoomLevel
         * @classdesc Represents a CMsgSetZoomLevel.
         * @implements ICMsgSetZoomLevel
         * @constructor
         * @param {ICMsgSetZoomLevel=} [properties] Properties to set
         */
        function CMsgSetZoomLevel(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSetZoomLevel browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgSetZoomLevel
         * @instance
         */
        CMsgSetZoomLevel.prototype.browser_handle = 0;
    
        /**
         * CMsgSetZoomLevel zoom.
         * @member {number} zoom
         * @memberof CMsgSetZoomLevel
         * @instance
         */
        CMsgSetZoomLevel.prototype.zoom = 0;
    
        /**
         * Creates a new CMsgSetZoomLevel instance using the specified properties.
         * @function create
         * @memberof CMsgSetZoomLevel
         * @static
         * @param {ICMsgSetZoomLevel=} [properties] Properties to set
         * @returns {CMsgSetZoomLevel} CMsgSetZoomLevel instance
         */
        CMsgSetZoomLevel.create = function create(properties) {
            return new CMsgSetZoomLevel(properties);
        };
    
        /**
         * Encodes the specified CMsgSetZoomLevel message. Does not implicitly {@link CMsgSetZoomLevel.verify|verify} messages.
         * @function encode
         * @memberof CMsgSetZoomLevel
         * @static
         * @param {ICMsgSetZoomLevel} message CMsgSetZoomLevel message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSetZoomLevel.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.zoom != null && Object.hasOwnProperty.call(message, "zoom"))
                writer.uint32(/* id 2, wireType 1 =*/17).double(message.zoom);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSetZoomLevel message, length delimited. Does not implicitly {@link CMsgSetZoomLevel.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSetZoomLevel
         * @static
         * @param {ICMsgSetZoomLevel} message CMsgSetZoomLevel message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSetZoomLevel.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSetZoomLevel message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSetZoomLevel
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSetZoomLevel} CMsgSetZoomLevel
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSetZoomLevel.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSetZoomLevel();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.zoom = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSetZoomLevel message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSetZoomLevel
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSetZoomLevel} CMsgSetZoomLevel
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSetZoomLevel.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSetZoomLevel message.
         * @function verify
         * @memberof CMsgSetZoomLevel
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSetZoomLevel.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.zoom != null && message.hasOwnProperty("zoom"))
                if (typeof message.zoom !== "number")
                    return "zoom: number expected";
            return null;
        };
    
        /**
         * Creates a CMsgSetZoomLevel message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSetZoomLevel
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSetZoomLevel} CMsgSetZoomLevel
         */
        CMsgSetZoomLevel.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSetZoomLevel)
                return object;
            var message = new $root.CMsgSetZoomLevel();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.zoom != null)
                message.zoom = Number(object.zoom);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSetZoomLevel message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSetZoomLevel
         * @static
         * @param {CMsgSetZoomLevel} message CMsgSetZoomLevel
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSetZoomLevel.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.zoom = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.zoom != null && message.hasOwnProperty("zoom"))
                object.zoom = options.json && !isFinite(message.zoom) ? String(message.zoom) : message.zoom;
            return object;
        };
    
        /**
         * Converts this CMsgSetZoomLevel to JSON.
         * @function toJSON
         * @memberof CMsgSetZoomLevel
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSetZoomLevel.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSetZoomLevel;
    })();
    
    $root.CMsgViewSource = (function() {
    
        /**
         * Properties of a CMsgViewSource.
         * @exports ICMsgViewSource
         * @interface ICMsgViewSource
         * @property {number|null} [browser_handle] CMsgViewSource browser_handle
         */
    
        /**
         * Constructs a new CMsgViewSource.
         * @exports CMsgViewSource
         * @classdesc Represents a CMsgViewSource.
         * @implements ICMsgViewSource
         * @constructor
         * @param {ICMsgViewSource=} [properties] Properties to set
         */
        function CMsgViewSource(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgViewSource browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgViewSource
         * @instance
         */
        CMsgViewSource.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgViewSource instance using the specified properties.
         * @function create
         * @memberof CMsgViewSource
         * @static
         * @param {ICMsgViewSource=} [properties] Properties to set
         * @returns {CMsgViewSource} CMsgViewSource instance
         */
        CMsgViewSource.create = function create(properties) {
            return new CMsgViewSource(properties);
        };
    
        /**
         * Encodes the specified CMsgViewSource message. Does not implicitly {@link CMsgViewSource.verify|verify} messages.
         * @function encode
         * @memberof CMsgViewSource
         * @static
         * @param {ICMsgViewSource} message CMsgViewSource message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgViewSource.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgViewSource message, length delimited. Does not implicitly {@link CMsgViewSource.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgViewSource
         * @static
         * @param {ICMsgViewSource} message CMsgViewSource message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgViewSource.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgViewSource message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgViewSource
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgViewSource} CMsgViewSource
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgViewSource.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgViewSource();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgViewSource message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgViewSource
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgViewSource} CMsgViewSource
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgViewSource.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgViewSource message.
         * @function verify
         * @memberof CMsgViewSource
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgViewSource.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgViewSource message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgViewSource
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgViewSource} CMsgViewSource
         */
        CMsgViewSource.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgViewSource)
                return object;
            var message = new $root.CMsgViewSource();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgViewSource message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgViewSource
         * @static
         * @param {CMsgViewSource} message CMsgViewSource
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgViewSource.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgViewSource to JSON.
         * @function toJSON
         * @memberof CMsgViewSource
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgViewSource.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgViewSource;
    })();
    
    $root.CMsgBrowserReady = (function() {
    
        /**
         * Properties of a CMsgBrowserReady.
         * @exports ICMsgBrowserReady
         * @interface ICMsgBrowserReady
         * @property {number|null} [browser_handle] CMsgBrowserReady browser_handle
         * @property {string|null} [vr_overlay_key] CMsgBrowserReady vr_overlay_key
         * @property {number|Long|null} [hwnd_browser] CMsgBrowserReady hwnd_browser
         */
    
        /**
         * Constructs a new CMsgBrowserReady.
         * @exports CMsgBrowserReady
         * @classdesc Represents a CMsgBrowserReady.
         * @implements ICMsgBrowserReady
         * @constructor
         * @param {ICMsgBrowserReady=} [properties] Properties to set
         */
        function CMsgBrowserReady(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgBrowserReady browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgBrowserReady
         * @instance
         */
        CMsgBrowserReady.prototype.browser_handle = 0;
    
        /**
         * CMsgBrowserReady vr_overlay_key.
         * @member {string} vr_overlay_key
         * @memberof CMsgBrowserReady
         * @instance
         */
        CMsgBrowserReady.prototype.vr_overlay_key = "";
    
        /**
         * CMsgBrowserReady hwnd_browser.
         * @member {number|Long} hwnd_browser
         * @memberof CMsgBrowserReady
         * @instance
         */
        CMsgBrowserReady.prototype.hwnd_browser = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CMsgBrowserReady instance using the specified properties.
         * @function create
         * @memberof CMsgBrowserReady
         * @static
         * @param {ICMsgBrowserReady=} [properties] Properties to set
         * @returns {CMsgBrowserReady} CMsgBrowserReady instance
         */
        CMsgBrowserReady.create = function create(properties) {
            return new CMsgBrowserReady(properties);
        };
    
        /**
         * Encodes the specified CMsgBrowserReady message. Does not implicitly {@link CMsgBrowserReady.verify|verify} messages.
         * @function encode
         * @memberof CMsgBrowserReady
         * @static
         * @param {ICMsgBrowserReady} message CMsgBrowserReady message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgBrowserReady.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.vr_overlay_key != null && Object.hasOwnProperty.call(message, "vr_overlay_key"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.vr_overlay_key);
            if (message.hwnd_browser != null && Object.hasOwnProperty.call(message, "hwnd_browser"))
                writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.hwnd_browser);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgBrowserReady message, length delimited. Does not implicitly {@link CMsgBrowserReady.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgBrowserReady
         * @static
         * @param {ICMsgBrowserReady} message CMsgBrowserReady message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgBrowserReady.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgBrowserReady message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgBrowserReady
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgBrowserReady} CMsgBrowserReady
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgBrowserReady.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBrowserReady();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.vr_overlay_key = reader.string();
                    break;
                case 3:
                    message.hwnd_browser = reader.fixed64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgBrowserReady message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgBrowserReady
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgBrowserReady} CMsgBrowserReady
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgBrowserReady.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgBrowserReady message.
         * @function verify
         * @memberof CMsgBrowserReady
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgBrowserReady.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.vr_overlay_key != null && message.hasOwnProperty("vr_overlay_key"))
                if (!$util.isString(message.vr_overlay_key))
                    return "vr_overlay_key: string expected";
            if (message.hwnd_browser != null && message.hasOwnProperty("hwnd_browser"))
                if (!$util.isInteger(message.hwnd_browser) && !(message.hwnd_browser && $util.isInteger(message.hwnd_browser.low) && $util.isInteger(message.hwnd_browser.high)))
                    return "hwnd_browser: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgBrowserReady message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgBrowserReady
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgBrowserReady} CMsgBrowserReady
         */
        CMsgBrowserReady.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgBrowserReady)
                return object;
            var message = new $root.CMsgBrowserReady();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.vr_overlay_key != null)
                message.vr_overlay_key = String(object.vr_overlay_key);
            if (object.hwnd_browser != null)
                if ($util.Long)
                    (message.hwnd_browser = $util.Long.fromValue(object.hwnd_browser)).unsigned = false;
                else if (typeof object.hwnd_browser === "string")
                    message.hwnd_browser = parseInt(object.hwnd_browser, 10);
                else if (typeof object.hwnd_browser === "number")
                    message.hwnd_browser = object.hwnd_browser;
                else if (typeof object.hwnd_browser === "object")
                    message.hwnd_browser = new $util.LongBits(object.hwnd_browser.low >>> 0, object.hwnd_browser.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgBrowserReady message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgBrowserReady
         * @static
         * @param {CMsgBrowserReady} message CMsgBrowserReady
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgBrowserReady.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.vr_overlay_key = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.hwnd_browser = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.hwnd_browser = options.longs === String ? "0" : 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.vr_overlay_key != null && message.hasOwnProperty("vr_overlay_key"))
                object.vr_overlay_key = message.vr_overlay_key;
            if (message.hwnd_browser != null && message.hasOwnProperty("hwnd_browser"))
                if (typeof message.hwnd_browser === "number")
                    object.hwnd_browser = options.longs === String ? String(message.hwnd_browser) : message.hwnd_browser;
                else
                    object.hwnd_browser = options.longs === String ? $util.Long.prototype.toString.call(message.hwnd_browser) : options.longs === Number ? new $util.LongBits(message.hwnd_browser.low >>> 0, message.hwnd_browser.high >>> 0).toNumber() : message.hwnd_browser;
            return object;
        };
    
        /**
         * Converts this CMsgBrowserReady to JSON.
         * @function toJSON
         * @memberof CMsgBrowserReady
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgBrowserReady.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgBrowserReady;
    })();
    
    $root.CMsgURLChanged = (function() {
    
        /**
         * Properties of a CMsgURLChanged.
         * @exports ICMsgURLChanged
         * @interface ICMsgURLChanged
         * @property {number|null} [browser_handle] CMsgURLChanged browser_handle
         * @property {string|null} [url] CMsgURLChanged url
         * @property {string|null} [postData] CMsgURLChanged postData
         * @property {boolean|null} [bIsRedirect] CMsgURLChanged bIsRedirect
         * @property {string|null} [pagetitle] CMsgURLChanged pagetitle
         * @property {boolean|null} [bNewNavigation] CMsgURLChanged bNewNavigation
         */
    
        /**
         * Constructs a new CMsgURLChanged.
         * @exports CMsgURLChanged
         * @classdesc Represents a CMsgURLChanged.
         * @implements ICMsgURLChanged
         * @constructor
         * @param {ICMsgURLChanged=} [properties] Properties to set
         */
        function CMsgURLChanged(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgURLChanged browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgURLChanged
         * @instance
         */
        CMsgURLChanged.prototype.browser_handle = 0;
    
        /**
         * CMsgURLChanged url.
         * @member {string} url
         * @memberof CMsgURLChanged
         * @instance
         */
        CMsgURLChanged.prototype.url = "";
    
        /**
         * CMsgURLChanged postData.
         * @member {string} postData
         * @memberof CMsgURLChanged
         * @instance
         */
        CMsgURLChanged.prototype.postData = "";
    
        /**
         * CMsgURLChanged bIsRedirect.
         * @member {boolean} bIsRedirect
         * @memberof CMsgURLChanged
         * @instance
         */
        CMsgURLChanged.prototype.bIsRedirect = false;
    
        /**
         * CMsgURLChanged pagetitle.
         * @member {string} pagetitle
         * @memberof CMsgURLChanged
         * @instance
         */
        CMsgURLChanged.prototype.pagetitle = "";
    
        /**
         * CMsgURLChanged bNewNavigation.
         * @member {boolean} bNewNavigation
         * @memberof CMsgURLChanged
         * @instance
         */
        CMsgURLChanged.prototype.bNewNavigation = false;
    
        /**
         * Creates a new CMsgURLChanged instance using the specified properties.
         * @function create
         * @memberof CMsgURLChanged
         * @static
         * @param {ICMsgURLChanged=} [properties] Properties to set
         * @returns {CMsgURLChanged} CMsgURLChanged instance
         */
        CMsgURLChanged.create = function create(properties) {
            return new CMsgURLChanged(properties);
        };
    
        /**
         * Encodes the specified CMsgURLChanged message. Does not implicitly {@link CMsgURLChanged.verify|verify} messages.
         * @function encode
         * @memberof CMsgURLChanged
         * @static
         * @param {ICMsgURLChanged} message CMsgURLChanged message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgURLChanged.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);
            if (message.postData != null && Object.hasOwnProperty.call(message, "postData"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.postData);
            if (message.bIsRedirect != null && Object.hasOwnProperty.call(message, "bIsRedirect"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.bIsRedirect);
            if (message.pagetitle != null && Object.hasOwnProperty.call(message, "pagetitle"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.pagetitle);
            if (message.bNewNavigation != null && Object.hasOwnProperty.call(message, "bNewNavigation"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.bNewNavigation);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgURLChanged message, length delimited. Does not implicitly {@link CMsgURLChanged.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgURLChanged
         * @static
         * @param {ICMsgURLChanged} message CMsgURLChanged message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgURLChanged.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgURLChanged message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgURLChanged
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgURLChanged} CMsgURLChanged
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgURLChanged.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgURLChanged();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.url = reader.string();
                    break;
                case 3:
                    message.postData = reader.string();
                    break;
                case 4:
                    message.bIsRedirect = reader.bool();
                    break;
                case 5:
                    message.pagetitle = reader.string();
                    break;
                case 6:
                    message.bNewNavigation = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgURLChanged message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgURLChanged
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgURLChanged} CMsgURLChanged
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgURLChanged.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgURLChanged message.
         * @function verify
         * @memberof CMsgURLChanged
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgURLChanged.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.url != null && message.hasOwnProperty("url"))
                if (!$util.isString(message.url))
                    return "url: string expected";
            if (message.postData != null && message.hasOwnProperty("postData"))
                if (!$util.isString(message.postData))
                    return "postData: string expected";
            if (message.bIsRedirect != null && message.hasOwnProperty("bIsRedirect"))
                if (typeof message.bIsRedirect !== "boolean")
                    return "bIsRedirect: boolean expected";
            if (message.pagetitle != null && message.hasOwnProperty("pagetitle"))
                if (!$util.isString(message.pagetitle))
                    return "pagetitle: string expected";
            if (message.bNewNavigation != null && message.hasOwnProperty("bNewNavigation"))
                if (typeof message.bNewNavigation !== "boolean")
                    return "bNewNavigation: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgURLChanged message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgURLChanged
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgURLChanged} CMsgURLChanged
         */
        CMsgURLChanged.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgURLChanged)
                return object;
            var message = new $root.CMsgURLChanged();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.url != null)
                message.url = String(object.url);
            if (object.postData != null)
                message.postData = String(object.postData);
            if (object.bIsRedirect != null)
                message.bIsRedirect = Boolean(object.bIsRedirect);
            if (object.pagetitle != null)
                message.pagetitle = String(object.pagetitle);
            if (object.bNewNavigation != null)
                message.bNewNavigation = Boolean(object.bNewNavigation);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgURLChanged message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgURLChanged
         * @static
         * @param {CMsgURLChanged} message CMsgURLChanged
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgURLChanged.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.url = "";
                object.postData = "";
                object.bIsRedirect = false;
                object.pagetitle = "";
                object.bNewNavigation = false;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.url != null && message.hasOwnProperty("url"))
                object.url = message.url;
            if (message.postData != null && message.hasOwnProperty("postData"))
                object.postData = message.postData;
            if (message.bIsRedirect != null && message.hasOwnProperty("bIsRedirect"))
                object.bIsRedirect = message.bIsRedirect;
            if (message.pagetitle != null && message.hasOwnProperty("pagetitle"))
                object.pagetitle = message.pagetitle;
            if (message.bNewNavigation != null && message.hasOwnProperty("bNewNavigation"))
                object.bNewNavigation = message.bNewNavigation;
            return object;
        };
    
        /**
         * Converts this CMsgURLChanged to JSON.
         * @function toJSON
         * @memberof CMsgURLChanged
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgURLChanged.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgURLChanged;
    })();
    
    $root.CHTMLHeader = (function() {
    
        /**
         * Properties of a CHTMLHeader.
         * @exports ICHTMLHeader
         * @interface ICHTMLHeader
         * @property {string|null} [key] CHTMLHeader key
         * @property {string|null} [value] CHTMLHeader value
         */
    
        /**
         * Constructs a new CHTMLHeader.
         * @exports CHTMLHeader
         * @classdesc Represents a CHTMLHeader.
         * @implements ICHTMLHeader
         * @constructor
         * @param {ICHTMLHeader=} [properties] Properties to set
         */
        function CHTMLHeader(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CHTMLHeader key.
         * @member {string} key
         * @memberof CHTMLHeader
         * @instance
         */
        CHTMLHeader.prototype.key = "";
    
        /**
         * CHTMLHeader value.
         * @member {string} value
         * @memberof CHTMLHeader
         * @instance
         */
        CHTMLHeader.prototype.value = "";
    
        /**
         * Creates a new CHTMLHeader instance using the specified properties.
         * @function create
         * @memberof CHTMLHeader
         * @static
         * @param {ICHTMLHeader=} [properties] Properties to set
         * @returns {CHTMLHeader} CHTMLHeader instance
         */
        CHTMLHeader.create = function create(properties) {
            return new CHTMLHeader(properties);
        };
    
        /**
         * Encodes the specified CHTMLHeader message. Does not implicitly {@link CHTMLHeader.verify|verify} messages.
         * @function encode
         * @memberof CHTMLHeader
         * @static
         * @param {ICHTMLHeader} message CHTMLHeader message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CHTMLHeader.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
            return writer;
        };
    
        /**
         * Encodes the specified CHTMLHeader message, length delimited. Does not implicitly {@link CHTMLHeader.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CHTMLHeader
         * @static
         * @param {ICHTMLHeader} message CHTMLHeader message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CHTMLHeader.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CHTMLHeader message from the specified reader or buffer.
         * @function decode
         * @memberof CHTMLHeader
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CHTMLHeader} CHTMLHeader
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CHTMLHeader.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CHTMLHeader();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CHTMLHeader message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CHTMLHeader
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CHTMLHeader} CHTMLHeader
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CHTMLHeader.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CHTMLHeader message.
         * @function verify
         * @memberof CHTMLHeader
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CHTMLHeader.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.key != null && message.hasOwnProperty("key"))
                if (!$util.isString(message.key))
                    return "key: string expected";
            if (message.value != null && message.hasOwnProperty("value"))
                if (!$util.isString(message.value))
                    return "value: string expected";
            return null;
        };
    
        /**
         * Creates a CHTMLHeader message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CHTMLHeader
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CHTMLHeader} CHTMLHeader
         */
        CHTMLHeader.fromObject = function fromObject(object) {
            if (object instanceof $root.CHTMLHeader)
                return object;
            var message = new $root.CHTMLHeader();
            if (object.key != null)
                message.key = String(object.key);
            if (object.value != null)
                message.value = String(object.value);
            return message;
        };
    
        /**
         * Creates a plain object from a CHTMLHeader message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CHTMLHeader
         * @static
         * @param {CHTMLHeader} message CHTMLHeader
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CHTMLHeader.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.key = "";
                object.value = "";
            }
            if (message.key != null && message.hasOwnProperty("key"))
                object.key = message.key;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = message.value;
            return object;
        };
    
        /**
         * Converts this CHTMLHeader to JSON.
         * @function toJSON
         * @memberof CHTMLHeader
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CHTMLHeader.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CHTMLHeader;
    })();
    
    $root.CHTMLPageSecurityInfo = (function() {
    
        /**
         * Properties of a CHTMLPageSecurityInfo.
         * @exports ICHTMLPageSecurityInfo
         * @interface ICHTMLPageSecurityInfo
         * @property {boolean|null} [bIsSecure] CHTMLPageSecurityInfo bIsSecure
         * @property {boolean|null} [bHasCertError] CHTMLPageSecurityInfo bHasCertError
         * @property {string|null} [issuerName] CHTMLPageSecurityInfo issuerName
         * @property {string|null} [certName] CHTMLPageSecurityInfo certName
         * @property {number|null} [certExpiry] CHTMLPageSecurityInfo certExpiry
         * @property {number|null} [nCertBits] CHTMLPageSecurityInfo nCertBits
         * @property {boolean|null} [bIsEVCert] CHTMLPageSecurityInfo bIsEVCert
         */
    
        /**
         * Constructs a new CHTMLPageSecurityInfo.
         * @exports CHTMLPageSecurityInfo
         * @classdesc Represents a CHTMLPageSecurityInfo.
         * @implements ICHTMLPageSecurityInfo
         * @constructor
         * @param {ICHTMLPageSecurityInfo=} [properties] Properties to set
         */
        function CHTMLPageSecurityInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CHTMLPageSecurityInfo bIsSecure.
         * @member {boolean} bIsSecure
         * @memberof CHTMLPageSecurityInfo
         * @instance
         */
        CHTMLPageSecurityInfo.prototype.bIsSecure = false;
    
        /**
         * CHTMLPageSecurityInfo bHasCertError.
         * @member {boolean} bHasCertError
         * @memberof CHTMLPageSecurityInfo
         * @instance
         */
        CHTMLPageSecurityInfo.prototype.bHasCertError = false;
    
        /**
         * CHTMLPageSecurityInfo issuerName.
         * @member {string} issuerName
         * @memberof CHTMLPageSecurityInfo
         * @instance
         */
        CHTMLPageSecurityInfo.prototype.issuerName = "";
    
        /**
         * CHTMLPageSecurityInfo certName.
         * @member {string} certName
         * @memberof CHTMLPageSecurityInfo
         * @instance
         */
        CHTMLPageSecurityInfo.prototype.certName = "";
    
        /**
         * CHTMLPageSecurityInfo certExpiry.
         * @member {number} certExpiry
         * @memberof CHTMLPageSecurityInfo
         * @instance
         */
        CHTMLPageSecurityInfo.prototype.certExpiry = 0;
    
        /**
         * CHTMLPageSecurityInfo nCertBits.
         * @member {number} nCertBits
         * @memberof CHTMLPageSecurityInfo
         * @instance
         */
        CHTMLPageSecurityInfo.prototype.nCertBits = 0;
    
        /**
         * CHTMLPageSecurityInfo bIsEVCert.
         * @member {boolean} bIsEVCert
         * @memberof CHTMLPageSecurityInfo
         * @instance
         */
        CHTMLPageSecurityInfo.prototype.bIsEVCert = false;
    
        /**
         * Creates a new CHTMLPageSecurityInfo instance using the specified properties.
         * @function create
         * @memberof CHTMLPageSecurityInfo
         * @static
         * @param {ICHTMLPageSecurityInfo=} [properties] Properties to set
         * @returns {CHTMLPageSecurityInfo} CHTMLPageSecurityInfo instance
         */
        CHTMLPageSecurityInfo.create = function create(properties) {
            return new CHTMLPageSecurityInfo(properties);
        };
    
        /**
         * Encodes the specified CHTMLPageSecurityInfo message. Does not implicitly {@link CHTMLPageSecurityInfo.verify|verify} messages.
         * @function encode
         * @memberof CHTMLPageSecurityInfo
         * @static
         * @param {ICHTMLPageSecurityInfo} message CHTMLPageSecurityInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CHTMLPageSecurityInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.bIsSecure != null && Object.hasOwnProperty.call(message, "bIsSecure"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.bIsSecure);
            if (message.bHasCertError != null && Object.hasOwnProperty.call(message, "bHasCertError"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.bHasCertError);
            if (message.issuerName != null && Object.hasOwnProperty.call(message, "issuerName"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.issuerName);
            if (message.certName != null && Object.hasOwnProperty.call(message, "certName"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.certName);
            if (message.certExpiry != null && Object.hasOwnProperty.call(message, "certExpiry"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.certExpiry);
            if (message.nCertBits != null && Object.hasOwnProperty.call(message, "nCertBits"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.nCertBits);
            if (message.bIsEVCert != null && Object.hasOwnProperty.call(message, "bIsEVCert"))
                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.bIsEVCert);
            return writer;
        };
    
        /**
         * Encodes the specified CHTMLPageSecurityInfo message, length delimited. Does not implicitly {@link CHTMLPageSecurityInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CHTMLPageSecurityInfo
         * @static
         * @param {ICHTMLPageSecurityInfo} message CHTMLPageSecurityInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CHTMLPageSecurityInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CHTMLPageSecurityInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CHTMLPageSecurityInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CHTMLPageSecurityInfo} CHTMLPageSecurityInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CHTMLPageSecurityInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CHTMLPageSecurityInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.bIsSecure = reader.bool();
                    break;
                case 2:
                    message.bHasCertError = reader.bool();
                    break;
                case 3:
                    message.issuerName = reader.string();
                    break;
                case 4:
                    message.certName = reader.string();
                    break;
                case 5:
                    message.certExpiry = reader.int32();
                    break;
                case 6:
                    message.nCertBits = reader.int32();
                    break;
                case 7:
                    message.bIsEVCert = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CHTMLPageSecurityInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CHTMLPageSecurityInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CHTMLPageSecurityInfo} CHTMLPageSecurityInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CHTMLPageSecurityInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CHTMLPageSecurityInfo message.
         * @function verify
         * @memberof CHTMLPageSecurityInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CHTMLPageSecurityInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.bIsSecure != null && message.hasOwnProperty("bIsSecure"))
                if (typeof message.bIsSecure !== "boolean")
                    return "bIsSecure: boolean expected";
            if (message.bHasCertError != null && message.hasOwnProperty("bHasCertError"))
                if (typeof message.bHasCertError !== "boolean")
                    return "bHasCertError: boolean expected";
            if (message.issuerName != null && message.hasOwnProperty("issuerName"))
                if (!$util.isString(message.issuerName))
                    return "issuerName: string expected";
            if (message.certName != null && message.hasOwnProperty("certName"))
                if (!$util.isString(message.certName))
                    return "certName: string expected";
            if (message.certExpiry != null && message.hasOwnProperty("certExpiry"))
                if (!$util.isInteger(message.certExpiry))
                    return "certExpiry: integer expected";
            if (message.nCertBits != null && message.hasOwnProperty("nCertBits"))
                if (!$util.isInteger(message.nCertBits))
                    return "nCertBits: integer expected";
            if (message.bIsEVCert != null && message.hasOwnProperty("bIsEVCert"))
                if (typeof message.bIsEVCert !== "boolean")
                    return "bIsEVCert: boolean expected";
            return null;
        };
    
        /**
         * Creates a CHTMLPageSecurityInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CHTMLPageSecurityInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CHTMLPageSecurityInfo} CHTMLPageSecurityInfo
         */
        CHTMLPageSecurityInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CHTMLPageSecurityInfo)
                return object;
            var message = new $root.CHTMLPageSecurityInfo();
            if (object.bIsSecure != null)
                message.bIsSecure = Boolean(object.bIsSecure);
            if (object.bHasCertError != null)
                message.bHasCertError = Boolean(object.bHasCertError);
            if (object.issuerName != null)
                message.issuerName = String(object.issuerName);
            if (object.certName != null)
                message.certName = String(object.certName);
            if (object.certExpiry != null)
                message.certExpiry = object.certExpiry | 0;
            if (object.nCertBits != null)
                message.nCertBits = object.nCertBits | 0;
            if (object.bIsEVCert != null)
                message.bIsEVCert = Boolean(object.bIsEVCert);
            return message;
        };
    
        /**
         * Creates a plain object from a CHTMLPageSecurityInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CHTMLPageSecurityInfo
         * @static
         * @param {CHTMLPageSecurityInfo} message CHTMLPageSecurityInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CHTMLPageSecurityInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.bIsSecure = false;
                object.bHasCertError = false;
                object.issuerName = "";
                object.certName = "";
                object.certExpiry = 0;
                object.nCertBits = 0;
                object.bIsEVCert = false;
            }
            if (message.bIsSecure != null && message.hasOwnProperty("bIsSecure"))
                object.bIsSecure = message.bIsSecure;
            if (message.bHasCertError != null && message.hasOwnProperty("bHasCertError"))
                object.bHasCertError = message.bHasCertError;
            if (message.issuerName != null && message.hasOwnProperty("issuerName"))
                object.issuerName = message.issuerName;
            if (message.certName != null && message.hasOwnProperty("certName"))
                object.certName = message.certName;
            if (message.certExpiry != null && message.hasOwnProperty("certExpiry"))
                object.certExpiry = message.certExpiry;
            if (message.nCertBits != null && message.hasOwnProperty("nCertBits"))
                object.nCertBits = message.nCertBits;
            if (message.bIsEVCert != null && message.hasOwnProperty("bIsEVCert"))
                object.bIsEVCert = message.bIsEVCert;
            return object;
        };
    
        /**
         * Converts this CHTMLPageSecurityInfo to JSON.
         * @function toJSON
         * @memberof CHTMLPageSecurityInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CHTMLPageSecurityInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CHTMLPageSecurityInfo;
    })();
    
    $root.CMsgFinishedRequest = (function() {
    
        /**
         * Properties of a CMsgFinishedRequest.
         * @exports ICMsgFinishedRequest
         * @interface ICMsgFinishedRequest
         * @property {number|null} [browser_handle] CMsgFinishedRequest browser_handle
         * @property {string|null} [url] CMsgFinishedRequest url
         * @property {string|null} [pageTitle] CMsgFinishedRequest pageTitle
         */
    
        /**
         * Constructs a new CMsgFinishedRequest.
         * @exports CMsgFinishedRequest
         * @classdesc Represents a CMsgFinishedRequest.
         * @implements ICMsgFinishedRequest
         * @constructor
         * @param {ICMsgFinishedRequest=} [properties] Properties to set
         */
        function CMsgFinishedRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgFinishedRequest browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgFinishedRequest
         * @instance
         */
        CMsgFinishedRequest.prototype.browser_handle = 0;
    
        /**
         * CMsgFinishedRequest url.
         * @member {string} url
         * @memberof CMsgFinishedRequest
         * @instance
         */
        CMsgFinishedRequest.prototype.url = "";
    
        /**
         * CMsgFinishedRequest pageTitle.
         * @member {string} pageTitle
         * @memberof CMsgFinishedRequest
         * @instance
         */
        CMsgFinishedRequest.prototype.pageTitle = "";
    
        /**
         * Creates a new CMsgFinishedRequest instance using the specified properties.
         * @function create
         * @memberof CMsgFinishedRequest
         * @static
         * @param {ICMsgFinishedRequest=} [properties] Properties to set
         * @returns {CMsgFinishedRequest} CMsgFinishedRequest instance
         */
        CMsgFinishedRequest.create = function create(properties) {
            return new CMsgFinishedRequest(properties);
        };
    
        /**
         * Encodes the specified CMsgFinishedRequest message. Does not implicitly {@link CMsgFinishedRequest.verify|verify} messages.
         * @function encode
         * @memberof CMsgFinishedRequest
         * @static
         * @param {ICMsgFinishedRequest} message CMsgFinishedRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgFinishedRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);
            if (message.pageTitle != null && Object.hasOwnProperty.call(message, "pageTitle"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.pageTitle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgFinishedRequest message, length delimited. Does not implicitly {@link CMsgFinishedRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgFinishedRequest
         * @static
         * @param {ICMsgFinishedRequest} message CMsgFinishedRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgFinishedRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgFinishedRequest message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgFinishedRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgFinishedRequest} CMsgFinishedRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgFinishedRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgFinishedRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.url = reader.string();
                    break;
                case 3:
                    message.pageTitle = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgFinishedRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgFinishedRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgFinishedRequest} CMsgFinishedRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgFinishedRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgFinishedRequest message.
         * @function verify
         * @memberof CMsgFinishedRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgFinishedRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.url != null && message.hasOwnProperty("url"))
                if (!$util.isString(message.url))
                    return "url: string expected";
            if (message.pageTitle != null && message.hasOwnProperty("pageTitle"))
                if (!$util.isString(message.pageTitle))
                    return "pageTitle: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgFinishedRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgFinishedRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgFinishedRequest} CMsgFinishedRequest
         */
        CMsgFinishedRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgFinishedRequest)
                return object;
            var message = new $root.CMsgFinishedRequest();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.url != null)
                message.url = String(object.url);
            if (object.pageTitle != null)
                message.pageTitle = String(object.pageTitle);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgFinishedRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgFinishedRequest
         * @static
         * @param {CMsgFinishedRequest} message CMsgFinishedRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgFinishedRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.url = "";
                object.pageTitle = "";
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.url != null && message.hasOwnProperty("url"))
                object.url = message.url;
            if (message.pageTitle != null && message.hasOwnProperty("pageTitle"))
                object.pageTitle = message.pageTitle;
            return object;
        };
    
        /**
         * Converts this CMsgFinishedRequest to JSON.
         * @function toJSON
         * @memberof CMsgFinishedRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgFinishedRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgFinishedRequest;
    })();
    
    $root.CMsgLoadedRequest = (function() {
    
        /**
         * Properties of a CMsgLoadedRequest.
         * @exports ICMsgLoadedRequest
         * @interface ICMsgLoadedRequest
         * @property {number|null} [browser_handle] CMsgLoadedRequest browser_handle
         * @property {string|null} [url] CMsgLoadedRequest url
         * @property {string|null} [pageTitle] CMsgLoadedRequest pageTitle
         * @property {Array.<ICHTMLHeader>|null} [headers] CMsgLoadedRequest headers
         */
    
        /**
         * Constructs a new CMsgLoadedRequest.
         * @exports CMsgLoadedRequest
         * @classdesc Represents a CMsgLoadedRequest.
         * @implements ICMsgLoadedRequest
         * @constructor
         * @param {ICMsgLoadedRequest=} [properties] Properties to set
         */
        function CMsgLoadedRequest(properties) {
            this.headers = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgLoadedRequest browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgLoadedRequest
         * @instance
         */
        CMsgLoadedRequest.prototype.browser_handle = 0;
    
        /**
         * CMsgLoadedRequest url.
         * @member {string} url
         * @memberof CMsgLoadedRequest
         * @instance
         */
        CMsgLoadedRequest.prototype.url = "";
    
        /**
         * CMsgLoadedRequest pageTitle.
         * @member {string} pageTitle
         * @memberof CMsgLoadedRequest
         * @instance
         */
        CMsgLoadedRequest.prototype.pageTitle = "";
    
        /**
         * CMsgLoadedRequest headers.
         * @member {Array.<ICHTMLHeader>} headers
         * @memberof CMsgLoadedRequest
         * @instance
         */
        CMsgLoadedRequest.prototype.headers = $util.emptyArray;
    
        /**
         * Creates a new CMsgLoadedRequest instance using the specified properties.
         * @function create
         * @memberof CMsgLoadedRequest
         * @static
         * @param {ICMsgLoadedRequest=} [properties] Properties to set
         * @returns {CMsgLoadedRequest} CMsgLoadedRequest instance
         */
        CMsgLoadedRequest.create = function create(properties) {
            return new CMsgLoadedRequest(properties);
        };
    
        /**
         * Encodes the specified CMsgLoadedRequest message. Does not implicitly {@link CMsgLoadedRequest.verify|verify} messages.
         * @function encode
         * @memberof CMsgLoadedRequest
         * @static
         * @param {ICMsgLoadedRequest} message CMsgLoadedRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgLoadedRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);
            if (message.pageTitle != null && Object.hasOwnProperty.call(message, "pageTitle"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.pageTitle);
            if (message.headers != null && message.headers.length)
                for (var i = 0; i < message.headers.length; ++i)
                    $root.CHTMLHeader.encode(message.headers[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgLoadedRequest message, length delimited. Does not implicitly {@link CMsgLoadedRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgLoadedRequest
         * @static
         * @param {ICMsgLoadedRequest} message CMsgLoadedRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgLoadedRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgLoadedRequest message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgLoadedRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgLoadedRequest} CMsgLoadedRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgLoadedRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgLoadedRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.url = reader.string();
                    break;
                case 3:
                    message.pageTitle = reader.string();
                    break;
                case 5:
                    if (!(message.headers && message.headers.length))
                        message.headers = [];
                    message.headers.push($root.CHTMLHeader.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgLoadedRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgLoadedRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgLoadedRequest} CMsgLoadedRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgLoadedRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgLoadedRequest message.
         * @function verify
         * @memberof CMsgLoadedRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgLoadedRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.url != null && message.hasOwnProperty("url"))
                if (!$util.isString(message.url))
                    return "url: string expected";
            if (message.pageTitle != null && message.hasOwnProperty("pageTitle"))
                if (!$util.isString(message.pageTitle))
                    return "pageTitle: string expected";
            if (message.headers != null && message.hasOwnProperty("headers")) {
                if (!Array.isArray(message.headers))
                    return "headers: array expected";
                for (var i = 0; i < message.headers.length; ++i) {
                    var error = $root.CHTMLHeader.verify(message.headers[i]);
                    if (error)
                        return "headers." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgLoadedRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgLoadedRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgLoadedRequest} CMsgLoadedRequest
         */
        CMsgLoadedRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgLoadedRequest)
                return object;
            var message = new $root.CMsgLoadedRequest();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.url != null)
                message.url = String(object.url);
            if (object.pageTitle != null)
                message.pageTitle = String(object.pageTitle);
            if (object.headers) {
                if (!Array.isArray(object.headers))
                    throw TypeError(".CMsgLoadedRequest.headers: array expected");
                message.headers = [];
                for (var i = 0; i < object.headers.length; ++i) {
                    if (typeof object.headers[i] !== "object")
                        throw TypeError(".CMsgLoadedRequest.headers: object expected");
                    message.headers[i] = $root.CHTMLHeader.fromObject(object.headers[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgLoadedRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgLoadedRequest
         * @static
         * @param {CMsgLoadedRequest} message CMsgLoadedRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgLoadedRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.headers = [];
            if (options.defaults) {
                object.browser_handle = 0;
                object.url = "";
                object.pageTitle = "";
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.url != null && message.hasOwnProperty("url"))
                object.url = message.url;
            if (message.pageTitle != null && message.hasOwnProperty("pageTitle"))
                object.pageTitle = message.pageTitle;
            if (message.headers && message.headers.length) {
                object.headers = [];
                for (var j = 0; j < message.headers.length; ++j)
                    object.headers[j] = $root.CHTMLHeader.toObject(message.headers[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgLoadedRequest to JSON.
         * @function toJSON
         * @memberof CMsgLoadedRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgLoadedRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgLoadedRequest;
    })();
    
    $root.CMsgPageSecurity = (function() {
    
        /**
         * Properties of a CMsgPageSecurity.
         * @exports ICMsgPageSecurity
         * @interface ICMsgPageSecurity
         * @property {number|null} [browser_handle] CMsgPageSecurity browser_handle
         * @property {string|null} [url] CMsgPageSecurity url
         * @property {ICHTMLPageSecurityInfo|null} [security_info] CMsgPageSecurity security_info
         */
    
        /**
         * Constructs a new CMsgPageSecurity.
         * @exports CMsgPageSecurity
         * @classdesc Represents a CMsgPageSecurity.
         * @implements ICMsgPageSecurity
         * @constructor
         * @param {ICMsgPageSecurity=} [properties] Properties to set
         */
        function CMsgPageSecurity(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgPageSecurity browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgPageSecurity
         * @instance
         */
        CMsgPageSecurity.prototype.browser_handle = 0;
    
        /**
         * CMsgPageSecurity url.
         * @member {string} url
         * @memberof CMsgPageSecurity
         * @instance
         */
        CMsgPageSecurity.prototype.url = "";
    
        /**
         * CMsgPageSecurity security_info.
         * @member {ICHTMLPageSecurityInfo|null|undefined} security_info
         * @memberof CMsgPageSecurity
         * @instance
         */
        CMsgPageSecurity.prototype.security_info = null;
    
        /**
         * Creates a new CMsgPageSecurity instance using the specified properties.
         * @function create
         * @memberof CMsgPageSecurity
         * @static
         * @param {ICMsgPageSecurity=} [properties] Properties to set
         * @returns {CMsgPageSecurity} CMsgPageSecurity instance
         */
        CMsgPageSecurity.create = function create(properties) {
            return new CMsgPageSecurity(properties);
        };
    
        /**
         * Encodes the specified CMsgPageSecurity message. Does not implicitly {@link CMsgPageSecurity.verify|verify} messages.
         * @function encode
         * @memberof CMsgPageSecurity
         * @static
         * @param {ICMsgPageSecurity} message CMsgPageSecurity message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgPageSecurity.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);
            if (message.security_info != null && Object.hasOwnProperty.call(message, "security_info"))
                $root.CHTMLPageSecurityInfo.encode(message.security_info, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgPageSecurity message, length delimited. Does not implicitly {@link CMsgPageSecurity.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgPageSecurity
         * @static
         * @param {ICMsgPageSecurity} message CMsgPageSecurity message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgPageSecurity.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgPageSecurity message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgPageSecurity
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgPageSecurity} CMsgPageSecurity
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgPageSecurity.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgPageSecurity();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.url = reader.string();
                    break;
                case 3:
                    message.security_info = $root.CHTMLPageSecurityInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgPageSecurity message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgPageSecurity
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgPageSecurity} CMsgPageSecurity
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgPageSecurity.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgPageSecurity message.
         * @function verify
         * @memberof CMsgPageSecurity
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgPageSecurity.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.url != null && message.hasOwnProperty("url"))
                if (!$util.isString(message.url))
                    return "url: string expected";
            if (message.security_info != null && message.hasOwnProperty("security_info")) {
                var error = $root.CHTMLPageSecurityInfo.verify(message.security_info);
                if (error)
                    return "security_info." + error;
            }
            return null;
        };
    
        /**
         * Creates a CMsgPageSecurity message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgPageSecurity
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgPageSecurity} CMsgPageSecurity
         */
        CMsgPageSecurity.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgPageSecurity)
                return object;
            var message = new $root.CMsgPageSecurity();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.url != null)
                message.url = String(object.url);
            if (object.security_info != null) {
                if (typeof object.security_info !== "object")
                    throw TypeError(".CMsgPageSecurity.security_info: object expected");
                message.security_info = $root.CHTMLPageSecurityInfo.fromObject(object.security_info);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgPageSecurity message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgPageSecurity
         * @static
         * @param {CMsgPageSecurity} message CMsgPageSecurity
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgPageSecurity.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.url = "";
                object.security_info = null;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.url != null && message.hasOwnProperty("url"))
                object.url = message.url;
            if (message.security_info != null && message.hasOwnProperty("security_info"))
                object.security_info = $root.CHTMLPageSecurityInfo.toObject(message.security_info, options);
            return object;
        };
    
        /**
         * Converts this CMsgPageSecurity to JSON.
         * @function toJSON
         * @memberof CMsgPageSecurity
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgPageSecurity.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgPageSecurity;
    })();
    
    $root.CMsgStartRequest = (function() {
    
        /**
         * Properties of a CMsgStartRequest.
         * @exports ICMsgStartRequest
         * @interface ICMsgStartRequest
         * @property {number|null} [browser_handle] CMsgStartRequest browser_handle
         * @property {string|null} [url] CMsgStartRequest url
         * @property {string|null} [target] CMsgStartRequest target
         * @property {string|null} [postData] CMsgStartRequest postData
         * @property {boolean|null} [bIsRedirect] CMsgStartRequest bIsRedirect
         */
    
        /**
         * Constructs a new CMsgStartRequest.
         * @exports CMsgStartRequest
         * @classdesc Represents a CMsgStartRequest.
         * @implements ICMsgStartRequest
         * @constructor
         * @param {ICMsgStartRequest=} [properties] Properties to set
         */
        function CMsgStartRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgStartRequest browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgStartRequest
         * @instance
         */
        CMsgStartRequest.prototype.browser_handle = 0;
    
        /**
         * CMsgStartRequest url.
         * @member {string} url
         * @memberof CMsgStartRequest
         * @instance
         */
        CMsgStartRequest.prototype.url = "";
    
        /**
         * CMsgStartRequest target.
         * @member {string} target
         * @memberof CMsgStartRequest
         * @instance
         */
        CMsgStartRequest.prototype.target = "";
    
        /**
         * CMsgStartRequest postData.
         * @member {string} postData
         * @memberof CMsgStartRequest
         * @instance
         */
        CMsgStartRequest.prototype.postData = "";
    
        /**
         * CMsgStartRequest bIsRedirect.
         * @member {boolean} bIsRedirect
         * @memberof CMsgStartRequest
         * @instance
         */
        CMsgStartRequest.prototype.bIsRedirect = false;
    
        /**
         * Creates a new CMsgStartRequest instance using the specified properties.
         * @function create
         * @memberof CMsgStartRequest
         * @static
         * @param {ICMsgStartRequest=} [properties] Properties to set
         * @returns {CMsgStartRequest} CMsgStartRequest instance
         */
        CMsgStartRequest.create = function create(properties) {
            return new CMsgStartRequest(properties);
        };
    
        /**
         * Encodes the specified CMsgStartRequest message. Does not implicitly {@link CMsgStartRequest.verify|verify} messages.
         * @function encode
         * @memberof CMsgStartRequest
         * @static
         * @param {ICMsgStartRequest} message CMsgStartRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgStartRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);
            if (message.target != null && Object.hasOwnProperty.call(message, "target"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.target);
            if (message.postData != null && Object.hasOwnProperty.call(message, "postData"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.postData);
            if (message.bIsRedirect != null && Object.hasOwnProperty.call(message, "bIsRedirect"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.bIsRedirect);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgStartRequest message, length delimited. Does not implicitly {@link CMsgStartRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgStartRequest
         * @static
         * @param {ICMsgStartRequest} message CMsgStartRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgStartRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgStartRequest message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgStartRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgStartRequest} CMsgStartRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgStartRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgStartRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.url = reader.string();
                    break;
                case 3:
                    message.target = reader.string();
                    break;
                case 4:
                    message.postData = reader.string();
                    break;
                case 5:
                    message.bIsRedirect = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgStartRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgStartRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgStartRequest} CMsgStartRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgStartRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgStartRequest message.
         * @function verify
         * @memberof CMsgStartRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgStartRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.url != null && message.hasOwnProperty("url"))
                if (!$util.isString(message.url))
                    return "url: string expected";
            if (message.target != null && message.hasOwnProperty("target"))
                if (!$util.isString(message.target))
                    return "target: string expected";
            if (message.postData != null && message.hasOwnProperty("postData"))
                if (!$util.isString(message.postData))
                    return "postData: string expected";
            if (message.bIsRedirect != null && message.hasOwnProperty("bIsRedirect"))
                if (typeof message.bIsRedirect !== "boolean")
                    return "bIsRedirect: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgStartRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgStartRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgStartRequest} CMsgStartRequest
         */
        CMsgStartRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgStartRequest)
                return object;
            var message = new $root.CMsgStartRequest();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.url != null)
                message.url = String(object.url);
            if (object.target != null)
                message.target = String(object.target);
            if (object.postData != null)
                message.postData = String(object.postData);
            if (object.bIsRedirect != null)
                message.bIsRedirect = Boolean(object.bIsRedirect);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgStartRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgStartRequest
         * @static
         * @param {CMsgStartRequest} message CMsgStartRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgStartRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.url = "";
                object.target = "";
                object.postData = "";
                object.bIsRedirect = false;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.url != null && message.hasOwnProperty("url"))
                object.url = message.url;
            if (message.target != null && message.hasOwnProperty("target"))
                object.target = message.target;
            if (message.postData != null && message.hasOwnProperty("postData"))
                object.postData = message.postData;
            if (message.bIsRedirect != null && message.hasOwnProperty("bIsRedirect"))
                object.bIsRedirect = message.bIsRedirect;
            return object;
        };
    
        /**
         * Converts this CMsgStartRequest to JSON.
         * @function toJSON
         * @memberof CMsgStartRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgStartRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgStartRequest;
    })();
    
    $root.CMsgStartRequestResponse = (function() {
    
        /**
         * Properties of a CMsgStartRequestResponse.
         * @exports ICMsgStartRequestResponse
         * @interface ICMsgStartRequestResponse
         * @property {number|null} [browser_handle] CMsgStartRequestResponse browser_handle
         * @property {boolean|null} [bAllow] CMsgStartRequestResponse bAllow
         */
    
        /**
         * Constructs a new CMsgStartRequestResponse.
         * @exports CMsgStartRequestResponse
         * @classdesc Represents a CMsgStartRequestResponse.
         * @implements ICMsgStartRequestResponse
         * @constructor
         * @param {ICMsgStartRequestResponse=} [properties] Properties to set
         */
        function CMsgStartRequestResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgStartRequestResponse browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgStartRequestResponse
         * @instance
         */
        CMsgStartRequestResponse.prototype.browser_handle = 0;
    
        /**
         * CMsgStartRequestResponse bAllow.
         * @member {boolean} bAllow
         * @memberof CMsgStartRequestResponse
         * @instance
         */
        CMsgStartRequestResponse.prototype.bAllow = false;
    
        /**
         * Creates a new CMsgStartRequestResponse instance using the specified properties.
         * @function create
         * @memberof CMsgStartRequestResponse
         * @static
         * @param {ICMsgStartRequestResponse=} [properties] Properties to set
         * @returns {CMsgStartRequestResponse} CMsgStartRequestResponse instance
         */
        CMsgStartRequestResponse.create = function create(properties) {
            return new CMsgStartRequestResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgStartRequestResponse message. Does not implicitly {@link CMsgStartRequestResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgStartRequestResponse
         * @static
         * @param {ICMsgStartRequestResponse} message CMsgStartRequestResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgStartRequestResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.bAllow != null && Object.hasOwnProperty.call(message, "bAllow"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.bAllow);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgStartRequestResponse message, length delimited. Does not implicitly {@link CMsgStartRequestResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgStartRequestResponse
         * @static
         * @param {ICMsgStartRequestResponse} message CMsgStartRequestResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgStartRequestResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgStartRequestResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgStartRequestResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgStartRequestResponse} CMsgStartRequestResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgStartRequestResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgStartRequestResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.bAllow = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgStartRequestResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgStartRequestResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgStartRequestResponse} CMsgStartRequestResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgStartRequestResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgStartRequestResponse message.
         * @function verify
         * @memberof CMsgStartRequestResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgStartRequestResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.bAllow != null && message.hasOwnProperty("bAllow"))
                if (typeof message.bAllow !== "boolean")
                    return "bAllow: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgStartRequestResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgStartRequestResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgStartRequestResponse} CMsgStartRequestResponse
         */
        CMsgStartRequestResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgStartRequestResponse)
                return object;
            var message = new $root.CMsgStartRequestResponse();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.bAllow != null)
                message.bAllow = Boolean(object.bAllow);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgStartRequestResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgStartRequestResponse
         * @static
         * @param {CMsgStartRequestResponse} message CMsgStartRequestResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgStartRequestResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.bAllow = false;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.bAllow != null && message.hasOwnProperty("bAllow"))
                object.bAllow = message.bAllow;
            return object;
        };
    
        /**
         * Converts this CMsgStartRequestResponse to JSON.
         * @function toJSON
         * @memberof CMsgStartRequestResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgStartRequestResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgStartRequestResponse;
    })();
    
    $root.CMsgShowPopup = (function() {
    
        /**
         * Properties of a CMsgShowPopup.
         * @exports ICMsgShowPopup
         * @interface ICMsgShowPopup
         * @property {number|null} [browser_handle] CMsgShowPopup browser_handle
         */
    
        /**
         * Constructs a new CMsgShowPopup.
         * @exports CMsgShowPopup
         * @classdesc Represents a CMsgShowPopup.
         * @implements ICMsgShowPopup
         * @constructor
         * @param {ICMsgShowPopup=} [properties] Properties to set
         */
        function CMsgShowPopup(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgShowPopup browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgShowPopup
         * @instance
         */
        CMsgShowPopup.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgShowPopup instance using the specified properties.
         * @function create
         * @memberof CMsgShowPopup
         * @static
         * @param {ICMsgShowPopup=} [properties] Properties to set
         * @returns {CMsgShowPopup} CMsgShowPopup instance
         */
        CMsgShowPopup.create = function create(properties) {
            return new CMsgShowPopup(properties);
        };
    
        /**
         * Encodes the specified CMsgShowPopup message. Does not implicitly {@link CMsgShowPopup.verify|verify} messages.
         * @function encode
         * @memberof CMsgShowPopup
         * @static
         * @param {ICMsgShowPopup} message CMsgShowPopup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgShowPopup.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgShowPopup message, length delimited. Does not implicitly {@link CMsgShowPopup.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgShowPopup
         * @static
         * @param {ICMsgShowPopup} message CMsgShowPopup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgShowPopup.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgShowPopup message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgShowPopup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgShowPopup} CMsgShowPopup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgShowPopup.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgShowPopup();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgShowPopup message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgShowPopup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgShowPopup} CMsgShowPopup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgShowPopup.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgShowPopup message.
         * @function verify
         * @memberof CMsgShowPopup
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgShowPopup.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgShowPopup message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgShowPopup
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgShowPopup} CMsgShowPopup
         */
        CMsgShowPopup.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgShowPopup)
                return object;
            var message = new $root.CMsgShowPopup();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgShowPopup message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgShowPopup
         * @static
         * @param {CMsgShowPopup} message CMsgShowPopup
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgShowPopup.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgShowPopup to JSON.
         * @function toJSON
         * @memberof CMsgShowPopup
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgShowPopup.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgShowPopup;
    })();
    
    $root.CMsgHidePopup = (function() {
    
        /**
         * Properties of a CMsgHidePopup.
         * @exports ICMsgHidePopup
         * @interface ICMsgHidePopup
         * @property {number|null} [browser_handle] CMsgHidePopup browser_handle
         */
    
        /**
         * Constructs a new CMsgHidePopup.
         * @exports CMsgHidePopup
         * @classdesc Represents a CMsgHidePopup.
         * @implements ICMsgHidePopup
         * @constructor
         * @param {ICMsgHidePopup=} [properties] Properties to set
         */
        function CMsgHidePopup(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgHidePopup browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgHidePopup
         * @instance
         */
        CMsgHidePopup.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgHidePopup instance using the specified properties.
         * @function create
         * @memberof CMsgHidePopup
         * @static
         * @param {ICMsgHidePopup=} [properties] Properties to set
         * @returns {CMsgHidePopup} CMsgHidePopup instance
         */
        CMsgHidePopup.create = function create(properties) {
            return new CMsgHidePopup(properties);
        };
    
        /**
         * Encodes the specified CMsgHidePopup message. Does not implicitly {@link CMsgHidePopup.verify|verify} messages.
         * @function encode
         * @memberof CMsgHidePopup
         * @static
         * @param {ICMsgHidePopup} message CMsgHidePopup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgHidePopup.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgHidePopup message, length delimited. Does not implicitly {@link CMsgHidePopup.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgHidePopup
         * @static
         * @param {ICMsgHidePopup} message CMsgHidePopup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgHidePopup.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgHidePopup message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgHidePopup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgHidePopup} CMsgHidePopup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgHidePopup.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgHidePopup();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgHidePopup message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgHidePopup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgHidePopup} CMsgHidePopup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgHidePopup.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgHidePopup message.
         * @function verify
         * @memberof CMsgHidePopup
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgHidePopup.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgHidePopup message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgHidePopup
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgHidePopup} CMsgHidePopup
         */
        CMsgHidePopup.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgHidePopup)
                return object;
            var message = new $root.CMsgHidePopup();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgHidePopup message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgHidePopup
         * @static
         * @param {CMsgHidePopup} message CMsgHidePopup
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgHidePopup.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgHidePopup to JSON.
         * @function toJSON
         * @memberof CMsgHidePopup
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgHidePopup.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgHidePopup;
    })();
    
    $root.CMsgSizePopup = (function() {
    
        /**
         * Properties of a CMsgSizePopup.
         * @exports ICMsgSizePopup
         * @interface ICMsgSizePopup
         * @property {number|null} [browser_handle] CMsgSizePopup browser_handle
         * @property {number|null} [x] CMsgSizePopup x
         * @property {number|null} [y] CMsgSizePopup y
         * @property {number|null} [wide] CMsgSizePopup wide
         * @property {number|null} [tall] CMsgSizePopup tall
         */
    
        /**
         * Constructs a new CMsgSizePopup.
         * @exports CMsgSizePopup
         * @classdesc Represents a CMsgSizePopup.
         * @implements ICMsgSizePopup
         * @constructor
         * @param {ICMsgSizePopup=} [properties] Properties to set
         */
        function CMsgSizePopup(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSizePopup browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgSizePopup
         * @instance
         */
        CMsgSizePopup.prototype.browser_handle = 0;
    
        /**
         * CMsgSizePopup x.
         * @member {number} x
         * @memberof CMsgSizePopup
         * @instance
         */
        CMsgSizePopup.prototype.x = 0;
    
        /**
         * CMsgSizePopup y.
         * @member {number} y
         * @memberof CMsgSizePopup
         * @instance
         */
        CMsgSizePopup.prototype.y = 0;
    
        /**
         * CMsgSizePopup wide.
         * @member {number} wide
         * @memberof CMsgSizePopup
         * @instance
         */
        CMsgSizePopup.prototype.wide = 0;
    
        /**
         * CMsgSizePopup tall.
         * @member {number} tall
         * @memberof CMsgSizePopup
         * @instance
         */
        CMsgSizePopup.prototype.tall = 0;
    
        /**
         * Creates a new CMsgSizePopup instance using the specified properties.
         * @function create
         * @memberof CMsgSizePopup
         * @static
         * @param {ICMsgSizePopup=} [properties] Properties to set
         * @returns {CMsgSizePopup} CMsgSizePopup instance
         */
        CMsgSizePopup.create = function create(properties) {
            return new CMsgSizePopup(properties);
        };
    
        /**
         * Encodes the specified CMsgSizePopup message. Does not implicitly {@link CMsgSizePopup.verify|verify} messages.
         * @function encode
         * @memberof CMsgSizePopup
         * @static
         * @param {ICMsgSizePopup} message CMsgSizePopup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSizePopup.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.x != null && Object.hasOwnProperty.call(message, "x"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.x);
            if (message.y != null && Object.hasOwnProperty.call(message, "y"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.y);
            if (message.wide != null && Object.hasOwnProperty.call(message, "wide"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.wide);
            if (message.tall != null && Object.hasOwnProperty.call(message, "tall"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.tall);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSizePopup message, length delimited. Does not implicitly {@link CMsgSizePopup.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSizePopup
         * @static
         * @param {ICMsgSizePopup} message CMsgSizePopup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSizePopup.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSizePopup message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSizePopup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSizePopup} CMsgSizePopup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSizePopup.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSizePopup();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.x = reader.int32();
                    break;
                case 3:
                    message.y = reader.int32();
                    break;
                case 4:
                    message.wide = reader.uint32();
                    break;
                case 5:
                    message.tall = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSizePopup message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSizePopup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSizePopup} CMsgSizePopup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSizePopup.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSizePopup message.
         * @function verify
         * @memberof CMsgSizePopup
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSizePopup.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.x != null && message.hasOwnProperty("x"))
                if (!$util.isInteger(message.x))
                    return "x: integer expected";
            if (message.y != null && message.hasOwnProperty("y"))
                if (!$util.isInteger(message.y))
                    return "y: integer expected";
            if (message.wide != null && message.hasOwnProperty("wide"))
                if (!$util.isInteger(message.wide))
                    return "wide: integer expected";
            if (message.tall != null && message.hasOwnProperty("tall"))
                if (!$util.isInteger(message.tall))
                    return "tall: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSizePopup message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSizePopup
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSizePopup} CMsgSizePopup
         */
        CMsgSizePopup.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSizePopup)
                return object;
            var message = new $root.CMsgSizePopup();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.x != null)
                message.x = object.x | 0;
            if (object.y != null)
                message.y = object.y | 0;
            if (object.wide != null)
                message.wide = object.wide >>> 0;
            if (object.tall != null)
                message.tall = object.tall >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSizePopup message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSizePopup
         * @static
         * @param {CMsgSizePopup} message CMsgSizePopup
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSizePopup.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.x = 0;
                object.y = 0;
                object.wide = 0;
                object.tall = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.x != null && message.hasOwnProperty("x"))
                object.x = message.x;
            if (message.y != null && message.hasOwnProperty("y"))
                object.y = message.y;
            if (message.wide != null && message.hasOwnProperty("wide"))
                object.wide = message.wide;
            if (message.tall != null && message.hasOwnProperty("tall"))
                object.tall = message.tall;
            return object;
        };
    
        /**
         * Converts this CMsgSizePopup to JSON.
         * @function toJSON
         * @memberof CMsgSizePopup
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSizePopup.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSizePopup;
    })();
    
    $root.CMsgOpenNewTab = (function() {
    
        /**
         * Properties of a CMsgOpenNewTab.
         * @exports ICMsgOpenNewTab
         * @interface ICMsgOpenNewTab
         * @property {number|null} [browser_handle] CMsgOpenNewTab browser_handle
         * @property {string|null} [url] CMsgOpenNewTab url
         * @property {boolean|null} [bForeground] CMsgOpenNewTab bForeground
         */
    
        /**
         * Constructs a new CMsgOpenNewTab.
         * @exports CMsgOpenNewTab
         * @classdesc Represents a CMsgOpenNewTab.
         * @implements ICMsgOpenNewTab
         * @constructor
         * @param {ICMsgOpenNewTab=} [properties] Properties to set
         */
        function CMsgOpenNewTab(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgOpenNewTab browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgOpenNewTab
         * @instance
         */
        CMsgOpenNewTab.prototype.browser_handle = 0;
    
        /**
         * CMsgOpenNewTab url.
         * @member {string} url
         * @memberof CMsgOpenNewTab
         * @instance
         */
        CMsgOpenNewTab.prototype.url = "";
    
        /**
         * CMsgOpenNewTab bForeground.
         * @member {boolean} bForeground
         * @memberof CMsgOpenNewTab
         * @instance
         */
        CMsgOpenNewTab.prototype.bForeground = false;
    
        /**
         * Creates a new CMsgOpenNewTab instance using the specified properties.
         * @function create
         * @memberof CMsgOpenNewTab
         * @static
         * @param {ICMsgOpenNewTab=} [properties] Properties to set
         * @returns {CMsgOpenNewTab} CMsgOpenNewTab instance
         */
        CMsgOpenNewTab.create = function create(properties) {
            return new CMsgOpenNewTab(properties);
        };
    
        /**
         * Encodes the specified CMsgOpenNewTab message. Does not implicitly {@link CMsgOpenNewTab.verify|verify} messages.
         * @function encode
         * @memberof CMsgOpenNewTab
         * @static
         * @param {ICMsgOpenNewTab} message CMsgOpenNewTab message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgOpenNewTab.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);
            if (message.bForeground != null && Object.hasOwnProperty.call(message, "bForeground"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.bForeground);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgOpenNewTab message, length delimited. Does not implicitly {@link CMsgOpenNewTab.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgOpenNewTab
         * @static
         * @param {ICMsgOpenNewTab} message CMsgOpenNewTab message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgOpenNewTab.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgOpenNewTab message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgOpenNewTab
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgOpenNewTab} CMsgOpenNewTab
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgOpenNewTab.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgOpenNewTab();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.url = reader.string();
                    break;
                case 3:
                    message.bForeground = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgOpenNewTab message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgOpenNewTab
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgOpenNewTab} CMsgOpenNewTab
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgOpenNewTab.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgOpenNewTab message.
         * @function verify
         * @memberof CMsgOpenNewTab
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgOpenNewTab.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.url != null && message.hasOwnProperty("url"))
                if (!$util.isString(message.url))
                    return "url: string expected";
            if (message.bForeground != null && message.hasOwnProperty("bForeground"))
                if (typeof message.bForeground !== "boolean")
                    return "bForeground: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgOpenNewTab message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgOpenNewTab
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgOpenNewTab} CMsgOpenNewTab
         */
        CMsgOpenNewTab.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgOpenNewTab)
                return object;
            var message = new $root.CMsgOpenNewTab();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.url != null)
                message.url = String(object.url);
            if (object.bForeground != null)
                message.bForeground = Boolean(object.bForeground);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgOpenNewTab message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgOpenNewTab
         * @static
         * @param {CMsgOpenNewTab} message CMsgOpenNewTab
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgOpenNewTab.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.url = "";
                object.bForeground = false;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.url != null && message.hasOwnProperty("url"))
                object.url = message.url;
            if (message.bForeground != null && message.hasOwnProperty("bForeground"))
                object.bForeground = message.bForeground;
            return object;
        };
    
        /**
         * Converts this CMsgOpenNewTab to JSON.
         * @function toJSON
         * @memberof CMsgOpenNewTab
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgOpenNewTab.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgOpenNewTab;
    })();
    
    $root.CMsgPopupHTMLWindow = (function() {
    
        /**
         * Properties of a CMsgPopupHTMLWindow.
         * @exports ICMsgPopupHTMLWindow
         * @interface ICMsgPopupHTMLWindow
         * @property {number|null} [browser_handle] CMsgPopupHTMLWindow browser_handle
         * @property {string|null} [url] CMsgPopupHTMLWindow url
         * @property {number|null} [x] CMsgPopupHTMLWindow x
         * @property {number|null} [y] CMsgPopupHTMLWindow y
         * @property {number|null} [wide] CMsgPopupHTMLWindow wide
         * @property {number|null} [tall] CMsgPopupHTMLWindow tall
         * @property {number|null} [popup_index] CMsgPopupHTMLWindow popup_index
         * @property {boolean|null} [trusted_creator] CMsgPopupHTMLWindow trusted_creator
         */
    
        /**
         * Constructs a new CMsgPopupHTMLWindow.
         * @exports CMsgPopupHTMLWindow
         * @classdesc Represents a CMsgPopupHTMLWindow.
         * @implements ICMsgPopupHTMLWindow
         * @constructor
         * @param {ICMsgPopupHTMLWindow=} [properties] Properties to set
         */
        function CMsgPopupHTMLWindow(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgPopupHTMLWindow browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgPopupHTMLWindow
         * @instance
         */
        CMsgPopupHTMLWindow.prototype.browser_handle = 0;
    
        /**
         * CMsgPopupHTMLWindow url.
         * @member {string} url
         * @memberof CMsgPopupHTMLWindow
         * @instance
         */
        CMsgPopupHTMLWindow.prototype.url = "";
    
        /**
         * CMsgPopupHTMLWindow x.
         * @member {number} x
         * @memberof CMsgPopupHTMLWindow
         * @instance
         */
        CMsgPopupHTMLWindow.prototype.x = -2147483648;
    
        /**
         * CMsgPopupHTMLWindow y.
         * @member {number} y
         * @memberof CMsgPopupHTMLWindow
         * @instance
         */
        CMsgPopupHTMLWindow.prototype.y = -2147483648;
    
        /**
         * CMsgPopupHTMLWindow wide.
         * @member {number} wide
         * @memberof CMsgPopupHTMLWindow
         * @instance
         */
        CMsgPopupHTMLWindow.prototype.wide = 0;
    
        /**
         * CMsgPopupHTMLWindow tall.
         * @member {number} tall
         * @memberof CMsgPopupHTMLWindow
         * @instance
         */
        CMsgPopupHTMLWindow.prototype.tall = 0;
    
        /**
         * CMsgPopupHTMLWindow popup_index.
         * @member {number} popup_index
         * @memberof CMsgPopupHTMLWindow
         * @instance
         */
        CMsgPopupHTMLWindow.prototype.popup_index = 0;
    
        /**
         * CMsgPopupHTMLWindow trusted_creator.
         * @member {boolean} trusted_creator
         * @memberof CMsgPopupHTMLWindow
         * @instance
         */
        CMsgPopupHTMLWindow.prototype.trusted_creator = false;
    
        /**
         * Creates a new CMsgPopupHTMLWindow instance using the specified properties.
         * @function create
         * @memberof CMsgPopupHTMLWindow
         * @static
         * @param {ICMsgPopupHTMLWindow=} [properties] Properties to set
         * @returns {CMsgPopupHTMLWindow} CMsgPopupHTMLWindow instance
         */
        CMsgPopupHTMLWindow.create = function create(properties) {
            return new CMsgPopupHTMLWindow(properties);
        };
    
        /**
         * Encodes the specified CMsgPopupHTMLWindow message. Does not implicitly {@link CMsgPopupHTMLWindow.verify|verify} messages.
         * @function encode
         * @memberof CMsgPopupHTMLWindow
         * @static
         * @param {ICMsgPopupHTMLWindow} message CMsgPopupHTMLWindow message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgPopupHTMLWindow.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);
            if (message.x != null && Object.hasOwnProperty.call(message, "x"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.x);
            if (message.y != null && Object.hasOwnProperty.call(message, "y"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.y);
            if (message.wide != null && Object.hasOwnProperty.call(message, "wide"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.wide);
            if (message.tall != null && Object.hasOwnProperty.call(message, "tall"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.tall);
            if (message.popup_index != null && Object.hasOwnProperty.call(message, "popup_index"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.popup_index);
            if (message.trusted_creator != null && Object.hasOwnProperty.call(message, "trusted_creator"))
                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.trusted_creator);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgPopupHTMLWindow message, length delimited. Does not implicitly {@link CMsgPopupHTMLWindow.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgPopupHTMLWindow
         * @static
         * @param {ICMsgPopupHTMLWindow} message CMsgPopupHTMLWindow message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgPopupHTMLWindow.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgPopupHTMLWindow message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgPopupHTMLWindow
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgPopupHTMLWindow} CMsgPopupHTMLWindow
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgPopupHTMLWindow.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgPopupHTMLWindow();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.url = reader.string();
                    break;
                case 3:
                    message.x = reader.int32();
                    break;
                case 4:
                    message.y = reader.int32();
                    break;
                case 5:
                    message.wide = reader.uint32();
                    break;
                case 6:
                    message.tall = reader.uint32();
                    break;
                case 7:
                    message.popup_index = reader.uint32();
                    break;
                case 8:
                    message.trusted_creator = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgPopupHTMLWindow message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgPopupHTMLWindow
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgPopupHTMLWindow} CMsgPopupHTMLWindow
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgPopupHTMLWindow.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgPopupHTMLWindow message.
         * @function verify
         * @memberof CMsgPopupHTMLWindow
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgPopupHTMLWindow.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.url != null && message.hasOwnProperty("url"))
                if (!$util.isString(message.url))
                    return "url: string expected";
            if (message.x != null && message.hasOwnProperty("x"))
                if (!$util.isInteger(message.x))
                    return "x: integer expected";
            if (message.y != null && message.hasOwnProperty("y"))
                if (!$util.isInteger(message.y))
                    return "y: integer expected";
            if (message.wide != null && message.hasOwnProperty("wide"))
                if (!$util.isInteger(message.wide))
                    return "wide: integer expected";
            if (message.tall != null && message.hasOwnProperty("tall"))
                if (!$util.isInteger(message.tall))
                    return "tall: integer expected";
            if (message.popup_index != null && message.hasOwnProperty("popup_index"))
                if (!$util.isInteger(message.popup_index))
                    return "popup_index: integer expected";
            if (message.trusted_creator != null && message.hasOwnProperty("trusted_creator"))
                if (typeof message.trusted_creator !== "boolean")
                    return "trusted_creator: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgPopupHTMLWindow message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgPopupHTMLWindow
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgPopupHTMLWindow} CMsgPopupHTMLWindow
         */
        CMsgPopupHTMLWindow.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgPopupHTMLWindow)
                return object;
            var message = new $root.CMsgPopupHTMLWindow();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.url != null)
                message.url = String(object.url);
            if (object.x != null)
                message.x = object.x | 0;
            if (object.y != null)
                message.y = object.y | 0;
            if (object.wide != null)
                message.wide = object.wide >>> 0;
            if (object.tall != null)
                message.tall = object.tall >>> 0;
            if (object.popup_index != null)
                message.popup_index = object.popup_index >>> 0;
            if (object.trusted_creator != null)
                message.trusted_creator = Boolean(object.trusted_creator);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgPopupHTMLWindow message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgPopupHTMLWindow
         * @static
         * @param {CMsgPopupHTMLWindow} message CMsgPopupHTMLWindow
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgPopupHTMLWindow.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.url = "";
                object.x = -2147483648;
                object.y = -2147483648;
                object.wide = 0;
                object.tall = 0;
                object.popup_index = 0;
                object.trusted_creator = false;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.url != null && message.hasOwnProperty("url"))
                object.url = message.url;
            if (message.x != null && message.hasOwnProperty("x"))
                object.x = message.x;
            if (message.y != null && message.hasOwnProperty("y"))
                object.y = message.y;
            if (message.wide != null && message.hasOwnProperty("wide"))
                object.wide = message.wide;
            if (message.tall != null && message.hasOwnProperty("tall"))
                object.tall = message.tall;
            if (message.popup_index != null && message.hasOwnProperty("popup_index"))
                object.popup_index = message.popup_index;
            if (message.trusted_creator != null && message.hasOwnProperty("trusted_creator"))
                object.trusted_creator = message.trusted_creator;
            return object;
        };
    
        /**
         * Converts this CMsgPopupHTMLWindow to JSON.
         * @function toJSON
         * @memberof CMsgPopupHTMLWindow
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgPopupHTMLWindow.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgPopupHTMLWindow;
    })();
    
    $root.CMsgPopupHTMLWindowResponse = (function() {
    
        /**
         * Properties of a CMsgPopupHTMLWindowResponse.
         * @exports ICMsgPopupHTMLWindowResponse
         * @interface ICMsgPopupHTMLWindowResponse
         * @property {number|null} [browser_handle] CMsgPopupHTMLWindowResponse browser_handle
         * @property {boolean|null} [bAllow] CMsgPopupHTMLWindowResponse bAllow
         */
    
        /**
         * Constructs a new CMsgPopupHTMLWindowResponse.
         * @exports CMsgPopupHTMLWindowResponse
         * @classdesc Represents a CMsgPopupHTMLWindowResponse.
         * @implements ICMsgPopupHTMLWindowResponse
         * @constructor
         * @param {ICMsgPopupHTMLWindowResponse=} [properties] Properties to set
         */
        function CMsgPopupHTMLWindowResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgPopupHTMLWindowResponse browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgPopupHTMLWindowResponse
         * @instance
         */
        CMsgPopupHTMLWindowResponse.prototype.browser_handle = 0;
    
        /**
         * CMsgPopupHTMLWindowResponse bAllow.
         * @member {boolean} bAllow
         * @memberof CMsgPopupHTMLWindowResponse
         * @instance
         */
        CMsgPopupHTMLWindowResponse.prototype.bAllow = false;
    
        /**
         * Creates a new CMsgPopupHTMLWindowResponse instance using the specified properties.
         * @function create
         * @memberof CMsgPopupHTMLWindowResponse
         * @static
         * @param {ICMsgPopupHTMLWindowResponse=} [properties] Properties to set
         * @returns {CMsgPopupHTMLWindowResponse} CMsgPopupHTMLWindowResponse instance
         */
        CMsgPopupHTMLWindowResponse.create = function create(properties) {
            return new CMsgPopupHTMLWindowResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgPopupHTMLWindowResponse message. Does not implicitly {@link CMsgPopupHTMLWindowResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgPopupHTMLWindowResponse
         * @static
         * @param {ICMsgPopupHTMLWindowResponse} message CMsgPopupHTMLWindowResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgPopupHTMLWindowResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.bAllow != null && Object.hasOwnProperty.call(message, "bAllow"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.bAllow);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgPopupHTMLWindowResponse message, length delimited. Does not implicitly {@link CMsgPopupHTMLWindowResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgPopupHTMLWindowResponse
         * @static
         * @param {ICMsgPopupHTMLWindowResponse} message CMsgPopupHTMLWindowResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgPopupHTMLWindowResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgPopupHTMLWindowResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgPopupHTMLWindowResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgPopupHTMLWindowResponse} CMsgPopupHTMLWindowResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgPopupHTMLWindowResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgPopupHTMLWindowResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.bAllow = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgPopupHTMLWindowResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgPopupHTMLWindowResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgPopupHTMLWindowResponse} CMsgPopupHTMLWindowResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgPopupHTMLWindowResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgPopupHTMLWindowResponse message.
         * @function verify
         * @memberof CMsgPopupHTMLWindowResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgPopupHTMLWindowResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.bAllow != null && message.hasOwnProperty("bAllow"))
                if (typeof message.bAllow !== "boolean")
                    return "bAllow: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgPopupHTMLWindowResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgPopupHTMLWindowResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgPopupHTMLWindowResponse} CMsgPopupHTMLWindowResponse
         */
        CMsgPopupHTMLWindowResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgPopupHTMLWindowResponse)
                return object;
            var message = new $root.CMsgPopupHTMLWindowResponse();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.bAllow != null)
                message.bAllow = Boolean(object.bAllow);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgPopupHTMLWindowResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgPopupHTMLWindowResponse
         * @static
         * @param {CMsgPopupHTMLWindowResponse} message CMsgPopupHTMLWindowResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgPopupHTMLWindowResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.bAllow = false;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.bAllow != null && message.hasOwnProperty("bAllow"))
                object.bAllow = message.bAllow;
            return object;
        };
    
        /**
         * Converts this CMsgPopupHTMLWindowResponse to JSON.
         * @function toJSON
         * @memberof CMsgPopupHTMLWindowResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgPopupHTMLWindowResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgPopupHTMLWindowResponse;
    })();
    
    $root.CMsgSetHTMLTitle = (function() {
    
        /**
         * Properties of a CMsgSetHTMLTitle.
         * @exports ICMsgSetHTMLTitle
         * @interface ICMsgSetHTMLTitle
         * @property {number|null} [browser_handle] CMsgSetHTMLTitle browser_handle
         * @property {string|null} [title] CMsgSetHTMLTitle title
         */
    
        /**
         * Constructs a new CMsgSetHTMLTitle.
         * @exports CMsgSetHTMLTitle
         * @classdesc Represents a CMsgSetHTMLTitle.
         * @implements ICMsgSetHTMLTitle
         * @constructor
         * @param {ICMsgSetHTMLTitle=} [properties] Properties to set
         */
        function CMsgSetHTMLTitle(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSetHTMLTitle browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgSetHTMLTitle
         * @instance
         */
        CMsgSetHTMLTitle.prototype.browser_handle = 0;
    
        /**
         * CMsgSetHTMLTitle title.
         * @member {string} title
         * @memberof CMsgSetHTMLTitle
         * @instance
         */
        CMsgSetHTMLTitle.prototype.title = "";
    
        /**
         * Creates a new CMsgSetHTMLTitle instance using the specified properties.
         * @function create
         * @memberof CMsgSetHTMLTitle
         * @static
         * @param {ICMsgSetHTMLTitle=} [properties] Properties to set
         * @returns {CMsgSetHTMLTitle} CMsgSetHTMLTitle instance
         */
        CMsgSetHTMLTitle.create = function create(properties) {
            return new CMsgSetHTMLTitle(properties);
        };
    
        /**
         * Encodes the specified CMsgSetHTMLTitle message. Does not implicitly {@link CMsgSetHTMLTitle.verify|verify} messages.
         * @function encode
         * @memberof CMsgSetHTMLTitle
         * @static
         * @param {ICMsgSetHTMLTitle} message CMsgSetHTMLTitle message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSetHTMLTitle.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.title);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSetHTMLTitle message, length delimited. Does not implicitly {@link CMsgSetHTMLTitle.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSetHTMLTitle
         * @static
         * @param {ICMsgSetHTMLTitle} message CMsgSetHTMLTitle message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSetHTMLTitle.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSetHTMLTitle message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSetHTMLTitle
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSetHTMLTitle} CMsgSetHTMLTitle
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSetHTMLTitle.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSetHTMLTitle();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.title = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSetHTMLTitle message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSetHTMLTitle
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSetHTMLTitle} CMsgSetHTMLTitle
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSetHTMLTitle.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSetHTMLTitle message.
         * @function verify
         * @memberof CMsgSetHTMLTitle
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSetHTMLTitle.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.title != null && message.hasOwnProperty("title"))
                if (!$util.isString(message.title))
                    return "title: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgSetHTMLTitle message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSetHTMLTitle
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSetHTMLTitle} CMsgSetHTMLTitle
         */
        CMsgSetHTMLTitle.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSetHTMLTitle)
                return object;
            var message = new $root.CMsgSetHTMLTitle();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.title != null)
                message.title = String(object.title);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSetHTMLTitle message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSetHTMLTitle
         * @static
         * @param {CMsgSetHTMLTitle} message CMsgSetHTMLTitle
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSetHTMLTitle.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.title = "";
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.title != null && message.hasOwnProperty("title"))
                object.title = message.title;
            return object;
        };
    
        /**
         * Converts this CMsgSetHTMLTitle to JSON.
         * @function toJSON
         * @memberof CMsgSetHTMLTitle
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSetHTMLTitle.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSetHTMLTitle;
    })();
    
    $root.CMsgLoadingResource = (function() {
    
        /**
         * Properties of a CMsgLoadingResource.
         * @exports ICMsgLoadingResource
         * @interface ICMsgLoadingResource
         * @property {number|null} [browser_handle] CMsgLoadingResource browser_handle
         * @property {string|null} [url] CMsgLoadingResource url
         */
    
        /**
         * Constructs a new CMsgLoadingResource.
         * @exports CMsgLoadingResource
         * @classdesc Represents a CMsgLoadingResource.
         * @implements ICMsgLoadingResource
         * @constructor
         * @param {ICMsgLoadingResource=} [properties] Properties to set
         */
        function CMsgLoadingResource(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgLoadingResource browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgLoadingResource
         * @instance
         */
        CMsgLoadingResource.prototype.browser_handle = 0;
    
        /**
         * CMsgLoadingResource url.
         * @member {string} url
         * @memberof CMsgLoadingResource
         * @instance
         */
        CMsgLoadingResource.prototype.url = "";
    
        /**
         * Creates a new CMsgLoadingResource instance using the specified properties.
         * @function create
         * @memberof CMsgLoadingResource
         * @static
         * @param {ICMsgLoadingResource=} [properties] Properties to set
         * @returns {CMsgLoadingResource} CMsgLoadingResource instance
         */
        CMsgLoadingResource.create = function create(properties) {
            return new CMsgLoadingResource(properties);
        };
    
        /**
         * Encodes the specified CMsgLoadingResource message. Does not implicitly {@link CMsgLoadingResource.verify|verify} messages.
         * @function encode
         * @memberof CMsgLoadingResource
         * @static
         * @param {ICMsgLoadingResource} message CMsgLoadingResource message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgLoadingResource.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgLoadingResource message, length delimited. Does not implicitly {@link CMsgLoadingResource.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgLoadingResource
         * @static
         * @param {ICMsgLoadingResource} message CMsgLoadingResource message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgLoadingResource.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgLoadingResource message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgLoadingResource
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgLoadingResource} CMsgLoadingResource
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgLoadingResource.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgLoadingResource();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.url = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgLoadingResource message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgLoadingResource
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgLoadingResource} CMsgLoadingResource
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgLoadingResource.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgLoadingResource message.
         * @function verify
         * @memberof CMsgLoadingResource
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgLoadingResource.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.url != null && message.hasOwnProperty("url"))
                if (!$util.isString(message.url))
                    return "url: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgLoadingResource message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgLoadingResource
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgLoadingResource} CMsgLoadingResource
         */
        CMsgLoadingResource.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgLoadingResource)
                return object;
            var message = new $root.CMsgLoadingResource();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.url != null)
                message.url = String(object.url);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgLoadingResource message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgLoadingResource
         * @static
         * @param {CMsgLoadingResource} message CMsgLoadingResource
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgLoadingResource.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.url = "";
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.url != null && message.hasOwnProperty("url"))
                object.url = message.url;
            return object;
        };
    
        /**
         * Converts this CMsgLoadingResource to JSON.
         * @function toJSON
         * @memberof CMsgLoadingResource
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgLoadingResource.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgLoadingResource;
    })();
    
    $root.CMsgStatusText = (function() {
    
        /**
         * Properties of a CMsgStatusText.
         * @exports ICMsgStatusText
         * @interface ICMsgStatusText
         * @property {number|null} [browser_handle] CMsgStatusText browser_handle
         * @property {string|null} [text] CMsgStatusText text
         */
    
        /**
         * Constructs a new CMsgStatusText.
         * @exports CMsgStatusText
         * @classdesc Represents a CMsgStatusText.
         * @implements ICMsgStatusText
         * @constructor
         * @param {ICMsgStatusText=} [properties] Properties to set
         */
        function CMsgStatusText(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgStatusText browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgStatusText
         * @instance
         */
        CMsgStatusText.prototype.browser_handle = 0;
    
        /**
         * CMsgStatusText text.
         * @member {string} text
         * @memberof CMsgStatusText
         * @instance
         */
        CMsgStatusText.prototype.text = "";
    
        /**
         * Creates a new CMsgStatusText instance using the specified properties.
         * @function create
         * @memberof CMsgStatusText
         * @static
         * @param {ICMsgStatusText=} [properties] Properties to set
         * @returns {CMsgStatusText} CMsgStatusText instance
         */
        CMsgStatusText.create = function create(properties) {
            return new CMsgStatusText(properties);
        };
    
        /**
         * Encodes the specified CMsgStatusText message. Does not implicitly {@link CMsgStatusText.verify|verify} messages.
         * @function encode
         * @memberof CMsgStatusText
         * @static
         * @param {ICMsgStatusText} message CMsgStatusText message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgStatusText.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgStatusText message, length delimited. Does not implicitly {@link CMsgStatusText.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgStatusText
         * @static
         * @param {ICMsgStatusText} message CMsgStatusText message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgStatusText.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgStatusText message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgStatusText
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgStatusText} CMsgStatusText
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgStatusText.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgStatusText();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.text = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgStatusText message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgStatusText
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgStatusText} CMsgStatusText
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgStatusText.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgStatusText message.
         * @function verify
         * @memberof CMsgStatusText
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgStatusText.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.text != null && message.hasOwnProperty("text"))
                if (!$util.isString(message.text))
                    return "text: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgStatusText message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgStatusText
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgStatusText} CMsgStatusText
         */
        CMsgStatusText.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgStatusText)
                return object;
            var message = new $root.CMsgStatusText();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.text != null)
                message.text = String(object.text);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgStatusText message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgStatusText
         * @static
         * @param {CMsgStatusText} message CMsgStatusText
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgStatusText.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.text = "";
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = message.text;
            return object;
        };
    
        /**
         * Converts this CMsgStatusText to JSON.
         * @function toJSON
         * @memberof CMsgStatusText
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgStatusText.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgStatusText;
    })();
    
    $root.CMsgSetCursor = (function() {
    
        /**
         * Properties of a CMsgSetCursor.
         * @exports ICMsgSetCursor
         * @interface ICMsgSetCursor
         * @property {number|null} [browser_handle] CMsgSetCursor browser_handle
         * @property {number|null} [cursor] CMsgSetCursor cursor
         * @property {Uint8Array|null} [custom_data] CMsgSetCursor custom_data
         * @property {number|null} [wide] CMsgSetCursor wide
         * @property {number|null} [tall] CMsgSetCursor tall
         * @property {number|null} [xhotspot] CMsgSetCursor xhotspot
         * @property {number|null} [yhotspot] CMsgSetCursor yhotspot
         */
    
        /**
         * Constructs a new CMsgSetCursor.
         * @exports CMsgSetCursor
         * @classdesc Represents a CMsgSetCursor.
         * @implements ICMsgSetCursor
         * @constructor
         * @param {ICMsgSetCursor=} [properties] Properties to set
         */
        function CMsgSetCursor(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSetCursor browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgSetCursor
         * @instance
         */
        CMsgSetCursor.prototype.browser_handle = 0;
    
        /**
         * CMsgSetCursor cursor.
         * @member {number} cursor
         * @memberof CMsgSetCursor
         * @instance
         */
        CMsgSetCursor.prototype.cursor = 0;
    
        /**
         * CMsgSetCursor custom_data.
         * @member {Uint8Array} custom_data
         * @memberof CMsgSetCursor
         * @instance
         */
        CMsgSetCursor.prototype.custom_data = $util.newBuffer([]);
    
        /**
         * CMsgSetCursor wide.
         * @member {number} wide
         * @memberof CMsgSetCursor
         * @instance
         */
        CMsgSetCursor.prototype.wide = 0;
    
        /**
         * CMsgSetCursor tall.
         * @member {number} tall
         * @memberof CMsgSetCursor
         * @instance
         */
        CMsgSetCursor.prototype.tall = 0;
    
        /**
         * CMsgSetCursor xhotspot.
         * @member {number} xhotspot
         * @memberof CMsgSetCursor
         * @instance
         */
        CMsgSetCursor.prototype.xhotspot = 0;
    
        /**
         * CMsgSetCursor yhotspot.
         * @member {number} yhotspot
         * @memberof CMsgSetCursor
         * @instance
         */
        CMsgSetCursor.prototype.yhotspot = 0;
    
        /**
         * Creates a new CMsgSetCursor instance using the specified properties.
         * @function create
         * @memberof CMsgSetCursor
         * @static
         * @param {ICMsgSetCursor=} [properties] Properties to set
         * @returns {CMsgSetCursor} CMsgSetCursor instance
         */
        CMsgSetCursor.create = function create(properties) {
            return new CMsgSetCursor(properties);
        };
    
        /**
         * Encodes the specified CMsgSetCursor message. Does not implicitly {@link CMsgSetCursor.verify|verify} messages.
         * @function encode
         * @memberof CMsgSetCursor
         * @static
         * @param {ICMsgSetCursor} message CMsgSetCursor message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSetCursor.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.cursor != null && Object.hasOwnProperty.call(message, "cursor"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.cursor);
            if (message.custom_data != null && Object.hasOwnProperty.call(message, "custom_data"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.custom_data);
            if (message.wide != null && Object.hasOwnProperty.call(message, "wide"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.wide);
            if (message.tall != null && Object.hasOwnProperty.call(message, "tall"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.tall);
            if (message.xhotspot != null && Object.hasOwnProperty.call(message, "xhotspot"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.xhotspot);
            if (message.yhotspot != null && Object.hasOwnProperty.call(message, "yhotspot"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.yhotspot);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSetCursor message, length delimited. Does not implicitly {@link CMsgSetCursor.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSetCursor
         * @static
         * @param {ICMsgSetCursor} message CMsgSetCursor message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSetCursor.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSetCursor message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSetCursor
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSetCursor} CMsgSetCursor
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSetCursor.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSetCursor();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.cursor = reader.uint32();
                    break;
                case 3:
                    message.custom_data = reader.bytes();
                    break;
                case 4:
                    message.wide = reader.uint32();
                    break;
                case 5:
                    message.tall = reader.uint32();
                    break;
                case 6:
                    message.xhotspot = reader.uint32();
                    break;
                case 7:
                    message.yhotspot = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSetCursor message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSetCursor
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSetCursor} CMsgSetCursor
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSetCursor.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSetCursor message.
         * @function verify
         * @memberof CMsgSetCursor
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSetCursor.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.cursor != null && message.hasOwnProperty("cursor"))
                if (!$util.isInteger(message.cursor))
                    return "cursor: integer expected";
            if (message.custom_data != null && message.hasOwnProperty("custom_data"))
                if (!(message.custom_data && typeof message.custom_data.length === "number" || $util.isString(message.custom_data)))
                    return "custom_data: buffer expected";
            if (message.wide != null && message.hasOwnProperty("wide"))
                if (!$util.isInteger(message.wide))
                    return "wide: integer expected";
            if (message.tall != null && message.hasOwnProperty("tall"))
                if (!$util.isInteger(message.tall))
                    return "tall: integer expected";
            if (message.xhotspot != null && message.hasOwnProperty("xhotspot"))
                if (!$util.isInteger(message.xhotspot))
                    return "xhotspot: integer expected";
            if (message.yhotspot != null && message.hasOwnProperty("yhotspot"))
                if (!$util.isInteger(message.yhotspot))
                    return "yhotspot: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSetCursor message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSetCursor
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSetCursor} CMsgSetCursor
         */
        CMsgSetCursor.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSetCursor)
                return object;
            var message = new $root.CMsgSetCursor();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.cursor != null)
                message.cursor = object.cursor >>> 0;
            if (object.custom_data != null)
                if (typeof object.custom_data === "string")
                    $util.base64.decode(object.custom_data, message.custom_data = $util.newBuffer($util.base64.length(object.custom_data)), 0);
                else if (object.custom_data.length)
                    message.custom_data = object.custom_data;
            if (object.wide != null)
                message.wide = object.wide >>> 0;
            if (object.tall != null)
                message.tall = object.tall >>> 0;
            if (object.xhotspot != null)
                message.xhotspot = object.xhotspot >>> 0;
            if (object.yhotspot != null)
                message.yhotspot = object.yhotspot >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSetCursor message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSetCursor
         * @static
         * @param {CMsgSetCursor} message CMsgSetCursor
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSetCursor.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.cursor = 0;
                if (options.bytes === String)
                    object.custom_data = "";
                else {
                    object.custom_data = [];
                    if (options.bytes !== Array)
                        object.custom_data = $util.newBuffer(object.custom_data);
                }
                object.wide = 0;
                object.tall = 0;
                object.xhotspot = 0;
                object.yhotspot = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.cursor != null && message.hasOwnProperty("cursor"))
                object.cursor = message.cursor;
            if (message.custom_data != null && message.hasOwnProperty("custom_data"))
                object.custom_data = options.bytes === String ? $util.base64.encode(message.custom_data, 0, message.custom_data.length) : options.bytes === Array ? Array.prototype.slice.call(message.custom_data) : message.custom_data;
            if (message.wide != null && message.hasOwnProperty("wide"))
                object.wide = message.wide;
            if (message.tall != null && message.hasOwnProperty("tall"))
                object.tall = message.tall;
            if (message.xhotspot != null && message.hasOwnProperty("xhotspot"))
                object.xhotspot = message.xhotspot;
            if (message.yhotspot != null && message.hasOwnProperty("yhotspot"))
                object.yhotspot = message.yhotspot;
            return object;
        };
    
        /**
         * Converts this CMsgSetCursor to JSON.
         * @function toJSON
         * @memberof CMsgSetCursor
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSetCursor.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSetCursor;
    })();
    
    $root.CMsgFileLoadDialog = (function() {
    
        /**
         * Properties of a CMsgFileLoadDialog.
         * @exports ICMsgFileLoadDialog
         * @interface ICMsgFileLoadDialog
         * @property {number|null} [browser_handle] CMsgFileLoadDialog browser_handle
         * @property {string|null} [title] CMsgFileLoadDialog title
         * @property {string|null} [initialFile] CMsgFileLoadDialog initialFile
         * @property {Array.<string>|null} [accept_types] CMsgFileLoadDialog accept_types
         * @property {boolean|null} [is_save] CMsgFileLoadDialog is_save
         */
    
        /**
         * Constructs a new CMsgFileLoadDialog.
         * @exports CMsgFileLoadDialog
         * @classdesc Represents a CMsgFileLoadDialog.
         * @implements ICMsgFileLoadDialog
         * @constructor
         * @param {ICMsgFileLoadDialog=} [properties] Properties to set
         */
        function CMsgFileLoadDialog(properties) {
            this.accept_types = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgFileLoadDialog browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgFileLoadDialog
         * @instance
         */
        CMsgFileLoadDialog.prototype.browser_handle = 0;
    
        /**
         * CMsgFileLoadDialog title.
         * @member {string} title
         * @memberof CMsgFileLoadDialog
         * @instance
         */
        CMsgFileLoadDialog.prototype.title = "";
    
        /**
         * CMsgFileLoadDialog initialFile.
         * @member {string} initialFile
         * @memberof CMsgFileLoadDialog
         * @instance
         */
        CMsgFileLoadDialog.prototype.initialFile = "";
    
        /**
         * CMsgFileLoadDialog accept_types.
         * @member {Array.<string>} accept_types
         * @memberof CMsgFileLoadDialog
         * @instance
         */
        CMsgFileLoadDialog.prototype.accept_types = $util.emptyArray;
    
        /**
         * CMsgFileLoadDialog is_save.
         * @member {boolean} is_save
         * @memberof CMsgFileLoadDialog
         * @instance
         */
        CMsgFileLoadDialog.prototype.is_save = false;
    
        /**
         * Creates a new CMsgFileLoadDialog instance using the specified properties.
         * @function create
         * @memberof CMsgFileLoadDialog
         * @static
         * @param {ICMsgFileLoadDialog=} [properties] Properties to set
         * @returns {CMsgFileLoadDialog} CMsgFileLoadDialog instance
         */
        CMsgFileLoadDialog.create = function create(properties) {
            return new CMsgFileLoadDialog(properties);
        };
    
        /**
         * Encodes the specified CMsgFileLoadDialog message. Does not implicitly {@link CMsgFileLoadDialog.verify|verify} messages.
         * @function encode
         * @memberof CMsgFileLoadDialog
         * @static
         * @param {ICMsgFileLoadDialog} message CMsgFileLoadDialog message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgFileLoadDialog.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.title);
            if (message.initialFile != null && Object.hasOwnProperty.call(message, "initialFile"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.initialFile);
            if (message.accept_types != null && message.accept_types.length)
                for (var i = 0; i < message.accept_types.length; ++i)
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.accept_types[i]);
            if (message.is_save != null && Object.hasOwnProperty.call(message, "is_save"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.is_save);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgFileLoadDialog message, length delimited. Does not implicitly {@link CMsgFileLoadDialog.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgFileLoadDialog
         * @static
         * @param {ICMsgFileLoadDialog} message CMsgFileLoadDialog message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgFileLoadDialog.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgFileLoadDialog message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgFileLoadDialog
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgFileLoadDialog} CMsgFileLoadDialog
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgFileLoadDialog.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgFileLoadDialog();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.title = reader.string();
                    break;
                case 3:
                    message.initialFile = reader.string();
                    break;
                case 4:
                    if (!(message.accept_types && message.accept_types.length))
                        message.accept_types = [];
                    message.accept_types.push(reader.string());
                    break;
                case 5:
                    message.is_save = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgFileLoadDialog message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgFileLoadDialog
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgFileLoadDialog} CMsgFileLoadDialog
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgFileLoadDialog.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgFileLoadDialog message.
         * @function verify
         * @memberof CMsgFileLoadDialog
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgFileLoadDialog.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.title != null && message.hasOwnProperty("title"))
                if (!$util.isString(message.title))
                    return "title: string expected";
            if (message.initialFile != null && message.hasOwnProperty("initialFile"))
                if (!$util.isString(message.initialFile))
                    return "initialFile: string expected";
            if (message.accept_types != null && message.hasOwnProperty("accept_types")) {
                if (!Array.isArray(message.accept_types))
                    return "accept_types: array expected";
                for (var i = 0; i < message.accept_types.length; ++i)
                    if (!$util.isString(message.accept_types[i]))
                        return "accept_types: string[] expected";
            }
            if (message.is_save != null && message.hasOwnProperty("is_save"))
                if (typeof message.is_save !== "boolean")
                    return "is_save: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgFileLoadDialog message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgFileLoadDialog
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgFileLoadDialog} CMsgFileLoadDialog
         */
        CMsgFileLoadDialog.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgFileLoadDialog)
                return object;
            var message = new $root.CMsgFileLoadDialog();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.title != null)
                message.title = String(object.title);
            if (object.initialFile != null)
                message.initialFile = String(object.initialFile);
            if (object.accept_types) {
                if (!Array.isArray(object.accept_types))
                    throw TypeError(".CMsgFileLoadDialog.accept_types: array expected");
                message.accept_types = [];
                for (var i = 0; i < object.accept_types.length; ++i)
                    message.accept_types[i] = String(object.accept_types[i]);
            }
            if (object.is_save != null)
                message.is_save = Boolean(object.is_save);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgFileLoadDialog message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgFileLoadDialog
         * @static
         * @param {CMsgFileLoadDialog} message CMsgFileLoadDialog
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgFileLoadDialog.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.accept_types = [];
            if (options.defaults) {
                object.browser_handle = 0;
                object.title = "";
                object.initialFile = "";
                object.is_save = false;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.title != null && message.hasOwnProperty("title"))
                object.title = message.title;
            if (message.initialFile != null && message.hasOwnProperty("initialFile"))
                object.initialFile = message.initialFile;
            if (message.accept_types && message.accept_types.length) {
                object.accept_types = [];
                for (var j = 0; j < message.accept_types.length; ++j)
                    object.accept_types[j] = message.accept_types[j];
            }
            if (message.is_save != null && message.hasOwnProperty("is_save"))
                object.is_save = message.is_save;
            return object;
        };
    
        /**
         * Converts this CMsgFileLoadDialog to JSON.
         * @function toJSON
         * @memberof CMsgFileLoadDialog
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgFileLoadDialog.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgFileLoadDialog;
    })();
    
    $root.CMsgFileLoadDialogResponse = (function() {
    
        /**
         * Properties of a CMsgFileLoadDialogResponse.
         * @exports ICMsgFileLoadDialogResponse
         * @interface ICMsgFileLoadDialogResponse
         * @property {number|null} [browser_handle] CMsgFileLoadDialogResponse browser_handle
         * @property {Array.<string>|null} [files] CMsgFileLoadDialogResponse files
         */
    
        /**
         * Constructs a new CMsgFileLoadDialogResponse.
         * @exports CMsgFileLoadDialogResponse
         * @classdesc Represents a CMsgFileLoadDialogResponse.
         * @implements ICMsgFileLoadDialogResponse
         * @constructor
         * @param {ICMsgFileLoadDialogResponse=} [properties] Properties to set
         */
        function CMsgFileLoadDialogResponse(properties) {
            this.files = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgFileLoadDialogResponse browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgFileLoadDialogResponse
         * @instance
         */
        CMsgFileLoadDialogResponse.prototype.browser_handle = 0;
    
        /**
         * CMsgFileLoadDialogResponse files.
         * @member {Array.<string>} files
         * @memberof CMsgFileLoadDialogResponse
         * @instance
         */
        CMsgFileLoadDialogResponse.prototype.files = $util.emptyArray;
    
        /**
         * Creates a new CMsgFileLoadDialogResponse instance using the specified properties.
         * @function create
         * @memberof CMsgFileLoadDialogResponse
         * @static
         * @param {ICMsgFileLoadDialogResponse=} [properties] Properties to set
         * @returns {CMsgFileLoadDialogResponse} CMsgFileLoadDialogResponse instance
         */
        CMsgFileLoadDialogResponse.create = function create(properties) {
            return new CMsgFileLoadDialogResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgFileLoadDialogResponse message. Does not implicitly {@link CMsgFileLoadDialogResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgFileLoadDialogResponse
         * @static
         * @param {ICMsgFileLoadDialogResponse} message CMsgFileLoadDialogResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgFileLoadDialogResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.files != null && message.files.length)
                for (var i = 0; i < message.files.length; ++i)
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.files[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgFileLoadDialogResponse message, length delimited. Does not implicitly {@link CMsgFileLoadDialogResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgFileLoadDialogResponse
         * @static
         * @param {ICMsgFileLoadDialogResponse} message CMsgFileLoadDialogResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgFileLoadDialogResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgFileLoadDialogResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgFileLoadDialogResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgFileLoadDialogResponse} CMsgFileLoadDialogResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgFileLoadDialogResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgFileLoadDialogResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    if (!(message.files && message.files.length))
                        message.files = [];
                    message.files.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgFileLoadDialogResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgFileLoadDialogResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgFileLoadDialogResponse} CMsgFileLoadDialogResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgFileLoadDialogResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgFileLoadDialogResponse message.
         * @function verify
         * @memberof CMsgFileLoadDialogResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgFileLoadDialogResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.files != null && message.hasOwnProperty("files")) {
                if (!Array.isArray(message.files))
                    return "files: array expected";
                for (var i = 0; i < message.files.length; ++i)
                    if (!$util.isString(message.files[i]))
                        return "files: string[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CMsgFileLoadDialogResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgFileLoadDialogResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgFileLoadDialogResponse} CMsgFileLoadDialogResponse
         */
        CMsgFileLoadDialogResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgFileLoadDialogResponse)
                return object;
            var message = new $root.CMsgFileLoadDialogResponse();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.files) {
                if (!Array.isArray(object.files))
                    throw TypeError(".CMsgFileLoadDialogResponse.files: array expected");
                message.files = [];
                for (var i = 0; i < object.files.length; ++i)
                    message.files[i] = String(object.files[i]);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgFileLoadDialogResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgFileLoadDialogResponse
         * @static
         * @param {CMsgFileLoadDialogResponse} message CMsgFileLoadDialogResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgFileLoadDialogResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.files = [];
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.files && message.files.length) {
                object.files = [];
                for (var j = 0; j < message.files.length; ++j)
                    object.files[j] = message.files[j];
            }
            return object;
        };
    
        /**
         * Converts this CMsgFileLoadDialogResponse to JSON.
         * @function toJSON
         * @memberof CMsgFileLoadDialogResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgFileLoadDialogResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgFileLoadDialogResponse;
    })();
    
    $root.CMsgShowToolTip = (function() {
    
        /**
         * Properties of a CMsgShowToolTip.
         * @exports ICMsgShowToolTip
         * @interface ICMsgShowToolTip
         * @property {number|null} [browser_handle] CMsgShowToolTip browser_handle
         * @property {string|null} [text] CMsgShowToolTip text
         */
    
        /**
         * Constructs a new CMsgShowToolTip.
         * @exports CMsgShowToolTip
         * @classdesc Represents a CMsgShowToolTip.
         * @implements ICMsgShowToolTip
         * @constructor
         * @param {ICMsgShowToolTip=} [properties] Properties to set
         */
        function CMsgShowToolTip(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgShowToolTip browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgShowToolTip
         * @instance
         */
        CMsgShowToolTip.prototype.browser_handle = 0;
    
        /**
         * CMsgShowToolTip text.
         * @member {string} text
         * @memberof CMsgShowToolTip
         * @instance
         */
        CMsgShowToolTip.prototype.text = "";
    
        /**
         * Creates a new CMsgShowToolTip instance using the specified properties.
         * @function create
         * @memberof CMsgShowToolTip
         * @static
         * @param {ICMsgShowToolTip=} [properties] Properties to set
         * @returns {CMsgShowToolTip} CMsgShowToolTip instance
         */
        CMsgShowToolTip.create = function create(properties) {
            return new CMsgShowToolTip(properties);
        };
    
        /**
         * Encodes the specified CMsgShowToolTip message. Does not implicitly {@link CMsgShowToolTip.verify|verify} messages.
         * @function encode
         * @memberof CMsgShowToolTip
         * @static
         * @param {ICMsgShowToolTip} message CMsgShowToolTip message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgShowToolTip.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgShowToolTip message, length delimited. Does not implicitly {@link CMsgShowToolTip.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgShowToolTip
         * @static
         * @param {ICMsgShowToolTip} message CMsgShowToolTip message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgShowToolTip.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgShowToolTip message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgShowToolTip
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgShowToolTip} CMsgShowToolTip
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgShowToolTip.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgShowToolTip();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.text = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgShowToolTip message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgShowToolTip
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgShowToolTip} CMsgShowToolTip
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgShowToolTip.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgShowToolTip message.
         * @function verify
         * @memberof CMsgShowToolTip
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgShowToolTip.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.text != null && message.hasOwnProperty("text"))
                if (!$util.isString(message.text))
                    return "text: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgShowToolTip message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgShowToolTip
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgShowToolTip} CMsgShowToolTip
         */
        CMsgShowToolTip.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgShowToolTip)
                return object;
            var message = new $root.CMsgShowToolTip();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.text != null)
                message.text = String(object.text);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgShowToolTip message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgShowToolTip
         * @static
         * @param {CMsgShowToolTip} message CMsgShowToolTip
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgShowToolTip.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.text = "";
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = message.text;
            return object;
        };
    
        /**
         * Converts this CMsgShowToolTip to JSON.
         * @function toJSON
         * @memberof CMsgShowToolTip
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgShowToolTip.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgShowToolTip;
    })();
    
    $root.CMsgUpdateToolTip = (function() {
    
        /**
         * Properties of a CMsgUpdateToolTip.
         * @exports ICMsgUpdateToolTip
         * @interface ICMsgUpdateToolTip
         * @property {number|null} [browser_handle] CMsgUpdateToolTip browser_handle
         * @property {string|null} [text] CMsgUpdateToolTip text
         */
    
        /**
         * Constructs a new CMsgUpdateToolTip.
         * @exports CMsgUpdateToolTip
         * @classdesc Represents a CMsgUpdateToolTip.
         * @implements ICMsgUpdateToolTip
         * @constructor
         * @param {ICMsgUpdateToolTip=} [properties] Properties to set
         */
        function CMsgUpdateToolTip(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgUpdateToolTip browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgUpdateToolTip
         * @instance
         */
        CMsgUpdateToolTip.prototype.browser_handle = 0;
    
        /**
         * CMsgUpdateToolTip text.
         * @member {string} text
         * @memberof CMsgUpdateToolTip
         * @instance
         */
        CMsgUpdateToolTip.prototype.text = "";
    
        /**
         * Creates a new CMsgUpdateToolTip instance using the specified properties.
         * @function create
         * @memberof CMsgUpdateToolTip
         * @static
         * @param {ICMsgUpdateToolTip=} [properties] Properties to set
         * @returns {CMsgUpdateToolTip} CMsgUpdateToolTip instance
         */
        CMsgUpdateToolTip.create = function create(properties) {
            return new CMsgUpdateToolTip(properties);
        };
    
        /**
         * Encodes the specified CMsgUpdateToolTip message. Does not implicitly {@link CMsgUpdateToolTip.verify|verify} messages.
         * @function encode
         * @memberof CMsgUpdateToolTip
         * @static
         * @param {ICMsgUpdateToolTip} message CMsgUpdateToolTip message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgUpdateToolTip.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgUpdateToolTip message, length delimited. Does not implicitly {@link CMsgUpdateToolTip.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgUpdateToolTip
         * @static
         * @param {ICMsgUpdateToolTip} message CMsgUpdateToolTip message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgUpdateToolTip.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgUpdateToolTip message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgUpdateToolTip
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgUpdateToolTip} CMsgUpdateToolTip
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgUpdateToolTip.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgUpdateToolTip();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.text = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgUpdateToolTip message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgUpdateToolTip
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgUpdateToolTip} CMsgUpdateToolTip
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgUpdateToolTip.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgUpdateToolTip message.
         * @function verify
         * @memberof CMsgUpdateToolTip
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgUpdateToolTip.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.text != null && message.hasOwnProperty("text"))
                if (!$util.isString(message.text))
                    return "text: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgUpdateToolTip message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgUpdateToolTip
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgUpdateToolTip} CMsgUpdateToolTip
         */
        CMsgUpdateToolTip.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgUpdateToolTip)
                return object;
            var message = new $root.CMsgUpdateToolTip();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.text != null)
                message.text = String(object.text);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgUpdateToolTip message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgUpdateToolTip
         * @static
         * @param {CMsgUpdateToolTip} message CMsgUpdateToolTip
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgUpdateToolTip.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.text = "";
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = message.text;
            return object;
        };
    
        /**
         * Converts this CMsgUpdateToolTip to JSON.
         * @function toJSON
         * @memberof CMsgUpdateToolTip
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgUpdateToolTip.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgUpdateToolTip;
    })();
    
    $root.CMsgHideToolTip = (function() {
    
        /**
         * Properties of a CMsgHideToolTip.
         * @exports ICMsgHideToolTip
         * @interface ICMsgHideToolTip
         * @property {number|null} [browser_handle] CMsgHideToolTip browser_handle
         */
    
        /**
         * Constructs a new CMsgHideToolTip.
         * @exports CMsgHideToolTip
         * @classdesc Represents a CMsgHideToolTip.
         * @implements ICMsgHideToolTip
         * @constructor
         * @param {ICMsgHideToolTip=} [properties] Properties to set
         */
        function CMsgHideToolTip(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgHideToolTip browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgHideToolTip
         * @instance
         */
        CMsgHideToolTip.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgHideToolTip instance using the specified properties.
         * @function create
         * @memberof CMsgHideToolTip
         * @static
         * @param {ICMsgHideToolTip=} [properties] Properties to set
         * @returns {CMsgHideToolTip} CMsgHideToolTip instance
         */
        CMsgHideToolTip.create = function create(properties) {
            return new CMsgHideToolTip(properties);
        };
    
        /**
         * Encodes the specified CMsgHideToolTip message. Does not implicitly {@link CMsgHideToolTip.verify|verify} messages.
         * @function encode
         * @memberof CMsgHideToolTip
         * @static
         * @param {ICMsgHideToolTip} message CMsgHideToolTip message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgHideToolTip.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgHideToolTip message, length delimited. Does not implicitly {@link CMsgHideToolTip.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgHideToolTip
         * @static
         * @param {ICMsgHideToolTip} message CMsgHideToolTip message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgHideToolTip.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgHideToolTip message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgHideToolTip
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgHideToolTip} CMsgHideToolTip
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgHideToolTip.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgHideToolTip();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgHideToolTip message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgHideToolTip
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgHideToolTip} CMsgHideToolTip
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgHideToolTip.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgHideToolTip message.
         * @function verify
         * @memberof CMsgHideToolTip
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgHideToolTip.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgHideToolTip message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgHideToolTip
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgHideToolTip} CMsgHideToolTip
         */
        CMsgHideToolTip.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgHideToolTip)
                return object;
            var message = new $root.CMsgHideToolTip();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgHideToolTip message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgHideToolTip
         * @static
         * @param {CMsgHideToolTip} message CMsgHideToolTip
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgHideToolTip.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgHideToolTip to JSON.
         * @function toJSON
         * @memberof CMsgHideToolTip
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgHideToolTip.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgHideToolTip;
    })();
    
    $root.CMsgSearchResults = (function() {
    
        /**
         * Properties of a CMsgSearchResults.
         * @exports ICMsgSearchResults
         * @interface ICMsgSearchResults
         * @property {number|null} [browser_handle] CMsgSearchResults browser_handle
         * @property {number|null} [activeMatch] CMsgSearchResults activeMatch
         * @property {number|null} [results] CMsgSearchResults results
         */
    
        /**
         * Constructs a new CMsgSearchResults.
         * @exports CMsgSearchResults
         * @classdesc Represents a CMsgSearchResults.
         * @implements ICMsgSearchResults
         * @constructor
         * @param {ICMsgSearchResults=} [properties] Properties to set
         */
        function CMsgSearchResults(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSearchResults browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgSearchResults
         * @instance
         */
        CMsgSearchResults.prototype.browser_handle = 0;
    
        /**
         * CMsgSearchResults activeMatch.
         * @member {number} activeMatch
         * @memberof CMsgSearchResults
         * @instance
         */
        CMsgSearchResults.prototype.activeMatch = 0;
    
        /**
         * CMsgSearchResults results.
         * @member {number} results
         * @memberof CMsgSearchResults
         * @instance
         */
        CMsgSearchResults.prototype.results = 0;
    
        /**
         * Creates a new CMsgSearchResults instance using the specified properties.
         * @function create
         * @memberof CMsgSearchResults
         * @static
         * @param {ICMsgSearchResults=} [properties] Properties to set
         * @returns {CMsgSearchResults} CMsgSearchResults instance
         */
        CMsgSearchResults.create = function create(properties) {
            return new CMsgSearchResults(properties);
        };
    
        /**
         * Encodes the specified CMsgSearchResults message. Does not implicitly {@link CMsgSearchResults.verify|verify} messages.
         * @function encode
         * @memberof CMsgSearchResults
         * @static
         * @param {ICMsgSearchResults} message CMsgSearchResults message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSearchResults.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.activeMatch != null && Object.hasOwnProperty.call(message, "activeMatch"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.activeMatch);
            if (message.results != null && Object.hasOwnProperty.call(message, "results"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.results);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSearchResults message, length delimited. Does not implicitly {@link CMsgSearchResults.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSearchResults
         * @static
         * @param {ICMsgSearchResults} message CMsgSearchResults message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSearchResults.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSearchResults message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSearchResults
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSearchResults} CMsgSearchResults
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSearchResults.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSearchResults();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.activeMatch = reader.int32();
                    break;
                case 3:
                    message.results = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSearchResults message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSearchResults
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSearchResults} CMsgSearchResults
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSearchResults.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSearchResults message.
         * @function verify
         * @memberof CMsgSearchResults
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSearchResults.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.activeMatch != null && message.hasOwnProperty("activeMatch"))
                if (!$util.isInteger(message.activeMatch))
                    return "activeMatch: integer expected";
            if (message.results != null && message.hasOwnProperty("results"))
                if (!$util.isInteger(message.results))
                    return "results: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSearchResults message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSearchResults
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSearchResults} CMsgSearchResults
         */
        CMsgSearchResults.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSearchResults)
                return object;
            var message = new $root.CMsgSearchResults();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.activeMatch != null)
                message.activeMatch = object.activeMatch | 0;
            if (object.results != null)
                message.results = object.results | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSearchResults message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSearchResults
         * @static
         * @param {CMsgSearchResults} message CMsgSearchResults
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSearchResults.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.activeMatch = 0;
                object.results = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.activeMatch != null && message.hasOwnProperty("activeMatch"))
                object.activeMatch = message.activeMatch;
            if (message.results != null && message.hasOwnProperty("results"))
                object.results = message.results;
            return object;
        };
    
        /**
         * Converts this CMsgSearchResults to JSON.
         * @function toJSON
         * @memberof CMsgSearchResults
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSearchResults.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSearchResults;
    })();
    
    $root.CMsgClose = (function() {
    
        /**
         * Properties of a CMsgClose.
         * @exports ICMsgClose
         * @interface ICMsgClose
         * @property {number|null} [browser_handle] CMsgClose browser_handle
         */
    
        /**
         * Constructs a new CMsgClose.
         * @exports CMsgClose
         * @classdesc Represents a CMsgClose.
         * @implements ICMsgClose
         * @constructor
         * @param {ICMsgClose=} [properties] Properties to set
         */
        function CMsgClose(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgClose browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgClose
         * @instance
         */
        CMsgClose.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgClose instance using the specified properties.
         * @function create
         * @memberof CMsgClose
         * @static
         * @param {ICMsgClose=} [properties] Properties to set
         * @returns {CMsgClose} CMsgClose instance
         */
        CMsgClose.create = function create(properties) {
            return new CMsgClose(properties);
        };
    
        /**
         * Encodes the specified CMsgClose message. Does not implicitly {@link CMsgClose.verify|verify} messages.
         * @function encode
         * @memberof CMsgClose
         * @static
         * @param {ICMsgClose} message CMsgClose message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClose.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClose message, length delimited. Does not implicitly {@link CMsgClose.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClose
         * @static
         * @param {ICMsgClose} message CMsgClose message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClose.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClose message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClose
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClose} CMsgClose
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClose.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClose();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClose message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClose
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClose} CMsgClose
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClose.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClose message.
         * @function verify
         * @memberof CMsgClose
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClose.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgClose message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClose
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClose} CMsgClose
         */
        CMsgClose.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClose)
                return object;
            var message = new $root.CMsgClose();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgClose message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClose
         * @static
         * @param {CMsgClose} message CMsgClose
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClose.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgClose to JSON.
         * @function toJSON
         * @memberof CMsgClose
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClose.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgClose;
    })();
    
    $root.CMsgSetSharedPaintBuffers = (function() {
    
        /**
         * Properties of a CMsgSetSharedPaintBuffers.
         * @exports ICMsgSetSharedPaintBuffers
         * @interface ICMsgSetSharedPaintBuffers
         * @property {number|null} [browser_handle] CMsgSetSharedPaintBuffers browser_handle
         * @property {number|null} [wide] CMsgSetSharedPaintBuffers wide
         * @property {number|null} [tall] CMsgSetSharedPaintBuffers tall
         * @property {number|Long|null} [source_pid] CMsgSetSharedPaintBuffers source_pid
         * @property {number|Long|null} [source_handle] CMsgSetSharedPaintBuffers source_handle
         * @property {number|Long|null} [handle] CMsgSetSharedPaintBuffers handle
         */
    
        /**
         * Constructs a new CMsgSetSharedPaintBuffers.
         * @exports CMsgSetSharedPaintBuffers
         * @classdesc Represents a CMsgSetSharedPaintBuffers.
         * @implements ICMsgSetSharedPaintBuffers
         * @constructor
         * @param {ICMsgSetSharedPaintBuffers=} [properties] Properties to set
         */
        function CMsgSetSharedPaintBuffers(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSetSharedPaintBuffers browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgSetSharedPaintBuffers
         * @instance
         */
        CMsgSetSharedPaintBuffers.prototype.browser_handle = 0;
    
        /**
         * CMsgSetSharedPaintBuffers wide.
         * @member {number} wide
         * @memberof CMsgSetSharedPaintBuffers
         * @instance
         */
        CMsgSetSharedPaintBuffers.prototype.wide = 0;
    
        /**
         * CMsgSetSharedPaintBuffers tall.
         * @member {number} tall
         * @memberof CMsgSetSharedPaintBuffers
         * @instance
         */
        CMsgSetSharedPaintBuffers.prototype.tall = 0;
    
        /**
         * CMsgSetSharedPaintBuffers source_pid.
         * @member {number|Long} source_pid
         * @memberof CMsgSetSharedPaintBuffers
         * @instance
         */
        CMsgSetSharedPaintBuffers.prototype.source_pid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgSetSharedPaintBuffers source_handle.
         * @member {number|Long} source_handle
         * @memberof CMsgSetSharedPaintBuffers
         * @instance
         */
        CMsgSetSharedPaintBuffers.prototype.source_handle = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgSetSharedPaintBuffers handle.
         * @member {number|Long} handle
         * @memberof CMsgSetSharedPaintBuffers
         * @instance
         */
        CMsgSetSharedPaintBuffers.prototype.handle = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CMsgSetSharedPaintBuffers instance using the specified properties.
         * @function create
         * @memberof CMsgSetSharedPaintBuffers
         * @static
         * @param {ICMsgSetSharedPaintBuffers=} [properties] Properties to set
         * @returns {CMsgSetSharedPaintBuffers} CMsgSetSharedPaintBuffers instance
         */
        CMsgSetSharedPaintBuffers.create = function create(properties) {
            return new CMsgSetSharedPaintBuffers(properties);
        };
    
        /**
         * Encodes the specified CMsgSetSharedPaintBuffers message. Does not implicitly {@link CMsgSetSharedPaintBuffers.verify|verify} messages.
         * @function encode
         * @memberof CMsgSetSharedPaintBuffers
         * @static
         * @param {ICMsgSetSharedPaintBuffers} message CMsgSetSharedPaintBuffers message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSetSharedPaintBuffers.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.wide != null && Object.hasOwnProperty.call(message, "wide"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.wide);
            if (message.tall != null && Object.hasOwnProperty.call(message, "tall"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.tall);
            if (message.source_pid != null && Object.hasOwnProperty.call(message, "source_pid"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.source_pid);
            if (message.source_handle != null && Object.hasOwnProperty.call(message, "source_handle"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.source_handle);
            if (message.handle != null && Object.hasOwnProperty.call(message, "handle"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSetSharedPaintBuffers message, length delimited. Does not implicitly {@link CMsgSetSharedPaintBuffers.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSetSharedPaintBuffers
         * @static
         * @param {ICMsgSetSharedPaintBuffers} message CMsgSetSharedPaintBuffers message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSetSharedPaintBuffers.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSetSharedPaintBuffers message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSetSharedPaintBuffers
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSetSharedPaintBuffers} CMsgSetSharedPaintBuffers
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSetSharedPaintBuffers.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSetSharedPaintBuffers();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.wide = reader.uint32();
                    break;
                case 3:
                    message.tall = reader.uint32();
                    break;
                case 4:
                    message.source_pid = reader.uint64();
                    break;
                case 5:
                    message.source_handle = reader.uint64();
                    break;
                case 6:
                    message.handle = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSetSharedPaintBuffers message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSetSharedPaintBuffers
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSetSharedPaintBuffers} CMsgSetSharedPaintBuffers
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSetSharedPaintBuffers.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSetSharedPaintBuffers message.
         * @function verify
         * @memberof CMsgSetSharedPaintBuffers
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSetSharedPaintBuffers.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.wide != null && message.hasOwnProperty("wide"))
                if (!$util.isInteger(message.wide))
                    return "wide: integer expected";
            if (message.tall != null && message.hasOwnProperty("tall"))
                if (!$util.isInteger(message.tall))
                    return "tall: integer expected";
            if (message.source_pid != null && message.hasOwnProperty("source_pid"))
                if (!$util.isInteger(message.source_pid) && !(message.source_pid && $util.isInteger(message.source_pid.low) && $util.isInteger(message.source_pid.high)))
                    return "source_pid: integer|Long expected";
            if (message.source_handle != null && message.hasOwnProperty("source_handle"))
                if (!$util.isInteger(message.source_handle) && !(message.source_handle && $util.isInteger(message.source_handle.low) && $util.isInteger(message.source_handle.high)))
                    return "source_handle: integer|Long expected";
            if (message.handle != null && message.hasOwnProperty("handle"))
                if (!$util.isInteger(message.handle) && !(message.handle && $util.isInteger(message.handle.low) && $util.isInteger(message.handle.high)))
                    return "handle: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgSetSharedPaintBuffers message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSetSharedPaintBuffers
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSetSharedPaintBuffers} CMsgSetSharedPaintBuffers
         */
        CMsgSetSharedPaintBuffers.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSetSharedPaintBuffers)
                return object;
            var message = new $root.CMsgSetSharedPaintBuffers();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.wide != null)
                message.wide = object.wide >>> 0;
            if (object.tall != null)
                message.tall = object.tall >>> 0;
            if (object.source_pid != null)
                if ($util.Long)
                    (message.source_pid = $util.Long.fromValue(object.source_pid)).unsigned = true;
                else if (typeof object.source_pid === "string")
                    message.source_pid = parseInt(object.source_pid, 10);
                else if (typeof object.source_pid === "number")
                    message.source_pid = object.source_pid;
                else if (typeof object.source_pid === "object")
                    message.source_pid = new $util.LongBits(object.source_pid.low >>> 0, object.source_pid.high >>> 0).toNumber(true);
            if (object.source_handle != null)
                if ($util.Long)
                    (message.source_handle = $util.Long.fromValue(object.source_handle)).unsigned = true;
                else if (typeof object.source_handle === "string")
                    message.source_handle = parseInt(object.source_handle, 10);
                else if (typeof object.source_handle === "number")
                    message.source_handle = object.source_handle;
                else if (typeof object.source_handle === "object")
                    message.source_handle = new $util.LongBits(object.source_handle.low >>> 0, object.source_handle.high >>> 0).toNumber(true);
            if (object.handle != null)
                if ($util.Long)
                    (message.handle = $util.Long.fromValue(object.handle)).unsigned = true;
                else if (typeof object.handle === "string")
                    message.handle = parseInt(object.handle, 10);
                else if (typeof object.handle === "number")
                    message.handle = object.handle;
                else if (typeof object.handle === "object")
                    message.handle = new $util.LongBits(object.handle.low >>> 0, object.handle.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSetSharedPaintBuffers message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSetSharedPaintBuffers
         * @static
         * @param {CMsgSetSharedPaintBuffers} message CMsgSetSharedPaintBuffers
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSetSharedPaintBuffers.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.wide = 0;
                object.tall = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.source_pid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.source_pid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.source_handle = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.source_handle = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.handle = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.handle = options.longs === String ? "0" : 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.wide != null && message.hasOwnProperty("wide"))
                object.wide = message.wide;
            if (message.tall != null && message.hasOwnProperty("tall"))
                object.tall = message.tall;
            if (message.source_pid != null && message.hasOwnProperty("source_pid"))
                if (typeof message.source_pid === "number")
                    object.source_pid = options.longs === String ? String(message.source_pid) : message.source_pid;
                else
                    object.source_pid = options.longs === String ? $util.Long.prototype.toString.call(message.source_pid) : options.longs === Number ? new $util.LongBits(message.source_pid.low >>> 0, message.source_pid.high >>> 0).toNumber(true) : message.source_pid;
            if (message.source_handle != null && message.hasOwnProperty("source_handle"))
                if (typeof message.source_handle === "number")
                    object.source_handle = options.longs === String ? String(message.source_handle) : message.source_handle;
                else
                    object.source_handle = options.longs === String ? $util.Long.prototype.toString.call(message.source_handle) : options.longs === Number ? new $util.LongBits(message.source_handle.low >>> 0, message.source_handle.high >>> 0).toNumber(true) : message.source_handle;
            if (message.handle != null && message.hasOwnProperty("handle"))
                if (typeof message.handle === "number")
                    object.handle = options.longs === String ? String(message.handle) : message.handle;
                else
                    object.handle = options.longs === String ? $util.Long.prototype.toString.call(message.handle) : options.longs === Number ? new $util.LongBits(message.handle.low >>> 0, message.handle.high >>> 0).toNumber(true) : message.handle;
            return object;
        };
    
        /**
         * Converts this CMsgSetSharedPaintBuffers to JSON.
         * @function toJSON
         * @memberof CMsgSetSharedPaintBuffers
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSetSharedPaintBuffers.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSetSharedPaintBuffers;
    })();
    
    $root.CMsgAckSharedPaintBuffers = (function() {
    
        /**
         * Properties of a CMsgAckSharedPaintBuffers.
         * @exports ICMsgAckSharedPaintBuffers
         * @interface ICMsgAckSharedPaintBuffers
         * @property {number|null} [browser_handle] CMsgAckSharedPaintBuffers browser_handle
         */
    
        /**
         * Constructs a new CMsgAckSharedPaintBuffers.
         * @exports CMsgAckSharedPaintBuffers
         * @classdesc Represents a CMsgAckSharedPaintBuffers.
         * @implements ICMsgAckSharedPaintBuffers
         * @constructor
         * @param {ICMsgAckSharedPaintBuffers=} [properties] Properties to set
         */
        function CMsgAckSharedPaintBuffers(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgAckSharedPaintBuffers browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgAckSharedPaintBuffers
         * @instance
         */
        CMsgAckSharedPaintBuffers.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgAckSharedPaintBuffers instance using the specified properties.
         * @function create
         * @memberof CMsgAckSharedPaintBuffers
         * @static
         * @param {ICMsgAckSharedPaintBuffers=} [properties] Properties to set
         * @returns {CMsgAckSharedPaintBuffers} CMsgAckSharedPaintBuffers instance
         */
        CMsgAckSharedPaintBuffers.create = function create(properties) {
            return new CMsgAckSharedPaintBuffers(properties);
        };
    
        /**
         * Encodes the specified CMsgAckSharedPaintBuffers message. Does not implicitly {@link CMsgAckSharedPaintBuffers.verify|verify} messages.
         * @function encode
         * @memberof CMsgAckSharedPaintBuffers
         * @static
         * @param {ICMsgAckSharedPaintBuffers} message CMsgAckSharedPaintBuffers message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAckSharedPaintBuffers.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgAckSharedPaintBuffers message, length delimited. Does not implicitly {@link CMsgAckSharedPaintBuffers.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgAckSharedPaintBuffers
         * @static
         * @param {ICMsgAckSharedPaintBuffers} message CMsgAckSharedPaintBuffers message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAckSharedPaintBuffers.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgAckSharedPaintBuffers message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgAckSharedPaintBuffers
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgAckSharedPaintBuffers} CMsgAckSharedPaintBuffers
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAckSharedPaintBuffers.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgAckSharedPaintBuffers();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgAckSharedPaintBuffers message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgAckSharedPaintBuffers
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgAckSharedPaintBuffers} CMsgAckSharedPaintBuffers
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAckSharedPaintBuffers.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgAckSharedPaintBuffers message.
         * @function verify
         * @memberof CMsgAckSharedPaintBuffers
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgAckSharedPaintBuffers.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgAckSharedPaintBuffers message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgAckSharedPaintBuffers
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgAckSharedPaintBuffers} CMsgAckSharedPaintBuffers
         */
        CMsgAckSharedPaintBuffers.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgAckSharedPaintBuffers)
                return object;
            var message = new $root.CMsgAckSharedPaintBuffers();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgAckSharedPaintBuffers message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgAckSharedPaintBuffers
         * @static
         * @param {CMsgAckSharedPaintBuffers} message CMsgAckSharedPaintBuffers
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgAckSharedPaintBuffers.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgAckSharedPaintBuffers to JSON.
         * @function toJSON
         * @memberof CMsgAckSharedPaintBuffers
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgAckSharedPaintBuffers.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgAckSharedPaintBuffers;
    })();
    
    $root.CMsgNeedsPaint = (function() {
    
        /**
         * Properties of a CMsgNeedsPaint.
         * @exports ICMsgNeedsPaint
         * @interface ICMsgNeedsPaint
         * @property {number|null} [browser_handle] CMsgNeedsPaint browser_handle
         * @property {number|null} [scrollx] CMsgNeedsPaint scrollx
         * @property {number|null} [scrolly] CMsgNeedsPaint scrolly
         * @property {number|null} [pagescale] CMsgNeedsPaint pagescale
         * @property {number|null} [pageserial] CMsgNeedsPaint pageserial
         */
    
        /**
         * Constructs a new CMsgNeedsPaint.
         * @exports CMsgNeedsPaint
         * @classdesc Represents a CMsgNeedsPaint.
         * @implements ICMsgNeedsPaint
         * @constructor
         * @param {ICMsgNeedsPaint=} [properties] Properties to set
         */
        function CMsgNeedsPaint(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgNeedsPaint browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgNeedsPaint
         * @instance
         */
        CMsgNeedsPaint.prototype.browser_handle = 0;
    
        /**
         * CMsgNeedsPaint scrollx.
         * @member {number} scrollx
         * @memberof CMsgNeedsPaint
         * @instance
         */
        CMsgNeedsPaint.prototype.scrollx = 0;
    
        /**
         * CMsgNeedsPaint scrolly.
         * @member {number} scrolly
         * @memberof CMsgNeedsPaint
         * @instance
         */
        CMsgNeedsPaint.prototype.scrolly = 0;
    
        /**
         * CMsgNeedsPaint pagescale.
         * @member {number} pagescale
         * @memberof CMsgNeedsPaint
         * @instance
         */
        CMsgNeedsPaint.prototype.pagescale = 0;
    
        /**
         * CMsgNeedsPaint pageserial.
         * @member {number} pageserial
         * @memberof CMsgNeedsPaint
         * @instance
         */
        CMsgNeedsPaint.prototype.pageserial = 0;
    
        /**
         * Creates a new CMsgNeedsPaint instance using the specified properties.
         * @function create
         * @memberof CMsgNeedsPaint
         * @static
         * @param {ICMsgNeedsPaint=} [properties] Properties to set
         * @returns {CMsgNeedsPaint} CMsgNeedsPaint instance
         */
        CMsgNeedsPaint.create = function create(properties) {
            return new CMsgNeedsPaint(properties);
        };
    
        /**
         * Encodes the specified CMsgNeedsPaint message. Does not implicitly {@link CMsgNeedsPaint.verify|verify} messages.
         * @function encode
         * @memberof CMsgNeedsPaint
         * @static
         * @param {ICMsgNeedsPaint} message CMsgNeedsPaint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgNeedsPaint.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.scrollx != null && Object.hasOwnProperty.call(message, "scrollx"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.scrollx);
            if (message.scrolly != null && Object.hasOwnProperty.call(message, "scrolly"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.scrolly);
            if (message.pagescale != null && Object.hasOwnProperty.call(message, "pagescale"))
                writer.uint32(/* id 12, wireType 5 =*/101).float(message.pagescale);
            if (message.pageserial != null && Object.hasOwnProperty.call(message, "pageserial"))
                writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.pageserial);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgNeedsPaint message, length delimited. Does not implicitly {@link CMsgNeedsPaint.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgNeedsPaint
         * @static
         * @param {ICMsgNeedsPaint} message CMsgNeedsPaint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgNeedsPaint.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgNeedsPaint message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgNeedsPaint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgNeedsPaint} CMsgNeedsPaint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgNeedsPaint.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgNeedsPaint();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 10:
                    message.scrollx = reader.uint32();
                    break;
                case 11:
                    message.scrolly = reader.uint32();
                    break;
                case 12:
                    message.pagescale = reader.float();
                    break;
                case 15:
                    message.pageserial = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgNeedsPaint message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgNeedsPaint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgNeedsPaint} CMsgNeedsPaint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgNeedsPaint.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgNeedsPaint message.
         * @function verify
         * @memberof CMsgNeedsPaint
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgNeedsPaint.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.scrollx != null && message.hasOwnProperty("scrollx"))
                if (!$util.isInteger(message.scrollx))
                    return "scrollx: integer expected";
            if (message.scrolly != null && message.hasOwnProperty("scrolly"))
                if (!$util.isInteger(message.scrolly))
                    return "scrolly: integer expected";
            if (message.pagescale != null && message.hasOwnProperty("pagescale"))
                if (typeof message.pagescale !== "number")
                    return "pagescale: number expected";
            if (message.pageserial != null && message.hasOwnProperty("pageserial"))
                if (!$util.isInteger(message.pageserial))
                    return "pageserial: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgNeedsPaint message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgNeedsPaint
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgNeedsPaint} CMsgNeedsPaint
         */
        CMsgNeedsPaint.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgNeedsPaint)
                return object;
            var message = new $root.CMsgNeedsPaint();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.scrollx != null)
                message.scrollx = object.scrollx >>> 0;
            if (object.scrolly != null)
                message.scrolly = object.scrolly >>> 0;
            if (object.pagescale != null)
                message.pagescale = Number(object.pagescale);
            if (object.pageserial != null)
                message.pageserial = object.pageserial >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgNeedsPaint message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgNeedsPaint
         * @static
         * @param {CMsgNeedsPaint} message CMsgNeedsPaint
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgNeedsPaint.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.scrollx = 0;
                object.scrolly = 0;
                object.pagescale = 0;
                object.pageserial = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.scrollx != null && message.hasOwnProperty("scrollx"))
                object.scrollx = message.scrollx;
            if (message.scrolly != null && message.hasOwnProperty("scrolly"))
                object.scrolly = message.scrolly;
            if (message.pagescale != null && message.hasOwnProperty("pagescale"))
                object.pagescale = options.json && !isFinite(message.pagescale) ? String(message.pagescale) : message.pagescale;
            if (message.pageserial != null && message.hasOwnProperty("pageserial"))
                object.pageserial = message.pageserial;
            return object;
        };
    
        /**
         * Converts this CMsgNeedsPaint to JSON.
         * @function toJSON
         * @memberof CMsgNeedsPaint
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgNeedsPaint.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgNeedsPaint;
    })();
    
    $root.CMsgComboNeedsPaint = (function() {
    
        /**
         * Properties of a CMsgComboNeedsPaint.
         * @exports ICMsgComboNeedsPaint
         * @interface ICMsgComboNeedsPaint
         * @property {number|null} [browser_handle] CMsgComboNeedsPaint browser_handle
         * @property {number|Long|null} [rgba] CMsgComboNeedsPaint rgba
         * @property {number|null} [combobox_wide] CMsgComboNeedsPaint combobox_wide
         * @property {number|null} [combobox_tall] CMsgComboNeedsPaint combobox_tall
         * @property {number|Long|null} [shared_memory_handle] CMsgComboNeedsPaint shared_memory_handle
         * @property {number|Long|null} [shared_memory_size] CMsgComboNeedsPaint shared_memory_size
         */
    
        /**
         * Constructs a new CMsgComboNeedsPaint.
         * @exports CMsgComboNeedsPaint
         * @classdesc Represents a CMsgComboNeedsPaint.
         * @implements ICMsgComboNeedsPaint
         * @constructor
         * @param {ICMsgComboNeedsPaint=} [properties] Properties to set
         */
        function CMsgComboNeedsPaint(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgComboNeedsPaint browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgComboNeedsPaint
         * @instance
         */
        CMsgComboNeedsPaint.prototype.browser_handle = 0;
    
        /**
         * CMsgComboNeedsPaint rgba.
         * @member {number|Long} rgba
         * @memberof CMsgComboNeedsPaint
         * @instance
         */
        CMsgComboNeedsPaint.prototype.rgba = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgComboNeedsPaint combobox_wide.
         * @member {number} combobox_wide
         * @memberof CMsgComboNeedsPaint
         * @instance
         */
        CMsgComboNeedsPaint.prototype.combobox_wide = 0;
    
        /**
         * CMsgComboNeedsPaint combobox_tall.
         * @member {number} combobox_tall
         * @memberof CMsgComboNeedsPaint
         * @instance
         */
        CMsgComboNeedsPaint.prototype.combobox_tall = 0;
    
        /**
         * CMsgComboNeedsPaint shared_memory_handle.
         * @member {number|Long} shared_memory_handle
         * @memberof CMsgComboNeedsPaint
         * @instance
         */
        CMsgComboNeedsPaint.prototype.shared_memory_handle = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgComboNeedsPaint shared_memory_size.
         * @member {number|Long} shared_memory_size
         * @memberof CMsgComboNeedsPaint
         * @instance
         */
        CMsgComboNeedsPaint.prototype.shared_memory_size = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CMsgComboNeedsPaint instance using the specified properties.
         * @function create
         * @memberof CMsgComboNeedsPaint
         * @static
         * @param {ICMsgComboNeedsPaint=} [properties] Properties to set
         * @returns {CMsgComboNeedsPaint} CMsgComboNeedsPaint instance
         */
        CMsgComboNeedsPaint.create = function create(properties) {
            return new CMsgComboNeedsPaint(properties);
        };
    
        /**
         * Encodes the specified CMsgComboNeedsPaint message. Does not implicitly {@link CMsgComboNeedsPaint.verify|verify} messages.
         * @function encode
         * @memberof CMsgComboNeedsPaint
         * @static
         * @param {ICMsgComboNeedsPaint} message CMsgComboNeedsPaint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgComboNeedsPaint.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.rgba != null && Object.hasOwnProperty.call(message, "rgba"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.rgba);
            if (message.combobox_wide != null && Object.hasOwnProperty.call(message, "combobox_wide"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.combobox_wide);
            if (message.combobox_tall != null && Object.hasOwnProperty.call(message, "combobox_tall"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.combobox_tall);
            if (message.shared_memory_handle != null && Object.hasOwnProperty.call(message, "shared_memory_handle"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.shared_memory_handle);
            if (message.shared_memory_size != null && Object.hasOwnProperty.call(message, "shared_memory_size"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.shared_memory_size);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgComboNeedsPaint message, length delimited. Does not implicitly {@link CMsgComboNeedsPaint.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgComboNeedsPaint
         * @static
         * @param {ICMsgComboNeedsPaint} message CMsgComboNeedsPaint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgComboNeedsPaint.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgComboNeedsPaint message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgComboNeedsPaint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgComboNeedsPaint} CMsgComboNeedsPaint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgComboNeedsPaint.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgComboNeedsPaint();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.rgba = reader.uint64();
                    break;
                case 3:
                    message.combobox_wide = reader.uint32();
                    break;
                case 4:
                    message.combobox_tall = reader.uint32();
                    break;
                case 5:
                    message.shared_memory_handle = reader.uint64();
                    break;
                case 7:
                    message.shared_memory_size = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgComboNeedsPaint message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgComboNeedsPaint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgComboNeedsPaint} CMsgComboNeedsPaint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgComboNeedsPaint.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgComboNeedsPaint message.
         * @function verify
         * @memberof CMsgComboNeedsPaint
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgComboNeedsPaint.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.rgba != null && message.hasOwnProperty("rgba"))
                if (!$util.isInteger(message.rgba) && !(message.rgba && $util.isInteger(message.rgba.low) && $util.isInteger(message.rgba.high)))
                    return "rgba: integer|Long expected";
            if (message.combobox_wide != null && message.hasOwnProperty("combobox_wide"))
                if (!$util.isInteger(message.combobox_wide))
                    return "combobox_wide: integer expected";
            if (message.combobox_tall != null && message.hasOwnProperty("combobox_tall"))
                if (!$util.isInteger(message.combobox_tall))
                    return "combobox_tall: integer expected";
            if (message.shared_memory_handle != null && message.hasOwnProperty("shared_memory_handle"))
                if (!$util.isInteger(message.shared_memory_handle) && !(message.shared_memory_handle && $util.isInteger(message.shared_memory_handle.low) && $util.isInteger(message.shared_memory_handle.high)))
                    return "shared_memory_handle: integer|Long expected";
            if (message.shared_memory_size != null && message.hasOwnProperty("shared_memory_size"))
                if (!$util.isInteger(message.shared_memory_size) && !(message.shared_memory_size && $util.isInteger(message.shared_memory_size.low) && $util.isInteger(message.shared_memory_size.high)))
                    return "shared_memory_size: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgComboNeedsPaint message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgComboNeedsPaint
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgComboNeedsPaint} CMsgComboNeedsPaint
         */
        CMsgComboNeedsPaint.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgComboNeedsPaint)
                return object;
            var message = new $root.CMsgComboNeedsPaint();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.rgba != null)
                if ($util.Long)
                    (message.rgba = $util.Long.fromValue(object.rgba)).unsigned = true;
                else if (typeof object.rgba === "string")
                    message.rgba = parseInt(object.rgba, 10);
                else if (typeof object.rgba === "number")
                    message.rgba = object.rgba;
                else if (typeof object.rgba === "object")
                    message.rgba = new $util.LongBits(object.rgba.low >>> 0, object.rgba.high >>> 0).toNumber(true);
            if (object.combobox_wide != null)
                message.combobox_wide = object.combobox_wide >>> 0;
            if (object.combobox_tall != null)
                message.combobox_tall = object.combobox_tall >>> 0;
            if (object.shared_memory_handle != null)
                if ($util.Long)
                    (message.shared_memory_handle = $util.Long.fromValue(object.shared_memory_handle)).unsigned = true;
                else if (typeof object.shared_memory_handle === "string")
                    message.shared_memory_handle = parseInt(object.shared_memory_handle, 10);
                else if (typeof object.shared_memory_handle === "number")
                    message.shared_memory_handle = object.shared_memory_handle;
                else if (typeof object.shared_memory_handle === "object")
                    message.shared_memory_handle = new $util.LongBits(object.shared_memory_handle.low >>> 0, object.shared_memory_handle.high >>> 0).toNumber(true);
            if (object.shared_memory_size != null)
                if ($util.Long)
                    (message.shared_memory_size = $util.Long.fromValue(object.shared_memory_size)).unsigned = true;
                else if (typeof object.shared_memory_size === "string")
                    message.shared_memory_size = parseInt(object.shared_memory_size, 10);
                else if (typeof object.shared_memory_size === "number")
                    message.shared_memory_size = object.shared_memory_size;
                else if (typeof object.shared_memory_size === "object")
                    message.shared_memory_size = new $util.LongBits(object.shared_memory_size.low >>> 0, object.shared_memory_size.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgComboNeedsPaint message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgComboNeedsPaint
         * @static
         * @param {CMsgComboNeedsPaint} message CMsgComboNeedsPaint
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgComboNeedsPaint.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.rgba = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.rgba = options.longs === String ? "0" : 0;
                object.combobox_wide = 0;
                object.combobox_tall = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.shared_memory_handle = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.shared_memory_handle = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.shared_memory_size = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.shared_memory_size = options.longs === String ? "0" : 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.rgba != null && message.hasOwnProperty("rgba"))
                if (typeof message.rgba === "number")
                    object.rgba = options.longs === String ? String(message.rgba) : message.rgba;
                else
                    object.rgba = options.longs === String ? $util.Long.prototype.toString.call(message.rgba) : options.longs === Number ? new $util.LongBits(message.rgba.low >>> 0, message.rgba.high >>> 0).toNumber(true) : message.rgba;
            if (message.combobox_wide != null && message.hasOwnProperty("combobox_wide"))
                object.combobox_wide = message.combobox_wide;
            if (message.combobox_tall != null && message.hasOwnProperty("combobox_tall"))
                object.combobox_tall = message.combobox_tall;
            if (message.shared_memory_handle != null && message.hasOwnProperty("shared_memory_handle"))
                if (typeof message.shared_memory_handle === "number")
                    object.shared_memory_handle = options.longs === String ? String(message.shared_memory_handle) : message.shared_memory_handle;
                else
                    object.shared_memory_handle = options.longs === String ? $util.Long.prototype.toString.call(message.shared_memory_handle) : options.longs === Number ? new $util.LongBits(message.shared_memory_handle.low >>> 0, message.shared_memory_handle.high >>> 0).toNumber(true) : message.shared_memory_handle;
            if (message.shared_memory_size != null && message.hasOwnProperty("shared_memory_size"))
                if (typeof message.shared_memory_size === "number")
                    object.shared_memory_size = options.longs === String ? String(message.shared_memory_size) : message.shared_memory_size;
                else
                    object.shared_memory_size = options.longs === String ? $util.Long.prototype.toString.call(message.shared_memory_size) : options.longs === Number ? new $util.LongBits(message.shared_memory_size.low >>> 0, message.shared_memory_size.high >>> 0).toNumber(true) : message.shared_memory_size;
            return object;
        };
    
        /**
         * Converts this CMsgComboNeedsPaint to JSON.
         * @function toJSON
         * @memberof CMsgComboNeedsPaint
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgComboNeedsPaint.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgComboNeedsPaint;
    })();
    
    $root.CMsgNeedsSharedTexturePaint = (function() {
    
        /**
         * Properties of a CMsgNeedsSharedTexturePaint.
         * @exports ICMsgNeedsSharedTexturePaint
         * @interface ICMsgNeedsSharedTexturePaint
         * @property {number|null} [browser_handle] CMsgNeedsSharedTexturePaint browser_handle
         * @property {number|null} [share_handle] CMsgNeedsSharedTexturePaint share_handle
         * @property {number|null} [width] CMsgNeedsSharedTexturePaint width
         * @property {number|null} [height] CMsgNeedsSharedTexturePaint height
         * @property {number|null} [scrollx] CMsgNeedsSharedTexturePaint scrollx
         * @property {number|null} [scrolly] CMsgNeedsSharedTexturePaint scrolly
         * @property {number|null} [pagescale] CMsgNeedsSharedTexturePaint pagescale
         * @property {number|null} [pageserial] CMsgNeedsSharedTexturePaint pageserial
         */
    
        /**
         * Constructs a new CMsgNeedsSharedTexturePaint.
         * @exports CMsgNeedsSharedTexturePaint
         * @classdesc Represents a CMsgNeedsSharedTexturePaint.
         * @implements ICMsgNeedsSharedTexturePaint
         * @constructor
         * @param {ICMsgNeedsSharedTexturePaint=} [properties] Properties to set
         */
        function CMsgNeedsSharedTexturePaint(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgNeedsSharedTexturePaint browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgNeedsSharedTexturePaint
         * @instance
         */
        CMsgNeedsSharedTexturePaint.prototype.browser_handle = 0;
    
        /**
         * CMsgNeedsSharedTexturePaint share_handle.
         * @member {number} share_handle
         * @memberof CMsgNeedsSharedTexturePaint
         * @instance
         */
        CMsgNeedsSharedTexturePaint.prototype.share_handle = 0;
    
        /**
         * CMsgNeedsSharedTexturePaint width.
         * @member {number} width
         * @memberof CMsgNeedsSharedTexturePaint
         * @instance
         */
        CMsgNeedsSharedTexturePaint.prototype.width = 0;
    
        /**
         * CMsgNeedsSharedTexturePaint height.
         * @member {number} height
         * @memberof CMsgNeedsSharedTexturePaint
         * @instance
         */
        CMsgNeedsSharedTexturePaint.prototype.height = 0;
    
        /**
         * CMsgNeedsSharedTexturePaint scrollx.
         * @member {number} scrollx
         * @memberof CMsgNeedsSharedTexturePaint
         * @instance
         */
        CMsgNeedsSharedTexturePaint.prototype.scrollx = 0;
    
        /**
         * CMsgNeedsSharedTexturePaint scrolly.
         * @member {number} scrolly
         * @memberof CMsgNeedsSharedTexturePaint
         * @instance
         */
        CMsgNeedsSharedTexturePaint.prototype.scrolly = 0;
    
        /**
         * CMsgNeedsSharedTexturePaint pagescale.
         * @member {number} pagescale
         * @memberof CMsgNeedsSharedTexturePaint
         * @instance
         */
        CMsgNeedsSharedTexturePaint.prototype.pagescale = 0;
    
        /**
         * CMsgNeedsSharedTexturePaint pageserial.
         * @member {number} pageserial
         * @memberof CMsgNeedsSharedTexturePaint
         * @instance
         */
        CMsgNeedsSharedTexturePaint.prototype.pageserial = 0;
    
        /**
         * Creates a new CMsgNeedsSharedTexturePaint instance using the specified properties.
         * @function create
         * @memberof CMsgNeedsSharedTexturePaint
         * @static
         * @param {ICMsgNeedsSharedTexturePaint=} [properties] Properties to set
         * @returns {CMsgNeedsSharedTexturePaint} CMsgNeedsSharedTexturePaint instance
         */
        CMsgNeedsSharedTexturePaint.create = function create(properties) {
            return new CMsgNeedsSharedTexturePaint(properties);
        };
    
        /**
         * Encodes the specified CMsgNeedsSharedTexturePaint message. Does not implicitly {@link CMsgNeedsSharedTexturePaint.verify|verify} messages.
         * @function encode
         * @memberof CMsgNeedsSharedTexturePaint
         * @static
         * @param {ICMsgNeedsSharedTexturePaint} message CMsgNeedsSharedTexturePaint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgNeedsSharedTexturePaint.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.share_handle != null && Object.hasOwnProperty.call(message, "share_handle"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.share_handle);
            if (message.width != null && Object.hasOwnProperty.call(message, "width"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.width);
            if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.height);
            if (message.scrollx != null && Object.hasOwnProperty.call(message, "scrollx"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.scrollx);
            if (message.scrolly != null && Object.hasOwnProperty.call(message, "scrolly"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.scrolly);
            if (message.pagescale != null && Object.hasOwnProperty.call(message, "pagescale"))
                writer.uint32(/* id 7, wireType 5 =*/61).float(message.pagescale);
            if (message.pageserial != null && Object.hasOwnProperty.call(message, "pageserial"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.pageserial);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgNeedsSharedTexturePaint message, length delimited. Does not implicitly {@link CMsgNeedsSharedTexturePaint.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgNeedsSharedTexturePaint
         * @static
         * @param {ICMsgNeedsSharedTexturePaint} message CMsgNeedsSharedTexturePaint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgNeedsSharedTexturePaint.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgNeedsSharedTexturePaint message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgNeedsSharedTexturePaint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgNeedsSharedTexturePaint} CMsgNeedsSharedTexturePaint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgNeedsSharedTexturePaint.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgNeedsSharedTexturePaint();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.share_handle = reader.uint32();
                    break;
                case 3:
                    message.width = reader.uint32();
                    break;
                case 4:
                    message.height = reader.uint32();
                    break;
                case 5:
                    message.scrollx = reader.uint32();
                    break;
                case 6:
                    message.scrolly = reader.uint32();
                    break;
                case 7:
                    message.pagescale = reader.float();
                    break;
                case 8:
                    message.pageserial = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgNeedsSharedTexturePaint message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgNeedsSharedTexturePaint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgNeedsSharedTexturePaint} CMsgNeedsSharedTexturePaint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgNeedsSharedTexturePaint.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgNeedsSharedTexturePaint message.
         * @function verify
         * @memberof CMsgNeedsSharedTexturePaint
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgNeedsSharedTexturePaint.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.share_handle != null && message.hasOwnProperty("share_handle"))
                if (!$util.isInteger(message.share_handle))
                    return "share_handle: integer expected";
            if (message.width != null && message.hasOwnProperty("width"))
                if (!$util.isInteger(message.width))
                    return "width: integer expected";
            if (message.height != null && message.hasOwnProperty("height"))
                if (!$util.isInteger(message.height))
                    return "height: integer expected";
            if (message.scrollx != null && message.hasOwnProperty("scrollx"))
                if (!$util.isInteger(message.scrollx))
                    return "scrollx: integer expected";
            if (message.scrolly != null && message.hasOwnProperty("scrolly"))
                if (!$util.isInteger(message.scrolly))
                    return "scrolly: integer expected";
            if (message.pagescale != null && message.hasOwnProperty("pagescale"))
                if (typeof message.pagescale !== "number")
                    return "pagescale: number expected";
            if (message.pageserial != null && message.hasOwnProperty("pageserial"))
                if (!$util.isInteger(message.pageserial))
                    return "pageserial: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgNeedsSharedTexturePaint message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgNeedsSharedTexturePaint
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgNeedsSharedTexturePaint} CMsgNeedsSharedTexturePaint
         */
        CMsgNeedsSharedTexturePaint.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgNeedsSharedTexturePaint)
                return object;
            var message = new $root.CMsgNeedsSharedTexturePaint();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.share_handle != null)
                message.share_handle = object.share_handle >>> 0;
            if (object.width != null)
                message.width = object.width >>> 0;
            if (object.height != null)
                message.height = object.height >>> 0;
            if (object.scrollx != null)
                message.scrollx = object.scrollx >>> 0;
            if (object.scrolly != null)
                message.scrolly = object.scrolly >>> 0;
            if (object.pagescale != null)
                message.pagescale = Number(object.pagescale);
            if (object.pageserial != null)
                message.pageserial = object.pageserial >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgNeedsSharedTexturePaint message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgNeedsSharedTexturePaint
         * @static
         * @param {CMsgNeedsSharedTexturePaint} message CMsgNeedsSharedTexturePaint
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgNeedsSharedTexturePaint.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.share_handle = 0;
                object.width = 0;
                object.height = 0;
                object.scrollx = 0;
                object.scrolly = 0;
                object.pagescale = 0;
                object.pageserial = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.share_handle != null && message.hasOwnProperty("share_handle"))
                object.share_handle = message.share_handle;
            if (message.width != null && message.hasOwnProperty("width"))
                object.width = message.width;
            if (message.height != null && message.hasOwnProperty("height"))
                object.height = message.height;
            if (message.scrollx != null && message.hasOwnProperty("scrollx"))
                object.scrollx = message.scrollx;
            if (message.scrolly != null && message.hasOwnProperty("scrolly"))
                object.scrolly = message.scrolly;
            if (message.pagescale != null && message.hasOwnProperty("pagescale"))
                object.pagescale = options.json && !isFinite(message.pagescale) ? String(message.pagescale) : message.pagescale;
            if (message.pageserial != null && message.hasOwnProperty("pageserial"))
                object.pageserial = message.pageserial;
            return object;
        };
    
        /**
         * Converts this CMsgNeedsSharedTexturePaint to JSON.
         * @function toJSON
         * @memberof CMsgNeedsSharedTexturePaint
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgNeedsSharedTexturePaint.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgNeedsSharedTexturePaint;
    })();
    
    $root.CMsgGameOverlayTexturePaint = (function() {
    
        /**
         * Properties of a CMsgGameOverlayTexturePaint.
         * @exports ICMsgGameOverlayTexturePaint
         * @interface ICMsgGameOverlayTexturePaint
         * @property {number|null} [browser_handle] CMsgGameOverlayTexturePaint browser_handle
         * @property {number|null} [width] CMsgGameOverlayTexturePaint width
         * @property {number|null} [height] CMsgGameOverlayTexturePaint height
         * @property {number|null} [scrollx] CMsgGameOverlayTexturePaint scrollx
         * @property {number|null} [scrolly] CMsgGameOverlayTexturePaint scrolly
         * @property {number|null} [pagescale] CMsgGameOverlayTexturePaint pagescale
         * @property {number|null} [pageserial] CMsgGameOverlayTexturePaint pageserial
         */
    
        /**
         * Constructs a new CMsgGameOverlayTexturePaint.
         * @exports CMsgGameOverlayTexturePaint
         * @classdesc Represents a CMsgGameOverlayTexturePaint.
         * @implements ICMsgGameOverlayTexturePaint
         * @constructor
         * @param {ICMsgGameOverlayTexturePaint=} [properties] Properties to set
         */
        function CMsgGameOverlayTexturePaint(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGameOverlayTexturePaint browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgGameOverlayTexturePaint
         * @instance
         */
        CMsgGameOverlayTexturePaint.prototype.browser_handle = 0;
    
        /**
         * CMsgGameOverlayTexturePaint width.
         * @member {number} width
         * @memberof CMsgGameOverlayTexturePaint
         * @instance
         */
        CMsgGameOverlayTexturePaint.prototype.width = 0;
    
        /**
         * CMsgGameOverlayTexturePaint height.
         * @member {number} height
         * @memberof CMsgGameOverlayTexturePaint
         * @instance
         */
        CMsgGameOverlayTexturePaint.prototype.height = 0;
    
        /**
         * CMsgGameOverlayTexturePaint scrollx.
         * @member {number} scrollx
         * @memberof CMsgGameOverlayTexturePaint
         * @instance
         */
        CMsgGameOverlayTexturePaint.prototype.scrollx = 0;
    
        /**
         * CMsgGameOverlayTexturePaint scrolly.
         * @member {number} scrolly
         * @memberof CMsgGameOverlayTexturePaint
         * @instance
         */
        CMsgGameOverlayTexturePaint.prototype.scrolly = 0;
    
        /**
         * CMsgGameOverlayTexturePaint pagescale.
         * @member {number} pagescale
         * @memberof CMsgGameOverlayTexturePaint
         * @instance
         */
        CMsgGameOverlayTexturePaint.prototype.pagescale = 0;
    
        /**
         * CMsgGameOverlayTexturePaint pageserial.
         * @member {number} pageserial
         * @memberof CMsgGameOverlayTexturePaint
         * @instance
         */
        CMsgGameOverlayTexturePaint.prototype.pageserial = 0;
    
        /**
         * Creates a new CMsgGameOverlayTexturePaint instance using the specified properties.
         * @function create
         * @memberof CMsgGameOverlayTexturePaint
         * @static
         * @param {ICMsgGameOverlayTexturePaint=} [properties] Properties to set
         * @returns {CMsgGameOverlayTexturePaint} CMsgGameOverlayTexturePaint instance
         */
        CMsgGameOverlayTexturePaint.create = function create(properties) {
            return new CMsgGameOverlayTexturePaint(properties);
        };
    
        /**
         * Encodes the specified CMsgGameOverlayTexturePaint message. Does not implicitly {@link CMsgGameOverlayTexturePaint.verify|verify} messages.
         * @function encode
         * @memberof CMsgGameOverlayTexturePaint
         * @static
         * @param {ICMsgGameOverlayTexturePaint} message CMsgGameOverlayTexturePaint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGameOverlayTexturePaint.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.width != null && Object.hasOwnProperty.call(message, "width"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.width);
            if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.height);
            if (message.scrollx != null && Object.hasOwnProperty.call(message, "scrollx"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.scrollx);
            if (message.scrolly != null && Object.hasOwnProperty.call(message, "scrolly"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.scrolly);
            if (message.pagescale != null && Object.hasOwnProperty.call(message, "pagescale"))
                writer.uint32(/* id 7, wireType 5 =*/61).float(message.pagescale);
            if (message.pageserial != null && Object.hasOwnProperty.call(message, "pageserial"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.pageserial);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGameOverlayTexturePaint message, length delimited. Does not implicitly {@link CMsgGameOverlayTexturePaint.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGameOverlayTexturePaint
         * @static
         * @param {ICMsgGameOverlayTexturePaint} message CMsgGameOverlayTexturePaint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGameOverlayTexturePaint.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGameOverlayTexturePaint message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGameOverlayTexturePaint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGameOverlayTexturePaint} CMsgGameOverlayTexturePaint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGameOverlayTexturePaint.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGameOverlayTexturePaint();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 3:
                    message.width = reader.uint32();
                    break;
                case 4:
                    message.height = reader.uint32();
                    break;
                case 5:
                    message.scrollx = reader.uint32();
                    break;
                case 6:
                    message.scrolly = reader.uint32();
                    break;
                case 7:
                    message.pagescale = reader.float();
                    break;
                case 8:
                    message.pageserial = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGameOverlayTexturePaint message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGameOverlayTexturePaint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGameOverlayTexturePaint} CMsgGameOverlayTexturePaint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGameOverlayTexturePaint.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGameOverlayTexturePaint message.
         * @function verify
         * @memberof CMsgGameOverlayTexturePaint
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGameOverlayTexturePaint.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.width != null && message.hasOwnProperty("width"))
                if (!$util.isInteger(message.width))
                    return "width: integer expected";
            if (message.height != null && message.hasOwnProperty("height"))
                if (!$util.isInteger(message.height))
                    return "height: integer expected";
            if (message.scrollx != null && message.hasOwnProperty("scrollx"))
                if (!$util.isInteger(message.scrollx))
                    return "scrollx: integer expected";
            if (message.scrolly != null && message.hasOwnProperty("scrolly"))
                if (!$util.isInteger(message.scrolly))
                    return "scrolly: integer expected";
            if (message.pagescale != null && message.hasOwnProperty("pagescale"))
                if (typeof message.pagescale !== "number")
                    return "pagescale: number expected";
            if (message.pageserial != null && message.hasOwnProperty("pageserial"))
                if (!$util.isInteger(message.pageserial))
                    return "pageserial: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGameOverlayTexturePaint message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGameOverlayTexturePaint
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGameOverlayTexturePaint} CMsgGameOverlayTexturePaint
         */
        CMsgGameOverlayTexturePaint.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGameOverlayTexturePaint)
                return object;
            var message = new $root.CMsgGameOverlayTexturePaint();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.width != null)
                message.width = object.width >>> 0;
            if (object.height != null)
                message.height = object.height >>> 0;
            if (object.scrollx != null)
                message.scrollx = object.scrollx >>> 0;
            if (object.scrolly != null)
                message.scrolly = object.scrolly >>> 0;
            if (object.pagescale != null)
                message.pagescale = Number(object.pagescale);
            if (object.pageserial != null)
                message.pageserial = object.pageserial >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGameOverlayTexturePaint message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGameOverlayTexturePaint
         * @static
         * @param {CMsgGameOverlayTexturePaint} message CMsgGameOverlayTexturePaint
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGameOverlayTexturePaint.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.width = 0;
                object.height = 0;
                object.scrollx = 0;
                object.scrolly = 0;
                object.pagescale = 0;
                object.pageserial = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.width != null && message.hasOwnProperty("width"))
                object.width = message.width;
            if (message.height != null && message.hasOwnProperty("height"))
                object.height = message.height;
            if (message.scrollx != null && message.hasOwnProperty("scrollx"))
                object.scrollx = message.scrollx;
            if (message.scrolly != null && message.hasOwnProperty("scrolly"))
                object.scrolly = message.scrolly;
            if (message.pagescale != null && message.hasOwnProperty("pagescale"))
                object.pagescale = options.json && !isFinite(message.pagescale) ? String(message.pagescale) : message.pagescale;
            if (message.pageserial != null && message.hasOwnProperty("pageserial"))
                object.pageserial = message.pageserial;
            return object;
        };
    
        /**
         * Converts this CMsgGameOverlayTexturePaint to JSON.
         * @function toJSON
         * @memberof CMsgGameOverlayTexturePaint
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGameOverlayTexturePaint.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGameOverlayTexturePaint;
    })();
    
    $root.CMsgGetZoom = (function() {
    
        /**
         * Properties of a CMsgGetZoom.
         * @exports ICMsgGetZoom
         * @interface ICMsgGetZoom
         * @property {number|null} [browser_handle] CMsgGetZoom browser_handle
         */
    
        /**
         * Constructs a new CMsgGetZoom.
         * @exports CMsgGetZoom
         * @classdesc Represents a CMsgGetZoom.
         * @implements ICMsgGetZoom
         * @constructor
         * @param {ICMsgGetZoom=} [properties] Properties to set
         */
        function CMsgGetZoom(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGetZoom browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgGetZoom
         * @instance
         */
        CMsgGetZoom.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgGetZoom instance using the specified properties.
         * @function create
         * @memberof CMsgGetZoom
         * @static
         * @param {ICMsgGetZoom=} [properties] Properties to set
         * @returns {CMsgGetZoom} CMsgGetZoom instance
         */
        CMsgGetZoom.create = function create(properties) {
            return new CMsgGetZoom(properties);
        };
    
        /**
         * Encodes the specified CMsgGetZoom message. Does not implicitly {@link CMsgGetZoom.verify|verify} messages.
         * @function encode
         * @memberof CMsgGetZoom
         * @static
         * @param {ICMsgGetZoom} message CMsgGetZoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGetZoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGetZoom message, length delimited. Does not implicitly {@link CMsgGetZoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGetZoom
         * @static
         * @param {ICMsgGetZoom} message CMsgGetZoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGetZoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGetZoom message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGetZoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGetZoom} CMsgGetZoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGetZoom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGetZoom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGetZoom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGetZoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGetZoom} CMsgGetZoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGetZoom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGetZoom message.
         * @function verify
         * @memberof CMsgGetZoom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGetZoom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGetZoom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGetZoom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGetZoom} CMsgGetZoom
         */
        CMsgGetZoom.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGetZoom)
                return object;
            var message = new $root.CMsgGetZoom();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGetZoom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGetZoom
         * @static
         * @param {CMsgGetZoom} message CMsgGetZoom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGetZoom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgGetZoom to JSON.
         * @function toJSON
         * @memberof CMsgGetZoom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGetZoom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGetZoom;
    })();
    
    $root.CMsgGetZoomResponse = (function() {
    
        /**
         * Properties of a CMsgGetZoomResponse.
         * @exports ICMsgGetZoomResponse
         * @interface ICMsgGetZoomResponse
         * @property {number|null} [browser_handle] CMsgGetZoomResponse browser_handle
         * @property {number|null} [zoom] CMsgGetZoomResponse zoom
         */
    
        /**
         * Constructs a new CMsgGetZoomResponse.
         * @exports CMsgGetZoomResponse
         * @classdesc Represents a CMsgGetZoomResponse.
         * @implements ICMsgGetZoomResponse
         * @constructor
         * @param {ICMsgGetZoomResponse=} [properties] Properties to set
         */
        function CMsgGetZoomResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGetZoomResponse browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgGetZoomResponse
         * @instance
         */
        CMsgGetZoomResponse.prototype.browser_handle = 0;
    
        /**
         * CMsgGetZoomResponse zoom.
         * @member {number} zoom
         * @memberof CMsgGetZoomResponse
         * @instance
         */
        CMsgGetZoomResponse.prototype.zoom = 0;
    
        /**
         * Creates a new CMsgGetZoomResponse instance using the specified properties.
         * @function create
         * @memberof CMsgGetZoomResponse
         * @static
         * @param {ICMsgGetZoomResponse=} [properties] Properties to set
         * @returns {CMsgGetZoomResponse} CMsgGetZoomResponse instance
         */
        CMsgGetZoomResponse.create = function create(properties) {
            return new CMsgGetZoomResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgGetZoomResponse message. Does not implicitly {@link CMsgGetZoomResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgGetZoomResponse
         * @static
         * @param {ICMsgGetZoomResponse} message CMsgGetZoomResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGetZoomResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.zoom != null && Object.hasOwnProperty.call(message, "zoom"))
                writer.uint32(/* id 2, wireType 5 =*/21).float(message.zoom);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGetZoomResponse message, length delimited. Does not implicitly {@link CMsgGetZoomResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGetZoomResponse
         * @static
         * @param {ICMsgGetZoomResponse} message CMsgGetZoomResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGetZoomResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGetZoomResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGetZoomResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGetZoomResponse} CMsgGetZoomResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGetZoomResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGetZoomResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.zoom = reader.float();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGetZoomResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGetZoomResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGetZoomResponse} CMsgGetZoomResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGetZoomResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGetZoomResponse message.
         * @function verify
         * @memberof CMsgGetZoomResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGetZoomResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.zoom != null && message.hasOwnProperty("zoom"))
                if (typeof message.zoom !== "number")
                    return "zoom: number expected";
            return null;
        };
    
        /**
         * Creates a CMsgGetZoomResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGetZoomResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGetZoomResponse} CMsgGetZoomResponse
         */
        CMsgGetZoomResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGetZoomResponse)
                return object;
            var message = new $root.CMsgGetZoomResponse();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.zoom != null)
                message.zoom = Number(object.zoom);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGetZoomResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGetZoomResponse
         * @static
         * @param {CMsgGetZoomResponse} message CMsgGetZoomResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGetZoomResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.zoom = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.zoom != null && message.hasOwnProperty("zoom"))
                object.zoom = options.json && !isFinite(message.zoom) ? String(message.zoom) : message.zoom;
            return object;
        };
    
        /**
         * Converts this CMsgGetZoomResponse to JSON.
         * @function toJSON
         * @memberof CMsgGetZoomResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGetZoomResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGetZoomResponse;
    })();
    
    $root.CMsgLinkAtPosition = (function() {
    
        /**
         * Properties of a CMsgLinkAtPosition.
         * @exports ICMsgLinkAtPosition
         * @interface ICMsgLinkAtPosition
         * @property {number|null} [browser_handle] CMsgLinkAtPosition browser_handle
         * @property {number|null} [x] CMsgLinkAtPosition x
         * @property {number|null} [y] CMsgLinkAtPosition y
         */
    
        /**
         * Constructs a new CMsgLinkAtPosition.
         * @exports CMsgLinkAtPosition
         * @classdesc Represents a CMsgLinkAtPosition.
         * @implements ICMsgLinkAtPosition
         * @constructor
         * @param {ICMsgLinkAtPosition=} [properties] Properties to set
         */
        function CMsgLinkAtPosition(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgLinkAtPosition browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgLinkAtPosition
         * @instance
         */
        CMsgLinkAtPosition.prototype.browser_handle = 0;
    
        /**
         * CMsgLinkAtPosition x.
         * @member {number} x
         * @memberof CMsgLinkAtPosition
         * @instance
         */
        CMsgLinkAtPosition.prototype.x = 0;
    
        /**
         * CMsgLinkAtPosition y.
         * @member {number} y
         * @memberof CMsgLinkAtPosition
         * @instance
         */
        CMsgLinkAtPosition.prototype.y = 0;
    
        /**
         * Creates a new CMsgLinkAtPosition instance using the specified properties.
         * @function create
         * @memberof CMsgLinkAtPosition
         * @static
         * @param {ICMsgLinkAtPosition=} [properties] Properties to set
         * @returns {CMsgLinkAtPosition} CMsgLinkAtPosition instance
         */
        CMsgLinkAtPosition.create = function create(properties) {
            return new CMsgLinkAtPosition(properties);
        };
    
        /**
         * Encodes the specified CMsgLinkAtPosition message. Does not implicitly {@link CMsgLinkAtPosition.verify|verify} messages.
         * @function encode
         * @memberof CMsgLinkAtPosition
         * @static
         * @param {ICMsgLinkAtPosition} message CMsgLinkAtPosition message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgLinkAtPosition.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.x != null && Object.hasOwnProperty.call(message, "x"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.x);
            if (message.y != null && Object.hasOwnProperty.call(message, "y"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.y);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgLinkAtPosition message, length delimited. Does not implicitly {@link CMsgLinkAtPosition.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgLinkAtPosition
         * @static
         * @param {ICMsgLinkAtPosition} message CMsgLinkAtPosition message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgLinkAtPosition.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgLinkAtPosition message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgLinkAtPosition
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgLinkAtPosition} CMsgLinkAtPosition
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgLinkAtPosition.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgLinkAtPosition();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.x = reader.uint32();
                    break;
                case 3:
                    message.y = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgLinkAtPosition message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgLinkAtPosition
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgLinkAtPosition} CMsgLinkAtPosition
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgLinkAtPosition.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgLinkAtPosition message.
         * @function verify
         * @memberof CMsgLinkAtPosition
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgLinkAtPosition.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.x != null && message.hasOwnProperty("x"))
                if (!$util.isInteger(message.x))
                    return "x: integer expected";
            if (message.y != null && message.hasOwnProperty("y"))
                if (!$util.isInteger(message.y))
                    return "y: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgLinkAtPosition message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgLinkAtPosition
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgLinkAtPosition} CMsgLinkAtPosition
         */
        CMsgLinkAtPosition.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgLinkAtPosition)
                return object;
            var message = new $root.CMsgLinkAtPosition();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.x != null)
                message.x = object.x >>> 0;
            if (object.y != null)
                message.y = object.y >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgLinkAtPosition message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgLinkAtPosition
         * @static
         * @param {CMsgLinkAtPosition} message CMsgLinkAtPosition
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgLinkAtPosition.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.x = 0;
                object.y = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.x != null && message.hasOwnProperty("x"))
                object.x = message.x;
            if (message.y != null && message.hasOwnProperty("y"))
                object.y = message.y;
            return object;
        };
    
        /**
         * Converts this CMsgLinkAtPosition to JSON.
         * @function toJSON
         * @memberof CMsgLinkAtPosition
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgLinkAtPosition.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgLinkAtPosition;
    })();
    
    $root.CMsgLinkAtPositionResponse = (function() {
    
        /**
         * Properties of a CMsgLinkAtPositionResponse.
         * @exports ICMsgLinkAtPositionResponse
         * @interface ICMsgLinkAtPositionResponse
         * @property {number|null} [browser_handle] CMsgLinkAtPositionResponse browser_handle
         * @property {number|null} [x] CMsgLinkAtPositionResponse x
         * @property {number|null} [y] CMsgLinkAtPositionResponse y
         * @property {string|null} [url] CMsgLinkAtPositionResponse url
         * @property {boolean|null} [blivelink] CMsgLinkAtPositionResponse blivelink
         * @property {boolean|null} [binput] CMsgLinkAtPositionResponse binput
         */
    
        /**
         * Constructs a new CMsgLinkAtPositionResponse.
         * @exports CMsgLinkAtPositionResponse
         * @classdesc Represents a CMsgLinkAtPositionResponse.
         * @implements ICMsgLinkAtPositionResponse
         * @constructor
         * @param {ICMsgLinkAtPositionResponse=} [properties] Properties to set
         */
        function CMsgLinkAtPositionResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgLinkAtPositionResponse browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgLinkAtPositionResponse
         * @instance
         */
        CMsgLinkAtPositionResponse.prototype.browser_handle = 0;
    
        /**
         * CMsgLinkAtPositionResponse x.
         * @member {number} x
         * @memberof CMsgLinkAtPositionResponse
         * @instance
         */
        CMsgLinkAtPositionResponse.prototype.x = 0;
    
        /**
         * CMsgLinkAtPositionResponse y.
         * @member {number} y
         * @memberof CMsgLinkAtPositionResponse
         * @instance
         */
        CMsgLinkAtPositionResponse.prototype.y = 0;
    
        /**
         * CMsgLinkAtPositionResponse url.
         * @member {string} url
         * @memberof CMsgLinkAtPositionResponse
         * @instance
         */
        CMsgLinkAtPositionResponse.prototype.url = "";
    
        /**
         * CMsgLinkAtPositionResponse blivelink.
         * @member {boolean} blivelink
         * @memberof CMsgLinkAtPositionResponse
         * @instance
         */
        CMsgLinkAtPositionResponse.prototype.blivelink = false;
    
        /**
         * CMsgLinkAtPositionResponse binput.
         * @member {boolean} binput
         * @memberof CMsgLinkAtPositionResponse
         * @instance
         */
        CMsgLinkAtPositionResponse.prototype.binput = false;
    
        /**
         * Creates a new CMsgLinkAtPositionResponse instance using the specified properties.
         * @function create
         * @memberof CMsgLinkAtPositionResponse
         * @static
         * @param {ICMsgLinkAtPositionResponse=} [properties] Properties to set
         * @returns {CMsgLinkAtPositionResponse} CMsgLinkAtPositionResponse instance
         */
        CMsgLinkAtPositionResponse.create = function create(properties) {
            return new CMsgLinkAtPositionResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgLinkAtPositionResponse message. Does not implicitly {@link CMsgLinkAtPositionResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgLinkAtPositionResponse
         * @static
         * @param {ICMsgLinkAtPositionResponse} message CMsgLinkAtPositionResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgLinkAtPositionResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.x != null && Object.hasOwnProperty.call(message, "x"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.x);
            if (message.y != null && Object.hasOwnProperty.call(message, "y"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.y);
            if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.url);
            if (message.blivelink != null && Object.hasOwnProperty.call(message, "blivelink"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.blivelink);
            if (message.binput != null && Object.hasOwnProperty.call(message, "binput"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.binput);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgLinkAtPositionResponse message, length delimited. Does not implicitly {@link CMsgLinkAtPositionResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgLinkAtPositionResponse
         * @static
         * @param {ICMsgLinkAtPositionResponse} message CMsgLinkAtPositionResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgLinkAtPositionResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgLinkAtPositionResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgLinkAtPositionResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgLinkAtPositionResponse} CMsgLinkAtPositionResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgLinkAtPositionResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgLinkAtPositionResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.x = reader.uint32();
                    break;
                case 3:
                    message.y = reader.uint32();
                    break;
                case 4:
                    message.url = reader.string();
                    break;
                case 5:
                    message.blivelink = reader.bool();
                    break;
                case 6:
                    message.binput = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgLinkAtPositionResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgLinkAtPositionResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgLinkAtPositionResponse} CMsgLinkAtPositionResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgLinkAtPositionResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgLinkAtPositionResponse message.
         * @function verify
         * @memberof CMsgLinkAtPositionResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgLinkAtPositionResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.x != null && message.hasOwnProperty("x"))
                if (!$util.isInteger(message.x))
                    return "x: integer expected";
            if (message.y != null && message.hasOwnProperty("y"))
                if (!$util.isInteger(message.y))
                    return "y: integer expected";
            if (message.url != null && message.hasOwnProperty("url"))
                if (!$util.isString(message.url))
                    return "url: string expected";
            if (message.blivelink != null && message.hasOwnProperty("blivelink"))
                if (typeof message.blivelink !== "boolean")
                    return "blivelink: boolean expected";
            if (message.binput != null && message.hasOwnProperty("binput"))
                if (typeof message.binput !== "boolean")
                    return "binput: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgLinkAtPositionResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgLinkAtPositionResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgLinkAtPositionResponse} CMsgLinkAtPositionResponse
         */
        CMsgLinkAtPositionResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgLinkAtPositionResponse)
                return object;
            var message = new $root.CMsgLinkAtPositionResponse();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.x != null)
                message.x = object.x >>> 0;
            if (object.y != null)
                message.y = object.y >>> 0;
            if (object.url != null)
                message.url = String(object.url);
            if (object.blivelink != null)
                message.blivelink = Boolean(object.blivelink);
            if (object.binput != null)
                message.binput = Boolean(object.binput);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgLinkAtPositionResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgLinkAtPositionResponse
         * @static
         * @param {CMsgLinkAtPositionResponse} message CMsgLinkAtPositionResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgLinkAtPositionResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.x = 0;
                object.y = 0;
                object.url = "";
                object.blivelink = false;
                object.binput = false;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.x != null && message.hasOwnProperty("x"))
                object.x = message.x;
            if (message.y != null && message.hasOwnProperty("y"))
                object.y = message.y;
            if (message.url != null && message.hasOwnProperty("url"))
                object.url = message.url;
            if (message.blivelink != null && message.hasOwnProperty("blivelink"))
                object.blivelink = message.blivelink;
            if (message.binput != null && message.hasOwnProperty("binput"))
                object.binput = message.binput;
            return object;
        };
    
        /**
         * Converts this CMsgLinkAtPositionResponse to JSON.
         * @function toJSON
         * @memberof CMsgLinkAtPositionResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgLinkAtPositionResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgLinkAtPositionResponse;
    })();
    
    $root.CMsgZoomToElementAtPosition = (function() {
    
        /**
         * Properties of a CMsgZoomToElementAtPosition.
         * @exports ICMsgZoomToElementAtPosition
         * @interface ICMsgZoomToElementAtPosition
         * @property {number|null} [browser_handle] CMsgZoomToElementAtPosition browser_handle
         * @property {number|null} [x] CMsgZoomToElementAtPosition x
         * @property {number|null} [y] CMsgZoomToElementAtPosition y
         */
    
        /**
         * Constructs a new CMsgZoomToElementAtPosition.
         * @exports CMsgZoomToElementAtPosition
         * @classdesc Represents a CMsgZoomToElementAtPosition.
         * @implements ICMsgZoomToElementAtPosition
         * @constructor
         * @param {ICMsgZoomToElementAtPosition=} [properties] Properties to set
         */
        function CMsgZoomToElementAtPosition(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgZoomToElementAtPosition browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgZoomToElementAtPosition
         * @instance
         */
        CMsgZoomToElementAtPosition.prototype.browser_handle = 0;
    
        /**
         * CMsgZoomToElementAtPosition x.
         * @member {number} x
         * @memberof CMsgZoomToElementAtPosition
         * @instance
         */
        CMsgZoomToElementAtPosition.prototype.x = 0;
    
        /**
         * CMsgZoomToElementAtPosition y.
         * @member {number} y
         * @memberof CMsgZoomToElementAtPosition
         * @instance
         */
        CMsgZoomToElementAtPosition.prototype.y = 0;
    
        /**
         * Creates a new CMsgZoomToElementAtPosition instance using the specified properties.
         * @function create
         * @memberof CMsgZoomToElementAtPosition
         * @static
         * @param {ICMsgZoomToElementAtPosition=} [properties] Properties to set
         * @returns {CMsgZoomToElementAtPosition} CMsgZoomToElementAtPosition instance
         */
        CMsgZoomToElementAtPosition.create = function create(properties) {
            return new CMsgZoomToElementAtPosition(properties);
        };
    
        /**
         * Encodes the specified CMsgZoomToElementAtPosition message. Does not implicitly {@link CMsgZoomToElementAtPosition.verify|verify} messages.
         * @function encode
         * @memberof CMsgZoomToElementAtPosition
         * @static
         * @param {ICMsgZoomToElementAtPosition} message CMsgZoomToElementAtPosition message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgZoomToElementAtPosition.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.x != null && Object.hasOwnProperty.call(message, "x"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.x);
            if (message.y != null && Object.hasOwnProperty.call(message, "y"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.y);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgZoomToElementAtPosition message, length delimited. Does not implicitly {@link CMsgZoomToElementAtPosition.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgZoomToElementAtPosition
         * @static
         * @param {ICMsgZoomToElementAtPosition} message CMsgZoomToElementAtPosition message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgZoomToElementAtPosition.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgZoomToElementAtPosition message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgZoomToElementAtPosition
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgZoomToElementAtPosition} CMsgZoomToElementAtPosition
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgZoomToElementAtPosition.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgZoomToElementAtPosition();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.x = reader.uint32();
                    break;
                case 3:
                    message.y = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgZoomToElementAtPosition message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgZoomToElementAtPosition
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgZoomToElementAtPosition} CMsgZoomToElementAtPosition
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgZoomToElementAtPosition.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgZoomToElementAtPosition message.
         * @function verify
         * @memberof CMsgZoomToElementAtPosition
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgZoomToElementAtPosition.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.x != null && message.hasOwnProperty("x"))
                if (!$util.isInteger(message.x))
                    return "x: integer expected";
            if (message.y != null && message.hasOwnProperty("y"))
                if (!$util.isInteger(message.y))
                    return "y: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgZoomToElementAtPosition message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgZoomToElementAtPosition
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgZoomToElementAtPosition} CMsgZoomToElementAtPosition
         */
        CMsgZoomToElementAtPosition.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgZoomToElementAtPosition)
                return object;
            var message = new $root.CMsgZoomToElementAtPosition();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.x != null)
                message.x = object.x >>> 0;
            if (object.y != null)
                message.y = object.y >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgZoomToElementAtPosition message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgZoomToElementAtPosition
         * @static
         * @param {CMsgZoomToElementAtPosition} message CMsgZoomToElementAtPosition
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgZoomToElementAtPosition.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.x = 0;
                object.y = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.x != null && message.hasOwnProperty("x"))
                object.x = message.x;
            if (message.y != null && message.hasOwnProperty("y"))
                object.y = message.y;
            return object;
        };
    
        /**
         * Converts this CMsgZoomToElementAtPosition to JSON.
         * @function toJSON
         * @memberof CMsgZoomToElementAtPosition
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgZoomToElementAtPosition.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgZoomToElementAtPosition;
    })();
    
    $root.CMsgZoomToElementAtPositionResponse = (function() {
    
        /**
         * Properties of a CMsgZoomToElementAtPositionResponse.
         * @exports ICMsgZoomToElementAtPositionResponse
         * @interface ICMsgZoomToElementAtPositionResponse
         * @property {number|null} [browser_handle] CMsgZoomToElementAtPositionResponse browser_handle
         * @property {number|null} [scale] CMsgZoomToElementAtPositionResponse scale
         * @property {number|null} [duration] CMsgZoomToElementAtPositionResponse duration
         */
    
        /**
         * Constructs a new CMsgZoomToElementAtPositionResponse.
         * @exports CMsgZoomToElementAtPositionResponse
         * @classdesc Represents a CMsgZoomToElementAtPositionResponse.
         * @implements ICMsgZoomToElementAtPositionResponse
         * @constructor
         * @param {ICMsgZoomToElementAtPositionResponse=} [properties] Properties to set
         */
        function CMsgZoomToElementAtPositionResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgZoomToElementAtPositionResponse browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgZoomToElementAtPositionResponse
         * @instance
         */
        CMsgZoomToElementAtPositionResponse.prototype.browser_handle = 0;
    
        /**
         * CMsgZoomToElementAtPositionResponse scale.
         * @member {number} scale
         * @memberof CMsgZoomToElementAtPositionResponse
         * @instance
         */
        CMsgZoomToElementAtPositionResponse.prototype.scale = 0;
    
        /**
         * CMsgZoomToElementAtPositionResponse duration.
         * @member {number} duration
         * @memberof CMsgZoomToElementAtPositionResponse
         * @instance
         */
        CMsgZoomToElementAtPositionResponse.prototype.duration = 0;
    
        /**
         * Creates a new CMsgZoomToElementAtPositionResponse instance using the specified properties.
         * @function create
         * @memberof CMsgZoomToElementAtPositionResponse
         * @static
         * @param {ICMsgZoomToElementAtPositionResponse=} [properties] Properties to set
         * @returns {CMsgZoomToElementAtPositionResponse} CMsgZoomToElementAtPositionResponse instance
         */
        CMsgZoomToElementAtPositionResponse.create = function create(properties) {
            return new CMsgZoomToElementAtPositionResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgZoomToElementAtPositionResponse message. Does not implicitly {@link CMsgZoomToElementAtPositionResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgZoomToElementAtPositionResponse
         * @static
         * @param {ICMsgZoomToElementAtPositionResponse} message CMsgZoomToElementAtPositionResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgZoomToElementAtPositionResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.scale != null && Object.hasOwnProperty.call(message, "scale"))
                writer.uint32(/* id 2, wireType 5 =*/21).float(message.scale);
            if (message.duration != null && Object.hasOwnProperty.call(message, "duration"))
                writer.uint32(/* id 3, wireType 5 =*/29).float(message.duration);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgZoomToElementAtPositionResponse message, length delimited. Does not implicitly {@link CMsgZoomToElementAtPositionResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgZoomToElementAtPositionResponse
         * @static
         * @param {ICMsgZoomToElementAtPositionResponse} message CMsgZoomToElementAtPositionResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgZoomToElementAtPositionResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgZoomToElementAtPositionResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgZoomToElementAtPositionResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgZoomToElementAtPositionResponse} CMsgZoomToElementAtPositionResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgZoomToElementAtPositionResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgZoomToElementAtPositionResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.scale = reader.float();
                    break;
                case 3:
                    message.duration = reader.float();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgZoomToElementAtPositionResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgZoomToElementAtPositionResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgZoomToElementAtPositionResponse} CMsgZoomToElementAtPositionResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgZoomToElementAtPositionResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgZoomToElementAtPositionResponse message.
         * @function verify
         * @memberof CMsgZoomToElementAtPositionResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgZoomToElementAtPositionResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.scale != null && message.hasOwnProperty("scale"))
                if (typeof message.scale !== "number")
                    return "scale: number expected";
            if (message.duration != null && message.hasOwnProperty("duration"))
                if (typeof message.duration !== "number")
                    return "duration: number expected";
            return null;
        };
    
        /**
         * Creates a CMsgZoomToElementAtPositionResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgZoomToElementAtPositionResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgZoomToElementAtPositionResponse} CMsgZoomToElementAtPositionResponse
         */
        CMsgZoomToElementAtPositionResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgZoomToElementAtPositionResponse)
                return object;
            var message = new $root.CMsgZoomToElementAtPositionResponse();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.scale != null)
                message.scale = Number(object.scale);
            if (object.duration != null)
                message.duration = Number(object.duration);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgZoomToElementAtPositionResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgZoomToElementAtPositionResponse
         * @static
         * @param {CMsgZoomToElementAtPositionResponse} message CMsgZoomToElementAtPositionResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgZoomToElementAtPositionResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.scale = 0;
                object.duration = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.scale != null && message.hasOwnProperty("scale"))
                object.scale = options.json && !isFinite(message.scale) ? String(message.scale) : message.scale;
            if (message.duration != null && message.hasOwnProperty("duration"))
                object.duration = options.json && !isFinite(message.duration) ? String(message.duration) : message.duration;
            return object;
        };
    
        /**
         * Converts this CMsgZoomToElementAtPositionResponse to JSON.
         * @function toJSON
         * @memberof CMsgZoomToElementAtPositionResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgZoomToElementAtPositionResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgZoomToElementAtPositionResponse;
    })();
    
    $root.CMsgScalePageToValue = (function() {
    
        /**
         * Properties of a CMsgScalePageToValue.
         * @exports ICMsgScalePageToValue
         * @interface ICMsgScalePageToValue
         * @property {number|null} [browser_handle] CMsgScalePageToValue browser_handle
         * @property {number|null} [scale] CMsgScalePageToValue scale
         * @property {number|null} [x] CMsgScalePageToValue x
         * @property {number|null} [y] CMsgScalePageToValue y
         */
    
        /**
         * Constructs a new CMsgScalePageToValue.
         * @exports CMsgScalePageToValue
         * @classdesc Represents a CMsgScalePageToValue.
         * @implements ICMsgScalePageToValue
         * @constructor
         * @param {ICMsgScalePageToValue=} [properties] Properties to set
         */
        function CMsgScalePageToValue(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgScalePageToValue browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgScalePageToValue
         * @instance
         */
        CMsgScalePageToValue.prototype.browser_handle = 0;
    
        /**
         * CMsgScalePageToValue scale.
         * @member {number} scale
         * @memberof CMsgScalePageToValue
         * @instance
         */
        CMsgScalePageToValue.prototype.scale = 0;
    
        /**
         * CMsgScalePageToValue x.
         * @member {number} x
         * @memberof CMsgScalePageToValue
         * @instance
         */
        CMsgScalePageToValue.prototype.x = 0;
    
        /**
         * CMsgScalePageToValue y.
         * @member {number} y
         * @memberof CMsgScalePageToValue
         * @instance
         */
        CMsgScalePageToValue.prototype.y = 0;
    
        /**
         * Creates a new CMsgScalePageToValue instance using the specified properties.
         * @function create
         * @memberof CMsgScalePageToValue
         * @static
         * @param {ICMsgScalePageToValue=} [properties] Properties to set
         * @returns {CMsgScalePageToValue} CMsgScalePageToValue instance
         */
        CMsgScalePageToValue.create = function create(properties) {
            return new CMsgScalePageToValue(properties);
        };
    
        /**
         * Encodes the specified CMsgScalePageToValue message. Does not implicitly {@link CMsgScalePageToValue.verify|verify} messages.
         * @function encode
         * @memberof CMsgScalePageToValue
         * @static
         * @param {ICMsgScalePageToValue} message CMsgScalePageToValue message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgScalePageToValue.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.scale != null && Object.hasOwnProperty.call(message, "scale"))
                writer.uint32(/* id 2, wireType 5 =*/21).float(message.scale);
            if (message.x != null && Object.hasOwnProperty.call(message, "x"))
                writer.uint32(/* id 3, wireType 5 =*/29).float(message.x);
            if (message.y != null && Object.hasOwnProperty.call(message, "y"))
                writer.uint32(/* id 4, wireType 5 =*/37).float(message.y);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgScalePageToValue message, length delimited. Does not implicitly {@link CMsgScalePageToValue.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgScalePageToValue
         * @static
         * @param {ICMsgScalePageToValue} message CMsgScalePageToValue message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgScalePageToValue.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgScalePageToValue message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgScalePageToValue
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgScalePageToValue} CMsgScalePageToValue
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgScalePageToValue.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgScalePageToValue();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.scale = reader.float();
                    break;
                case 3:
                    message.x = reader.float();
                    break;
                case 4:
                    message.y = reader.float();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgScalePageToValue message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgScalePageToValue
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgScalePageToValue} CMsgScalePageToValue
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgScalePageToValue.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgScalePageToValue message.
         * @function verify
         * @memberof CMsgScalePageToValue
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgScalePageToValue.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.scale != null && message.hasOwnProperty("scale"))
                if (typeof message.scale !== "number")
                    return "scale: number expected";
            if (message.x != null && message.hasOwnProperty("x"))
                if (typeof message.x !== "number")
                    return "x: number expected";
            if (message.y != null && message.hasOwnProperty("y"))
                if (typeof message.y !== "number")
                    return "y: number expected";
            return null;
        };
    
        /**
         * Creates a CMsgScalePageToValue message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgScalePageToValue
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgScalePageToValue} CMsgScalePageToValue
         */
        CMsgScalePageToValue.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgScalePageToValue)
                return object;
            var message = new $root.CMsgScalePageToValue();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.scale != null)
                message.scale = Number(object.scale);
            if (object.x != null)
                message.x = Number(object.x);
            if (object.y != null)
                message.y = Number(object.y);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgScalePageToValue message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgScalePageToValue
         * @static
         * @param {CMsgScalePageToValue} message CMsgScalePageToValue
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgScalePageToValue.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.scale = 0;
                object.x = 0;
                object.y = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.scale != null && message.hasOwnProperty("scale"))
                object.scale = options.json && !isFinite(message.scale) ? String(message.scale) : message.scale;
            if (message.x != null && message.hasOwnProperty("x"))
                object.x = options.json && !isFinite(message.x) ? String(message.x) : message.x;
            if (message.y != null && message.hasOwnProperty("y"))
                object.y = options.json && !isFinite(message.y) ? String(message.y) : message.y;
            return object;
        };
    
        /**
         * Converts this CMsgScalePageToValue to JSON.
         * @function toJSON
         * @memberof CMsgScalePageToValue
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgScalePageToValue.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgScalePageToValue;
    })();
    
    $root.CMsgForcePopupsToDirectHWND = (function() {
    
        /**
         * Properties of a CMsgForcePopupsToDirectHWND.
         * @exports ICMsgForcePopupsToDirectHWND
         * @interface ICMsgForcePopupsToDirectHWND
         * @property {number|null} [browser_handle] CMsgForcePopupsToDirectHWND browser_handle
         * @property {boolean|null} [force_direct_hwnd_popups] CMsgForcePopupsToDirectHWND force_direct_hwnd_popups
         */
    
        /**
         * Constructs a new CMsgForcePopupsToDirectHWND.
         * @exports CMsgForcePopupsToDirectHWND
         * @classdesc Represents a CMsgForcePopupsToDirectHWND.
         * @implements ICMsgForcePopupsToDirectHWND
         * @constructor
         * @param {ICMsgForcePopupsToDirectHWND=} [properties] Properties to set
         */
        function CMsgForcePopupsToDirectHWND(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgForcePopupsToDirectHWND browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgForcePopupsToDirectHWND
         * @instance
         */
        CMsgForcePopupsToDirectHWND.prototype.browser_handle = 0;
    
        /**
         * CMsgForcePopupsToDirectHWND force_direct_hwnd_popups.
         * @member {boolean} force_direct_hwnd_popups
         * @memberof CMsgForcePopupsToDirectHWND
         * @instance
         */
        CMsgForcePopupsToDirectHWND.prototype.force_direct_hwnd_popups = false;
    
        /**
         * Creates a new CMsgForcePopupsToDirectHWND instance using the specified properties.
         * @function create
         * @memberof CMsgForcePopupsToDirectHWND
         * @static
         * @param {ICMsgForcePopupsToDirectHWND=} [properties] Properties to set
         * @returns {CMsgForcePopupsToDirectHWND} CMsgForcePopupsToDirectHWND instance
         */
        CMsgForcePopupsToDirectHWND.create = function create(properties) {
            return new CMsgForcePopupsToDirectHWND(properties);
        };
    
        /**
         * Encodes the specified CMsgForcePopupsToDirectHWND message. Does not implicitly {@link CMsgForcePopupsToDirectHWND.verify|verify} messages.
         * @function encode
         * @memberof CMsgForcePopupsToDirectHWND
         * @static
         * @param {ICMsgForcePopupsToDirectHWND} message CMsgForcePopupsToDirectHWND message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgForcePopupsToDirectHWND.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.force_direct_hwnd_popups != null && Object.hasOwnProperty.call(message, "force_direct_hwnd_popups"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.force_direct_hwnd_popups);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgForcePopupsToDirectHWND message, length delimited. Does not implicitly {@link CMsgForcePopupsToDirectHWND.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgForcePopupsToDirectHWND
         * @static
         * @param {ICMsgForcePopupsToDirectHWND} message CMsgForcePopupsToDirectHWND message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgForcePopupsToDirectHWND.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgForcePopupsToDirectHWND message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgForcePopupsToDirectHWND
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgForcePopupsToDirectHWND} CMsgForcePopupsToDirectHWND
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgForcePopupsToDirectHWND.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgForcePopupsToDirectHWND();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.force_direct_hwnd_popups = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgForcePopupsToDirectHWND message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgForcePopupsToDirectHWND
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgForcePopupsToDirectHWND} CMsgForcePopupsToDirectHWND
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgForcePopupsToDirectHWND.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgForcePopupsToDirectHWND message.
         * @function verify
         * @memberof CMsgForcePopupsToDirectHWND
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgForcePopupsToDirectHWND.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.force_direct_hwnd_popups != null && message.hasOwnProperty("force_direct_hwnd_popups"))
                if (typeof message.force_direct_hwnd_popups !== "boolean")
                    return "force_direct_hwnd_popups: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgForcePopupsToDirectHWND message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgForcePopupsToDirectHWND
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgForcePopupsToDirectHWND} CMsgForcePopupsToDirectHWND
         */
        CMsgForcePopupsToDirectHWND.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgForcePopupsToDirectHWND)
                return object;
            var message = new $root.CMsgForcePopupsToDirectHWND();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.force_direct_hwnd_popups != null)
                message.force_direct_hwnd_popups = Boolean(object.force_direct_hwnd_popups);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgForcePopupsToDirectHWND message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgForcePopupsToDirectHWND
         * @static
         * @param {CMsgForcePopupsToDirectHWND} message CMsgForcePopupsToDirectHWND
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgForcePopupsToDirectHWND.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.force_direct_hwnd_popups = false;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.force_direct_hwnd_popups != null && message.hasOwnProperty("force_direct_hwnd_popups"))
                object.force_direct_hwnd_popups = message.force_direct_hwnd_popups;
            return object;
        };
    
        /**
         * Converts this CMsgForcePopupsToDirectHWND to JSON.
         * @function toJSON
         * @memberof CMsgForcePopupsToDirectHWND
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgForcePopupsToDirectHWND.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgForcePopupsToDirectHWND;
    })();
    
    $root.CMsgScalePageToValueResponse = (function() {
    
        /**
         * Properties of a CMsgScalePageToValueResponse.
         * @exports ICMsgScalePageToValueResponse
         * @interface ICMsgScalePageToValueResponse
         * @property {number|null} [browser_handle] CMsgScalePageToValueResponse browser_handle
         * @property {number|null} [zoom] CMsgScalePageToValueResponse zoom
         */
    
        /**
         * Constructs a new CMsgScalePageToValueResponse.
         * @exports CMsgScalePageToValueResponse
         * @classdesc Represents a CMsgScalePageToValueResponse.
         * @implements ICMsgScalePageToValueResponse
         * @constructor
         * @param {ICMsgScalePageToValueResponse=} [properties] Properties to set
         */
        function CMsgScalePageToValueResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgScalePageToValueResponse browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgScalePageToValueResponse
         * @instance
         */
        CMsgScalePageToValueResponse.prototype.browser_handle = 0;
    
        /**
         * CMsgScalePageToValueResponse zoom.
         * @member {number} zoom
         * @memberof CMsgScalePageToValueResponse
         * @instance
         */
        CMsgScalePageToValueResponse.prototype.zoom = 0;
    
        /**
         * Creates a new CMsgScalePageToValueResponse instance using the specified properties.
         * @function create
         * @memberof CMsgScalePageToValueResponse
         * @static
         * @param {ICMsgScalePageToValueResponse=} [properties] Properties to set
         * @returns {CMsgScalePageToValueResponse} CMsgScalePageToValueResponse instance
         */
        CMsgScalePageToValueResponse.create = function create(properties) {
            return new CMsgScalePageToValueResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgScalePageToValueResponse message. Does not implicitly {@link CMsgScalePageToValueResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgScalePageToValueResponse
         * @static
         * @param {ICMsgScalePageToValueResponse} message CMsgScalePageToValueResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgScalePageToValueResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.zoom != null && Object.hasOwnProperty.call(message, "zoom"))
                writer.uint32(/* id 2, wireType 5 =*/21).float(message.zoom);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgScalePageToValueResponse message, length delimited. Does not implicitly {@link CMsgScalePageToValueResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgScalePageToValueResponse
         * @static
         * @param {ICMsgScalePageToValueResponse} message CMsgScalePageToValueResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgScalePageToValueResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgScalePageToValueResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgScalePageToValueResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgScalePageToValueResponse} CMsgScalePageToValueResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgScalePageToValueResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgScalePageToValueResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.zoom = reader.float();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgScalePageToValueResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgScalePageToValueResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgScalePageToValueResponse} CMsgScalePageToValueResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgScalePageToValueResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgScalePageToValueResponse message.
         * @function verify
         * @memberof CMsgScalePageToValueResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgScalePageToValueResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.zoom != null && message.hasOwnProperty("zoom"))
                if (typeof message.zoom !== "number")
                    return "zoom: number expected";
            return null;
        };
    
        /**
         * Creates a CMsgScalePageToValueResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgScalePageToValueResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgScalePageToValueResponse} CMsgScalePageToValueResponse
         */
        CMsgScalePageToValueResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgScalePageToValueResponse)
                return object;
            var message = new $root.CMsgScalePageToValueResponse();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.zoom != null)
                message.zoom = Number(object.zoom);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgScalePageToValueResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgScalePageToValueResponse
         * @static
         * @param {CMsgScalePageToValueResponse} message CMsgScalePageToValueResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgScalePageToValueResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.zoom = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.zoom != null && message.hasOwnProperty("zoom"))
                object.zoom = options.json && !isFinite(message.zoom) ? String(message.zoom) : message.zoom;
            return object;
        };
    
        /**
         * Converts this CMsgScalePageToValueResponse to JSON.
         * @function toJSON
         * @memberof CMsgScalePageToValueResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgScalePageToValueResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgScalePageToValueResponse;
    })();
    
    $root.CMsgSavePageToJPEG = (function() {
    
        /**
         * Properties of a CMsgSavePageToJPEG.
         * @exports ICMsgSavePageToJPEG
         * @interface ICMsgSavePageToJPEG
         * @property {number|null} [browser_handle] CMsgSavePageToJPEG browser_handle
         * @property {string|null} [url] CMsgSavePageToJPEG url
         * @property {string|null} [filename] CMsgSavePageToJPEG filename
         * @property {number|null} [width] CMsgSavePageToJPEG width
         * @property {number|null} [height] CMsgSavePageToJPEG height
         */
    
        /**
         * Constructs a new CMsgSavePageToJPEG.
         * @exports CMsgSavePageToJPEG
         * @classdesc Represents a CMsgSavePageToJPEG.
         * @implements ICMsgSavePageToJPEG
         * @constructor
         * @param {ICMsgSavePageToJPEG=} [properties] Properties to set
         */
        function CMsgSavePageToJPEG(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSavePageToJPEG browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgSavePageToJPEG
         * @instance
         */
        CMsgSavePageToJPEG.prototype.browser_handle = 0;
    
        /**
         * CMsgSavePageToJPEG url.
         * @member {string} url
         * @memberof CMsgSavePageToJPEG
         * @instance
         */
        CMsgSavePageToJPEG.prototype.url = "";
    
        /**
         * CMsgSavePageToJPEG filename.
         * @member {string} filename
         * @memberof CMsgSavePageToJPEG
         * @instance
         */
        CMsgSavePageToJPEG.prototype.filename = "";
    
        /**
         * CMsgSavePageToJPEG width.
         * @member {number} width
         * @memberof CMsgSavePageToJPEG
         * @instance
         */
        CMsgSavePageToJPEG.prototype.width = 0;
    
        /**
         * CMsgSavePageToJPEG height.
         * @member {number} height
         * @memberof CMsgSavePageToJPEG
         * @instance
         */
        CMsgSavePageToJPEG.prototype.height = 0;
    
        /**
         * Creates a new CMsgSavePageToJPEG instance using the specified properties.
         * @function create
         * @memberof CMsgSavePageToJPEG
         * @static
         * @param {ICMsgSavePageToJPEG=} [properties] Properties to set
         * @returns {CMsgSavePageToJPEG} CMsgSavePageToJPEG instance
         */
        CMsgSavePageToJPEG.create = function create(properties) {
            return new CMsgSavePageToJPEG(properties);
        };
    
        /**
         * Encodes the specified CMsgSavePageToJPEG message. Does not implicitly {@link CMsgSavePageToJPEG.verify|verify} messages.
         * @function encode
         * @memberof CMsgSavePageToJPEG
         * @static
         * @param {ICMsgSavePageToJPEG} message CMsgSavePageToJPEG message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSavePageToJPEG.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);
            if (message.filename != null && Object.hasOwnProperty.call(message, "filename"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.filename);
            if (message.width != null && Object.hasOwnProperty.call(message, "width"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.width);
            if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.height);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSavePageToJPEG message, length delimited. Does not implicitly {@link CMsgSavePageToJPEG.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSavePageToJPEG
         * @static
         * @param {ICMsgSavePageToJPEG} message CMsgSavePageToJPEG message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSavePageToJPEG.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSavePageToJPEG message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSavePageToJPEG
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSavePageToJPEG} CMsgSavePageToJPEG
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSavePageToJPEG.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSavePageToJPEG();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.url = reader.string();
                    break;
                case 3:
                    message.filename = reader.string();
                    break;
                case 4:
                    message.width = reader.uint32();
                    break;
                case 5:
                    message.height = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSavePageToJPEG message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSavePageToJPEG
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSavePageToJPEG} CMsgSavePageToJPEG
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSavePageToJPEG.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSavePageToJPEG message.
         * @function verify
         * @memberof CMsgSavePageToJPEG
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSavePageToJPEG.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.url != null && message.hasOwnProperty("url"))
                if (!$util.isString(message.url))
                    return "url: string expected";
            if (message.filename != null && message.hasOwnProperty("filename"))
                if (!$util.isString(message.filename))
                    return "filename: string expected";
            if (message.width != null && message.hasOwnProperty("width"))
                if (!$util.isInteger(message.width))
                    return "width: integer expected";
            if (message.height != null && message.hasOwnProperty("height"))
                if (!$util.isInteger(message.height))
                    return "height: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSavePageToJPEG message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSavePageToJPEG
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSavePageToJPEG} CMsgSavePageToJPEG
         */
        CMsgSavePageToJPEG.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSavePageToJPEG)
                return object;
            var message = new $root.CMsgSavePageToJPEG();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.url != null)
                message.url = String(object.url);
            if (object.filename != null)
                message.filename = String(object.filename);
            if (object.width != null)
                message.width = object.width >>> 0;
            if (object.height != null)
                message.height = object.height >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSavePageToJPEG message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSavePageToJPEG
         * @static
         * @param {CMsgSavePageToJPEG} message CMsgSavePageToJPEG
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSavePageToJPEG.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.url = "";
                object.filename = "";
                object.width = 0;
                object.height = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.url != null && message.hasOwnProperty("url"))
                object.url = message.url;
            if (message.filename != null && message.hasOwnProperty("filename"))
                object.filename = message.filename;
            if (message.width != null && message.hasOwnProperty("width"))
                object.width = message.width;
            if (message.height != null && message.hasOwnProperty("height"))
                object.height = message.height;
            return object;
        };
    
        /**
         * Converts this CMsgSavePageToJPEG to JSON.
         * @function toJSON
         * @memberof CMsgSavePageToJPEG
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSavePageToJPEG.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSavePageToJPEG;
    })();
    
    $root.CMsgSavePageToJPEGResponse = (function() {
    
        /**
         * Properties of a CMsgSavePageToJPEGResponse.
         * @exports ICMsgSavePageToJPEGResponse
         * @interface ICMsgSavePageToJPEGResponse
         * @property {number|null} [browser_handle] CMsgSavePageToJPEGResponse browser_handle
         * @property {string|null} [url] CMsgSavePageToJPEGResponse url
         * @property {string|null} [filename] CMsgSavePageToJPEGResponse filename
         */
    
        /**
         * Constructs a new CMsgSavePageToJPEGResponse.
         * @exports CMsgSavePageToJPEGResponse
         * @classdesc Represents a CMsgSavePageToJPEGResponse.
         * @implements ICMsgSavePageToJPEGResponse
         * @constructor
         * @param {ICMsgSavePageToJPEGResponse=} [properties] Properties to set
         */
        function CMsgSavePageToJPEGResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSavePageToJPEGResponse browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgSavePageToJPEGResponse
         * @instance
         */
        CMsgSavePageToJPEGResponse.prototype.browser_handle = 0;
    
        /**
         * CMsgSavePageToJPEGResponse url.
         * @member {string} url
         * @memberof CMsgSavePageToJPEGResponse
         * @instance
         */
        CMsgSavePageToJPEGResponse.prototype.url = "";
    
        /**
         * CMsgSavePageToJPEGResponse filename.
         * @member {string} filename
         * @memberof CMsgSavePageToJPEGResponse
         * @instance
         */
        CMsgSavePageToJPEGResponse.prototype.filename = "";
    
        /**
         * Creates a new CMsgSavePageToJPEGResponse instance using the specified properties.
         * @function create
         * @memberof CMsgSavePageToJPEGResponse
         * @static
         * @param {ICMsgSavePageToJPEGResponse=} [properties] Properties to set
         * @returns {CMsgSavePageToJPEGResponse} CMsgSavePageToJPEGResponse instance
         */
        CMsgSavePageToJPEGResponse.create = function create(properties) {
            return new CMsgSavePageToJPEGResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgSavePageToJPEGResponse message. Does not implicitly {@link CMsgSavePageToJPEGResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgSavePageToJPEGResponse
         * @static
         * @param {ICMsgSavePageToJPEGResponse} message CMsgSavePageToJPEGResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSavePageToJPEGResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);
            if (message.filename != null && Object.hasOwnProperty.call(message, "filename"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.filename);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSavePageToJPEGResponse message, length delimited. Does not implicitly {@link CMsgSavePageToJPEGResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSavePageToJPEGResponse
         * @static
         * @param {ICMsgSavePageToJPEGResponse} message CMsgSavePageToJPEGResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSavePageToJPEGResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSavePageToJPEGResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSavePageToJPEGResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSavePageToJPEGResponse} CMsgSavePageToJPEGResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSavePageToJPEGResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSavePageToJPEGResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.url = reader.string();
                    break;
                case 3:
                    message.filename = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSavePageToJPEGResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSavePageToJPEGResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSavePageToJPEGResponse} CMsgSavePageToJPEGResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSavePageToJPEGResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSavePageToJPEGResponse message.
         * @function verify
         * @memberof CMsgSavePageToJPEGResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSavePageToJPEGResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.url != null && message.hasOwnProperty("url"))
                if (!$util.isString(message.url))
                    return "url: string expected";
            if (message.filename != null && message.hasOwnProperty("filename"))
                if (!$util.isString(message.filename))
                    return "filename: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgSavePageToJPEGResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSavePageToJPEGResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSavePageToJPEGResponse} CMsgSavePageToJPEGResponse
         */
        CMsgSavePageToJPEGResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSavePageToJPEGResponse)
                return object;
            var message = new $root.CMsgSavePageToJPEGResponse();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.url != null)
                message.url = String(object.url);
            if (object.filename != null)
                message.filename = String(object.filename);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSavePageToJPEGResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSavePageToJPEGResponse
         * @static
         * @param {CMsgSavePageToJPEGResponse} message CMsgSavePageToJPEGResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSavePageToJPEGResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.url = "";
                object.filename = "";
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.url != null && message.hasOwnProperty("url"))
                object.url = message.url;
            if (message.filename != null && message.hasOwnProperty("filename"))
                object.filename = message.filename;
            return object;
        };
    
        /**
         * Converts this CMsgSavePageToJPEGResponse to JSON.
         * @function toJSON
         * @memberof CMsgSavePageToJPEGResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSavePageToJPEGResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSavePageToJPEGResponse;
    })();
    
    $root.CMsgJSAlert = (function() {
    
        /**
         * Properties of a CMsgJSAlert.
         * @exports ICMsgJSAlert
         * @interface ICMsgJSAlert
         * @property {number|null} [browser_handle] CMsgJSAlert browser_handle
         * @property {string|null} [message] CMsgJSAlert message
         */
    
        /**
         * Constructs a new CMsgJSAlert.
         * @exports CMsgJSAlert
         * @classdesc Represents a CMsgJSAlert.
         * @implements ICMsgJSAlert
         * @constructor
         * @param {ICMsgJSAlert=} [properties] Properties to set
         */
        function CMsgJSAlert(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgJSAlert browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgJSAlert
         * @instance
         */
        CMsgJSAlert.prototype.browser_handle = 0;
    
        /**
         * CMsgJSAlert message.
         * @member {string} message
         * @memberof CMsgJSAlert
         * @instance
         */
        CMsgJSAlert.prototype.message = "";
    
        /**
         * Creates a new CMsgJSAlert instance using the specified properties.
         * @function create
         * @memberof CMsgJSAlert
         * @static
         * @param {ICMsgJSAlert=} [properties] Properties to set
         * @returns {CMsgJSAlert} CMsgJSAlert instance
         */
        CMsgJSAlert.create = function create(properties) {
            return new CMsgJSAlert(properties);
        };
    
        /**
         * Encodes the specified CMsgJSAlert message. Does not implicitly {@link CMsgJSAlert.verify|verify} messages.
         * @function encode
         * @memberof CMsgJSAlert
         * @static
         * @param {ICMsgJSAlert} message CMsgJSAlert message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgJSAlert.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgJSAlert message, length delimited. Does not implicitly {@link CMsgJSAlert.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgJSAlert
         * @static
         * @param {ICMsgJSAlert} message CMsgJSAlert message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgJSAlert.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgJSAlert message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgJSAlert
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgJSAlert} CMsgJSAlert
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgJSAlert.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgJSAlert();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.message = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgJSAlert message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgJSAlert
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgJSAlert} CMsgJSAlert
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgJSAlert.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgJSAlert message.
         * @function verify
         * @memberof CMsgJSAlert
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgJSAlert.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.message != null && message.hasOwnProperty("message"))
                if (!$util.isString(message.message))
                    return "message: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgJSAlert message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgJSAlert
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgJSAlert} CMsgJSAlert
         */
        CMsgJSAlert.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgJSAlert)
                return object;
            var message = new $root.CMsgJSAlert();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.message != null)
                message.message = String(object.message);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgJSAlert message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgJSAlert
         * @static
         * @param {CMsgJSAlert} message CMsgJSAlert
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgJSAlert.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.message = "";
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.message != null && message.hasOwnProperty("message"))
                object.message = message.message;
            return object;
        };
    
        /**
         * Converts this CMsgJSAlert to JSON.
         * @function toJSON
         * @memberof CMsgJSAlert
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgJSAlert.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgJSAlert;
    })();
    
    $root.CMsgJSConfirm = (function() {
    
        /**
         * Properties of a CMsgJSConfirm.
         * @exports ICMsgJSConfirm
         * @interface ICMsgJSConfirm
         * @property {number|null} [browser_handle] CMsgJSConfirm browser_handle
         * @property {string|null} [message] CMsgJSConfirm message
         */
    
        /**
         * Constructs a new CMsgJSConfirm.
         * @exports CMsgJSConfirm
         * @classdesc Represents a CMsgJSConfirm.
         * @implements ICMsgJSConfirm
         * @constructor
         * @param {ICMsgJSConfirm=} [properties] Properties to set
         */
        function CMsgJSConfirm(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgJSConfirm browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgJSConfirm
         * @instance
         */
        CMsgJSConfirm.prototype.browser_handle = 0;
    
        /**
         * CMsgJSConfirm message.
         * @member {string} message
         * @memberof CMsgJSConfirm
         * @instance
         */
        CMsgJSConfirm.prototype.message = "";
    
        /**
         * Creates a new CMsgJSConfirm instance using the specified properties.
         * @function create
         * @memberof CMsgJSConfirm
         * @static
         * @param {ICMsgJSConfirm=} [properties] Properties to set
         * @returns {CMsgJSConfirm} CMsgJSConfirm instance
         */
        CMsgJSConfirm.create = function create(properties) {
            return new CMsgJSConfirm(properties);
        };
    
        /**
         * Encodes the specified CMsgJSConfirm message. Does not implicitly {@link CMsgJSConfirm.verify|verify} messages.
         * @function encode
         * @memberof CMsgJSConfirm
         * @static
         * @param {ICMsgJSConfirm} message CMsgJSConfirm message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgJSConfirm.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgJSConfirm message, length delimited. Does not implicitly {@link CMsgJSConfirm.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgJSConfirm
         * @static
         * @param {ICMsgJSConfirm} message CMsgJSConfirm message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgJSConfirm.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgJSConfirm message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgJSConfirm
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgJSConfirm} CMsgJSConfirm
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgJSConfirm.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgJSConfirm();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.message = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgJSConfirm message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgJSConfirm
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgJSConfirm} CMsgJSConfirm
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgJSConfirm.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgJSConfirm message.
         * @function verify
         * @memberof CMsgJSConfirm
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgJSConfirm.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.message != null && message.hasOwnProperty("message"))
                if (!$util.isString(message.message))
                    return "message: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgJSConfirm message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgJSConfirm
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgJSConfirm} CMsgJSConfirm
         */
        CMsgJSConfirm.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgJSConfirm)
                return object;
            var message = new $root.CMsgJSConfirm();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.message != null)
                message.message = String(object.message);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgJSConfirm message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgJSConfirm
         * @static
         * @param {CMsgJSConfirm} message CMsgJSConfirm
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgJSConfirm.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.message = "";
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.message != null && message.hasOwnProperty("message"))
                object.message = message.message;
            return object;
        };
    
        /**
         * Converts this CMsgJSConfirm to JSON.
         * @function toJSON
         * @memberof CMsgJSConfirm
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgJSConfirm.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgJSConfirm;
    })();
    
    $root.CMsgJSDialogResponse = (function() {
    
        /**
         * Properties of a CMsgJSDialogResponse.
         * @exports ICMsgJSDialogResponse
         * @interface ICMsgJSDialogResponse
         * @property {number|null} [browser_handle] CMsgJSDialogResponse browser_handle
         * @property {boolean|null} [result] CMsgJSDialogResponse result
         */
    
        /**
         * Constructs a new CMsgJSDialogResponse.
         * @exports CMsgJSDialogResponse
         * @classdesc Represents a CMsgJSDialogResponse.
         * @implements ICMsgJSDialogResponse
         * @constructor
         * @param {ICMsgJSDialogResponse=} [properties] Properties to set
         */
        function CMsgJSDialogResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgJSDialogResponse browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgJSDialogResponse
         * @instance
         */
        CMsgJSDialogResponse.prototype.browser_handle = 0;
    
        /**
         * CMsgJSDialogResponse result.
         * @member {boolean} result
         * @memberof CMsgJSDialogResponse
         * @instance
         */
        CMsgJSDialogResponse.prototype.result = false;
    
        /**
         * Creates a new CMsgJSDialogResponse instance using the specified properties.
         * @function create
         * @memberof CMsgJSDialogResponse
         * @static
         * @param {ICMsgJSDialogResponse=} [properties] Properties to set
         * @returns {CMsgJSDialogResponse} CMsgJSDialogResponse instance
         */
        CMsgJSDialogResponse.create = function create(properties) {
            return new CMsgJSDialogResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgJSDialogResponse message. Does not implicitly {@link CMsgJSDialogResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgJSDialogResponse
         * @static
         * @param {ICMsgJSDialogResponse} message CMsgJSDialogResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgJSDialogResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.result);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgJSDialogResponse message, length delimited. Does not implicitly {@link CMsgJSDialogResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgJSDialogResponse
         * @static
         * @param {ICMsgJSDialogResponse} message CMsgJSDialogResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgJSDialogResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgJSDialogResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgJSDialogResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgJSDialogResponse} CMsgJSDialogResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgJSDialogResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgJSDialogResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.result = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgJSDialogResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgJSDialogResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgJSDialogResponse} CMsgJSDialogResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgJSDialogResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgJSDialogResponse message.
         * @function verify
         * @memberof CMsgJSDialogResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgJSDialogResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (typeof message.result !== "boolean")
                    return "result: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgJSDialogResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgJSDialogResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgJSDialogResponse} CMsgJSDialogResponse
         */
        CMsgJSDialogResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgJSDialogResponse)
                return object;
            var message = new $root.CMsgJSDialogResponse();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.result != null)
                message.result = Boolean(object.result);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgJSDialogResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgJSDialogResponse
         * @static
         * @param {CMsgJSDialogResponse} message CMsgJSDialogResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgJSDialogResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.result = false;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            return object;
        };
    
        /**
         * Converts this CMsgJSDialogResponse to JSON.
         * @function toJSON
         * @memberof CMsgJSDialogResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgJSDialogResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgJSDialogResponse;
    })();
    
    $root.CMsgCanGoBackAndForward = (function() {
    
        /**
         * Properties of a CMsgCanGoBackAndForward.
         * @exports ICMsgCanGoBackAndForward
         * @interface ICMsgCanGoBackAndForward
         * @property {number|null} [browser_handle] CMsgCanGoBackAndForward browser_handle
         * @property {boolean|null} [bgoback] CMsgCanGoBackAndForward bgoback
         * @property {boolean|null} [bgoforward] CMsgCanGoBackAndForward bgoforward
         */
    
        /**
         * Constructs a new CMsgCanGoBackAndForward.
         * @exports CMsgCanGoBackAndForward
         * @classdesc Represents a CMsgCanGoBackAndForward.
         * @implements ICMsgCanGoBackAndForward
         * @constructor
         * @param {ICMsgCanGoBackAndForward=} [properties] Properties to set
         */
        function CMsgCanGoBackAndForward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgCanGoBackAndForward browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgCanGoBackAndForward
         * @instance
         */
        CMsgCanGoBackAndForward.prototype.browser_handle = 0;
    
        /**
         * CMsgCanGoBackAndForward bgoback.
         * @member {boolean} bgoback
         * @memberof CMsgCanGoBackAndForward
         * @instance
         */
        CMsgCanGoBackAndForward.prototype.bgoback = false;
    
        /**
         * CMsgCanGoBackAndForward bgoforward.
         * @member {boolean} bgoforward
         * @memberof CMsgCanGoBackAndForward
         * @instance
         */
        CMsgCanGoBackAndForward.prototype.bgoforward = false;
    
        /**
         * Creates a new CMsgCanGoBackAndForward instance using the specified properties.
         * @function create
         * @memberof CMsgCanGoBackAndForward
         * @static
         * @param {ICMsgCanGoBackAndForward=} [properties] Properties to set
         * @returns {CMsgCanGoBackAndForward} CMsgCanGoBackAndForward instance
         */
        CMsgCanGoBackAndForward.create = function create(properties) {
            return new CMsgCanGoBackAndForward(properties);
        };
    
        /**
         * Encodes the specified CMsgCanGoBackAndForward message. Does not implicitly {@link CMsgCanGoBackAndForward.verify|verify} messages.
         * @function encode
         * @memberof CMsgCanGoBackAndForward
         * @static
         * @param {ICMsgCanGoBackAndForward} message CMsgCanGoBackAndForward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgCanGoBackAndForward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.bgoback != null && Object.hasOwnProperty.call(message, "bgoback"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.bgoback);
            if (message.bgoforward != null && Object.hasOwnProperty.call(message, "bgoforward"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.bgoforward);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgCanGoBackAndForward message, length delimited. Does not implicitly {@link CMsgCanGoBackAndForward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgCanGoBackAndForward
         * @static
         * @param {ICMsgCanGoBackAndForward} message CMsgCanGoBackAndForward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgCanGoBackAndForward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgCanGoBackAndForward message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgCanGoBackAndForward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgCanGoBackAndForward} CMsgCanGoBackAndForward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgCanGoBackAndForward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgCanGoBackAndForward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.bgoback = reader.bool();
                    break;
                case 3:
                    message.bgoforward = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgCanGoBackAndForward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgCanGoBackAndForward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgCanGoBackAndForward} CMsgCanGoBackAndForward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgCanGoBackAndForward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgCanGoBackAndForward message.
         * @function verify
         * @memberof CMsgCanGoBackAndForward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgCanGoBackAndForward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.bgoback != null && message.hasOwnProperty("bgoback"))
                if (typeof message.bgoback !== "boolean")
                    return "bgoback: boolean expected";
            if (message.bgoforward != null && message.hasOwnProperty("bgoforward"))
                if (typeof message.bgoforward !== "boolean")
                    return "bgoforward: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgCanGoBackAndForward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgCanGoBackAndForward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgCanGoBackAndForward} CMsgCanGoBackAndForward
         */
        CMsgCanGoBackAndForward.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgCanGoBackAndForward)
                return object;
            var message = new $root.CMsgCanGoBackAndForward();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.bgoback != null)
                message.bgoback = Boolean(object.bgoback);
            if (object.bgoforward != null)
                message.bgoforward = Boolean(object.bgoforward);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgCanGoBackAndForward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgCanGoBackAndForward
         * @static
         * @param {CMsgCanGoBackAndForward} message CMsgCanGoBackAndForward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgCanGoBackAndForward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.bgoback = false;
                object.bgoforward = false;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.bgoback != null && message.hasOwnProperty("bgoback"))
                object.bgoback = message.bgoback;
            if (message.bgoforward != null && message.hasOwnProperty("bgoforward"))
                object.bgoforward = message.bgoforward;
            return object;
        };
    
        /**
         * Converts this CMsgCanGoBackAndForward to JSON.
         * @function toJSON
         * @memberof CMsgCanGoBackAndForward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgCanGoBackAndForward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgCanGoBackAndForward;
    })();
    
    $root.CMsgOpenSteamURL = (function() {
    
        /**
         * Properties of a CMsgOpenSteamURL.
         * @exports ICMsgOpenSteamURL
         * @interface ICMsgOpenSteamURL
         * @property {number|null} [browser_handle] CMsgOpenSteamURL browser_handle
         * @property {string|null} [url] CMsgOpenSteamURL url
         * @property {string|null} [referrer] CMsgOpenSteamURL referrer
         */
    
        /**
         * Constructs a new CMsgOpenSteamURL.
         * @exports CMsgOpenSteamURL
         * @classdesc Represents a CMsgOpenSteamURL.
         * @implements ICMsgOpenSteamURL
         * @constructor
         * @param {ICMsgOpenSteamURL=} [properties] Properties to set
         */
        function CMsgOpenSteamURL(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgOpenSteamURL browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgOpenSteamURL
         * @instance
         */
        CMsgOpenSteamURL.prototype.browser_handle = 0;
    
        /**
         * CMsgOpenSteamURL url.
         * @member {string} url
         * @memberof CMsgOpenSteamURL
         * @instance
         */
        CMsgOpenSteamURL.prototype.url = "";
    
        /**
         * CMsgOpenSteamURL referrer.
         * @member {string} referrer
         * @memberof CMsgOpenSteamURL
         * @instance
         */
        CMsgOpenSteamURL.prototype.referrer = "";
    
        /**
         * Creates a new CMsgOpenSteamURL instance using the specified properties.
         * @function create
         * @memberof CMsgOpenSteamURL
         * @static
         * @param {ICMsgOpenSteamURL=} [properties] Properties to set
         * @returns {CMsgOpenSteamURL} CMsgOpenSteamURL instance
         */
        CMsgOpenSteamURL.create = function create(properties) {
            return new CMsgOpenSteamURL(properties);
        };
    
        /**
         * Encodes the specified CMsgOpenSteamURL message. Does not implicitly {@link CMsgOpenSteamURL.verify|verify} messages.
         * @function encode
         * @memberof CMsgOpenSteamURL
         * @static
         * @param {ICMsgOpenSteamURL} message CMsgOpenSteamURL message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgOpenSteamURL.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);
            if (message.referrer != null && Object.hasOwnProperty.call(message, "referrer"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.referrer);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgOpenSteamURL message, length delimited. Does not implicitly {@link CMsgOpenSteamURL.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgOpenSteamURL
         * @static
         * @param {ICMsgOpenSteamURL} message CMsgOpenSteamURL message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgOpenSteamURL.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgOpenSteamURL message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgOpenSteamURL
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgOpenSteamURL} CMsgOpenSteamURL
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgOpenSteamURL.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgOpenSteamURL();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.url = reader.string();
                    break;
                case 3:
                    message.referrer = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgOpenSteamURL message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgOpenSteamURL
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgOpenSteamURL} CMsgOpenSteamURL
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgOpenSteamURL.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgOpenSteamURL message.
         * @function verify
         * @memberof CMsgOpenSteamURL
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgOpenSteamURL.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.url != null && message.hasOwnProperty("url"))
                if (!$util.isString(message.url))
                    return "url: string expected";
            if (message.referrer != null && message.hasOwnProperty("referrer"))
                if (!$util.isString(message.referrer))
                    return "referrer: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgOpenSteamURL message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgOpenSteamURL
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgOpenSteamURL} CMsgOpenSteamURL
         */
        CMsgOpenSteamURL.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgOpenSteamURL)
                return object;
            var message = new $root.CMsgOpenSteamURL();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.url != null)
                message.url = String(object.url);
            if (object.referrer != null)
                message.referrer = String(object.referrer);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgOpenSteamURL message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgOpenSteamURL
         * @static
         * @param {CMsgOpenSteamURL} message CMsgOpenSteamURL
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgOpenSteamURL.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.url = "";
                object.referrer = "";
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.url != null && message.hasOwnProperty("url"))
                object.url = message.url;
            if (message.referrer != null && message.hasOwnProperty("referrer"))
                object.referrer = message.referrer;
            return object;
        };
    
        /**
         * Converts this CMsgOpenSteamURL to JSON.
         * @function toJSON
         * @memberof CMsgOpenSteamURL
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgOpenSteamURL.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgOpenSteamURL;
    })();
    
    $root.CMsgSetCookie = (function() {
    
        /**
         * Properties of a CMsgSetCookie.
         * @exports ICMsgSetCookie
         * @interface ICMsgSetCookie
         * @property {string|null} [key] CMsgSetCookie key
         * @property {string|null} [value] CMsgSetCookie value
         * @property {string|null} [path] CMsgSetCookie path
         * @property {string|null} [host] CMsgSetCookie host
         * @property {number|null} [expires] CMsgSetCookie expires
         * @property {boolean|null} [secure] CMsgSetCookie secure
         * @property {boolean|null} [httponly] CMsgSetCookie httponly
         */
    
        /**
         * Constructs a new CMsgSetCookie.
         * @exports CMsgSetCookie
         * @classdesc Represents a CMsgSetCookie.
         * @implements ICMsgSetCookie
         * @constructor
         * @param {ICMsgSetCookie=} [properties] Properties to set
         */
        function CMsgSetCookie(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSetCookie key.
         * @member {string} key
         * @memberof CMsgSetCookie
         * @instance
         */
        CMsgSetCookie.prototype.key = "";
    
        /**
         * CMsgSetCookie value.
         * @member {string} value
         * @memberof CMsgSetCookie
         * @instance
         */
        CMsgSetCookie.prototype.value = "";
    
        /**
         * CMsgSetCookie path.
         * @member {string} path
         * @memberof CMsgSetCookie
         * @instance
         */
        CMsgSetCookie.prototype.path = "";
    
        /**
         * CMsgSetCookie host.
         * @member {string} host
         * @memberof CMsgSetCookie
         * @instance
         */
        CMsgSetCookie.prototype.host = "";
    
        /**
         * CMsgSetCookie expires.
         * @member {number} expires
         * @memberof CMsgSetCookie
         * @instance
         */
        CMsgSetCookie.prototype.expires = 0;
    
        /**
         * CMsgSetCookie secure.
         * @member {boolean} secure
         * @memberof CMsgSetCookie
         * @instance
         */
        CMsgSetCookie.prototype.secure = false;
    
        /**
         * CMsgSetCookie httponly.
         * @member {boolean} httponly
         * @memberof CMsgSetCookie
         * @instance
         */
        CMsgSetCookie.prototype.httponly = false;
    
        /**
         * Creates a new CMsgSetCookie instance using the specified properties.
         * @function create
         * @memberof CMsgSetCookie
         * @static
         * @param {ICMsgSetCookie=} [properties] Properties to set
         * @returns {CMsgSetCookie} CMsgSetCookie instance
         */
        CMsgSetCookie.create = function create(properties) {
            return new CMsgSetCookie(properties);
        };
    
        /**
         * Encodes the specified CMsgSetCookie message. Does not implicitly {@link CMsgSetCookie.verify|verify} messages.
         * @function encode
         * @memberof CMsgSetCookie
         * @static
         * @param {ICMsgSetCookie} message CMsgSetCookie message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSetCookie.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
            if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.path);
            if (message.host != null && Object.hasOwnProperty.call(message, "host"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.host);
            if (message.expires != null && Object.hasOwnProperty.call(message, "expires"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.expires);
            if (message.secure != null && Object.hasOwnProperty.call(message, "secure"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.secure);
            if (message.httponly != null && Object.hasOwnProperty.call(message, "httponly"))
                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.httponly);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSetCookie message, length delimited. Does not implicitly {@link CMsgSetCookie.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSetCookie
         * @static
         * @param {ICMsgSetCookie} message CMsgSetCookie message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSetCookie.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSetCookie message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSetCookie
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSetCookie} CMsgSetCookie
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSetCookie.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSetCookie();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                case 3:
                    message.path = reader.string();
                    break;
                case 4:
                    message.host = reader.string();
                    break;
                case 5:
                    message.expires = reader.uint32();
                    break;
                case 6:
                    message.secure = reader.bool();
                    break;
                case 7:
                    message.httponly = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSetCookie message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSetCookie
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSetCookie} CMsgSetCookie
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSetCookie.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSetCookie message.
         * @function verify
         * @memberof CMsgSetCookie
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSetCookie.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.key != null && message.hasOwnProperty("key"))
                if (!$util.isString(message.key))
                    return "key: string expected";
            if (message.value != null && message.hasOwnProperty("value"))
                if (!$util.isString(message.value))
                    return "value: string expected";
            if (message.path != null && message.hasOwnProperty("path"))
                if (!$util.isString(message.path))
                    return "path: string expected";
            if (message.host != null && message.hasOwnProperty("host"))
                if (!$util.isString(message.host))
                    return "host: string expected";
            if (message.expires != null && message.hasOwnProperty("expires"))
                if (!$util.isInteger(message.expires))
                    return "expires: integer expected";
            if (message.secure != null && message.hasOwnProperty("secure"))
                if (typeof message.secure !== "boolean")
                    return "secure: boolean expected";
            if (message.httponly != null && message.hasOwnProperty("httponly"))
                if (typeof message.httponly !== "boolean")
                    return "httponly: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgSetCookie message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSetCookie
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSetCookie} CMsgSetCookie
         */
        CMsgSetCookie.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSetCookie)
                return object;
            var message = new $root.CMsgSetCookie();
            if (object.key != null)
                message.key = String(object.key);
            if (object.value != null)
                message.value = String(object.value);
            if (object.path != null)
                message.path = String(object.path);
            if (object.host != null)
                message.host = String(object.host);
            if (object.expires != null)
                message.expires = object.expires >>> 0;
            if (object.secure != null)
                message.secure = Boolean(object.secure);
            if (object.httponly != null)
                message.httponly = Boolean(object.httponly);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSetCookie message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSetCookie
         * @static
         * @param {CMsgSetCookie} message CMsgSetCookie
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSetCookie.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.key = "";
                object.value = "";
                object.path = "";
                object.host = "";
                object.expires = 0;
                object.secure = false;
                object.httponly = false;
            }
            if (message.key != null && message.hasOwnProperty("key"))
                object.key = message.key;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = message.value;
            if (message.path != null && message.hasOwnProperty("path"))
                object.path = message.path;
            if (message.host != null && message.hasOwnProperty("host"))
                object.host = message.host;
            if (message.expires != null && message.hasOwnProperty("expires"))
                object.expires = message.expires;
            if (message.secure != null && message.hasOwnProperty("secure"))
                object.secure = message.secure;
            if (message.httponly != null && message.hasOwnProperty("httponly"))
                object.httponly = message.httponly;
            return object;
        };
    
        /**
         * Converts this CMsgSetCookie to JSON.
         * @function toJSON
         * @memberof CMsgSetCookie
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSetCookie.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSetCookie;
    })();
    
    $root.CMsgSetTargetFrameRate = (function() {
    
        /**
         * Properties of a CMsgSetTargetFrameRate.
         * @exports ICMsgSetTargetFrameRate
         * @interface ICMsgSetTargetFrameRate
         * @property {number|null} [browser_handle] CMsgSetTargetFrameRate browser_handle
         * @property {number|null} [nTargetFrameRate] CMsgSetTargetFrameRate nTargetFrameRate
         */
    
        /**
         * Constructs a new CMsgSetTargetFrameRate.
         * @exports CMsgSetTargetFrameRate
         * @classdesc Represents a CMsgSetTargetFrameRate.
         * @implements ICMsgSetTargetFrameRate
         * @constructor
         * @param {ICMsgSetTargetFrameRate=} [properties] Properties to set
         */
        function CMsgSetTargetFrameRate(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSetTargetFrameRate browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgSetTargetFrameRate
         * @instance
         */
        CMsgSetTargetFrameRate.prototype.browser_handle = 0;
    
        /**
         * CMsgSetTargetFrameRate nTargetFrameRate.
         * @member {number} nTargetFrameRate
         * @memberof CMsgSetTargetFrameRate
         * @instance
         */
        CMsgSetTargetFrameRate.prototype.nTargetFrameRate = 0;
    
        /**
         * Creates a new CMsgSetTargetFrameRate instance using the specified properties.
         * @function create
         * @memberof CMsgSetTargetFrameRate
         * @static
         * @param {ICMsgSetTargetFrameRate=} [properties] Properties to set
         * @returns {CMsgSetTargetFrameRate} CMsgSetTargetFrameRate instance
         */
        CMsgSetTargetFrameRate.create = function create(properties) {
            return new CMsgSetTargetFrameRate(properties);
        };
    
        /**
         * Encodes the specified CMsgSetTargetFrameRate message. Does not implicitly {@link CMsgSetTargetFrameRate.verify|verify} messages.
         * @function encode
         * @memberof CMsgSetTargetFrameRate
         * @static
         * @param {ICMsgSetTargetFrameRate} message CMsgSetTargetFrameRate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSetTargetFrameRate.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.nTargetFrameRate != null && Object.hasOwnProperty.call(message, "nTargetFrameRate"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.nTargetFrameRate);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSetTargetFrameRate message, length delimited. Does not implicitly {@link CMsgSetTargetFrameRate.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSetTargetFrameRate
         * @static
         * @param {ICMsgSetTargetFrameRate} message CMsgSetTargetFrameRate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSetTargetFrameRate.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSetTargetFrameRate message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSetTargetFrameRate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSetTargetFrameRate} CMsgSetTargetFrameRate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSetTargetFrameRate.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSetTargetFrameRate();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.nTargetFrameRate = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSetTargetFrameRate message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSetTargetFrameRate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSetTargetFrameRate} CMsgSetTargetFrameRate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSetTargetFrameRate.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSetTargetFrameRate message.
         * @function verify
         * @memberof CMsgSetTargetFrameRate
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSetTargetFrameRate.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.nTargetFrameRate != null && message.hasOwnProperty("nTargetFrameRate"))
                if (!$util.isInteger(message.nTargetFrameRate))
                    return "nTargetFrameRate: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSetTargetFrameRate message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSetTargetFrameRate
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSetTargetFrameRate} CMsgSetTargetFrameRate
         */
        CMsgSetTargetFrameRate.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSetTargetFrameRate)
                return object;
            var message = new $root.CMsgSetTargetFrameRate();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.nTargetFrameRate != null)
                message.nTargetFrameRate = object.nTargetFrameRate >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSetTargetFrameRate message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSetTargetFrameRate
         * @static
         * @param {CMsgSetTargetFrameRate} message CMsgSetTargetFrameRate
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSetTargetFrameRate.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.nTargetFrameRate = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.nTargetFrameRate != null && message.hasOwnProperty("nTargetFrameRate"))
                object.nTargetFrameRate = message.nTargetFrameRate;
            return object;
        };
    
        /**
         * Converts this CMsgSetTargetFrameRate to JSON.
         * @function toJSON
         * @memberof CMsgSetTargetFrameRate
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSetTargetFrameRate.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSetTargetFrameRate;
    })();
    
    $root.CMsgPauseRepaint = (function() {
    
        /**
         * Properties of a CMsgPauseRepaint.
         * @exports ICMsgPauseRepaint
         * @interface ICMsgPauseRepaint
         * @property {number|null} [browser_handle] CMsgPauseRepaint browser_handle
         */
    
        /**
         * Constructs a new CMsgPauseRepaint.
         * @exports CMsgPauseRepaint
         * @classdesc Represents a CMsgPauseRepaint.
         * @implements ICMsgPauseRepaint
         * @constructor
         * @param {ICMsgPauseRepaint=} [properties] Properties to set
         */
        function CMsgPauseRepaint(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgPauseRepaint browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgPauseRepaint
         * @instance
         */
        CMsgPauseRepaint.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgPauseRepaint instance using the specified properties.
         * @function create
         * @memberof CMsgPauseRepaint
         * @static
         * @param {ICMsgPauseRepaint=} [properties] Properties to set
         * @returns {CMsgPauseRepaint} CMsgPauseRepaint instance
         */
        CMsgPauseRepaint.create = function create(properties) {
            return new CMsgPauseRepaint(properties);
        };
    
        /**
         * Encodes the specified CMsgPauseRepaint message. Does not implicitly {@link CMsgPauseRepaint.verify|verify} messages.
         * @function encode
         * @memberof CMsgPauseRepaint
         * @static
         * @param {ICMsgPauseRepaint} message CMsgPauseRepaint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgPauseRepaint.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgPauseRepaint message, length delimited. Does not implicitly {@link CMsgPauseRepaint.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgPauseRepaint
         * @static
         * @param {ICMsgPauseRepaint} message CMsgPauseRepaint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgPauseRepaint.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgPauseRepaint message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgPauseRepaint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgPauseRepaint} CMsgPauseRepaint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgPauseRepaint.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgPauseRepaint();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgPauseRepaint message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgPauseRepaint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgPauseRepaint} CMsgPauseRepaint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgPauseRepaint.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgPauseRepaint message.
         * @function verify
         * @memberof CMsgPauseRepaint
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgPauseRepaint.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgPauseRepaint message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgPauseRepaint
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgPauseRepaint} CMsgPauseRepaint
         */
        CMsgPauseRepaint.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgPauseRepaint)
                return object;
            var message = new $root.CMsgPauseRepaint();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgPauseRepaint message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgPauseRepaint
         * @static
         * @param {CMsgPauseRepaint} message CMsgPauseRepaint
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgPauseRepaint.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgPauseRepaint to JSON.
         * @function toJSON
         * @memberof CMsgPauseRepaint
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgPauseRepaint.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgPauseRepaint;
    })();
    
    $root.CMsgFullRepaint = (function() {
    
        /**
         * Properties of a CMsgFullRepaint.
         * @exports ICMsgFullRepaint
         * @interface ICMsgFullRepaint
         * @property {number|null} [browser_handle] CMsgFullRepaint browser_handle
         */
    
        /**
         * Constructs a new CMsgFullRepaint.
         * @exports CMsgFullRepaint
         * @classdesc Represents a CMsgFullRepaint.
         * @implements ICMsgFullRepaint
         * @constructor
         * @param {ICMsgFullRepaint=} [properties] Properties to set
         */
        function CMsgFullRepaint(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgFullRepaint browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgFullRepaint
         * @instance
         */
        CMsgFullRepaint.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgFullRepaint instance using the specified properties.
         * @function create
         * @memberof CMsgFullRepaint
         * @static
         * @param {ICMsgFullRepaint=} [properties] Properties to set
         * @returns {CMsgFullRepaint} CMsgFullRepaint instance
         */
        CMsgFullRepaint.create = function create(properties) {
            return new CMsgFullRepaint(properties);
        };
    
        /**
         * Encodes the specified CMsgFullRepaint message. Does not implicitly {@link CMsgFullRepaint.verify|verify} messages.
         * @function encode
         * @memberof CMsgFullRepaint
         * @static
         * @param {ICMsgFullRepaint} message CMsgFullRepaint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgFullRepaint.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgFullRepaint message, length delimited. Does not implicitly {@link CMsgFullRepaint.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgFullRepaint
         * @static
         * @param {ICMsgFullRepaint} message CMsgFullRepaint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgFullRepaint.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgFullRepaint message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgFullRepaint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgFullRepaint} CMsgFullRepaint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgFullRepaint.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgFullRepaint();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgFullRepaint message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgFullRepaint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgFullRepaint} CMsgFullRepaint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgFullRepaint.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgFullRepaint message.
         * @function verify
         * @memberof CMsgFullRepaint
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgFullRepaint.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgFullRepaint message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgFullRepaint
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgFullRepaint} CMsgFullRepaint
         */
        CMsgFullRepaint.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgFullRepaint)
                return object;
            var message = new $root.CMsgFullRepaint();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgFullRepaint message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgFullRepaint
         * @static
         * @param {CMsgFullRepaint} message CMsgFullRepaint
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgFullRepaint.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgFullRepaint to JSON.
         * @function toJSON
         * @memberof CMsgFullRepaint
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgFullRepaint.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgFullRepaint;
    })();
    
    $root.CMsgRequestFullScreen = (function() {
    
        /**
         * Properties of a CMsgRequestFullScreen.
         * @exports ICMsgRequestFullScreen
         * @interface ICMsgRequestFullScreen
         * @property {number|null} [browser_handle] CMsgRequestFullScreen browser_handle
         */
    
        /**
         * Constructs a new CMsgRequestFullScreen.
         * @exports CMsgRequestFullScreen
         * @classdesc Represents a CMsgRequestFullScreen.
         * @implements ICMsgRequestFullScreen
         * @constructor
         * @param {ICMsgRequestFullScreen=} [properties] Properties to set
         */
        function CMsgRequestFullScreen(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgRequestFullScreen browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgRequestFullScreen
         * @instance
         */
        CMsgRequestFullScreen.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgRequestFullScreen instance using the specified properties.
         * @function create
         * @memberof CMsgRequestFullScreen
         * @static
         * @param {ICMsgRequestFullScreen=} [properties] Properties to set
         * @returns {CMsgRequestFullScreen} CMsgRequestFullScreen instance
         */
        CMsgRequestFullScreen.create = function create(properties) {
            return new CMsgRequestFullScreen(properties);
        };
    
        /**
         * Encodes the specified CMsgRequestFullScreen message. Does not implicitly {@link CMsgRequestFullScreen.verify|verify} messages.
         * @function encode
         * @memberof CMsgRequestFullScreen
         * @static
         * @param {ICMsgRequestFullScreen} message CMsgRequestFullScreen message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgRequestFullScreen.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgRequestFullScreen message, length delimited. Does not implicitly {@link CMsgRequestFullScreen.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgRequestFullScreen
         * @static
         * @param {ICMsgRequestFullScreen} message CMsgRequestFullScreen message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgRequestFullScreen.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgRequestFullScreen message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgRequestFullScreen
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgRequestFullScreen} CMsgRequestFullScreen
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgRequestFullScreen.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgRequestFullScreen();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgRequestFullScreen message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgRequestFullScreen
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgRequestFullScreen} CMsgRequestFullScreen
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgRequestFullScreen.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgRequestFullScreen message.
         * @function verify
         * @memberof CMsgRequestFullScreen
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgRequestFullScreen.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgRequestFullScreen message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgRequestFullScreen
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgRequestFullScreen} CMsgRequestFullScreen
         */
        CMsgRequestFullScreen.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgRequestFullScreen)
                return object;
            var message = new $root.CMsgRequestFullScreen();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgRequestFullScreen message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgRequestFullScreen
         * @static
         * @param {CMsgRequestFullScreen} message CMsgRequestFullScreen
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgRequestFullScreen.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgRequestFullScreen to JSON.
         * @function toJSON
         * @memberof CMsgRequestFullScreen
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgRequestFullScreen.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgRequestFullScreen;
    })();
    
    $root.CMsgExitFullScreen = (function() {
    
        /**
         * Properties of a CMsgExitFullScreen.
         * @exports ICMsgExitFullScreen
         * @interface ICMsgExitFullScreen
         * @property {number|null} [browser_handle] CMsgExitFullScreen browser_handle
         */
    
        /**
         * Constructs a new CMsgExitFullScreen.
         * @exports CMsgExitFullScreen
         * @classdesc Represents a CMsgExitFullScreen.
         * @implements ICMsgExitFullScreen
         * @constructor
         * @param {ICMsgExitFullScreen=} [properties] Properties to set
         */
        function CMsgExitFullScreen(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgExitFullScreen browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgExitFullScreen
         * @instance
         */
        CMsgExitFullScreen.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgExitFullScreen instance using the specified properties.
         * @function create
         * @memberof CMsgExitFullScreen
         * @static
         * @param {ICMsgExitFullScreen=} [properties] Properties to set
         * @returns {CMsgExitFullScreen} CMsgExitFullScreen instance
         */
        CMsgExitFullScreen.create = function create(properties) {
            return new CMsgExitFullScreen(properties);
        };
    
        /**
         * Encodes the specified CMsgExitFullScreen message. Does not implicitly {@link CMsgExitFullScreen.verify|verify} messages.
         * @function encode
         * @memberof CMsgExitFullScreen
         * @static
         * @param {ICMsgExitFullScreen} message CMsgExitFullScreen message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgExitFullScreen.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgExitFullScreen message, length delimited. Does not implicitly {@link CMsgExitFullScreen.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgExitFullScreen
         * @static
         * @param {ICMsgExitFullScreen} message CMsgExitFullScreen message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgExitFullScreen.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgExitFullScreen message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgExitFullScreen
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgExitFullScreen} CMsgExitFullScreen
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgExitFullScreen.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgExitFullScreen();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgExitFullScreen message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgExitFullScreen
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgExitFullScreen} CMsgExitFullScreen
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgExitFullScreen.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgExitFullScreen message.
         * @function verify
         * @memberof CMsgExitFullScreen
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgExitFullScreen.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgExitFullScreen message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgExitFullScreen
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgExitFullScreen} CMsgExitFullScreen
         */
        CMsgExitFullScreen.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgExitFullScreen)
                return object;
            var message = new $root.CMsgExitFullScreen();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgExitFullScreen message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgExitFullScreen
         * @static
         * @param {CMsgExitFullScreen} message CMsgExitFullScreen
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgExitFullScreen.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgExitFullScreen to JSON.
         * @function toJSON
         * @memberof CMsgExitFullScreen
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgExitFullScreen.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgExitFullScreen;
    })();
    
    $root.CMsgToggleFindInPageDialog = (function() {
    
        /**
         * Properties of a CMsgToggleFindInPageDialog.
         * @exports ICMsgToggleFindInPageDialog
         * @interface ICMsgToggleFindInPageDialog
         * @property {number|null} [browser_handle] CMsgToggleFindInPageDialog browser_handle
         */
    
        /**
         * Constructs a new CMsgToggleFindInPageDialog.
         * @exports CMsgToggleFindInPageDialog
         * @classdesc Represents a CMsgToggleFindInPageDialog.
         * @implements ICMsgToggleFindInPageDialog
         * @constructor
         * @param {ICMsgToggleFindInPageDialog=} [properties] Properties to set
         */
        function CMsgToggleFindInPageDialog(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgToggleFindInPageDialog browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgToggleFindInPageDialog
         * @instance
         */
        CMsgToggleFindInPageDialog.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgToggleFindInPageDialog instance using the specified properties.
         * @function create
         * @memberof CMsgToggleFindInPageDialog
         * @static
         * @param {ICMsgToggleFindInPageDialog=} [properties] Properties to set
         * @returns {CMsgToggleFindInPageDialog} CMsgToggleFindInPageDialog instance
         */
        CMsgToggleFindInPageDialog.create = function create(properties) {
            return new CMsgToggleFindInPageDialog(properties);
        };
    
        /**
         * Encodes the specified CMsgToggleFindInPageDialog message. Does not implicitly {@link CMsgToggleFindInPageDialog.verify|verify} messages.
         * @function encode
         * @memberof CMsgToggleFindInPageDialog
         * @static
         * @param {ICMsgToggleFindInPageDialog} message CMsgToggleFindInPageDialog message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgToggleFindInPageDialog.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgToggleFindInPageDialog message, length delimited. Does not implicitly {@link CMsgToggleFindInPageDialog.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgToggleFindInPageDialog
         * @static
         * @param {ICMsgToggleFindInPageDialog} message CMsgToggleFindInPageDialog message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgToggleFindInPageDialog.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgToggleFindInPageDialog message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgToggleFindInPageDialog
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgToggleFindInPageDialog} CMsgToggleFindInPageDialog
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgToggleFindInPageDialog.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgToggleFindInPageDialog();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgToggleFindInPageDialog message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgToggleFindInPageDialog
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgToggleFindInPageDialog} CMsgToggleFindInPageDialog
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgToggleFindInPageDialog.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgToggleFindInPageDialog message.
         * @function verify
         * @memberof CMsgToggleFindInPageDialog
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgToggleFindInPageDialog.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgToggleFindInPageDialog message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgToggleFindInPageDialog
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgToggleFindInPageDialog} CMsgToggleFindInPageDialog
         */
        CMsgToggleFindInPageDialog.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgToggleFindInPageDialog)
                return object;
            var message = new $root.CMsgToggleFindInPageDialog();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgToggleFindInPageDialog message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgToggleFindInPageDialog
         * @static
         * @param {CMsgToggleFindInPageDialog} message CMsgToggleFindInPageDialog
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgToggleFindInPageDialog.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgToggleFindInPageDialog to JSON.
         * @function toJSON
         * @memberof CMsgToggleFindInPageDialog
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgToggleFindInPageDialog.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgToggleFindInPageDialog;
    })();
    
    $root.CMsgSetPIDShuttingDown = (function() {
    
        /**
         * Properties of a CMsgSetPIDShuttingDown.
         * @exports ICMsgSetPIDShuttingDown
         * @interface ICMsgSetPIDShuttingDown
         * @property {number|null} [browser_handle] CMsgSetPIDShuttingDown browser_handle
         */
    
        /**
         * Constructs a new CMsgSetPIDShuttingDown.
         * @exports CMsgSetPIDShuttingDown
         * @classdesc Represents a CMsgSetPIDShuttingDown.
         * @implements ICMsgSetPIDShuttingDown
         * @constructor
         * @param {ICMsgSetPIDShuttingDown=} [properties] Properties to set
         */
        function CMsgSetPIDShuttingDown(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSetPIDShuttingDown browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgSetPIDShuttingDown
         * @instance
         */
        CMsgSetPIDShuttingDown.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgSetPIDShuttingDown instance using the specified properties.
         * @function create
         * @memberof CMsgSetPIDShuttingDown
         * @static
         * @param {ICMsgSetPIDShuttingDown=} [properties] Properties to set
         * @returns {CMsgSetPIDShuttingDown} CMsgSetPIDShuttingDown instance
         */
        CMsgSetPIDShuttingDown.create = function create(properties) {
            return new CMsgSetPIDShuttingDown(properties);
        };
    
        /**
         * Encodes the specified CMsgSetPIDShuttingDown message. Does not implicitly {@link CMsgSetPIDShuttingDown.verify|verify} messages.
         * @function encode
         * @memberof CMsgSetPIDShuttingDown
         * @static
         * @param {ICMsgSetPIDShuttingDown} message CMsgSetPIDShuttingDown message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSetPIDShuttingDown.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSetPIDShuttingDown message, length delimited. Does not implicitly {@link CMsgSetPIDShuttingDown.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSetPIDShuttingDown
         * @static
         * @param {ICMsgSetPIDShuttingDown} message CMsgSetPIDShuttingDown message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSetPIDShuttingDown.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSetPIDShuttingDown message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSetPIDShuttingDown
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSetPIDShuttingDown} CMsgSetPIDShuttingDown
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSetPIDShuttingDown.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSetPIDShuttingDown();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSetPIDShuttingDown message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSetPIDShuttingDown
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSetPIDShuttingDown} CMsgSetPIDShuttingDown
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSetPIDShuttingDown.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSetPIDShuttingDown message.
         * @function verify
         * @memberof CMsgSetPIDShuttingDown
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSetPIDShuttingDown.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSetPIDShuttingDown message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSetPIDShuttingDown
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSetPIDShuttingDown} CMsgSetPIDShuttingDown
         */
        CMsgSetPIDShuttingDown.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSetPIDShuttingDown)
                return object;
            var message = new $root.CMsgSetPIDShuttingDown();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSetPIDShuttingDown message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSetPIDShuttingDown
         * @static
         * @param {CMsgSetPIDShuttingDown} message CMsgSetPIDShuttingDown
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSetPIDShuttingDown.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgSetPIDShuttingDown to JSON.
         * @function toJSON
         * @memberof CMsgSetPIDShuttingDown
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSetPIDShuttingDown.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSetPIDShuttingDown;
    })();
    
    $root.CMsgDisableBackgroundThrottling = (function() {
    
        /**
         * Properties of a CMsgDisableBackgroundThrottling.
         * @exports ICMsgDisableBackgroundThrottling
         * @interface ICMsgDisableBackgroundThrottling
         * @property {number|null} [browser_handle] CMsgDisableBackgroundThrottling browser_handle
         */
    
        /**
         * Constructs a new CMsgDisableBackgroundThrottling.
         * @exports CMsgDisableBackgroundThrottling
         * @classdesc Represents a CMsgDisableBackgroundThrottling.
         * @implements ICMsgDisableBackgroundThrottling
         * @constructor
         * @param {ICMsgDisableBackgroundThrottling=} [properties] Properties to set
         */
        function CMsgDisableBackgroundThrottling(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgDisableBackgroundThrottling browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgDisableBackgroundThrottling
         * @instance
         */
        CMsgDisableBackgroundThrottling.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgDisableBackgroundThrottling instance using the specified properties.
         * @function create
         * @memberof CMsgDisableBackgroundThrottling
         * @static
         * @param {ICMsgDisableBackgroundThrottling=} [properties] Properties to set
         * @returns {CMsgDisableBackgroundThrottling} CMsgDisableBackgroundThrottling instance
         */
        CMsgDisableBackgroundThrottling.create = function create(properties) {
            return new CMsgDisableBackgroundThrottling(properties);
        };
    
        /**
         * Encodes the specified CMsgDisableBackgroundThrottling message. Does not implicitly {@link CMsgDisableBackgroundThrottling.verify|verify} messages.
         * @function encode
         * @memberof CMsgDisableBackgroundThrottling
         * @static
         * @param {ICMsgDisableBackgroundThrottling} message CMsgDisableBackgroundThrottling message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgDisableBackgroundThrottling.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgDisableBackgroundThrottling message, length delimited. Does not implicitly {@link CMsgDisableBackgroundThrottling.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgDisableBackgroundThrottling
         * @static
         * @param {ICMsgDisableBackgroundThrottling} message CMsgDisableBackgroundThrottling message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgDisableBackgroundThrottling.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgDisableBackgroundThrottling message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgDisableBackgroundThrottling
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgDisableBackgroundThrottling} CMsgDisableBackgroundThrottling
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgDisableBackgroundThrottling.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgDisableBackgroundThrottling();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgDisableBackgroundThrottling message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgDisableBackgroundThrottling
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgDisableBackgroundThrottling} CMsgDisableBackgroundThrottling
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgDisableBackgroundThrottling.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgDisableBackgroundThrottling message.
         * @function verify
         * @memberof CMsgDisableBackgroundThrottling
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgDisableBackgroundThrottling.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgDisableBackgroundThrottling message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgDisableBackgroundThrottling
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgDisableBackgroundThrottling} CMsgDisableBackgroundThrottling
         */
        CMsgDisableBackgroundThrottling.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgDisableBackgroundThrottling)
                return object;
            var message = new $root.CMsgDisableBackgroundThrottling();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgDisableBackgroundThrottling message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgDisableBackgroundThrottling
         * @static
         * @param {CMsgDisableBackgroundThrottling} message CMsgDisableBackgroundThrottling
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgDisableBackgroundThrottling.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgDisableBackgroundThrottling to JSON.
         * @function toJSON
         * @memberof CMsgDisableBackgroundThrottling
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgDisableBackgroundThrottling.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgDisableBackgroundThrottling;
    })();
    
    $root.CMsgAckPIDShuttingDown = (function() {
    
        /**
         * Properties of a CMsgAckPIDShuttingDown.
         * @exports ICMsgAckPIDShuttingDown
         * @interface ICMsgAckPIDShuttingDown
         * @property {number|null} [browser_handle] CMsgAckPIDShuttingDown browser_handle
         */
    
        /**
         * Constructs a new CMsgAckPIDShuttingDown.
         * @exports CMsgAckPIDShuttingDown
         * @classdesc Represents a CMsgAckPIDShuttingDown.
         * @implements ICMsgAckPIDShuttingDown
         * @constructor
         * @param {ICMsgAckPIDShuttingDown=} [properties] Properties to set
         */
        function CMsgAckPIDShuttingDown(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgAckPIDShuttingDown browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgAckPIDShuttingDown
         * @instance
         */
        CMsgAckPIDShuttingDown.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgAckPIDShuttingDown instance using the specified properties.
         * @function create
         * @memberof CMsgAckPIDShuttingDown
         * @static
         * @param {ICMsgAckPIDShuttingDown=} [properties] Properties to set
         * @returns {CMsgAckPIDShuttingDown} CMsgAckPIDShuttingDown instance
         */
        CMsgAckPIDShuttingDown.create = function create(properties) {
            return new CMsgAckPIDShuttingDown(properties);
        };
    
        /**
         * Encodes the specified CMsgAckPIDShuttingDown message. Does not implicitly {@link CMsgAckPIDShuttingDown.verify|verify} messages.
         * @function encode
         * @memberof CMsgAckPIDShuttingDown
         * @static
         * @param {ICMsgAckPIDShuttingDown} message CMsgAckPIDShuttingDown message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAckPIDShuttingDown.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgAckPIDShuttingDown message, length delimited. Does not implicitly {@link CMsgAckPIDShuttingDown.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgAckPIDShuttingDown
         * @static
         * @param {ICMsgAckPIDShuttingDown} message CMsgAckPIDShuttingDown message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAckPIDShuttingDown.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgAckPIDShuttingDown message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgAckPIDShuttingDown
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgAckPIDShuttingDown} CMsgAckPIDShuttingDown
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAckPIDShuttingDown.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgAckPIDShuttingDown();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgAckPIDShuttingDown message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgAckPIDShuttingDown
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgAckPIDShuttingDown} CMsgAckPIDShuttingDown
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAckPIDShuttingDown.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgAckPIDShuttingDown message.
         * @function verify
         * @memberof CMsgAckPIDShuttingDown
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgAckPIDShuttingDown.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgAckPIDShuttingDown message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgAckPIDShuttingDown
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgAckPIDShuttingDown} CMsgAckPIDShuttingDown
         */
        CMsgAckPIDShuttingDown.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgAckPIDShuttingDown)
                return object;
            var message = new $root.CMsgAckPIDShuttingDown();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgAckPIDShuttingDown message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgAckPIDShuttingDown
         * @static
         * @param {CMsgAckPIDShuttingDown} message CMsgAckPIDShuttingDown
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgAckPIDShuttingDown.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgAckPIDShuttingDown to JSON.
         * @function toJSON
         * @memberof CMsgAckPIDShuttingDown
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgAckPIDShuttingDown.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgAckPIDShuttingDown;
    })();
    
    $root.CMsgGetCookiesForURL = (function() {
    
        /**
         * Properties of a CMsgGetCookiesForURL.
         * @exports ICMsgGetCookiesForURL
         * @interface ICMsgGetCookiesForURL
         * @property {number|null} [browser_handle] CMsgGetCookiesForURL browser_handle
         * @property {string|null} [url] CMsgGetCookiesForURL url
         */
    
        /**
         * Constructs a new CMsgGetCookiesForURL.
         * @exports CMsgGetCookiesForURL
         * @classdesc Represents a CMsgGetCookiesForURL.
         * @implements ICMsgGetCookiesForURL
         * @constructor
         * @param {ICMsgGetCookiesForURL=} [properties] Properties to set
         */
        function CMsgGetCookiesForURL(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGetCookiesForURL browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgGetCookiesForURL
         * @instance
         */
        CMsgGetCookiesForURL.prototype.browser_handle = 0;
    
        /**
         * CMsgGetCookiesForURL url.
         * @member {string} url
         * @memberof CMsgGetCookiesForURL
         * @instance
         */
        CMsgGetCookiesForURL.prototype.url = "";
    
        /**
         * Creates a new CMsgGetCookiesForURL instance using the specified properties.
         * @function create
         * @memberof CMsgGetCookiesForURL
         * @static
         * @param {ICMsgGetCookiesForURL=} [properties] Properties to set
         * @returns {CMsgGetCookiesForURL} CMsgGetCookiesForURL instance
         */
        CMsgGetCookiesForURL.create = function create(properties) {
            return new CMsgGetCookiesForURL(properties);
        };
    
        /**
         * Encodes the specified CMsgGetCookiesForURL message. Does not implicitly {@link CMsgGetCookiesForURL.verify|verify} messages.
         * @function encode
         * @memberof CMsgGetCookiesForURL
         * @static
         * @param {ICMsgGetCookiesForURL} message CMsgGetCookiesForURL message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGetCookiesForURL.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGetCookiesForURL message, length delimited. Does not implicitly {@link CMsgGetCookiesForURL.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGetCookiesForURL
         * @static
         * @param {ICMsgGetCookiesForURL} message CMsgGetCookiesForURL message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGetCookiesForURL.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGetCookiesForURL message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGetCookiesForURL
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGetCookiesForURL} CMsgGetCookiesForURL
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGetCookiesForURL.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGetCookiesForURL();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.url = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGetCookiesForURL message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGetCookiesForURL
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGetCookiesForURL} CMsgGetCookiesForURL
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGetCookiesForURL.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGetCookiesForURL message.
         * @function verify
         * @memberof CMsgGetCookiesForURL
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGetCookiesForURL.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.url != null && message.hasOwnProperty("url"))
                if (!$util.isString(message.url))
                    return "url: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgGetCookiesForURL message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGetCookiesForURL
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGetCookiesForURL} CMsgGetCookiesForURL
         */
        CMsgGetCookiesForURL.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGetCookiesForURL)
                return object;
            var message = new $root.CMsgGetCookiesForURL();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.url != null)
                message.url = String(object.url);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGetCookiesForURL message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGetCookiesForURL
         * @static
         * @param {CMsgGetCookiesForURL} message CMsgGetCookiesForURL
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGetCookiesForURL.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.url = "";
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.url != null && message.hasOwnProperty("url"))
                object.url = message.url;
            return object;
        };
    
        /**
         * Converts this CMsgGetCookiesForURL to JSON.
         * @function toJSON
         * @memberof CMsgGetCookiesForURL
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGetCookiesForURL.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGetCookiesForURL;
    })();
    
    $root.CCookie = (function() {
    
        /**
         * Properties of a CCookie.
         * @exports ICCookie
         * @interface ICCookie
         * @property {string|null} [name] CCookie name
         * @property {string|null} [value] CCookie value
         * @property {string|null} [domain] CCookie domain
         * @property {string|null} [path] CCookie path
         */
    
        /**
         * Constructs a new CCookie.
         * @exports CCookie
         * @classdesc Represents a CCookie.
         * @implements ICCookie
         * @constructor
         * @param {ICCookie=} [properties] Properties to set
         */
        function CCookie(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCookie name.
         * @member {string} name
         * @memberof CCookie
         * @instance
         */
        CCookie.prototype.name = "";
    
        /**
         * CCookie value.
         * @member {string} value
         * @memberof CCookie
         * @instance
         */
        CCookie.prototype.value = "";
    
        /**
         * CCookie domain.
         * @member {string} domain
         * @memberof CCookie
         * @instance
         */
        CCookie.prototype.domain = "";
    
        /**
         * CCookie path.
         * @member {string} path
         * @memberof CCookie
         * @instance
         */
        CCookie.prototype.path = "";
    
        /**
         * Creates a new CCookie instance using the specified properties.
         * @function create
         * @memberof CCookie
         * @static
         * @param {ICCookie=} [properties] Properties to set
         * @returns {CCookie} CCookie instance
         */
        CCookie.create = function create(properties) {
            return new CCookie(properties);
        };
    
        /**
         * Encodes the specified CCookie message. Does not implicitly {@link CCookie.verify|verify} messages.
         * @function encode
         * @memberof CCookie
         * @static
         * @param {ICCookie} message CCookie message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCookie.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
            if (message.domain != null && Object.hasOwnProperty.call(message, "domain"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.domain);
            if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.path);
            return writer;
        };
    
        /**
         * Encodes the specified CCookie message, length delimited. Does not implicitly {@link CCookie.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCookie
         * @static
         * @param {ICCookie} message CCookie message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCookie.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCookie message from the specified reader or buffer.
         * @function decode
         * @memberof CCookie
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCookie} CCookie
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCookie.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCookie();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                case 3:
                    message.domain = reader.string();
                    break;
                case 4:
                    message.path = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCookie message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCookie
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCookie} CCookie
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCookie.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCookie message.
         * @function verify
         * @memberof CCookie
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCookie.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.value != null && message.hasOwnProperty("value"))
                if (!$util.isString(message.value))
                    return "value: string expected";
            if (message.domain != null && message.hasOwnProperty("domain"))
                if (!$util.isString(message.domain))
                    return "domain: string expected";
            if (message.path != null && message.hasOwnProperty("path"))
                if (!$util.isString(message.path))
                    return "path: string expected";
            return null;
        };
    
        /**
         * Creates a CCookie message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCookie
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCookie} CCookie
         */
        CCookie.fromObject = function fromObject(object) {
            if (object instanceof $root.CCookie)
                return object;
            var message = new $root.CCookie();
            if (object.name != null)
                message.name = String(object.name);
            if (object.value != null)
                message.value = String(object.value);
            if (object.domain != null)
                message.domain = String(object.domain);
            if (object.path != null)
                message.path = String(object.path);
            return message;
        };
    
        /**
         * Creates a plain object from a CCookie message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCookie
         * @static
         * @param {CCookie} message CCookie
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCookie.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.name = "";
                object.value = "";
                object.domain = "";
                object.path = "";
            }
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = message.value;
            if (message.domain != null && message.hasOwnProperty("domain"))
                object.domain = message.domain;
            if (message.path != null && message.hasOwnProperty("path"))
                object.path = message.path;
            return object;
        };
    
        /**
         * Converts this CCookie to JSON.
         * @function toJSON
         * @memberof CCookie
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCookie.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCookie;
    })();
    
    $root.CMsgGetCookiesForURLResponse = (function() {
    
        /**
         * Properties of a CMsgGetCookiesForURLResponse.
         * @exports ICMsgGetCookiesForURLResponse
         * @interface ICMsgGetCookiesForURLResponse
         * @property {number|null} [browser_handle] CMsgGetCookiesForURLResponse browser_handle
         * @property {string|null} [url] CMsgGetCookiesForURLResponse url
         * @property {Array.<ICCookie>|null} [cookies] CMsgGetCookiesForURLResponse cookies
         */
    
        /**
         * Constructs a new CMsgGetCookiesForURLResponse.
         * @exports CMsgGetCookiesForURLResponse
         * @classdesc Represents a CMsgGetCookiesForURLResponse.
         * @implements ICMsgGetCookiesForURLResponse
         * @constructor
         * @param {ICMsgGetCookiesForURLResponse=} [properties] Properties to set
         */
        function CMsgGetCookiesForURLResponse(properties) {
            this.cookies = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGetCookiesForURLResponse browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgGetCookiesForURLResponse
         * @instance
         */
        CMsgGetCookiesForURLResponse.prototype.browser_handle = 0;
    
        /**
         * CMsgGetCookiesForURLResponse url.
         * @member {string} url
         * @memberof CMsgGetCookiesForURLResponse
         * @instance
         */
        CMsgGetCookiesForURLResponse.prototype.url = "";
    
        /**
         * CMsgGetCookiesForURLResponse cookies.
         * @member {Array.<ICCookie>} cookies
         * @memberof CMsgGetCookiesForURLResponse
         * @instance
         */
        CMsgGetCookiesForURLResponse.prototype.cookies = $util.emptyArray;
    
        /**
         * Creates a new CMsgGetCookiesForURLResponse instance using the specified properties.
         * @function create
         * @memberof CMsgGetCookiesForURLResponse
         * @static
         * @param {ICMsgGetCookiesForURLResponse=} [properties] Properties to set
         * @returns {CMsgGetCookiesForURLResponse} CMsgGetCookiesForURLResponse instance
         */
        CMsgGetCookiesForURLResponse.create = function create(properties) {
            return new CMsgGetCookiesForURLResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgGetCookiesForURLResponse message. Does not implicitly {@link CMsgGetCookiesForURLResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgGetCookiesForURLResponse
         * @static
         * @param {ICMsgGetCookiesForURLResponse} message CMsgGetCookiesForURLResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGetCookiesForURLResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);
            if (message.cookies != null && message.cookies.length)
                for (var i = 0; i < message.cookies.length; ++i)
                    $root.CCookie.encode(message.cookies[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGetCookiesForURLResponse message, length delimited. Does not implicitly {@link CMsgGetCookiesForURLResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGetCookiesForURLResponse
         * @static
         * @param {ICMsgGetCookiesForURLResponse} message CMsgGetCookiesForURLResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGetCookiesForURLResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGetCookiesForURLResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGetCookiesForURLResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGetCookiesForURLResponse} CMsgGetCookiesForURLResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGetCookiesForURLResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGetCookiesForURLResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.url = reader.string();
                    break;
                case 3:
                    if (!(message.cookies && message.cookies.length))
                        message.cookies = [];
                    message.cookies.push($root.CCookie.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGetCookiesForURLResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGetCookiesForURLResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGetCookiesForURLResponse} CMsgGetCookiesForURLResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGetCookiesForURLResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGetCookiesForURLResponse message.
         * @function verify
         * @memberof CMsgGetCookiesForURLResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGetCookiesForURLResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.url != null && message.hasOwnProperty("url"))
                if (!$util.isString(message.url))
                    return "url: string expected";
            if (message.cookies != null && message.hasOwnProperty("cookies")) {
                if (!Array.isArray(message.cookies))
                    return "cookies: array expected";
                for (var i = 0; i < message.cookies.length; ++i) {
                    var error = $root.CCookie.verify(message.cookies[i]);
                    if (error)
                        return "cookies." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgGetCookiesForURLResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGetCookiesForURLResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGetCookiesForURLResponse} CMsgGetCookiesForURLResponse
         */
        CMsgGetCookiesForURLResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGetCookiesForURLResponse)
                return object;
            var message = new $root.CMsgGetCookiesForURLResponse();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.url != null)
                message.url = String(object.url);
            if (object.cookies) {
                if (!Array.isArray(object.cookies))
                    throw TypeError(".CMsgGetCookiesForURLResponse.cookies: array expected");
                message.cookies = [];
                for (var i = 0; i < object.cookies.length; ++i) {
                    if (typeof object.cookies[i] !== "object")
                        throw TypeError(".CMsgGetCookiesForURLResponse.cookies: object expected");
                    message.cookies[i] = $root.CCookie.fromObject(object.cookies[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGetCookiesForURLResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGetCookiesForURLResponse
         * @static
         * @param {CMsgGetCookiesForURLResponse} message CMsgGetCookiesForURLResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGetCookiesForURLResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.cookies = [];
            if (options.defaults) {
                object.browser_handle = 0;
                object.url = "";
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.url != null && message.hasOwnProperty("url"))
                object.url = message.url;
            if (message.cookies && message.cookies.length) {
                object.cookies = [];
                for (var j = 0; j < message.cookies.length; ++j)
                    object.cookies[j] = $root.CCookie.toObject(message.cookies[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgGetCookiesForURLResponse to JSON.
         * @function toJSON
         * @memberof CMsgGetCookiesForURLResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGetCookiesForURLResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGetCookiesForURLResponse;
    })();
    
    $root.CMsgNodeHasFocus = (function() {
    
        /**
         * Properties of a CMsgNodeHasFocus.
         * @exports ICMsgNodeHasFocus
         * @interface ICMsgNodeHasFocus
         * @property {number|null} [browser_handle] CMsgNodeHasFocus browser_handle
         * @property {boolean|null} [bInput] CMsgNodeHasFocus bInput
         * @property {string|null} [name] CMsgNodeHasFocus name
         * @property {string|null} [elementtagname] CMsgNodeHasFocus elementtagname
         * @property {string|null} [searchbuttontext] CMsgNodeHasFocus searchbuttontext
         * @property {boolean|null} [bHasMultipleInputs] CMsgNodeHasFocus bHasMultipleInputs
         * @property {string|null} [input_type] CMsgNodeHasFocus input_type
         */
    
        /**
         * Constructs a new CMsgNodeHasFocus.
         * @exports CMsgNodeHasFocus
         * @classdesc Represents a CMsgNodeHasFocus.
         * @implements ICMsgNodeHasFocus
         * @constructor
         * @param {ICMsgNodeHasFocus=} [properties] Properties to set
         */
        function CMsgNodeHasFocus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgNodeHasFocus browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgNodeHasFocus
         * @instance
         */
        CMsgNodeHasFocus.prototype.browser_handle = 0;
    
        /**
         * CMsgNodeHasFocus bInput.
         * @member {boolean} bInput
         * @memberof CMsgNodeHasFocus
         * @instance
         */
        CMsgNodeHasFocus.prototype.bInput = false;
    
        /**
         * CMsgNodeHasFocus name.
         * @member {string} name
         * @memberof CMsgNodeHasFocus
         * @instance
         */
        CMsgNodeHasFocus.prototype.name = "";
    
        /**
         * CMsgNodeHasFocus elementtagname.
         * @member {string} elementtagname
         * @memberof CMsgNodeHasFocus
         * @instance
         */
        CMsgNodeHasFocus.prototype.elementtagname = "";
    
        /**
         * CMsgNodeHasFocus searchbuttontext.
         * @member {string} searchbuttontext
         * @memberof CMsgNodeHasFocus
         * @instance
         */
        CMsgNodeHasFocus.prototype.searchbuttontext = "";
    
        /**
         * CMsgNodeHasFocus bHasMultipleInputs.
         * @member {boolean} bHasMultipleInputs
         * @memberof CMsgNodeHasFocus
         * @instance
         */
        CMsgNodeHasFocus.prototype.bHasMultipleInputs = false;
    
        /**
         * CMsgNodeHasFocus input_type.
         * @member {string} input_type
         * @memberof CMsgNodeHasFocus
         * @instance
         */
        CMsgNodeHasFocus.prototype.input_type = "";
    
        /**
         * Creates a new CMsgNodeHasFocus instance using the specified properties.
         * @function create
         * @memberof CMsgNodeHasFocus
         * @static
         * @param {ICMsgNodeHasFocus=} [properties] Properties to set
         * @returns {CMsgNodeHasFocus} CMsgNodeHasFocus instance
         */
        CMsgNodeHasFocus.create = function create(properties) {
            return new CMsgNodeHasFocus(properties);
        };
    
        /**
         * Encodes the specified CMsgNodeHasFocus message. Does not implicitly {@link CMsgNodeHasFocus.verify|verify} messages.
         * @function encode
         * @memberof CMsgNodeHasFocus
         * @static
         * @param {ICMsgNodeHasFocus} message CMsgNodeHasFocus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgNodeHasFocus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.bInput != null && Object.hasOwnProperty.call(message, "bInput"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.bInput);
            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
            if (message.elementtagname != null && Object.hasOwnProperty.call(message, "elementtagname"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.elementtagname);
            if (message.searchbuttontext != null && Object.hasOwnProperty.call(message, "searchbuttontext"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.searchbuttontext);
            if (message.bHasMultipleInputs != null && Object.hasOwnProperty.call(message, "bHasMultipleInputs"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.bHasMultipleInputs);
            if (message.input_type != null && Object.hasOwnProperty.call(message, "input_type"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.input_type);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgNodeHasFocus message, length delimited. Does not implicitly {@link CMsgNodeHasFocus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgNodeHasFocus
         * @static
         * @param {ICMsgNodeHasFocus} message CMsgNodeHasFocus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgNodeHasFocus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgNodeHasFocus message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgNodeHasFocus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgNodeHasFocus} CMsgNodeHasFocus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgNodeHasFocus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgNodeHasFocus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.bInput = reader.bool();
                    break;
                case 3:
                    message.name = reader.string();
                    break;
                case 4:
                    message.elementtagname = reader.string();
                    break;
                case 5:
                    message.searchbuttontext = reader.string();
                    break;
                case 6:
                    message.bHasMultipleInputs = reader.bool();
                    break;
                case 7:
                    message.input_type = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgNodeHasFocus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgNodeHasFocus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgNodeHasFocus} CMsgNodeHasFocus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgNodeHasFocus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgNodeHasFocus message.
         * @function verify
         * @memberof CMsgNodeHasFocus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgNodeHasFocus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.bInput != null && message.hasOwnProperty("bInput"))
                if (typeof message.bInput !== "boolean")
                    return "bInput: boolean expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.elementtagname != null && message.hasOwnProperty("elementtagname"))
                if (!$util.isString(message.elementtagname))
                    return "elementtagname: string expected";
            if (message.searchbuttontext != null && message.hasOwnProperty("searchbuttontext"))
                if (!$util.isString(message.searchbuttontext))
                    return "searchbuttontext: string expected";
            if (message.bHasMultipleInputs != null && message.hasOwnProperty("bHasMultipleInputs"))
                if (typeof message.bHasMultipleInputs !== "boolean")
                    return "bHasMultipleInputs: boolean expected";
            if (message.input_type != null && message.hasOwnProperty("input_type"))
                if (!$util.isString(message.input_type))
                    return "input_type: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgNodeHasFocus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgNodeHasFocus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgNodeHasFocus} CMsgNodeHasFocus
         */
        CMsgNodeHasFocus.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgNodeHasFocus)
                return object;
            var message = new $root.CMsgNodeHasFocus();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.bInput != null)
                message.bInput = Boolean(object.bInput);
            if (object.name != null)
                message.name = String(object.name);
            if (object.elementtagname != null)
                message.elementtagname = String(object.elementtagname);
            if (object.searchbuttontext != null)
                message.searchbuttontext = String(object.searchbuttontext);
            if (object.bHasMultipleInputs != null)
                message.bHasMultipleInputs = Boolean(object.bHasMultipleInputs);
            if (object.input_type != null)
                message.input_type = String(object.input_type);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgNodeHasFocus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgNodeHasFocus
         * @static
         * @param {CMsgNodeHasFocus} message CMsgNodeHasFocus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgNodeHasFocus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.bInput = false;
                object.name = "";
                object.elementtagname = "";
                object.searchbuttontext = "";
                object.bHasMultipleInputs = false;
                object.input_type = "";
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.bInput != null && message.hasOwnProperty("bInput"))
                object.bInput = message.bInput;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.elementtagname != null && message.hasOwnProperty("elementtagname"))
                object.elementtagname = message.elementtagname;
            if (message.searchbuttontext != null && message.hasOwnProperty("searchbuttontext"))
                object.searchbuttontext = message.searchbuttontext;
            if (message.bHasMultipleInputs != null && message.hasOwnProperty("bHasMultipleInputs"))
                object.bHasMultipleInputs = message.bHasMultipleInputs;
            if (message.input_type != null && message.hasOwnProperty("input_type"))
                object.input_type = message.input_type;
            return object;
        };
    
        /**
         * Converts this CMsgNodeHasFocus to JSON.
         * @function toJSON
         * @memberof CMsgNodeHasFocus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgNodeHasFocus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgNodeHasFocus;
    })();
    
    $root.CMsgZoomToFocusedElement = (function() {
    
        /**
         * Properties of a CMsgZoomToFocusedElement.
         * @exports ICMsgZoomToFocusedElement
         * @interface ICMsgZoomToFocusedElement
         * @property {number|null} [browser_handle] CMsgZoomToFocusedElement browser_handle
         */
    
        /**
         * Constructs a new CMsgZoomToFocusedElement.
         * @exports CMsgZoomToFocusedElement
         * @classdesc Represents a CMsgZoomToFocusedElement.
         * @implements ICMsgZoomToFocusedElement
         * @constructor
         * @param {ICMsgZoomToFocusedElement=} [properties] Properties to set
         */
        function CMsgZoomToFocusedElement(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgZoomToFocusedElement browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgZoomToFocusedElement
         * @instance
         */
        CMsgZoomToFocusedElement.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgZoomToFocusedElement instance using the specified properties.
         * @function create
         * @memberof CMsgZoomToFocusedElement
         * @static
         * @param {ICMsgZoomToFocusedElement=} [properties] Properties to set
         * @returns {CMsgZoomToFocusedElement} CMsgZoomToFocusedElement instance
         */
        CMsgZoomToFocusedElement.create = function create(properties) {
            return new CMsgZoomToFocusedElement(properties);
        };
    
        /**
         * Encodes the specified CMsgZoomToFocusedElement message. Does not implicitly {@link CMsgZoomToFocusedElement.verify|verify} messages.
         * @function encode
         * @memberof CMsgZoomToFocusedElement
         * @static
         * @param {ICMsgZoomToFocusedElement} message CMsgZoomToFocusedElement message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgZoomToFocusedElement.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgZoomToFocusedElement message, length delimited. Does not implicitly {@link CMsgZoomToFocusedElement.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgZoomToFocusedElement
         * @static
         * @param {ICMsgZoomToFocusedElement} message CMsgZoomToFocusedElement message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgZoomToFocusedElement.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgZoomToFocusedElement message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgZoomToFocusedElement
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgZoomToFocusedElement} CMsgZoomToFocusedElement
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgZoomToFocusedElement.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgZoomToFocusedElement();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgZoomToFocusedElement message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgZoomToFocusedElement
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgZoomToFocusedElement} CMsgZoomToFocusedElement
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgZoomToFocusedElement.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgZoomToFocusedElement message.
         * @function verify
         * @memberof CMsgZoomToFocusedElement
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgZoomToFocusedElement.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgZoomToFocusedElement message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgZoomToFocusedElement
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgZoomToFocusedElement} CMsgZoomToFocusedElement
         */
        CMsgZoomToFocusedElement.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgZoomToFocusedElement)
                return object;
            var message = new $root.CMsgZoomToFocusedElement();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgZoomToFocusedElement message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgZoomToFocusedElement
         * @static
         * @param {CMsgZoomToFocusedElement} message CMsgZoomToFocusedElement
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgZoomToFocusedElement.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgZoomToFocusedElement to JSON.
         * @function toJSON
         * @memberof CMsgZoomToFocusedElement
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgZoomToFocusedElement.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgZoomToFocusedElement;
    })();
    
    $root.CMsgCloseFullScreenFlashIfOpen = (function() {
    
        /**
         * Properties of a CMsgCloseFullScreenFlashIfOpen.
         * @exports ICMsgCloseFullScreenFlashIfOpen
         * @interface ICMsgCloseFullScreenFlashIfOpen
         * @property {number|null} [browser_handle] CMsgCloseFullScreenFlashIfOpen browser_handle
         */
    
        /**
         * Constructs a new CMsgCloseFullScreenFlashIfOpen.
         * @exports CMsgCloseFullScreenFlashIfOpen
         * @classdesc Represents a CMsgCloseFullScreenFlashIfOpen.
         * @implements ICMsgCloseFullScreenFlashIfOpen
         * @constructor
         * @param {ICMsgCloseFullScreenFlashIfOpen=} [properties] Properties to set
         */
        function CMsgCloseFullScreenFlashIfOpen(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgCloseFullScreenFlashIfOpen browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgCloseFullScreenFlashIfOpen
         * @instance
         */
        CMsgCloseFullScreenFlashIfOpen.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgCloseFullScreenFlashIfOpen instance using the specified properties.
         * @function create
         * @memberof CMsgCloseFullScreenFlashIfOpen
         * @static
         * @param {ICMsgCloseFullScreenFlashIfOpen=} [properties] Properties to set
         * @returns {CMsgCloseFullScreenFlashIfOpen} CMsgCloseFullScreenFlashIfOpen instance
         */
        CMsgCloseFullScreenFlashIfOpen.create = function create(properties) {
            return new CMsgCloseFullScreenFlashIfOpen(properties);
        };
    
        /**
         * Encodes the specified CMsgCloseFullScreenFlashIfOpen message. Does not implicitly {@link CMsgCloseFullScreenFlashIfOpen.verify|verify} messages.
         * @function encode
         * @memberof CMsgCloseFullScreenFlashIfOpen
         * @static
         * @param {ICMsgCloseFullScreenFlashIfOpen} message CMsgCloseFullScreenFlashIfOpen message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgCloseFullScreenFlashIfOpen.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgCloseFullScreenFlashIfOpen message, length delimited. Does not implicitly {@link CMsgCloseFullScreenFlashIfOpen.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgCloseFullScreenFlashIfOpen
         * @static
         * @param {ICMsgCloseFullScreenFlashIfOpen} message CMsgCloseFullScreenFlashIfOpen message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgCloseFullScreenFlashIfOpen.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgCloseFullScreenFlashIfOpen message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgCloseFullScreenFlashIfOpen
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgCloseFullScreenFlashIfOpen} CMsgCloseFullScreenFlashIfOpen
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgCloseFullScreenFlashIfOpen.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgCloseFullScreenFlashIfOpen();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgCloseFullScreenFlashIfOpen message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgCloseFullScreenFlashIfOpen
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgCloseFullScreenFlashIfOpen} CMsgCloseFullScreenFlashIfOpen
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgCloseFullScreenFlashIfOpen.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgCloseFullScreenFlashIfOpen message.
         * @function verify
         * @memberof CMsgCloseFullScreenFlashIfOpen
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgCloseFullScreenFlashIfOpen.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgCloseFullScreenFlashIfOpen message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgCloseFullScreenFlashIfOpen
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgCloseFullScreenFlashIfOpen} CMsgCloseFullScreenFlashIfOpen
         */
        CMsgCloseFullScreenFlashIfOpen.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgCloseFullScreenFlashIfOpen)
                return object;
            var message = new $root.CMsgCloseFullScreenFlashIfOpen();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgCloseFullScreenFlashIfOpen message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgCloseFullScreenFlashIfOpen
         * @static
         * @param {CMsgCloseFullScreenFlashIfOpen} message CMsgCloseFullScreenFlashIfOpen
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgCloseFullScreenFlashIfOpen.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgCloseFullScreenFlashIfOpen to JSON.
         * @function toJSON
         * @memberof CMsgCloseFullScreenFlashIfOpen
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgCloseFullScreenFlashIfOpen.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgCloseFullScreenFlashIfOpen;
    })();
    
    $root.CMsgPauseFullScreenFlashMovieIfOpen = (function() {
    
        /**
         * Properties of a CMsgPauseFullScreenFlashMovieIfOpen.
         * @exports ICMsgPauseFullScreenFlashMovieIfOpen
         * @interface ICMsgPauseFullScreenFlashMovieIfOpen
         * @property {number|null} [browser_handle] CMsgPauseFullScreenFlashMovieIfOpen browser_handle
         */
    
        /**
         * Constructs a new CMsgPauseFullScreenFlashMovieIfOpen.
         * @exports CMsgPauseFullScreenFlashMovieIfOpen
         * @classdesc Represents a CMsgPauseFullScreenFlashMovieIfOpen.
         * @implements ICMsgPauseFullScreenFlashMovieIfOpen
         * @constructor
         * @param {ICMsgPauseFullScreenFlashMovieIfOpen=} [properties] Properties to set
         */
        function CMsgPauseFullScreenFlashMovieIfOpen(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgPauseFullScreenFlashMovieIfOpen browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgPauseFullScreenFlashMovieIfOpen
         * @instance
         */
        CMsgPauseFullScreenFlashMovieIfOpen.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgPauseFullScreenFlashMovieIfOpen instance using the specified properties.
         * @function create
         * @memberof CMsgPauseFullScreenFlashMovieIfOpen
         * @static
         * @param {ICMsgPauseFullScreenFlashMovieIfOpen=} [properties] Properties to set
         * @returns {CMsgPauseFullScreenFlashMovieIfOpen} CMsgPauseFullScreenFlashMovieIfOpen instance
         */
        CMsgPauseFullScreenFlashMovieIfOpen.create = function create(properties) {
            return new CMsgPauseFullScreenFlashMovieIfOpen(properties);
        };
    
        /**
         * Encodes the specified CMsgPauseFullScreenFlashMovieIfOpen message. Does not implicitly {@link CMsgPauseFullScreenFlashMovieIfOpen.verify|verify} messages.
         * @function encode
         * @memberof CMsgPauseFullScreenFlashMovieIfOpen
         * @static
         * @param {ICMsgPauseFullScreenFlashMovieIfOpen} message CMsgPauseFullScreenFlashMovieIfOpen message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgPauseFullScreenFlashMovieIfOpen.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgPauseFullScreenFlashMovieIfOpen message, length delimited. Does not implicitly {@link CMsgPauseFullScreenFlashMovieIfOpen.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgPauseFullScreenFlashMovieIfOpen
         * @static
         * @param {ICMsgPauseFullScreenFlashMovieIfOpen} message CMsgPauseFullScreenFlashMovieIfOpen message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgPauseFullScreenFlashMovieIfOpen.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgPauseFullScreenFlashMovieIfOpen message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgPauseFullScreenFlashMovieIfOpen
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgPauseFullScreenFlashMovieIfOpen} CMsgPauseFullScreenFlashMovieIfOpen
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgPauseFullScreenFlashMovieIfOpen.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgPauseFullScreenFlashMovieIfOpen();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgPauseFullScreenFlashMovieIfOpen message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgPauseFullScreenFlashMovieIfOpen
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgPauseFullScreenFlashMovieIfOpen} CMsgPauseFullScreenFlashMovieIfOpen
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgPauseFullScreenFlashMovieIfOpen.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgPauseFullScreenFlashMovieIfOpen message.
         * @function verify
         * @memberof CMsgPauseFullScreenFlashMovieIfOpen
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgPauseFullScreenFlashMovieIfOpen.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgPauseFullScreenFlashMovieIfOpen message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgPauseFullScreenFlashMovieIfOpen
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgPauseFullScreenFlashMovieIfOpen} CMsgPauseFullScreenFlashMovieIfOpen
         */
        CMsgPauseFullScreenFlashMovieIfOpen.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgPauseFullScreenFlashMovieIfOpen)
                return object;
            var message = new $root.CMsgPauseFullScreenFlashMovieIfOpen();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgPauseFullScreenFlashMovieIfOpen message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgPauseFullScreenFlashMovieIfOpen
         * @static
         * @param {CMsgPauseFullScreenFlashMovieIfOpen} message CMsgPauseFullScreenFlashMovieIfOpen
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgPauseFullScreenFlashMovieIfOpen.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgPauseFullScreenFlashMovieIfOpen to JSON.
         * @function toJSON
         * @memberof CMsgPauseFullScreenFlashMovieIfOpen
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgPauseFullScreenFlashMovieIfOpen.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgPauseFullScreenFlashMovieIfOpen;
    })();
    
    $root.CMsgFocusedNodeText = (function() {
    
        /**
         * Properties of a CMsgFocusedNodeText.
         * @exports ICMsgFocusedNodeText
         * @interface ICMsgFocusedNodeText
         * @property {number|null} [browser_handle] CMsgFocusedNodeText browser_handle
         */
    
        /**
         * Constructs a new CMsgFocusedNodeText.
         * @exports CMsgFocusedNodeText
         * @classdesc Represents a CMsgFocusedNodeText.
         * @implements ICMsgFocusedNodeText
         * @constructor
         * @param {ICMsgFocusedNodeText=} [properties] Properties to set
         */
        function CMsgFocusedNodeText(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgFocusedNodeText browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgFocusedNodeText
         * @instance
         */
        CMsgFocusedNodeText.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgFocusedNodeText instance using the specified properties.
         * @function create
         * @memberof CMsgFocusedNodeText
         * @static
         * @param {ICMsgFocusedNodeText=} [properties] Properties to set
         * @returns {CMsgFocusedNodeText} CMsgFocusedNodeText instance
         */
        CMsgFocusedNodeText.create = function create(properties) {
            return new CMsgFocusedNodeText(properties);
        };
    
        /**
         * Encodes the specified CMsgFocusedNodeText message. Does not implicitly {@link CMsgFocusedNodeText.verify|verify} messages.
         * @function encode
         * @memberof CMsgFocusedNodeText
         * @static
         * @param {ICMsgFocusedNodeText} message CMsgFocusedNodeText message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgFocusedNodeText.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgFocusedNodeText message, length delimited. Does not implicitly {@link CMsgFocusedNodeText.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgFocusedNodeText
         * @static
         * @param {ICMsgFocusedNodeText} message CMsgFocusedNodeText message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgFocusedNodeText.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgFocusedNodeText message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgFocusedNodeText
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgFocusedNodeText} CMsgFocusedNodeText
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgFocusedNodeText.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgFocusedNodeText();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgFocusedNodeText message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgFocusedNodeText
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgFocusedNodeText} CMsgFocusedNodeText
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgFocusedNodeText.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgFocusedNodeText message.
         * @function verify
         * @memberof CMsgFocusedNodeText
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgFocusedNodeText.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgFocusedNodeText message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgFocusedNodeText
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgFocusedNodeText} CMsgFocusedNodeText
         */
        CMsgFocusedNodeText.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgFocusedNodeText)
                return object;
            var message = new $root.CMsgFocusedNodeText();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgFocusedNodeText message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgFocusedNodeText
         * @static
         * @param {CMsgFocusedNodeText} message CMsgFocusedNodeText
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgFocusedNodeText.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgFocusedNodeText to JSON.
         * @function toJSON
         * @memberof CMsgFocusedNodeText
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgFocusedNodeText.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgFocusedNodeText;
    })();
    
    $root.CMsgFocusedNodeTextResponse = (function() {
    
        /**
         * Properties of a CMsgFocusedNodeTextResponse.
         * @exports ICMsgFocusedNodeTextResponse
         * @interface ICMsgFocusedNodeTextResponse
         * @property {number|null} [browser_handle] CMsgFocusedNodeTextResponse browser_handle
         * @property {string|null} [value] CMsgFocusedNodeTextResponse value
         */
    
        /**
         * Constructs a new CMsgFocusedNodeTextResponse.
         * @exports CMsgFocusedNodeTextResponse
         * @classdesc Represents a CMsgFocusedNodeTextResponse.
         * @implements ICMsgFocusedNodeTextResponse
         * @constructor
         * @param {ICMsgFocusedNodeTextResponse=} [properties] Properties to set
         */
        function CMsgFocusedNodeTextResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgFocusedNodeTextResponse browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgFocusedNodeTextResponse
         * @instance
         */
        CMsgFocusedNodeTextResponse.prototype.browser_handle = 0;
    
        /**
         * CMsgFocusedNodeTextResponse value.
         * @member {string} value
         * @memberof CMsgFocusedNodeTextResponse
         * @instance
         */
        CMsgFocusedNodeTextResponse.prototype.value = "";
    
        /**
         * Creates a new CMsgFocusedNodeTextResponse instance using the specified properties.
         * @function create
         * @memberof CMsgFocusedNodeTextResponse
         * @static
         * @param {ICMsgFocusedNodeTextResponse=} [properties] Properties to set
         * @returns {CMsgFocusedNodeTextResponse} CMsgFocusedNodeTextResponse instance
         */
        CMsgFocusedNodeTextResponse.create = function create(properties) {
            return new CMsgFocusedNodeTextResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgFocusedNodeTextResponse message. Does not implicitly {@link CMsgFocusedNodeTextResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgFocusedNodeTextResponse
         * @static
         * @param {ICMsgFocusedNodeTextResponse} message CMsgFocusedNodeTextResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgFocusedNodeTextResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgFocusedNodeTextResponse message, length delimited. Does not implicitly {@link CMsgFocusedNodeTextResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgFocusedNodeTextResponse
         * @static
         * @param {ICMsgFocusedNodeTextResponse} message CMsgFocusedNodeTextResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgFocusedNodeTextResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgFocusedNodeTextResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgFocusedNodeTextResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgFocusedNodeTextResponse} CMsgFocusedNodeTextResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgFocusedNodeTextResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgFocusedNodeTextResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgFocusedNodeTextResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgFocusedNodeTextResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgFocusedNodeTextResponse} CMsgFocusedNodeTextResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgFocusedNodeTextResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgFocusedNodeTextResponse message.
         * @function verify
         * @memberof CMsgFocusedNodeTextResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgFocusedNodeTextResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.value != null && message.hasOwnProperty("value"))
                if (!$util.isString(message.value))
                    return "value: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgFocusedNodeTextResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgFocusedNodeTextResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgFocusedNodeTextResponse} CMsgFocusedNodeTextResponse
         */
        CMsgFocusedNodeTextResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgFocusedNodeTextResponse)
                return object;
            var message = new $root.CMsgFocusedNodeTextResponse();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.value != null)
                message.value = String(object.value);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgFocusedNodeTextResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgFocusedNodeTextResponse
         * @static
         * @param {CMsgFocusedNodeTextResponse} message CMsgFocusedNodeTextResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgFocusedNodeTextResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.value = "";
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = message.value;
            return object;
        };
    
        /**
         * Converts this CMsgFocusedNodeTextResponse to JSON.
         * @function toJSON
         * @memberof CMsgFocusedNodeTextResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgFocusedNodeTextResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgFocusedNodeTextResponse;
    })();
    
    $root.CMsgBuildID = (function() {
    
        /**
         * Properties of a CMsgBuildID.
         * @exports ICMsgBuildID
         * @interface ICMsgBuildID
         * @property {number|Long|null} [build_id] CMsgBuildID build_id
         */
    
        /**
         * Constructs a new CMsgBuildID.
         * @exports CMsgBuildID
         * @classdesc Represents a CMsgBuildID.
         * @implements ICMsgBuildID
         * @constructor
         * @param {ICMsgBuildID=} [properties] Properties to set
         */
        function CMsgBuildID(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgBuildID build_id.
         * @member {number|Long} build_id
         * @memberof CMsgBuildID
         * @instance
         */
        CMsgBuildID.prototype.build_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CMsgBuildID instance using the specified properties.
         * @function create
         * @memberof CMsgBuildID
         * @static
         * @param {ICMsgBuildID=} [properties] Properties to set
         * @returns {CMsgBuildID} CMsgBuildID instance
         */
        CMsgBuildID.create = function create(properties) {
            return new CMsgBuildID(properties);
        };
    
        /**
         * Encodes the specified CMsgBuildID message. Does not implicitly {@link CMsgBuildID.verify|verify} messages.
         * @function encode
         * @memberof CMsgBuildID
         * @static
         * @param {ICMsgBuildID} message CMsgBuildID message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgBuildID.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.build_id != null && Object.hasOwnProperty.call(message, "build_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.build_id);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgBuildID message, length delimited. Does not implicitly {@link CMsgBuildID.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgBuildID
         * @static
         * @param {ICMsgBuildID} message CMsgBuildID message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgBuildID.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgBuildID message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgBuildID
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgBuildID} CMsgBuildID
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgBuildID.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBuildID();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.build_id = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgBuildID message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgBuildID
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgBuildID} CMsgBuildID
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgBuildID.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgBuildID message.
         * @function verify
         * @memberof CMsgBuildID
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgBuildID.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.build_id != null && message.hasOwnProperty("build_id"))
                if (!$util.isInteger(message.build_id) && !(message.build_id && $util.isInteger(message.build_id.low) && $util.isInteger(message.build_id.high)))
                    return "build_id: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgBuildID message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgBuildID
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgBuildID} CMsgBuildID
         */
        CMsgBuildID.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgBuildID)
                return object;
            var message = new $root.CMsgBuildID();
            if (object.build_id != null)
                if ($util.Long)
                    (message.build_id = $util.Long.fromValue(object.build_id)).unsigned = true;
                else if (typeof object.build_id === "string")
                    message.build_id = parseInt(object.build_id, 10);
                else if (typeof object.build_id === "number")
                    message.build_id = object.build_id;
                else if (typeof object.build_id === "object")
                    message.build_id = new $util.LongBits(object.build_id.low >>> 0, object.build_id.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgBuildID message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgBuildID
         * @static
         * @param {CMsgBuildID} message CMsgBuildID
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgBuildID.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.build_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.build_id = options.longs === String ? "0" : 0;
            if (message.build_id != null && message.hasOwnProperty("build_id"))
                if (typeof message.build_id === "number")
                    object.build_id = options.longs === String ? String(message.build_id) : message.build_id;
                else
                    object.build_id = options.longs === String ? $util.Long.prototype.toString.call(message.build_id) : options.longs === Number ? new $util.LongBits(message.build_id.low >>> 0, message.build_id.high >>> 0).toNumber(true) : message.build_id;
            return object;
        };
    
        /**
         * Converts this CMsgBuildID to JSON.
         * @function toJSON
         * @memberof CMsgBuildID
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgBuildID.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgBuildID;
    })();
    
    $root.CMsgOpenDevTools = (function() {
    
        /**
         * Properties of a CMsgOpenDevTools.
         * @exports ICMsgOpenDevTools
         * @interface ICMsgOpenDevTools
         * @property {number|null} [browser_handle] CMsgOpenDevTools browser_handle
         */
    
        /**
         * Constructs a new CMsgOpenDevTools.
         * @exports CMsgOpenDevTools
         * @classdesc Represents a CMsgOpenDevTools.
         * @implements ICMsgOpenDevTools
         * @constructor
         * @param {ICMsgOpenDevTools=} [properties] Properties to set
         */
        function CMsgOpenDevTools(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgOpenDevTools browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgOpenDevTools
         * @instance
         */
        CMsgOpenDevTools.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgOpenDevTools instance using the specified properties.
         * @function create
         * @memberof CMsgOpenDevTools
         * @static
         * @param {ICMsgOpenDevTools=} [properties] Properties to set
         * @returns {CMsgOpenDevTools} CMsgOpenDevTools instance
         */
        CMsgOpenDevTools.create = function create(properties) {
            return new CMsgOpenDevTools(properties);
        };
    
        /**
         * Encodes the specified CMsgOpenDevTools message. Does not implicitly {@link CMsgOpenDevTools.verify|verify} messages.
         * @function encode
         * @memberof CMsgOpenDevTools
         * @static
         * @param {ICMsgOpenDevTools} message CMsgOpenDevTools message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgOpenDevTools.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgOpenDevTools message, length delimited. Does not implicitly {@link CMsgOpenDevTools.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgOpenDevTools
         * @static
         * @param {ICMsgOpenDevTools} message CMsgOpenDevTools message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgOpenDevTools.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgOpenDevTools message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgOpenDevTools
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgOpenDevTools} CMsgOpenDevTools
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgOpenDevTools.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgOpenDevTools();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgOpenDevTools message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgOpenDevTools
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgOpenDevTools} CMsgOpenDevTools
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgOpenDevTools.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgOpenDevTools message.
         * @function verify
         * @memberof CMsgOpenDevTools
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgOpenDevTools.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgOpenDevTools message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgOpenDevTools
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgOpenDevTools} CMsgOpenDevTools
         */
        CMsgOpenDevTools.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgOpenDevTools)
                return object;
            var message = new $root.CMsgOpenDevTools();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgOpenDevTools message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgOpenDevTools
         * @static
         * @param {CMsgOpenDevTools} message CMsgOpenDevTools
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgOpenDevTools.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgOpenDevTools to JSON.
         * @function toJSON
         * @memberof CMsgOpenDevTools
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgOpenDevTools.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgOpenDevTools;
    })();
    
    $root.CMsgCloseDevTools = (function() {
    
        /**
         * Properties of a CMsgCloseDevTools.
         * @exports ICMsgCloseDevTools
         * @interface ICMsgCloseDevTools
         * @property {number|null} [browser_handle] CMsgCloseDevTools browser_handle
         */
    
        /**
         * Constructs a new CMsgCloseDevTools.
         * @exports CMsgCloseDevTools
         * @classdesc Represents a CMsgCloseDevTools.
         * @implements ICMsgCloseDevTools
         * @constructor
         * @param {ICMsgCloseDevTools=} [properties] Properties to set
         */
        function CMsgCloseDevTools(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgCloseDevTools browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgCloseDevTools
         * @instance
         */
        CMsgCloseDevTools.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgCloseDevTools instance using the specified properties.
         * @function create
         * @memberof CMsgCloseDevTools
         * @static
         * @param {ICMsgCloseDevTools=} [properties] Properties to set
         * @returns {CMsgCloseDevTools} CMsgCloseDevTools instance
         */
        CMsgCloseDevTools.create = function create(properties) {
            return new CMsgCloseDevTools(properties);
        };
    
        /**
         * Encodes the specified CMsgCloseDevTools message. Does not implicitly {@link CMsgCloseDevTools.verify|verify} messages.
         * @function encode
         * @memberof CMsgCloseDevTools
         * @static
         * @param {ICMsgCloseDevTools} message CMsgCloseDevTools message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgCloseDevTools.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgCloseDevTools message, length delimited. Does not implicitly {@link CMsgCloseDevTools.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgCloseDevTools
         * @static
         * @param {ICMsgCloseDevTools} message CMsgCloseDevTools message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgCloseDevTools.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgCloseDevTools message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgCloseDevTools
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgCloseDevTools} CMsgCloseDevTools
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgCloseDevTools.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgCloseDevTools();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgCloseDevTools message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgCloseDevTools
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgCloseDevTools} CMsgCloseDevTools
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgCloseDevTools.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgCloseDevTools message.
         * @function verify
         * @memberof CMsgCloseDevTools
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgCloseDevTools.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgCloseDevTools message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgCloseDevTools
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgCloseDevTools} CMsgCloseDevTools
         */
        CMsgCloseDevTools.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgCloseDevTools)
                return object;
            var message = new $root.CMsgCloseDevTools();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgCloseDevTools message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgCloseDevTools
         * @static
         * @param {CMsgCloseDevTools} message CMsgCloseDevTools
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgCloseDevTools.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgCloseDevTools to JSON.
         * @function toJSON
         * @memberof CMsgCloseDevTools
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgCloseDevTools.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgCloseDevTools;
    })();
    
    $root.CMsgUnlockH264 = (function() {
    
        /**
         * Properties of a CMsgUnlockH264.
         * @exports ICMsgUnlockH264
         * @interface ICMsgUnlockH264
         * @property {number|null} [browser_handle] CMsgUnlockH264 browser_handle
         * @property {string|null} [unlock_code] CMsgUnlockH264 unlock_code
         */
    
        /**
         * Constructs a new CMsgUnlockH264.
         * @exports CMsgUnlockH264
         * @classdesc Represents a CMsgUnlockH264.
         * @implements ICMsgUnlockH264
         * @constructor
         * @param {ICMsgUnlockH264=} [properties] Properties to set
         */
        function CMsgUnlockH264(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgUnlockH264 browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgUnlockH264
         * @instance
         */
        CMsgUnlockH264.prototype.browser_handle = 0;
    
        /**
         * CMsgUnlockH264 unlock_code.
         * @member {string} unlock_code
         * @memberof CMsgUnlockH264
         * @instance
         */
        CMsgUnlockH264.prototype.unlock_code = "";
    
        /**
         * Creates a new CMsgUnlockH264 instance using the specified properties.
         * @function create
         * @memberof CMsgUnlockH264
         * @static
         * @param {ICMsgUnlockH264=} [properties] Properties to set
         * @returns {CMsgUnlockH264} CMsgUnlockH264 instance
         */
        CMsgUnlockH264.create = function create(properties) {
            return new CMsgUnlockH264(properties);
        };
    
        /**
         * Encodes the specified CMsgUnlockH264 message. Does not implicitly {@link CMsgUnlockH264.verify|verify} messages.
         * @function encode
         * @memberof CMsgUnlockH264
         * @static
         * @param {ICMsgUnlockH264} message CMsgUnlockH264 message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgUnlockH264.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.unlock_code != null && Object.hasOwnProperty.call(message, "unlock_code"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.unlock_code);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgUnlockH264 message, length delimited. Does not implicitly {@link CMsgUnlockH264.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgUnlockH264
         * @static
         * @param {ICMsgUnlockH264} message CMsgUnlockH264 message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgUnlockH264.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgUnlockH264 message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgUnlockH264
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgUnlockH264} CMsgUnlockH264
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgUnlockH264.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgUnlockH264();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.unlock_code = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgUnlockH264 message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgUnlockH264
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgUnlockH264} CMsgUnlockH264
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgUnlockH264.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgUnlockH264 message.
         * @function verify
         * @memberof CMsgUnlockH264
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgUnlockH264.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.unlock_code != null && message.hasOwnProperty("unlock_code"))
                if (!$util.isString(message.unlock_code))
                    return "unlock_code: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgUnlockH264 message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgUnlockH264
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgUnlockH264} CMsgUnlockH264
         */
        CMsgUnlockH264.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgUnlockH264)
                return object;
            var message = new $root.CMsgUnlockH264();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.unlock_code != null)
                message.unlock_code = String(object.unlock_code);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgUnlockH264 message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgUnlockH264
         * @static
         * @param {CMsgUnlockH264} message CMsgUnlockH264
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgUnlockH264.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.unlock_code = "";
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.unlock_code != null && message.hasOwnProperty("unlock_code"))
                object.unlock_code = message.unlock_code;
            return object;
        };
    
        /**
         * Converts this CMsgUnlockH264 to JSON.
         * @function toJSON
         * @memberof CMsgUnlockH264
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgUnlockH264.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgUnlockH264;
    })();
    
    $root.CMsgScreenInformationChanged = (function() {
    
        /**
         * Properties of a CMsgScreenInformationChanged.
         * @exports ICMsgScreenInformationChanged
         * @interface ICMsgScreenInformationChanged
         * @property {number|null} [browser_handle] CMsgScreenInformationChanged browser_handle
         * @property {number|null} [override_width] CMsgScreenInformationChanged override_width
         * @property {number|null} [override_height] CMsgScreenInformationChanged override_height
         * @property {number|null} [monitor_left] CMsgScreenInformationChanged monitor_left
         * @property {number|null} [monitor_top] CMsgScreenInformationChanged monitor_top
         * @property {number|null} [monitor_right] CMsgScreenInformationChanged monitor_right
         * @property {number|null} [monitor_bottom] CMsgScreenInformationChanged monitor_bottom
         * @property {number|null} [usable_left] CMsgScreenInformationChanged usable_left
         * @property {number|null} [usable_top] CMsgScreenInformationChanged usable_top
         * @property {number|null} [usable_right] CMsgScreenInformationChanged usable_right
         * @property {number|null} [usable_bottom] CMsgScreenInformationChanged usable_bottom
         */
    
        /**
         * Constructs a new CMsgScreenInformationChanged.
         * @exports CMsgScreenInformationChanged
         * @classdesc Represents a CMsgScreenInformationChanged.
         * @implements ICMsgScreenInformationChanged
         * @constructor
         * @param {ICMsgScreenInformationChanged=} [properties] Properties to set
         */
        function CMsgScreenInformationChanged(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgScreenInformationChanged browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgScreenInformationChanged
         * @instance
         */
        CMsgScreenInformationChanged.prototype.browser_handle = 0;
    
        /**
         * CMsgScreenInformationChanged override_width.
         * @member {number} override_width
         * @memberof CMsgScreenInformationChanged
         * @instance
         */
        CMsgScreenInformationChanged.prototype.override_width = 0;
    
        /**
         * CMsgScreenInformationChanged override_height.
         * @member {number} override_height
         * @memberof CMsgScreenInformationChanged
         * @instance
         */
        CMsgScreenInformationChanged.prototype.override_height = 0;
    
        /**
         * CMsgScreenInformationChanged monitor_left.
         * @member {number} monitor_left
         * @memberof CMsgScreenInformationChanged
         * @instance
         */
        CMsgScreenInformationChanged.prototype.monitor_left = 0;
    
        /**
         * CMsgScreenInformationChanged monitor_top.
         * @member {number} monitor_top
         * @memberof CMsgScreenInformationChanged
         * @instance
         */
        CMsgScreenInformationChanged.prototype.monitor_top = 0;
    
        /**
         * CMsgScreenInformationChanged monitor_right.
         * @member {number} monitor_right
         * @memberof CMsgScreenInformationChanged
         * @instance
         */
        CMsgScreenInformationChanged.prototype.monitor_right = 0;
    
        /**
         * CMsgScreenInformationChanged monitor_bottom.
         * @member {number} monitor_bottom
         * @memberof CMsgScreenInformationChanged
         * @instance
         */
        CMsgScreenInformationChanged.prototype.monitor_bottom = 0;
    
        /**
         * CMsgScreenInformationChanged usable_left.
         * @member {number} usable_left
         * @memberof CMsgScreenInformationChanged
         * @instance
         */
        CMsgScreenInformationChanged.prototype.usable_left = 0;
    
        /**
         * CMsgScreenInformationChanged usable_top.
         * @member {number} usable_top
         * @memberof CMsgScreenInformationChanged
         * @instance
         */
        CMsgScreenInformationChanged.prototype.usable_top = 0;
    
        /**
         * CMsgScreenInformationChanged usable_right.
         * @member {number} usable_right
         * @memberof CMsgScreenInformationChanged
         * @instance
         */
        CMsgScreenInformationChanged.prototype.usable_right = 0;
    
        /**
         * CMsgScreenInformationChanged usable_bottom.
         * @member {number} usable_bottom
         * @memberof CMsgScreenInformationChanged
         * @instance
         */
        CMsgScreenInformationChanged.prototype.usable_bottom = 0;
    
        /**
         * Creates a new CMsgScreenInformationChanged instance using the specified properties.
         * @function create
         * @memberof CMsgScreenInformationChanged
         * @static
         * @param {ICMsgScreenInformationChanged=} [properties] Properties to set
         * @returns {CMsgScreenInformationChanged} CMsgScreenInformationChanged instance
         */
        CMsgScreenInformationChanged.create = function create(properties) {
            return new CMsgScreenInformationChanged(properties);
        };
    
        /**
         * Encodes the specified CMsgScreenInformationChanged message. Does not implicitly {@link CMsgScreenInformationChanged.verify|verify} messages.
         * @function encode
         * @memberof CMsgScreenInformationChanged
         * @static
         * @param {ICMsgScreenInformationChanged} message CMsgScreenInformationChanged message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgScreenInformationChanged.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.override_width != null && Object.hasOwnProperty.call(message, "override_width"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.override_width);
            if (message.override_height != null && Object.hasOwnProperty.call(message, "override_height"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.override_height);
            if (message.monitor_left != null && Object.hasOwnProperty.call(message, "monitor_left"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.monitor_left);
            if (message.monitor_top != null && Object.hasOwnProperty.call(message, "monitor_top"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.monitor_top);
            if (message.monitor_right != null && Object.hasOwnProperty.call(message, "monitor_right"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.monitor_right);
            if (message.monitor_bottom != null && Object.hasOwnProperty.call(message, "monitor_bottom"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.monitor_bottom);
            if (message.usable_left != null && Object.hasOwnProperty.call(message, "usable_left"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.usable_left);
            if (message.usable_top != null && Object.hasOwnProperty.call(message, "usable_top"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.usable_top);
            if (message.usable_right != null && Object.hasOwnProperty.call(message, "usable_right"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.usable_right);
            if (message.usable_bottom != null && Object.hasOwnProperty.call(message, "usable_bottom"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.usable_bottom);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgScreenInformationChanged message, length delimited. Does not implicitly {@link CMsgScreenInformationChanged.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgScreenInformationChanged
         * @static
         * @param {ICMsgScreenInformationChanged} message CMsgScreenInformationChanged message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgScreenInformationChanged.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgScreenInformationChanged message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgScreenInformationChanged
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgScreenInformationChanged} CMsgScreenInformationChanged
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgScreenInformationChanged.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgScreenInformationChanged();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.override_width = reader.uint32();
                    break;
                case 3:
                    message.override_height = reader.uint32();
                    break;
                case 4:
                    message.monitor_left = reader.uint32();
                    break;
                case 5:
                    message.monitor_top = reader.uint32();
                    break;
                case 6:
                    message.monitor_right = reader.uint32();
                    break;
                case 7:
                    message.monitor_bottom = reader.uint32();
                    break;
                case 8:
                    message.usable_left = reader.uint32();
                    break;
                case 9:
                    message.usable_top = reader.uint32();
                    break;
                case 10:
                    message.usable_right = reader.uint32();
                    break;
                case 11:
                    message.usable_bottom = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgScreenInformationChanged message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgScreenInformationChanged
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgScreenInformationChanged} CMsgScreenInformationChanged
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgScreenInformationChanged.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgScreenInformationChanged message.
         * @function verify
         * @memberof CMsgScreenInformationChanged
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgScreenInformationChanged.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.override_width != null && message.hasOwnProperty("override_width"))
                if (!$util.isInteger(message.override_width))
                    return "override_width: integer expected";
            if (message.override_height != null && message.hasOwnProperty("override_height"))
                if (!$util.isInteger(message.override_height))
                    return "override_height: integer expected";
            if (message.monitor_left != null && message.hasOwnProperty("monitor_left"))
                if (!$util.isInteger(message.monitor_left))
                    return "monitor_left: integer expected";
            if (message.monitor_top != null && message.hasOwnProperty("monitor_top"))
                if (!$util.isInteger(message.monitor_top))
                    return "monitor_top: integer expected";
            if (message.monitor_right != null && message.hasOwnProperty("monitor_right"))
                if (!$util.isInteger(message.monitor_right))
                    return "monitor_right: integer expected";
            if (message.monitor_bottom != null && message.hasOwnProperty("monitor_bottom"))
                if (!$util.isInteger(message.monitor_bottom))
                    return "monitor_bottom: integer expected";
            if (message.usable_left != null && message.hasOwnProperty("usable_left"))
                if (!$util.isInteger(message.usable_left))
                    return "usable_left: integer expected";
            if (message.usable_top != null && message.hasOwnProperty("usable_top"))
                if (!$util.isInteger(message.usable_top))
                    return "usable_top: integer expected";
            if (message.usable_right != null && message.hasOwnProperty("usable_right"))
                if (!$util.isInteger(message.usable_right))
                    return "usable_right: integer expected";
            if (message.usable_bottom != null && message.hasOwnProperty("usable_bottom"))
                if (!$util.isInteger(message.usable_bottom))
                    return "usable_bottom: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgScreenInformationChanged message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgScreenInformationChanged
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgScreenInformationChanged} CMsgScreenInformationChanged
         */
        CMsgScreenInformationChanged.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgScreenInformationChanged)
                return object;
            var message = new $root.CMsgScreenInformationChanged();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.override_width != null)
                message.override_width = object.override_width >>> 0;
            if (object.override_height != null)
                message.override_height = object.override_height >>> 0;
            if (object.monitor_left != null)
                message.monitor_left = object.monitor_left >>> 0;
            if (object.monitor_top != null)
                message.monitor_top = object.monitor_top >>> 0;
            if (object.monitor_right != null)
                message.monitor_right = object.monitor_right >>> 0;
            if (object.monitor_bottom != null)
                message.monitor_bottom = object.monitor_bottom >>> 0;
            if (object.usable_left != null)
                message.usable_left = object.usable_left >>> 0;
            if (object.usable_top != null)
                message.usable_top = object.usable_top >>> 0;
            if (object.usable_right != null)
                message.usable_right = object.usable_right >>> 0;
            if (object.usable_bottom != null)
                message.usable_bottom = object.usable_bottom >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgScreenInformationChanged message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgScreenInformationChanged
         * @static
         * @param {CMsgScreenInformationChanged} message CMsgScreenInformationChanged
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgScreenInformationChanged.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.override_width = 0;
                object.override_height = 0;
                object.monitor_left = 0;
                object.monitor_top = 0;
                object.monitor_right = 0;
                object.monitor_bottom = 0;
                object.usable_left = 0;
                object.usable_top = 0;
                object.usable_right = 0;
                object.usable_bottom = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.override_width != null && message.hasOwnProperty("override_width"))
                object.override_width = message.override_width;
            if (message.override_height != null && message.hasOwnProperty("override_height"))
                object.override_height = message.override_height;
            if (message.monitor_left != null && message.hasOwnProperty("monitor_left"))
                object.monitor_left = message.monitor_left;
            if (message.monitor_top != null && message.hasOwnProperty("monitor_top"))
                object.monitor_top = message.monitor_top;
            if (message.monitor_right != null && message.hasOwnProperty("monitor_right"))
                object.monitor_right = message.monitor_right;
            if (message.monitor_bottom != null && message.hasOwnProperty("monitor_bottom"))
                object.monitor_bottom = message.monitor_bottom;
            if (message.usable_left != null && message.hasOwnProperty("usable_left"))
                object.usable_left = message.usable_left;
            if (message.usable_top != null && message.hasOwnProperty("usable_top"))
                object.usable_top = message.usable_top;
            if (message.usable_right != null && message.hasOwnProperty("usable_right"))
                object.usable_right = message.usable_right;
            if (message.usable_bottom != null && message.hasOwnProperty("usable_bottom"))
                object.usable_bottom = message.usable_bottom;
            return object;
        };
    
        /**
         * Converts this CMsgScreenInformationChanged to JSON.
         * @function toJSON
         * @memberof CMsgScreenInformationChanged
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgScreenInformationChanged.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgScreenInformationChanged;
    })();
    
    $root.CMsgClearAllCookies = (function() {
    
        /**
         * Properties of a CMsgClearAllCookies.
         * @exports ICMsgClearAllCookies
         * @interface ICMsgClearAllCookies
         * @property {number|null} [browser_handle] CMsgClearAllCookies browser_handle
         */
    
        /**
         * Constructs a new CMsgClearAllCookies.
         * @exports CMsgClearAllCookies
         * @classdesc Represents a CMsgClearAllCookies.
         * @implements ICMsgClearAllCookies
         * @constructor
         * @param {ICMsgClearAllCookies=} [properties] Properties to set
         */
        function CMsgClearAllCookies(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgClearAllCookies browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgClearAllCookies
         * @instance
         */
        CMsgClearAllCookies.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgClearAllCookies instance using the specified properties.
         * @function create
         * @memberof CMsgClearAllCookies
         * @static
         * @param {ICMsgClearAllCookies=} [properties] Properties to set
         * @returns {CMsgClearAllCookies} CMsgClearAllCookies instance
         */
        CMsgClearAllCookies.create = function create(properties) {
            return new CMsgClearAllCookies(properties);
        };
    
        /**
         * Encodes the specified CMsgClearAllCookies message. Does not implicitly {@link CMsgClearAllCookies.verify|verify} messages.
         * @function encode
         * @memberof CMsgClearAllCookies
         * @static
         * @param {ICMsgClearAllCookies} message CMsgClearAllCookies message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClearAllCookies.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgClearAllCookies message, length delimited. Does not implicitly {@link CMsgClearAllCookies.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgClearAllCookies
         * @static
         * @param {ICMsgClearAllCookies} message CMsgClearAllCookies message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgClearAllCookies.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgClearAllCookies message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgClearAllCookies
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgClearAllCookies} CMsgClearAllCookies
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClearAllCookies.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgClearAllCookies();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgClearAllCookies message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgClearAllCookies
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgClearAllCookies} CMsgClearAllCookies
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgClearAllCookies.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgClearAllCookies message.
         * @function verify
         * @memberof CMsgClearAllCookies
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgClearAllCookies.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgClearAllCookies message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgClearAllCookies
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgClearAllCookies} CMsgClearAllCookies
         */
        CMsgClearAllCookies.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgClearAllCookies)
                return object;
            var message = new $root.CMsgClearAllCookies();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgClearAllCookies message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgClearAllCookies
         * @static
         * @param {CMsgClearAllCookies} message CMsgClearAllCookies
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgClearAllCookies.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgClearAllCookies to JSON.
         * @function toJSON
         * @memberof CMsgClearAllCookies
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgClearAllCookies.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgClearAllCookies;
    })();
    
    $root.CMsgScreenDPI = (function() {
    
        /**
         * Properties of a CMsgScreenDPI.
         * @exports ICMsgScreenDPI
         * @interface ICMsgScreenDPI
         * @property {number|null} [browser_handle] CMsgScreenDPI browser_handle
         * @property {number|null} [dpi_scaling] CMsgScreenDPI dpi_scaling
         */
    
        /**
         * Constructs a new CMsgScreenDPI.
         * @exports CMsgScreenDPI
         * @classdesc Represents a CMsgScreenDPI.
         * @implements ICMsgScreenDPI
         * @constructor
         * @param {ICMsgScreenDPI=} [properties] Properties to set
         */
        function CMsgScreenDPI(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgScreenDPI browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgScreenDPI
         * @instance
         */
        CMsgScreenDPI.prototype.browser_handle = 0;
    
        /**
         * CMsgScreenDPI dpi_scaling.
         * @member {number} dpi_scaling
         * @memberof CMsgScreenDPI
         * @instance
         */
        CMsgScreenDPI.prototype.dpi_scaling = 0;
    
        /**
         * Creates a new CMsgScreenDPI instance using the specified properties.
         * @function create
         * @memberof CMsgScreenDPI
         * @static
         * @param {ICMsgScreenDPI=} [properties] Properties to set
         * @returns {CMsgScreenDPI} CMsgScreenDPI instance
         */
        CMsgScreenDPI.create = function create(properties) {
            return new CMsgScreenDPI(properties);
        };
    
        /**
         * Encodes the specified CMsgScreenDPI message. Does not implicitly {@link CMsgScreenDPI.verify|verify} messages.
         * @function encode
         * @memberof CMsgScreenDPI
         * @static
         * @param {ICMsgScreenDPI} message CMsgScreenDPI message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgScreenDPI.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.dpi_scaling != null && Object.hasOwnProperty.call(message, "dpi_scaling"))
                writer.uint32(/* id 2, wireType 5 =*/21).float(message.dpi_scaling);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgScreenDPI message, length delimited. Does not implicitly {@link CMsgScreenDPI.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgScreenDPI
         * @static
         * @param {ICMsgScreenDPI} message CMsgScreenDPI message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgScreenDPI.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgScreenDPI message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgScreenDPI
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgScreenDPI} CMsgScreenDPI
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgScreenDPI.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgScreenDPI();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.dpi_scaling = reader.float();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgScreenDPI message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgScreenDPI
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgScreenDPI} CMsgScreenDPI
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgScreenDPI.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgScreenDPI message.
         * @function verify
         * @memberof CMsgScreenDPI
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgScreenDPI.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.dpi_scaling != null && message.hasOwnProperty("dpi_scaling"))
                if (typeof message.dpi_scaling !== "number")
                    return "dpi_scaling: number expected";
            return null;
        };
    
        /**
         * Creates a CMsgScreenDPI message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgScreenDPI
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgScreenDPI} CMsgScreenDPI
         */
        CMsgScreenDPI.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgScreenDPI)
                return object;
            var message = new $root.CMsgScreenDPI();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.dpi_scaling != null)
                message.dpi_scaling = Number(object.dpi_scaling);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgScreenDPI message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgScreenDPI
         * @static
         * @param {CMsgScreenDPI} message CMsgScreenDPI
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgScreenDPI.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.dpi_scaling = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.dpi_scaling != null && message.hasOwnProperty("dpi_scaling"))
                object.dpi_scaling = options.json && !isFinite(message.dpi_scaling) ? String(message.dpi_scaling) : message.dpi_scaling;
            return object;
        };
    
        /**
         * Converts this CMsgScreenDPI to JSON.
         * @function toJSON
         * @memberof CMsgScreenDPI
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgScreenDPI.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgScreenDPI;
    })();
    
    $root.CMsgAuthedSteamDomains = (function() {
    
        /**
         * Properties of a CMsgAuthedSteamDomains.
         * @exports ICMsgAuthedSteamDomains
         * @interface ICMsgAuthedSteamDomains
         * @property {Array.<string>|null} [domains] CMsgAuthedSteamDomains domains
         */
    
        /**
         * Constructs a new CMsgAuthedSteamDomains.
         * @exports CMsgAuthedSteamDomains
         * @classdesc Represents a CMsgAuthedSteamDomains.
         * @implements ICMsgAuthedSteamDomains
         * @constructor
         * @param {ICMsgAuthedSteamDomains=} [properties] Properties to set
         */
        function CMsgAuthedSteamDomains(properties) {
            this.domains = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgAuthedSteamDomains domains.
         * @member {Array.<string>} domains
         * @memberof CMsgAuthedSteamDomains
         * @instance
         */
        CMsgAuthedSteamDomains.prototype.domains = $util.emptyArray;
    
        /**
         * Creates a new CMsgAuthedSteamDomains instance using the specified properties.
         * @function create
         * @memberof CMsgAuthedSteamDomains
         * @static
         * @param {ICMsgAuthedSteamDomains=} [properties] Properties to set
         * @returns {CMsgAuthedSteamDomains} CMsgAuthedSteamDomains instance
         */
        CMsgAuthedSteamDomains.create = function create(properties) {
            return new CMsgAuthedSteamDomains(properties);
        };
    
        /**
         * Encodes the specified CMsgAuthedSteamDomains message. Does not implicitly {@link CMsgAuthedSteamDomains.verify|verify} messages.
         * @function encode
         * @memberof CMsgAuthedSteamDomains
         * @static
         * @param {ICMsgAuthedSteamDomains} message CMsgAuthedSteamDomains message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAuthedSteamDomains.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.domains != null && message.domains.length)
                for (var i = 0; i < message.domains.length; ++i)
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.domains[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgAuthedSteamDomains message, length delimited. Does not implicitly {@link CMsgAuthedSteamDomains.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgAuthedSteamDomains
         * @static
         * @param {ICMsgAuthedSteamDomains} message CMsgAuthedSteamDomains message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAuthedSteamDomains.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgAuthedSteamDomains message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgAuthedSteamDomains
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgAuthedSteamDomains} CMsgAuthedSteamDomains
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAuthedSteamDomains.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgAuthedSteamDomains();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.domains && message.domains.length))
                        message.domains = [];
                    message.domains.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgAuthedSteamDomains message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgAuthedSteamDomains
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgAuthedSteamDomains} CMsgAuthedSteamDomains
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAuthedSteamDomains.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgAuthedSteamDomains message.
         * @function verify
         * @memberof CMsgAuthedSteamDomains
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgAuthedSteamDomains.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.domains != null && message.hasOwnProperty("domains")) {
                if (!Array.isArray(message.domains))
                    return "domains: array expected";
                for (var i = 0; i < message.domains.length; ++i)
                    if (!$util.isString(message.domains[i]))
                        return "domains: string[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CMsgAuthedSteamDomains message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgAuthedSteamDomains
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgAuthedSteamDomains} CMsgAuthedSteamDomains
         */
        CMsgAuthedSteamDomains.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgAuthedSteamDomains)
                return object;
            var message = new $root.CMsgAuthedSteamDomains();
            if (object.domains) {
                if (!Array.isArray(object.domains))
                    throw TypeError(".CMsgAuthedSteamDomains.domains: array expected");
                message.domains = [];
                for (var i = 0; i < object.domains.length; ++i)
                    message.domains[i] = String(object.domains[i]);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgAuthedSteamDomains message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgAuthedSteamDomains
         * @static
         * @param {CMsgAuthedSteamDomains} message CMsgAuthedSteamDomains
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgAuthedSteamDomains.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.domains = [];
            if (message.domains && message.domains.length) {
                object.domains = [];
                for (var j = 0; j < message.domains.length; ++j)
                    object.domains[j] = message.domains[j];
            }
            return object;
        };
    
        /**
         * Converts this CMsgAuthedSteamDomains to JSON.
         * @function toJSON
         * @memberof CMsgAuthedSteamDomains
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgAuthedSteamDomains.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgAuthedSteamDomains;
    })();
    
    $root.CMsgSteamAuthNeeded = (function() {
    
        /**
         * Properties of a CMsgSteamAuthNeeded.
         * @exports ICMsgSteamAuthNeeded
         * @interface ICMsgSteamAuthNeeded
         * @property {boolean|null} [filler] CMsgSteamAuthNeeded filler
         */
    
        /**
         * Constructs a new CMsgSteamAuthNeeded.
         * @exports CMsgSteamAuthNeeded
         * @classdesc Represents a CMsgSteamAuthNeeded.
         * @implements ICMsgSteamAuthNeeded
         * @constructor
         * @param {ICMsgSteamAuthNeeded=} [properties] Properties to set
         */
        function CMsgSteamAuthNeeded(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamAuthNeeded filler.
         * @member {boolean} filler
         * @memberof CMsgSteamAuthNeeded
         * @instance
         */
        CMsgSteamAuthNeeded.prototype.filler = false;
    
        /**
         * Creates a new CMsgSteamAuthNeeded instance using the specified properties.
         * @function create
         * @memberof CMsgSteamAuthNeeded
         * @static
         * @param {ICMsgSteamAuthNeeded=} [properties] Properties to set
         * @returns {CMsgSteamAuthNeeded} CMsgSteamAuthNeeded instance
         */
        CMsgSteamAuthNeeded.create = function create(properties) {
            return new CMsgSteamAuthNeeded(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamAuthNeeded message. Does not implicitly {@link CMsgSteamAuthNeeded.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamAuthNeeded
         * @static
         * @param {ICMsgSteamAuthNeeded} message CMsgSteamAuthNeeded message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamAuthNeeded.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.filler != null && Object.hasOwnProperty.call(message, "filler"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.filler);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamAuthNeeded message, length delimited. Does not implicitly {@link CMsgSteamAuthNeeded.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamAuthNeeded
         * @static
         * @param {ICMsgSteamAuthNeeded} message CMsgSteamAuthNeeded message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamAuthNeeded.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamAuthNeeded message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamAuthNeeded
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamAuthNeeded} CMsgSteamAuthNeeded
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamAuthNeeded.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamAuthNeeded();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.filler = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamAuthNeeded message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamAuthNeeded
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamAuthNeeded} CMsgSteamAuthNeeded
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamAuthNeeded.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamAuthNeeded message.
         * @function verify
         * @memberof CMsgSteamAuthNeeded
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamAuthNeeded.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.filler != null && message.hasOwnProperty("filler"))
                if (typeof message.filler !== "boolean")
                    return "filler: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamAuthNeeded message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamAuthNeeded
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamAuthNeeded} CMsgSteamAuthNeeded
         */
        CMsgSteamAuthNeeded.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamAuthNeeded)
                return object;
            var message = new $root.CMsgSteamAuthNeeded();
            if (object.filler != null)
                message.filler = Boolean(object.filler);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamAuthNeeded message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamAuthNeeded
         * @static
         * @param {CMsgSteamAuthNeeded} message CMsgSteamAuthNeeded
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamAuthNeeded.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.filler = false;
            if (message.filler != null && message.hasOwnProperty("filler"))
                object.filler = message.filler;
            return object;
        };
    
        /**
         * Converts this CMsgSteamAuthNeeded to JSON.
         * @function toJSON
         * @memberof CMsgSteamAuthNeeded
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamAuthNeeded.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSteamAuthNeeded;
    })();
    
    $root.CMsgSteamAuthCookiesSet = (function() {
    
        /**
         * Properties of a CMsgSteamAuthCookiesSet.
         * @exports ICMsgSteamAuthCookiesSet
         * @interface ICMsgSteamAuthCookiesSet
         * @property {boolean|null} [success] CMsgSteamAuthCookiesSet success
         */
    
        /**
         * Constructs a new CMsgSteamAuthCookiesSet.
         * @exports CMsgSteamAuthCookiesSet
         * @classdesc Represents a CMsgSteamAuthCookiesSet.
         * @implements ICMsgSteamAuthCookiesSet
         * @constructor
         * @param {ICMsgSteamAuthCookiesSet=} [properties] Properties to set
         */
        function CMsgSteamAuthCookiesSet(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamAuthCookiesSet success.
         * @member {boolean} success
         * @memberof CMsgSteamAuthCookiesSet
         * @instance
         */
        CMsgSteamAuthCookiesSet.prototype.success = false;
    
        /**
         * Creates a new CMsgSteamAuthCookiesSet instance using the specified properties.
         * @function create
         * @memberof CMsgSteamAuthCookiesSet
         * @static
         * @param {ICMsgSteamAuthCookiesSet=} [properties] Properties to set
         * @returns {CMsgSteamAuthCookiesSet} CMsgSteamAuthCookiesSet instance
         */
        CMsgSteamAuthCookiesSet.create = function create(properties) {
            return new CMsgSteamAuthCookiesSet(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamAuthCookiesSet message. Does not implicitly {@link CMsgSteamAuthCookiesSet.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamAuthCookiesSet
         * @static
         * @param {ICMsgSteamAuthCookiesSet} message CMsgSteamAuthCookiesSet message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamAuthCookiesSet.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.success != null && Object.hasOwnProperty.call(message, "success"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.success);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamAuthCookiesSet message, length delimited. Does not implicitly {@link CMsgSteamAuthCookiesSet.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamAuthCookiesSet
         * @static
         * @param {ICMsgSteamAuthCookiesSet} message CMsgSteamAuthCookiesSet message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamAuthCookiesSet.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamAuthCookiesSet message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamAuthCookiesSet
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamAuthCookiesSet} CMsgSteamAuthCookiesSet
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamAuthCookiesSet.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamAuthCookiesSet();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.success = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamAuthCookiesSet message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamAuthCookiesSet
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamAuthCookiesSet} CMsgSteamAuthCookiesSet
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamAuthCookiesSet.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamAuthCookiesSet message.
         * @function verify
         * @memberof CMsgSteamAuthCookiesSet
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamAuthCookiesSet.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.success != null && message.hasOwnProperty("success"))
                if (typeof message.success !== "boolean")
                    return "success: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamAuthCookiesSet message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamAuthCookiesSet
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamAuthCookiesSet} CMsgSteamAuthCookiesSet
         */
        CMsgSteamAuthCookiesSet.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamAuthCookiesSet)
                return object;
            var message = new $root.CMsgSteamAuthCookiesSet();
            if (object.success != null)
                message.success = Boolean(object.success);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamAuthCookiesSet message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamAuthCookiesSet
         * @static
         * @param {CMsgSteamAuthCookiesSet} message CMsgSteamAuthCookiesSet
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamAuthCookiesSet.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.success = false;
            if (message.success != null && message.hasOwnProperty("success"))
                object.success = message.success;
            return object;
        };
    
        /**
         * Converts this CMsgSteamAuthCookiesSet to JSON.
         * @function toJSON
         * @memberof CMsgSteamAuthCookiesSet
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamAuthCookiesSet.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSteamAuthCookiesSet;
    })();
    
    $root.CMsgJSRegisterMethod = (function() {
    
        /**
         * Properties of a CMsgJSRegisterMethod.
         * @exports ICMsgJSRegisterMethod
         * @interface ICMsgJSRegisterMethod
         * @property {number|null} [browser_handle] CMsgJSRegisterMethod browser_handle
         * @property {string|null} [name] CMsgJSRegisterMethod name
         * @property {EJSRegisterMethodType|null} [method_type] CMsgJSRegisterMethod method_type
         */
    
        /**
         * Constructs a new CMsgJSRegisterMethod.
         * @exports CMsgJSRegisterMethod
         * @classdesc Represents a CMsgJSRegisterMethod.
         * @implements ICMsgJSRegisterMethod
         * @constructor
         * @param {ICMsgJSRegisterMethod=} [properties] Properties to set
         */
        function CMsgJSRegisterMethod(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgJSRegisterMethod browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgJSRegisterMethod
         * @instance
         */
        CMsgJSRegisterMethod.prototype.browser_handle = 0;
    
        /**
         * CMsgJSRegisterMethod name.
         * @member {string} name
         * @memberof CMsgJSRegisterMethod
         * @instance
         */
        CMsgJSRegisterMethod.prototype.name = "";
    
        /**
         * CMsgJSRegisterMethod method_type.
         * @member {EJSRegisterMethodType} method_type
         * @memberof CMsgJSRegisterMethod
         * @instance
         */
        CMsgJSRegisterMethod.prototype.method_type = 0;
    
        /**
         * Creates a new CMsgJSRegisterMethod instance using the specified properties.
         * @function create
         * @memberof CMsgJSRegisterMethod
         * @static
         * @param {ICMsgJSRegisterMethod=} [properties] Properties to set
         * @returns {CMsgJSRegisterMethod} CMsgJSRegisterMethod instance
         */
        CMsgJSRegisterMethod.create = function create(properties) {
            return new CMsgJSRegisterMethod(properties);
        };
    
        /**
         * Encodes the specified CMsgJSRegisterMethod message. Does not implicitly {@link CMsgJSRegisterMethod.verify|verify} messages.
         * @function encode
         * @memberof CMsgJSRegisterMethod
         * @static
         * @param {ICMsgJSRegisterMethod} message CMsgJSRegisterMethod message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgJSRegisterMethod.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
            if (message.method_type != null && Object.hasOwnProperty.call(message, "method_type"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.method_type);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgJSRegisterMethod message, length delimited. Does not implicitly {@link CMsgJSRegisterMethod.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgJSRegisterMethod
         * @static
         * @param {ICMsgJSRegisterMethod} message CMsgJSRegisterMethod message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgJSRegisterMethod.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgJSRegisterMethod message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgJSRegisterMethod
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgJSRegisterMethod} CMsgJSRegisterMethod
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgJSRegisterMethod.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgJSRegisterMethod();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    message.method_type = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgJSRegisterMethod message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgJSRegisterMethod
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgJSRegisterMethod} CMsgJSRegisterMethod
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgJSRegisterMethod.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgJSRegisterMethod message.
         * @function verify
         * @memberof CMsgJSRegisterMethod
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgJSRegisterMethod.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.method_type != null && message.hasOwnProperty("method_type"))
                switch (message.method_type) {
                default:
                    return "method_type: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            return null;
        };
    
        /**
         * Creates a CMsgJSRegisterMethod message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgJSRegisterMethod
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgJSRegisterMethod} CMsgJSRegisterMethod
         */
        CMsgJSRegisterMethod.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgJSRegisterMethod)
                return object;
            var message = new $root.CMsgJSRegisterMethod();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.name != null)
                message.name = String(object.name);
            switch (object.method_type) {
            case "k_EJSRegisterMethodType_Invalid":
            case 0:
                message.method_type = 0;
                break;
            case "k_EJSRegisterMethodType_Function":
            case 1:
                message.method_type = 1;
                break;
            case "k_EJSRegisterMethodType_Callback":
            case 2:
                message.method_type = 2;
                break;
            case "k_EJSRegisterMethodType_Promise":
            case 3:
                message.method_type = 3;
                break;
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgJSRegisterMethod message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgJSRegisterMethod
         * @static
         * @param {CMsgJSRegisterMethod} message CMsgJSRegisterMethod
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgJSRegisterMethod.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.name = "";
                object.method_type = options.enums === String ? "k_EJSRegisterMethodType_Invalid" : 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.method_type != null && message.hasOwnProperty("method_type"))
                object.method_type = options.enums === String ? $root.EJSRegisterMethodType[message.method_type] : message.method_type;
            return object;
        };
    
        /**
         * Converts this CMsgJSRegisterMethod to JSON.
         * @function toJSON
         * @memberof CMsgJSRegisterMethod
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgJSRegisterMethod.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgJSRegisterMethod;
    })();
    
    $root.CJSMethodArgument = (function() {
    
        /**
         * Properties of a CJSMethodArgument.
         * @exports ICJSMethodArgument
         * @interface ICJSMethodArgument
         * @property {string|null} [json_data] CJSMethodArgument json_data
         * @property {number|Long|null} [function_handle] CJSMethodArgument function_handle
         */
    
        /**
         * Constructs a new CJSMethodArgument.
         * @exports CJSMethodArgument
         * @classdesc Represents a CJSMethodArgument.
         * @implements ICJSMethodArgument
         * @constructor
         * @param {ICJSMethodArgument=} [properties] Properties to set
         */
        function CJSMethodArgument(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CJSMethodArgument json_data.
         * @member {string} json_data
         * @memberof CJSMethodArgument
         * @instance
         */
        CJSMethodArgument.prototype.json_data = "";
    
        /**
         * CJSMethodArgument function_handle.
         * @member {number|Long} function_handle
         * @memberof CJSMethodArgument
         * @instance
         */
        CJSMethodArgument.prototype.function_handle = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CJSMethodArgument instance using the specified properties.
         * @function create
         * @memberof CJSMethodArgument
         * @static
         * @param {ICJSMethodArgument=} [properties] Properties to set
         * @returns {CJSMethodArgument} CJSMethodArgument instance
         */
        CJSMethodArgument.create = function create(properties) {
            return new CJSMethodArgument(properties);
        };
    
        /**
         * Encodes the specified CJSMethodArgument message. Does not implicitly {@link CJSMethodArgument.verify|verify} messages.
         * @function encode
         * @memberof CJSMethodArgument
         * @static
         * @param {ICJSMethodArgument} message CJSMethodArgument message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CJSMethodArgument.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.json_data != null && Object.hasOwnProperty.call(message, "json_data"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.json_data);
            if (message.function_handle != null && Object.hasOwnProperty.call(message, "function_handle"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.function_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CJSMethodArgument message, length delimited. Does not implicitly {@link CJSMethodArgument.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CJSMethodArgument
         * @static
         * @param {ICJSMethodArgument} message CJSMethodArgument message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CJSMethodArgument.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CJSMethodArgument message from the specified reader or buffer.
         * @function decode
         * @memberof CJSMethodArgument
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CJSMethodArgument} CJSMethodArgument
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CJSMethodArgument.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CJSMethodArgument();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.json_data = reader.string();
                    break;
                case 2:
                    message.function_handle = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CJSMethodArgument message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CJSMethodArgument
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CJSMethodArgument} CJSMethodArgument
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CJSMethodArgument.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CJSMethodArgument message.
         * @function verify
         * @memberof CJSMethodArgument
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CJSMethodArgument.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.json_data != null && message.hasOwnProperty("json_data"))
                if (!$util.isString(message.json_data))
                    return "json_data: string expected";
            if (message.function_handle != null && message.hasOwnProperty("function_handle"))
                if (!$util.isInteger(message.function_handle) && !(message.function_handle && $util.isInteger(message.function_handle.low) && $util.isInteger(message.function_handle.high)))
                    return "function_handle: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CJSMethodArgument message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CJSMethodArgument
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CJSMethodArgument} CJSMethodArgument
         */
        CJSMethodArgument.fromObject = function fromObject(object) {
            if (object instanceof $root.CJSMethodArgument)
                return object;
            var message = new $root.CJSMethodArgument();
            if (object.json_data != null)
                message.json_data = String(object.json_data);
            if (object.function_handle != null)
                if ($util.Long)
                    (message.function_handle = $util.Long.fromValue(object.function_handle)).unsigned = true;
                else if (typeof object.function_handle === "string")
                    message.function_handle = parseInt(object.function_handle, 10);
                else if (typeof object.function_handle === "number")
                    message.function_handle = object.function_handle;
                else if (typeof object.function_handle === "object")
                    message.function_handle = new $util.LongBits(object.function_handle.low >>> 0, object.function_handle.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CJSMethodArgument message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CJSMethodArgument
         * @static
         * @param {CJSMethodArgument} message CJSMethodArgument
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CJSMethodArgument.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.json_data = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.function_handle = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.function_handle = options.longs === String ? "0" : 0;
            }
            if (message.json_data != null && message.hasOwnProperty("json_data"))
                object.json_data = message.json_data;
            if (message.function_handle != null && message.hasOwnProperty("function_handle"))
                if (typeof message.function_handle === "number")
                    object.function_handle = options.longs === String ? String(message.function_handle) : message.function_handle;
                else
                    object.function_handle = options.longs === String ? $util.Long.prototype.toString.call(message.function_handle) : options.longs === Number ? new $util.LongBits(message.function_handle.low >>> 0, message.function_handle.high >>> 0).toNumber(true) : message.function_handle;
            return object;
        };
    
        /**
         * Converts this CJSMethodArgument to JSON.
         * @function toJSON
         * @memberof CJSMethodArgument
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CJSMethodArgument.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CJSMethodArgument;
    })();
    
    $root.CMsgJSValue = (function() {
    
        /**
         * Properties of a CMsgJSValue.
         * @exports ICMsgJSValue
         * @interface ICMsgJSValue
         * @property {boolean|null} [bool_value] CMsgJSValue bool_value
         * @property {number|null} [int_value] CMsgJSValue int_value
         * @property {number|null} [uint_value] CMsgJSValue uint_value
         * @property {number|null} [double_value] CMsgJSValue double_value
         * @property {string|null} [string_value] CMsgJSValue string_value
         * @property {number|Long|null} [function_handle] CMsgJSValue function_handle
         * @property {boolean|null} [is_array] CMsgJSValue is_array
         * @property {Array.<ICMsgJSValue>|null} [array_values] CMsgJSValue array_values
         * @property {boolean|null} [is_object] CMsgJSValue is_object
         * @property {Array.<CMsgJSValue.IJSObjectProperty>|null} [object_properties] CMsgJSValue object_properties
         */
    
        /**
         * Constructs a new CMsgJSValue.
         * @exports CMsgJSValue
         * @classdesc Represents a CMsgJSValue.
         * @implements ICMsgJSValue
         * @constructor
         * @param {ICMsgJSValue=} [properties] Properties to set
         */
        function CMsgJSValue(properties) {
            this.array_values = [];
            this.object_properties = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgJSValue bool_value.
         * @member {boolean} bool_value
         * @memberof CMsgJSValue
         * @instance
         */
        CMsgJSValue.prototype.bool_value = false;
    
        /**
         * CMsgJSValue int_value.
         * @member {number} int_value
         * @memberof CMsgJSValue
         * @instance
         */
        CMsgJSValue.prototype.int_value = 0;
    
        /**
         * CMsgJSValue uint_value.
         * @member {number} uint_value
         * @memberof CMsgJSValue
         * @instance
         */
        CMsgJSValue.prototype.uint_value = 0;
    
        /**
         * CMsgJSValue double_value.
         * @member {number} double_value
         * @memberof CMsgJSValue
         * @instance
         */
        CMsgJSValue.prototype.double_value = 0;
    
        /**
         * CMsgJSValue string_value.
         * @member {string} string_value
         * @memberof CMsgJSValue
         * @instance
         */
        CMsgJSValue.prototype.string_value = "";
    
        /**
         * CMsgJSValue function_handle.
         * @member {number|Long} function_handle
         * @memberof CMsgJSValue
         * @instance
         */
        CMsgJSValue.prototype.function_handle = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgJSValue is_array.
         * @member {boolean} is_array
         * @memberof CMsgJSValue
         * @instance
         */
        CMsgJSValue.prototype.is_array = false;
    
        /**
         * CMsgJSValue array_values.
         * @member {Array.<ICMsgJSValue>} array_values
         * @memberof CMsgJSValue
         * @instance
         */
        CMsgJSValue.prototype.array_values = $util.emptyArray;
    
        /**
         * CMsgJSValue is_object.
         * @member {boolean} is_object
         * @memberof CMsgJSValue
         * @instance
         */
        CMsgJSValue.prototype.is_object = false;
    
        /**
         * CMsgJSValue object_properties.
         * @member {Array.<CMsgJSValue.IJSObjectProperty>} object_properties
         * @memberof CMsgJSValue
         * @instance
         */
        CMsgJSValue.prototype.object_properties = $util.emptyArray;
    
        /**
         * Creates a new CMsgJSValue instance using the specified properties.
         * @function create
         * @memberof CMsgJSValue
         * @static
         * @param {ICMsgJSValue=} [properties] Properties to set
         * @returns {CMsgJSValue} CMsgJSValue instance
         */
        CMsgJSValue.create = function create(properties) {
            return new CMsgJSValue(properties);
        };
    
        /**
         * Encodes the specified CMsgJSValue message. Does not implicitly {@link CMsgJSValue.verify|verify} messages.
         * @function encode
         * @memberof CMsgJSValue
         * @static
         * @param {ICMsgJSValue} message CMsgJSValue message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgJSValue.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.bool_value != null && Object.hasOwnProperty.call(message, "bool_value"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.bool_value);
            if (message.int_value != null && Object.hasOwnProperty.call(message, "int_value"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.int_value);
            if (message.uint_value != null && Object.hasOwnProperty.call(message, "uint_value"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.uint_value);
            if (message.double_value != null && Object.hasOwnProperty.call(message, "double_value"))
                writer.uint32(/* id 4, wireType 1 =*/33).double(message.double_value);
            if (message.string_value != null && Object.hasOwnProperty.call(message, "string_value"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.string_value);
            if (message.function_handle != null && Object.hasOwnProperty.call(message, "function_handle"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.function_handle);
            if (message.is_array != null && Object.hasOwnProperty.call(message, "is_array"))
                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.is_array);
            if (message.array_values != null && message.array_values.length)
                for (var i = 0; i < message.array_values.length; ++i)
                    $root.CMsgJSValue.encode(message.array_values[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            if (message.is_object != null && Object.hasOwnProperty.call(message, "is_object"))
                writer.uint32(/* id 10, wireType 0 =*/80).bool(message.is_object);
            if (message.object_properties != null && message.object_properties.length)
                for (var i = 0; i < message.object_properties.length; ++i)
                    $root.CMsgJSValue.JSObjectProperty.encode(message.object_properties[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgJSValue message, length delimited. Does not implicitly {@link CMsgJSValue.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgJSValue
         * @static
         * @param {ICMsgJSValue} message CMsgJSValue message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgJSValue.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgJSValue message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgJSValue
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgJSValue} CMsgJSValue
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgJSValue.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgJSValue();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.bool_value = reader.bool();
                    break;
                case 2:
                    message.int_value = reader.int32();
                    break;
                case 3:
                    message.uint_value = reader.uint32();
                    break;
                case 4:
                    message.double_value = reader.double();
                    break;
                case 5:
                    message.string_value = reader.string();
                    break;
                case 6:
                    message.function_handle = reader.uint64();
                    break;
                case 8:
                    message.is_array = reader.bool();
                    break;
                case 9:
                    if (!(message.array_values && message.array_values.length))
                        message.array_values = [];
                    message.array_values.push($root.CMsgJSValue.decode(reader, reader.uint32()));
                    break;
                case 10:
                    message.is_object = reader.bool();
                    break;
                case 11:
                    if (!(message.object_properties && message.object_properties.length))
                        message.object_properties = [];
                    message.object_properties.push($root.CMsgJSValue.JSObjectProperty.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgJSValue message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgJSValue
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgJSValue} CMsgJSValue
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgJSValue.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgJSValue message.
         * @function verify
         * @memberof CMsgJSValue
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgJSValue.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.bool_value != null && message.hasOwnProperty("bool_value"))
                if (typeof message.bool_value !== "boolean")
                    return "bool_value: boolean expected";
            if (message.int_value != null && message.hasOwnProperty("int_value"))
                if (!$util.isInteger(message.int_value))
                    return "int_value: integer expected";
            if (message.uint_value != null && message.hasOwnProperty("uint_value"))
                if (!$util.isInteger(message.uint_value))
                    return "uint_value: integer expected";
            if (message.double_value != null && message.hasOwnProperty("double_value"))
                if (typeof message.double_value !== "number")
                    return "double_value: number expected";
            if (message.string_value != null && message.hasOwnProperty("string_value"))
                if (!$util.isString(message.string_value))
                    return "string_value: string expected";
            if (message.function_handle != null && message.hasOwnProperty("function_handle"))
                if (!$util.isInteger(message.function_handle) && !(message.function_handle && $util.isInteger(message.function_handle.low) && $util.isInteger(message.function_handle.high)))
                    return "function_handle: integer|Long expected";
            if (message.is_array != null && message.hasOwnProperty("is_array"))
                if (typeof message.is_array !== "boolean")
                    return "is_array: boolean expected";
            if (message.array_values != null && message.hasOwnProperty("array_values")) {
                if (!Array.isArray(message.array_values))
                    return "array_values: array expected";
                for (var i = 0; i < message.array_values.length; ++i) {
                    var error = $root.CMsgJSValue.verify(message.array_values[i]);
                    if (error)
                        return "array_values." + error;
                }
            }
            if (message.is_object != null && message.hasOwnProperty("is_object"))
                if (typeof message.is_object !== "boolean")
                    return "is_object: boolean expected";
            if (message.object_properties != null && message.hasOwnProperty("object_properties")) {
                if (!Array.isArray(message.object_properties))
                    return "object_properties: array expected";
                for (var i = 0; i < message.object_properties.length; ++i) {
                    var error = $root.CMsgJSValue.JSObjectProperty.verify(message.object_properties[i]);
                    if (error)
                        return "object_properties." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgJSValue message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgJSValue
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgJSValue} CMsgJSValue
         */
        CMsgJSValue.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgJSValue)
                return object;
            var message = new $root.CMsgJSValue();
            if (object.bool_value != null)
                message.bool_value = Boolean(object.bool_value);
            if (object.int_value != null)
                message.int_value = object.int_value | 0;
            if (object.uint_value != null)
                message.uint_value = object.uint_value >>> 0;
            if (object.double_value != null)
                message.double_value = Number(object.double_value);
            if (object.string_value != null)
                message.string_value = String(object.string_value);
            if (object.function_handle != null)
                if ($util.Long)
                    (message.function_handle = $util.Long.fromValue(object.function_handle)).unsigned = true;
                else if (typeof object.function_handle === "string")
                    message.function_handle = parseInt(object.function_handle, 10);
                else if (typeof object.function_handle === "number")
                    message.function_handle = object.function_handle;
                else if (typeof object.function_handle === "object")
                    message.function_handle = new $util.LongBits(object.function_handle.low >>> 0, object.function_handle.high >>> 0).toNumber(true);
            if (object.is_array != null)
                message.is_array = Boolean(object.is_array);
            if (object.array_values) {
                if (!Array.isArray(object.array_values))
                    throw TypeError(".CMsgJSValue.array_values: array expected");
                message.array_values = [];
                for (var i = 0; i < object.array_values.length; ++i) {
                    if (typeof object.array_values[i] !== "object")
                        throw TypeError(".CMsgJSValue.array_values: object expected");
                    message.array_values[i] = $root.CMsgJSValue.fromObject(object.array_values[i]);
                }
            }
            if (object.is_object != null)
                message.is_object = Boolean(object.is_object);
            if (object.object_properties) {
                if (!Array.isArray(object.object_properties))
                    throw TypeError(".CMsgJSValue.object_properties: array expected");
                message.object_properties = [];
                for (var i = 0; i < object.object_properties.length; ++i) {
                    if (typeof object.object_properties[i] !== "object")
                        throw TypeError(".CMsgJSValue.object_properties: object expected");
                    message.object_properties[i] = $root.CMsgJSValue.JSObjectProperty.fromObject(object.object_properties[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgJSValue message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgJSValue
         * @static
         * @param {CMsgJSValue} message CMsgJSValue
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgJSValue.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.array_values = [];
                object.object_properties = [];
            }
            if (options.defaults) {
                object.bool_value = false;
                object.int_value = 0;
                object.uint_value = 0;
                object.double_value = 0;
                object.string_value = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.function_handle = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.function_handle = options.longs === String ? "0" : 0;
                object.is_array = false;
                object.is_object = false;
            }
            if (message.bool_value != null && message.hasOwnProperty("bool_value"))
                object.bool_value = message.bool_value;
            if (message.int_value != null && message.hasOwnProperty("int_value"))
                object.int_value = message.int_value;
            if (message.uint_value != null && message.hasOwnProperty("uint_value"))
                object.uint_value = message.uint_value;
            if (message.double_value != null && message.hasOwnProperty("double_value"))
                object.double_value = options.json && !isFinite(message.double_value) ? String(message.double_value) : message.double_value;
            if (message.string_value != null && message.hasOwnProperty("string_value"))
                object.string_value = message.string_value;
            if (message.function_handle != null && message.hasOwnProperty("function_handle"))
                if (typeof message.function_handle === "number")
                    object.function_handle = options.longs === String ? String(message.function_handle) : message.function_handle;
                else
                    object.function_handle = options.longs === String ? $util.Long.prototype.toString.call(message.function_handle) : options.longs === Number ? new $util.LongBits(message.function_handle.low >>> 0, message.function_handle.high >>> 0).toNumber(true) : message.function_handle;
            if (message.is_array != null && message.hasOwnProperty("is_array"))
                object.is_array = message.is_array;
            if (message.array_values && message.array_values.length) {
                object.array_values = [];
                for (var j = 0; j < message.array_values.length; ++j)
                    object.array_values[j] = $root.CMsgJSValue.toObject(message.array_values[j], options);
            }
            if (message.is_object != null && message.hasOwnProperty("is_object"))
                object.is_object = message.is_object;
            if (message.object_properties && message.object_properties.length) {
                object.object_properties = [];
                for (var j = 0; j < message.object_properties.length; ++j)
                    object.object_properties[j] = $root.CMsgJSValue.JSObjectProperty.toObject(message.object_properties[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgJSValue to JSON.
         * @function toJSON
         * @memberof CMsgJSValue
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgJSValue.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgJSValue.JSObjectProperty = (function() {
    
            /**
             * Properties of a JSObjectProperty.
             * @memberof CMsgJSValue
             * @interface IJSObjectProperty
             * @property {string|null} [name] JSObjectProperty name
             * @property {ICMsgJSValue|null} [value] JSObjectProperty value
             */
    
            /**
             * Constructs a new JSObjectProperty.
             * @memberof CMsgJSValue
             * @classdesc Represents a JSObjectProperty.
             * @implements IJSObjectProperty
             * @constructor
             * @param {CMsgJSValue.IJSObjectProperty=} [properties] Properties to set
             */
            function JSObjectProperty(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * JSObjectProperty name.
             * @member {string} name
             * @memberof CMsgJSValue.JSObjectProperty
             * @instance
             */
            JSObjectProperty.prototype.name = "";
    
            /**
             * JSObjectProperty value.
             * @member {ICMsgJSValue|null|undefined} value
             * @memberof CMsgJSValue.JSObjectProperty
             * @instance
             */
            JSObjectProperty.prototype.value = null;
    
            /**
             * Creates a new JSObjectProperty instance using the specified properties.
             * @function create
             * @memberof CMsgJSValue.JSObjectProperty
             * @static
             * @param {CMsgJSValue.IJSObjectProperty=} [properties] Properties to set
             * @returns {CMsgJSValue.JSObjectProperty} JSObjectProperty instance
             */
            JSObjectProperty.create = function create(properties) {
                return new JSObjectProperty(properties);
            };
    
            /**
             * Encodes the specified JSObjectProperty message. Does not implicitly {@link CMsgJSValue.JSObjectProperty.verify|verify} messages.
             * @function encode
             * @memberof CMsgJSValue.JSObjectProperty
             * @static
             * @param {CMsgJSValue.IJSObjectProperty} message JSObjectProperty message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            JSObjectProperty.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    $root.CMsgJSValue.encode(message.value, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified JSObjectProperty message, length delimited. Does not implicitly {@link CMsgJSValue.JSObjectProperty.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgJSValue.JSObjectProperty
             * @static
             * @param {CMsgJSValue.IJSObjectProperty} message JSObjectProperty message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            JSObjectProperty.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a JSObjectProperty message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgJSValue.JSObjectProperty
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgJSValue.JSObjectProperty} JSObjectProperty
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            JSObjectProperty.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgJSValue.JSObjectProperty();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.value = $root.CMsgJSValue.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a JSObjectProperty message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgJSValue.JSObjectProperty
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgJSValue.JSObjectProperty} JSObjectProperty
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            JSObjectProperty.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a JSObjectProperty message.
             * @function verify
             * @memberof CMsgJSValue.JSObjectProperty
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            JSObjectProperty.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.value != null && message.hasOwnProperty("value")) {
                    var error = $root.CMsgJSValue.verify(message.value);
                    if (error)
                        return "value." + error;
                }
                return null;
            };
    
            /**
             * Creates a JSObjectProperty message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgJSValue.JSObjectProperty
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgJSValue.JSObjectProperty} JSObjectProperty
             */
            JSObjectProperty.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgJSValue.JSObjectProperty)
                    return object;
                var message = new $root.CMsgJSValue.JSObjectProperty();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.value != null) {
                    if (typeof object.value !== "object")
                        throw TypeError(".CMsgJSValue.JSObjectProperty.value: object expected");
                    message.value = $root.CMsgJSValue.fromObject(object.value);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a JSObjectProperty message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgJSValue.JSObjectProperty
             * @static
             * @param {CMsgJSValue.JSObjectProperty} message JSObjectProperty
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            JSObjectProperty.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    object.value = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = $root.CMsgJSValue.toObject(message.value, options);
                return object;
            };
    
            /**
             * Converts this JSObjectProperty to JSON.
             * @function toJSON
             * @memberof CMsgJSValue.JSObjectProperty
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            JSObjectProperty.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return JSObjectProperty;
        })();
    
        return CMsgJSValue;
    })();
    
    $root.CMsgJSMethodCall = (function() {
    
        /**
         * Properties of a CMsgJSMethodCall.
         * @exports ICMsgJSMethodCall
         * @interface ICMsgJSMethodCall
         * @property {number|null} [browser_handle] CMsgJSMethodCall browser_handle
         * @property {string|null} [name] CMsgJSMethodCall name
         * @property {Array.<ICMsgJSValue>|null} ["arguments"] CMsgJSMethodCall arguments
         */
    
        /**
         * Constructs a new CMsgJSMethodCall.
         * @exports CMsgJSMethodCall
         * @classdesc Represents a CMsgJSMethodCall.
         * @implements ICMsgJSMethodCall
         * @constructor
         * @param {ICMsgJSMethodCall=} [properties] Properties to set
         */
        function CMsgJSMethodCall(properties) {
            this["arguments"] = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgJSMethodCall browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgJSMethodCall
         * @instance
         */
        CMsgJSMethodCall.prototype.browser_handle = 0;
    
        /**
         * CMsgJSMethodCall name.
         * @member {string} name
         * @memberof CMsgJSMethodCall
         * @instance
         */
        CMsgJSMethodCall.prototype.name = "";
    
        /**
         * CMsgJSMethodCall arguments.
         * @member {Array.<ICMsgJSValue>} arguments
         * @memberof CMsgJSMethodCall
         * @instance
         */
        CMsgJSMethodCall.prototype["arguments"] = $util.emptyArray;
    
        /**
         * Creates a new CMsgJSMethodCall instance using the specified properties.
         * @function create
         * @memberof CMsgJSMethodCall
         * @static
         * @param {ICMsgJSMethodCall=} [properties] Properties to set
         * @returns {CMsgJSMethodCall} CMsgJSMethodCall instance
         */
        CMsgJSMethodCall.create = function create(properties) {
            return new CMsgJSMethodCall(properties);
        };
    
        /**
         * Encodes the specified CMsgJSMethodCall message. Does not implicitly {@link CMsgJSMethodCall.verify|verify} messages.
         * @function encode
         * @memberof CMsgJSMethodCall
         * @static
         * @param {ICMsgJSMethodCall} message CMsgJSMethodCall message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgJSMethodCall.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
            if (message["arguments"] != null && message["arguments"].length)
                for (var i = 0; i < message["arguments"].length; ++i)
                    $root.CMsgJSValue.encode(message["arguments"][i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgJSMethodCall message, length delimited. Does not implicitly {@link CMsgJSMethodCall.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgJSMethodCall
         * @static
         * @param {ICMsgJSMethodCall} message CMsgJSMethodCall message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgJSMethodCall.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgJSMethodCall message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgJSMethodCall
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgJSMethodCall} CMsgJSMethodCall
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgJSMethodCall.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgJSMethodCall();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    if (!(message["arguments"] && message["arguments"].length))
                        message["arguments"] = [];
                    message["arguments"].push($root.CMsgJSValue.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgJSMethodCall message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgJSMethodCall
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgJSMethodCall} CMsgJSMethodCall
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgJSMethodCall.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgJSMethodCall message.
         * @function verify
         * @memberof CMsgJSMethodCall
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgJSMethodCall.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message["arguments"] != null && message.hasOwnProperty("arguments")) {
                if (!Array.isArray(message["arguments"]))
                    return "arguments: array expected";
                for (var i = 0; i < message["arguments"].length; ++i) {
                    var error = $root.CMsgJSValue.verify(message["arguments"][i]);
                    if (error)
                        return "arguments." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgJSMethodCall message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgJSMethodCall
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgJSMethodCall} CMsgJSMethodCall
         */
        CMsgJSMethodCall.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgJSMethodCall)
                return object;
            var message = new $root.CMsgJSMethodCall();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.name != null)
                message.name = String(object.name);
            if (object["arguments"]) {
                if (!Array.isArray(object["arguments"]))
                    throw TypeError(".CMsgJSMethodCall.arguments: array expected");
                message["arguments"] = [];
                for (var i = 0; i < object["arguments"].length; ++i) {
                    if (typeof object["arguments"][i] !== "object")
                        throw TypeError(".CMsgJSMethodCall.arguments: object expected");
                    message["arguments"][i] = $root.CMsgJSValue.fromObject(object["arguments"][i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgJSMethodCall message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgJSMethodCall
         * @static
         * @param {CMsgJSMethodCall} message CMsgJSMethodCall
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgJSMethodCall.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object["arguments"] = [];
            if (options.defaults) {
                object.browser_handle = 0;
                object.name = "";
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message["arguments"] && message["arguments"].length) {
                object["arguments"] = [];
                for (var j = 0; j < message["arguments"].length; ++j)
                    object["arguments"][j] = $root.CMsgJSValue.toObject(message["arguments"][j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgJSMethodCall to JSON.
         * @function toJSON
         * @memberof CMsgJSMethodCall
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgJSMethodCall.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgJSMethodCall;
    })();
    
    $root.CMsgJSExecuteCallback = (function() {
    
        /**
         * Properties of a CMsgJSExecuteCallback.
         * @exports ICMsgJSExecuteCallback
         * @interface ICMsgJSExecuteCallback
         * @property {number|null} [browser_handle] CMsgJSExecuteCallback browser_handle
         * @property {number|Long|null} [function_handle] CMsgJSExecuteCallback function_handle
         * @property {Array.<ICMsgJSValue>|null} ["arguments"] CMsgJSExecuteCallback arguments
         */
    
        /**
         * Constructs a new CMsgJSExecuteCallback.
         * @exports CMsgJSExecuteCallback
         * @classdesc Represents a CMsgJSExecuteCallback.
         * @implements ICMsgJSExecuteCallback
         * @constructor
         * @param {ICMsgJSExecuteCallback=} [properties] Properties to set
         */
        function CMsgJSExecuteCallback(properties) {
            this["arguments"] = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgJSExecuteCallback browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgJSExecuteCallback
         * @instance
         */
        CMsgJSExecuteCallback.prototype.browser_handle = 0;
    
        /**
         * CMsgJSExecuteCallback function_handle.
         * @member {number|Long} function_handle
         * @memberof CMsgJSExecuteCallback
         * @instance
         */
        CMsgJSExecuteCallback.prototype.function_handle = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgJSExecuteCallback arguments.
         * @member {Array.<ICMsgJSValue>} arguments
         * @memberof CMsgJSExecuteCallback
         * @instance
         */
        CMsgJSExecuteCallback.prototype["arguments"] = $util.emptyArray;
    
        /**
         * Creates a new CMsgJSExecuteCallback instance using the specified properties.
         * @function create
         * @memberof CMsgJSExecuteCallback
         * @static
         * @param {ICMsgJSExecuteCallback=} [properties] Properties to set
         * @returns {CMsgJSExecuteCallback} CMsgJSExecuteCallback instance
         */
        CMsgJSExecuteCallback.create = function create(properties) {
            return new CMsgJSExecuteCallback(properties);
        };
    
        /**
         * Encodes the specified CMsgJSExecuteCallback message. Does not implicitly {@link CMsgJSExecuteCallback.verify|verify} messages.
         * @function encode
         * @memberof CMsgJSExecuteCallback
         * @static
         * @param {ICMsgJSExecuteCallback} message CMsgJSExecuteCallback message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgJSExecuteCallback.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.function_handle != null && Object.hasOwnProperty.call(message, "function_handle"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.function_handle);
            if (message["arguments"] != null && message["arguments"].length)
                for (var i = 0; i < message["arguments"].length; ++i)
                    $root.CMsgJSValue.encode(message["arguments"][i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgJSExecuteCallback message, length delimited. Does not implicitly {@link CMsgJSExecuteCallback.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgJSExecuteCallback
         * @static
         * @param {ICMsgJSExecuteCallback} message CMsgJSExecuteCallback message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgJSExecuteCallback.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgJSExecuteCallback message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgJSExecuteCallback
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgJSExecuteCallback} CMsgJSExecuteCallback
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgJSExecuteCallback.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgJSExecuteCallback();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.function_handle = reader.uint64();
                    break;
                case 3:
                    if (!(message["arguments"] && message["arguments"].length))
                        message["arguments"] = [];
                    message["arguments"].push($root.CMsgJSValue.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgJSExecuteCallback message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgJSExecuteCallback
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgJSExecuteCallback} CMsgJSExecuteCallback
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgJSExecuteCallback.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgJSExecuteCallback message.
         * @function verify
         * @memberof CMsgJSExecuteCallback
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgJSExecuteCallback.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.function_handle != null && message.hasOwnProperty("function_handle"))
                if (!$util.isInteger(message.function_handle) && !(message.function_handle && $util.isInteger(message.function_handle.low) && $util.isInteger(message.function_handle.high)))
                    return "function_handle: integer|Long expected";
            if (message["arguments"] != null && message.hasOwnProperty("arguments")) {
                if (!Array.isArray(message["arguments"]))
                    return "arguments: array expected";
                for (var i = 0; i < message["arguments"].length; ++i) {
                    var error = $root.CMsgJSValue.verify(message["arguments"][i]);
                    if (error)
                        return "arguments." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgJSExecuteCallback message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgJSExecuteCallback
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgJSExecuteCallback} CMsgJSExecuteCallback
         */
        CMsgJSExecuteCallback.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgJSExecuteCallback)
                return object;
            var message = new $root.CMsgJSExecuteCallback();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.function_handle != null)
                if ($util.Long)
                    (message.function_handle = $util.Long.fromValue(object.function_handle)).unsigned = true;
                else if (typeof object.function_handle === "string")
                    message.function_handle = parseInt(object.function_handle, 10);
                else if (typeof object.function_handle === "number")
                    message.function_handle = object.function_handle;
                else if (typeof object.function_handle === "object")
                    message.function_handle = new $util.LongBits(object.function_handle.low >>> 0, object.function_handle.high >>> 0).toNumber(true);
            if (object["arguments"]) {
                if (!Array.isArray(object["arguments"]))
                    throw TypeError(".CMsgJSExecuteCallback.arguments: array expected");
                message["arguments"] = [];
                for (var i = 0; i < object["arguments"].length; ++i) {
                    if (typeof object["arguments"][i] !== "object")
                        throw TypeError(".CMsgJSExecuteCallback.arguments: object expected");
                    message["arguments"][i] = $root.CMsgJSValue.fromObject(object["arguments"][i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgJSExecuteCallback message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgJSExecuteCallback
         * @static
         * @param {CMsgJSExecuteCallback} message CMsgJSExecuteCallback
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgJSExecuteCallback.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object["arguments"] = [];
            if (options.defaults) {
                object.browser_handle = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.function_handle = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.function_handle = options.longs === String ? "0" : 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.function_handle != null && message.hasOwnProperty("function_handle"))
                if (typeof message.function_handle === "number")
                    object.function_handle = options.longs === String ? String(message.function_handle) : message.function_handle;
                else
                    object.function_handle = options.longs === String ? $util.Long.prototype.toString.call(message.function_handle) : options.longs === Number ? new $util.LongBits(message.function_handle.low >>> 0, message.function_handle.high >>> 0).toNumber(true) : message.function_handle;
            if (message["arguments"] && message["arguments"].length) {
                object["arguments"] = [];
                for (var j = 0; j < message["arguments"].length; ++j)
                    object["arguments"][j] = $root.CMsgJSValue.toObject(message["arguments"][j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgJSExecuteCallback to JSON.
         * @function toJSON
         * @memberof CMsgJSExecuteCallback
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgJSExecuteCallback.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgJSExecuteCallback;
    })();
    
    $root.CMsgJSReleaseCallback = (function() {
    
        /**
         * Properties of a CMsgJSReleaseCallback.
         * @exports ICMsgJSReleaseCallback
         * @interface ICMsgJSReleaseCallback
         * @property {number|null} [browser_handle] CMsgJSReleaseCallback browser_handle
         * @property {number|Long|null} [function_handle] CMsgJSReleaseCallback function_handle
         */
    
        /**
         * Constructs a new CMsgJSReleaseCallback.
         * @exports CMsgJSReleaseCallback
         * @classdesc Represents a CMsgJSReleaseCallback.
         * @implements ICMsgJSReleaseCallback
         * @constructor
         * @param {ICMsgJSReleaseCallback=} [properties] Properties to set
         */
        function CMsgJSReleaseCallback(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgJSReleaseCallback browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgJSReleaseCallback
         * @instance
         */
        CMsgJSReleaseCallback.prototype.browser_handle = 0;
    
        /**
         * CMsgJSReleaseCallback function_handle.
         * @member {number|Long} function_handle
         * @memberof CMsgJSReleaseCallback
         * @instance
         */
        CMsgJSReleaseCallback.prototype.function_handle = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CMsgJSReleaseCallback instance using the specified properties.
         * @function create
         * @memberof CMsgJSReleaseCallback
         * @static
         * @param {ICMsgJSReleaseCallback=} [properties] Properties to set
         * @returns {CMsgJSReleaseCallback} CMsgJSReleaseCallback instance
         */
        CMsgJSReleaseCallback.create = function create(properties) {
            return new CMsgJSReleaseCallback(properties);
        };
    
        /**
         * Encodes the specified CMsgJSReleaseCallback message. Does not implicitly {@link CMsgJSReleaseCallback.verify|verify} messages.
         * @function encode
         * @memberof CMsgJSReleaseCallback
         * @static
         * @param {ICMsgJSReleaseCallback} message CMsgJSReleaseCallback message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgJSReleaseCallback.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.function_handle != null && Object.hasOwnProperty.call(message, "function_handle"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.function_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgJSReleaseCallback message, length delimited. Does not implicitly {@link CMsgJSReleaseCallback.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgJSReleaseCallback
         * @static
         * @param {ICMsgJSReleaseCallback} message CMsgJSReleaseCallback message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgJSReleaseCallback.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgJSReleaseCallback message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgJSReleaseCallback
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgJSReleaseCallback} CMsgJSReleaseCallback
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgJSReleaseCallback.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgJSReleaseCallback();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.function_handle = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgJSReleaseCallback message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgJSReleaseCallback
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgJSReleaseCallback} CMsgJSReleaseCallback
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgJSReleaseCallback.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgJSReleaseCallback message.
         * @function verify
         * @memberof CMsgJSReleaseCallback
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgJSReleaseCallback.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.function_handle != null && message.hasOwnProperty("function_handle"))
                if (!$util.isInteger(message.function_handle) && !(message.function_handle && $util.isInteger(message.function_handle.low) && $util.isInteger(message.function_handle.high)))
                    return "function_handle: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgJSReleaseCallback message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgJSReleaseCallback
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgJSReleaseCallback} CMsgJSReleaseCallback
         */
        CMsgJSReleaseCallback.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgJSReleaseCallback)
                return object;
            var message = new $root.CMsgJSReleaseCallback();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.function_handle != null)
                if ($util.Long)
                    (message.function_handle = $util.Long.fromValue(object.function_handle)).unsigned = true;
                else if (typeof object.function_handle === "string")
                    message.function_handle = parseInt(object.function_handle, 10);
                else if (typeof object.function_handle === "number")
                    message.function_handle = object.function_handle;
                else if (typeof object.function_handle === "object")
                    message.function_handle = new $util.LongBits(object.function_handle.low >>> 0, object.function_handle.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgJSReleaseCallback message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgJSReleaseCallback
         * @static
         * @param {CMsgJSReleaseCallback} message CMsgJSReleaseCallback
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgJSReleaseCallback.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.function_handle = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.function_handle = options.longs === String ? "0" : 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.function_handle != null && message.hasOwnProperty("function_handle"))
                if (typeof message.function_handle === "number")
                    object.function_handle = options.longs === String ? String(message.function_handle) : message.function_handle;
                else
                    object.function_handle = options.longs === String ? $util.Long.prototype.toString.call(message.function_handle) : options.longs === Number ? new $util.LongBits(message.function_handle.low >>> 0, message.function_handle.high >>> 0).toNumber(true) : message.function_handle;
            return object;
        };
    
        /**
         * Converts this CMsgJSReleaseCallback to JSON.
         * @function toJSON
         * @memberof CMsgJSReleaseCallback
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgJSReleaseCallback.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgJSReleaseCallback;
    })();
    
    $root.CMsgJSRaiseException = (function() {
    
        /**
         * Properties of a CMsgJSRaiseException.
         * @exports ICMsgJSRaiseException
         * @interface ICMsgJSRaiseException
         * @property {number|null} [browser_handle] CMsgJSRaiseException browser_handle
         * @property {string|null} [exception] CMsgJSRaiseException exception
         */
    
        /**
         * Constructs a new CMsgJSRaiseException.
         * @exports CMsgJSRaiseException
         * @classdesc Represents a CMsgJSRaiseException.
         * @implements ICMsgJSRaiseException
         * @constructor
         * @param {ICMsgJSRaiseException=} [properties] Properties to set
         */
        function CMsgJSRaiseException(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgJSRaiseException browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgJSRaiseException
         * @instance
         */
        CMsgJSRaiseException.prototype.browser_handle = 0;
    
        /**
         * CMsgJSRaiseException exception.
         * @member {string} exception
         * @memberof CMsgJSRaiseException
         * @instance
         */
        CMsgJSRaiseException.prototype.exception = "";
    
        /**
         * Creates a new CMsgJSRaiseException instance using the specified properties.
         * @function create
         * @memberof CMsgJSRaiseException
         * @static
         * @param {ICMsgJSRaiseException=} [properties] Properties to set
         * @returns {CMsgJSRaiseException} CMsgJSRaiseException instance
         */
        CMsgJSRaiseException.create = function create(properties) {
            return new CMsgJSRaiseException(properties);
        };
    
        /**
         * Encodes the specified CMsgJSRaiseException message. Does not implicitly {@link CMsgJSRaiseException.verify|verify} messages.
         * @function encode
         * @memberof CMsgJSRaiseException
         * @static
         * @param {ICMsgJSRaiseException} message CMsgJSRaiseException message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgJSRaiseException.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.exception != null && Object.hasOwnProperty.call(message, "exception"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.exception);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgJSRaiseException message, length delimited. Does not implicitly {@link CMsgJSRaiseException.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgJSRaiseException
         * @static
         * @param {ICMsgJSRaiseException} message CMsgJSRaiseException message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgJSRaiseException.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgJSRaiseException message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgJSRaiseException
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgJSRaiseException} CMsgJSRaiseException
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgJSRaiseException.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgJSRaiseException();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.exception = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgJSRaiseException message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgJSRaiseException
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgJSRaiseException} CMsgJSRaiseException
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgJSRaiseException.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgJSRaiseException message.
         * @function verify
         * @memberof CMsgJSRaiseException
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgJSRaiseException.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.exception != null && message.hasOwnProperty("exception"))
                if (!$util.isString(message.exception))
                    return "exception: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgJSRaiseException message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgJSRaiseException
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgJSRaiseException} CMsgJSRaiseException
         */
        CMsgJSRaiseException.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgJSRaiseException)
                return object;
            var message = new $root.CMsgJSRaiseException();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.exception != null)
                message.exception = String(object.exception);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgJSRaiseException message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgJSRaiseException
         * @static
         * @param {CMsgJSRaiseException} message CMsgJSRaiseException
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgJSRaiseException.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.exception = "";
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.exception != null && message.hasOwnProperty("exception"))
                object.exception = message.exception;
            return object;
        };
    
        /**
         * Converts this CMsgJSRaiseException to JSON.
         * @function toJSON
         * @memberof CMsgJSRaiseException
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgJSRaiseException.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgJSRaiseException;
    })();
    
    $root.CMsgLoadLocalization = (function() {
    
        /**
         * Properties of a CMsgLoadLocalization.
         * @exports ICMsgLoadLocalization
         * @interface ICMsgLoadLocalization
         * @property {number|null} [browser_handle] CMsgLoadLocalization browser_handle
         * @property {string|null} [localization_path] CMsgLoadLocalization localization_path
         * @property {string|null} [language] CMsgLoadLocalization language
         */
    
        /**
         * Constructs a new CMsgLoadLocalization.
         * @exports CMsgLoadLocalization
         * @classdesc Represents a CMsgLoadLocalization.
         * @implements ICMsgLoadLocalization
         * @constructor
         * @param {ICMsgLoadLocalization=} [properties] Properties to set
         */
        function CMsgLoadLocalization(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgLoadLocalization browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgLoadLocalization
         * @instance
         */
        CMsgLoadLocalization.prototype.browser_handle = 0;
    
        /**
         * CMsgLoadLocalization localization_path.
         * @member {string} localization_path
         * @memberof CMsgLoadLocalization
         * @instance
         */
        CMsgLoadLocalization.prototype.localization_path = "";
    
        /**
         * CMsgLoadLocalization language.
         * @member {string} language
         * @memberof CMsgLoadLocalization
         * @instance
         */
        CMsgLoadLocalization.prototype.language = "";
    
        /**
         * Creates a new CMsgLoadLocalization instance using the specified properties.
         * @function create
         * @memberof CMsgLoadLocalization
         * @static
         * @param {ICMsgLoadLocalization=} [properties] Properties to set
         * @returns {CMsgLoadLocalization} CMsgLoadLocalization instance
         */
        CMsgLoadLocalization.create = function create(properties) {
            return new CMsgLoadLocalization(properties);
        };
    
        /**
         * Encodes the specified CMsgLoadLocalization message. Does not implicitly {@link CMsgLoadLocalization.verify|verify} messages.
         * @function encode
         * @memberof CMsgLoadLocalization
         * @static
         * @param {ICMsgLoadLocalization} message CMsgLoadLocalization message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgLoadLocalization.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.localization_path != null && Object.hasOwnProperty.call(message, "localization_path"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.localization_path);
            if (message.language != null && Object.hasOwnProperty.call(message, "language"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.language);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgLoadLocalization message, length delimited. Does not implicitly {@link CMsgLoadLocalization.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgLoadLocalization
         * @static
         * @param {ICMsgLoadLocalization} message CMsgLoadLocalization message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgLoadLocalization.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgLoadLocalization message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgLoadLocalization
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgLoadLocalization} CMsgLoadLocalization
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgLoadLocalization.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgLoadLocalization();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.localization_path = reader.string();
                    break;
                case 3:
                    message.language = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgLoadLocalization message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgLoadLocalization
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgLoadLocalization} CMsgLoadLocalization
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgLoadLocalization.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgLoadLocalization message.
         * @function verify
         * @memberof CMsgLoadLocalization
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgLoadLocalization.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.localization_path != null && message.hasOwnProperty("localization_path"))
                if (!$util.isString(message.localization_path))
                    return "localization_path: string expected";
            if (message.language != null && message.hasOwnProperty("language"))
                if (!$util.isString(message.language))
                    return "language: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgLoadLocalization message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgLoadLocalization
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgLoadLocalization} CMsgLoadLocalization
         */
        CMsgLoadLocalization.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgLoadLocalization)
                return object;
            var message = new $root.CMsgLoadLocalization();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.localization_path != null)
                message.localization_path = String(object.localization_path);
            if (object.language != null)
                message.language = String(object.language);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgLoadLocalization message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgLoadLocalization
         * @static
         * @param {CMsgLoadLocalization} message CMsgLoadLocalization
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgLoadLocalization.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.localization_path = "";
                object.language = "";
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.localization_path != null && message.hasOwnProperty("localization_path"))
                object.localization_path = message.localization_path;
            if (message.language != null && message.hasOwnProperty("language"))
                object.language = message.language;
            return object;
        };
    
        /**
         * Converts this CMsgLoadLocalization to JSON.
         * @function toJSON
         * @memberof CMsgLoadLocalization
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgLoadLocalization.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgLoadLocalization;
    })();
    
    $root.CMsgJumpListLink = (function() {
    
        /**
         * Properties of a CMsgJumpListLink.
         * @exports ICMsgJumpListLink
         * @interface ICMsgJumpListLink
         * @property {string|null} [display_name] CMsgJumpListLink display_name
         * @property {string|null} [url_link] CMsgJumpListLink url_link
         * @property {string|null} [icon_path] CMsgJumpListLink icon_path
         */
    
        /**
         * Constructs a new CMsgJumpListLink.
         * @exports CMsgJumpListLink
         * @classdesc Represents a CMsgJumpListLink.
         * @implements ICMsgJumpListLink
         * @constructor
         * @param {ICMsgJumpListLink=} [properties] Properties to set
         */
        function CMsgJumpListLink(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgJumpListLink display_name.
         * @member {string} display_name
         * @memberof CMsgJumpListLink
         * @instance
         */
        CMsgJumpListLink.prototype.display_name = "";
    
        /**
         * CMsgJumpListLink url_link.
         * @member {string} url_link
         * @memberof CMsgJumpListLink
         * @instance
         */
        CMsgJumpListLink.prototype.url_link = "";
    
        /**
         * CMsgJumpListLink icon_path.
         * @member {string} icon_path
         * @memberof CMsgJumpListLink
         * @instance
         */
        CMsgJumpListLink.prototype.icon_path = "";
    
        /**
         * Creates a new CMsgJumpListLink instance using the specified properties.
         * @function create
         * @memberof CMsgJumpListLink
         * @static
         * @param {ICMsgJumpListLink=} [properties] Properties to set
         * @returns {CMsgJumpListLink} CMsgJumpListLink instance
         */
        CMsgJumpListLink.create = function create(properties) {
            return new CMsgJumpListLink(properties);
        };
    
        /**
         * Encodes the specified CMsgJumpListLink message. Does not implicitly {@link CMsgJumpListLink.verify|verify} messages.
         * @function encode
         * @memberof CMsgJumpListLink
         * @static
         * @param {ICMsgJumpListLink} message CMsgJumpListLink message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgJumpListLink.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.display_name != null && Object.hasOwnProperty.call(message, "display_name"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.display_name);
            if (message.url_link != null && Object.hasOwnProperty.call(message, "url_link"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.url_link);
            if (message.icon_path != null && Object.hasOwnProperty.call(message, "icon_path"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.icon_path);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgJumpListLink message, length delimited. Does not implicitly {@link CMsgJumpListLink.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgJumpListLink
         * @static
         * @param {ICMsgJumpListLink} message CMsgJumpListLink message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgJumpListLink.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgJumpListLink message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgJumpListLink
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgJumpListLink} CMsgJumpListLink
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgJumpListLink.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgJumpListLink();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.display_name = reader.string();
                    break;
                case 2:
                    message.url_link = reader.string();
                    break;
                case 3:
                    message.icon_path = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgJumpListLink message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgJumpListLink
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgJumpListLink} CMsgJumpListLink
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgJumpListLink.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgJumpListLink message.
         * @function verify
         * @memberof CMsgJumpListLink
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgJumpListLink.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.display_name != null && message.hasOwnProperty("display_name"))
                if (!$util.isString(message.display_name))
                    return "display_name: string expected";
            if (message.url_link != null && message.hasOwnProperty("url_link"))
                if (!$util.isString(message.url_link))
                    return "url_link: string expected";
            if (message.icon_path != null && message.hasOwnProperty("icon_path"))
                if (!$util.isString(message.icon_path))
                    return "icon_path: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgJumpListLink message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgJumpListLink
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgJumpListLink} CMsgJumpListLink
         */
        CMsgJumpListLink.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgJumpListLink)
                return object;
            var message = new $root.CMsgJumpListLink();
            if (object.display_name != null)
                message.display_name = String(object.display_name);
            if (object.url_link != null)
                message.url_link = String(object.url_link);
            if (object.icon_path != null)
                message.icon_path = String(object.icon_path);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgJumpListLink message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgJumpListLink
         * @static
         * @param {CMsgJumpListLink} message CMsgJumpListLink
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgJumpListLink.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.display_name = "";
                object.url_link = "";
                object.icon_path = "";
            }
            if (message.display_name != null && message.hasOwnProperty("display_name"))
                object.display_name = message.display_name;
            if (message.url_link != null && message.hasOwnProperty("url_link"))
                object.url_link = message.url_link;
            if (message.icon_path != null && message.hasOwnProperty("icon_path"))
                object.icon_path = message.icon_path;
            return object;
        };
    
        /**
         * Converts this CMsgJumpListLink to JSON.
         * @function toJSON
         * @memberof CMsgJumpListLink
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgJumpListLink.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgJumpListLink;
    })();
    
    $root.CMSgJumpListMRUApp = (function() {
    
        /**
         * Properties of a CMSgJumpListMRUApp.
         * @exports ICMSgJumpListMRUApp
         * @interface ICMSgJumpListMRUApp
         * @property {number|null} [appid] CMSgJumpListMRUApp appid
         * @property {string|null} [display_name] CMSgJumpListMRUApp display_name
         * @property {string|null} [url_link] CMSgJumpListMRUApp url_link
         * @property {string|null} [icon_path] CMSgJumpListMRUApp icon_path
         */
    
        /**
         * Constructs a new CMSgJumpListMRUApp.
         * @exports CMSgJumpListMRUApp
         * @classdesc Represents a CMSgJumpListMRUApp.
         * @implements ICMSgJumpListMRUApp
         * @constructor
         * @param {ICMSgJumpListMRUApp=} [properties] Properties to set
         */
        function CMSgJumpListMRUApp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMSgJumpListMRUApp appid.
         * @member {number} appid
         * @memberof CMSgJumpListMRUApp
         * @instance
         */
        CMSgJumpListMRUApp.prototype.appid = 0;
    
        /**
         * CMSgJumpListMRUApp display_name.
         * @member {string} display_name
         * @memberof CMSgJumpListMRUApp
         * @instance
         */
        CMSgJumpListMRUApp.prototype.display_name = "";
    
        /**
         * CMSgJumpListMRUApp url_link.
         * @member {string} url_link
         * @memberof CMSgJumpListMRUApp
         * @instance
         */
        CMSgJumpListMRUApp.prototype.url_link = "";
    
        /**
         * CMSgJumpListMRUApp icon_path.
         * @member {string} icon_path
         * @memberof CMSgJumpListMRUApp
         * @instance
         */
        CMSgJumpListMRUApp.prototype.icon_path = "";
    
        /**
         * Creates a new CMSgJumpListMRUApp instance using the specified properties.
         * @function create
         * @memberof CMSgJumpListMRUApp
         * @static
         * @param {ICMSgJumpListMRUApp=} [properties] Properties to set
         * @returns {CMSgJumpListMRUApp} CMSgJumpListMRUApp instance
         */
        CMSgJumpListMRUApp.create = function create(properties) {
            return new CMSgJumpListMRUApp(properties);
        };
    
        /**
         * Encodes the specified CMSgJumpListMRUApp message. Does not implicitly {@link CMSgJumpListMRUApp.verify|verify} messages.
         * @function encode
         * @memberof CMSgJumpListMRUApp
         * @static
         * @param {ICMSgJumpListMRUApp} message CMSgJumpListMRUApp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMSgJumpListMRUApp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appid != null && Object.hasOwnProperty.call(message, "appid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
            if (message.display_name != null && Object.hasOwnProperty.call(message, "display_name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.display_name);
            if (message.url_link != null && Object.hasOwnProperty.call(message, "url_link"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.url_link);
            if (message.icon_path != null && Object.hasOwnProperty.call(message, "icon_path"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.icon_path);
            return writer;
        };
    
        /**
         * Encodes the specified CMSgJumpListMRUApp message, length delimited. Does not implicitly {@link CMSgJumpListMRUApp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMSgJumpListMRUApp
         * @static
         * @param {ICMSgJumpListMRUApp} message CMSgJumpListMRUApp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMSgJumpListMRUApp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMSgJumpListMRUApp message from the specified reader or buffer.
         * @function decode
         * @memberof CMSgJumpListMRUApp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMSgJumpListMRUApp} CMSgJumpListMRUApp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMSgJumpListMRUApp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMSgJumpListMRUApp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.appid = reader.uint32();
                    break;
                case 2:
                    message.display_name = reader.string();
                    break;
                case 3:
                    message.url_link = reader.string();
                    break;
                case 4:
                    message.icon_path = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMSgJumpListMRUApp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMSgJumpListMRUApp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMSgJumpListMRUApp} CMSgJumpListMRUApp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMSgJumpListMRUApp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMSgJumpListMRUApp message.
         * @function verify
         * @memberof CMSgJumpListMRUApp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMSgJumpListMRUApp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.display_name != null && message.hasOwnProperty("display_name"))
                if (!$util.isString(message.display_name))
                    return "display_name: string expected";
            if (message.url_link != null && message.hasOwnProperty("url_link"))
                if (!$util.isString(message.url_link))
                    return "url_link: string expected";
            if (message.icon_path != null && message.hasOwnProperty("icon_path"))
                if (!$util.isString(message.icon_path))
                    return "icon_path: string expected";
            return null;
        };
    
        /**
         * Creates a CMSgJumpListMRUApp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMSgJumpListMRUApp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMSgJumpListMRUApp} CMSgJumpListMRUApp
         */
        CMSgJumpListMRUApp.fromObject = function fromObject(object) {
            if (object instanceof $root.CMSgJumpListMRUApp)
                return object;
            var message = new $root.CMSgJumpListMRUApp();
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.display_name != null)
                message.display_name = String(object.display_name);
            if (object.url_link != null)
                message.url_link = String(object.url_link);
            if (object.icon_path != null)
                message.icon_path = String(object.icon_path);
            return message;
        };
    
        /**
         * Creates a plain object from a CMSgJumpListMRUApp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMSgJumpListMRUApp
         * @static
         * @param {CMSgJumpListMRUApp} message CMSgJumpListMRUApp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMSgJumpListMRUApp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.appid = 0;
                object.display_name = "";
                object.url_link = "";
                object.icon_path = "";
            }
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.display_name != null && message.hasOwnProperty("display_name"))
                object.display_name = message.display_name;
            if (message.url_link != null && message.hasOwnProperty("url_link"))
                object.url_link = message.url_link;
            if (message.icon_path != null && message.hasOwnProperty("icon_path"))
                object.icon_path = message.icon_path;
            return object;
        };
    
        /**
         * Converts this CMSgJumpListMRUApp to JSON.
         * @function toJSON
         * @memberof CMSgJumpListMRUApp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMSgJumpListMRUApp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMSgJumpListMRUApp;
    })();
    
    $root.CMsgSetJumpList = (function() {
    
        /**
         * Properties of a CMsgSetJumpList.
         * @exports ICMsgSetJumpList
         * @interface ICMsgSetJumpList
         * @property {string|null} [steam_path] CMsgSetJumpList steam_path
         * @property {string|null} [mru_title] CMsgSetJumpList mru_title
         * @property {Array.<ICMSgJumpListMRUApp>|null} [apps] CMsgSetJumpList apps
         * @property {Array.<ICMsgJumpListLink>|null} [links] CMsgSetJumpList links
         */
    
        /**
         * Constructs a new CMsgSetJumpList.
         * @exports CMsgSetJumpList
         * @classdesc Represents a CMsgSetJumpList.
         * @implements ICMsgSetJumpList
         * @constructor
         * @param {ICMsgSetJumpList=} [properties] Properties to set
         */
        function CMsgSetJumpList(properties) {
            this.apps = [];
            this.links = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSetJumpList steam_path.
         * @member {string} steam_path
         * @memberof CMsgSetJumpList
         * @instance
         */
        CMsgSetJumpList.prototype.steam_path = "";
    
        /**
         * CMsgSetJumpList mru_title.
         * @member {string} mru_title
         * @memberof CMsgSetJumpList
         * @instance
         */
        CMsgSetJumpList.prototype.mru_title = "";
    
        /**
         * CMsgSetJumpList apps.
         * @member {Array.<ICMSgJumpListMRUApp>} apps
         * @memberof CMsgSetJumpList
         * @instance
         */
        CMsgSetJumpList.prototype.apps = $util.emptyArray;
    
        /**
         * CMsgSetJumpList links.
         * @member {Array.<ICMsgJumpListLink>} links
         * @memberof CMsgSetJumpList
         * @instance
         */
        CMsgSetJumpList.prototype.links = $util.emptyArray;
    
        /**
         * Creates a new CMsgSetJumpList instance using the specified properties.
         * @function create
         * @memberof CMsgSetJumpList
         * @static
         * @param {ICMsgSetJumpList=} [properties] Properties to set
         * @returns {CMsgSetJumpList} CMsgSetJumpList instance
         */
        CMsgSetJumpList.create = function create(properties) {
            return new CMsgSetJumpList(properties);
        };
    
        /**
         * Encodes the specified CMsgSetJumpList message. Does not implicitly {@link CMsgSetJumpList.verify|verify} messages.
         * @function encode
         * @memberof CMsgSetJumpList
         * @static
         * @param {ICMsgSetJumpList} message CMsgSetJumpList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSetJumpList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steam_path != null && Object.hasOwnProperty.call(message, "steam_path"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.steam_path);
            if (message.mru_title != null && Object.hasOwnProperty.call(message, "mru_title"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.mru_title);
            if (message.apps != null && message.apps.length)
                for (var i = 0; i < message.apps.length; ++i)
                    $root.CMSgJumpListMRUApp.encode(message.apps[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.links != null && message.links.length)
                for (var i = 0; i < message.links.length; ++i)
                    $root.CMsgJumpListLink.encode(message.links[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSetJumpList message, length delimited. Does not implicitly {@link CMsgSetJumpList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSetJumpList
         * @static
         * @param {ICMsgSetJumpList} message CMsgSetJumpList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSetJumpList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSetJumpList message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSetJumpList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSetJumpList} CMsgSetJumpList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSetJumpList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSetJumpList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steam_path = reader.string();
                    break;
                case 2:
                    message.mru_title = reader.string();
                    break;
                case 3:
                    if (!(message.apps && message.apps.length))
                        message.apps = [];
                    message.apps.push($root.CMSgJumpListMRUApp.decode(reader, reader.uint32()));
                    break;
                case 4:
                    if (!(message.links && message.links.length))
                        message.links = [];
                    message.links.push($root.CMsgJumpListLink.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSetJumpList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSetJumpList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSetJumpList} CMsgSetJumpList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSetJumpList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSetJumpList message.
         * @function verify
         * @memberof CMsgSetJumpList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSetJumpList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steam_path != null && message.hasOwnProperty("steam_path"))
                if (!$util.isString(message.steam_path))
                    return "steam_path: string expected";
            if (message.mru_title != null && message.hasOwnProperty("mru_title"))
                if (!$util.isString(message.mru_title))
                    return "mru_title: string expected";
            if (message.apps != null && message.hasOwnProperty("apps")) {
                if (!Array.isArray(message.apps))
                    return "apps: array expected";
                for (var i = 0; i < message.apps.length; ++i) {
                    var error = $root.CMSgJumpListMRUApp.verify(message.apps[i]);
                    if (error)
                        return "apps." + error;
                }
            }
            if (message.links != null && message.hasOwnProperty("links")) {
                if (!Array.isArray(message.links))
                    return "links: array expected";
                for (var i = 0; i < message.links.length; ++i) {
                    var error = $root.CMsgJumpListLink.verify(message.links[i]);
                    if (error)
                        return "links." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgSetJumpList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSetJumpList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSetJumpList} CMsgSetJumpList
         */
        CMsgSetJumpList.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSetJumpList)
                return object;
            var message = new $root.CMsgSetJumpList();
            if (object.steam_path != null)
                message.steam_path = String(object.steam_path);
            if (object.mru_title != null)
                message.mru_title = String(object.mru_title);
            if (object.apps) {
                if (!Array.isArray(object.apps))
                    throw TypeError(".CMsgSetJumpList.apps: array expected");
                message.apps = [];
                for (var i = 0; i < object.apps.length; ++i) {
                    if (typeof object.apps[i] !== "object")
                        throw TypeError(".CMsgSetJumpList.apps: object expected");
                    message.apps[i] = $root.CMSgJumpListMRUApp.fromObject(object.apps[i]);
                }
            }
            if (object.links) {
                if (!Array.isArray(object.links))
                    throw TypeError(".CMsgSetJumpList.links: array expected");
                message.links = [];
                for (var i = 0; i < object.links.length; ++i) {
                    if (typeof object.links[i] !== "object")
                        throw TypeError(".CMsgSetJumpList.links: object expected");
                    message.links[i] = $root.CMsgJumpListLink.fromObject(object.links[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSetJumpList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSetJumpList
         * @static
         * @param {CMsgSetJumpList} message CMsgSetJumpList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSetJumpList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.apps = [];
                object.links = [];
            }
            if (options.defaults) {
                object.steam_path = "";
                object.mru_title = "";
            }
            if (message.steam_path != null && message.hasOwnProperty("steam_path"))
                object.steam_path = message.steam_path;
            if (message.mru_title != null && message.hasOwnProperty("mru_title"))
                object.mru_title = message.mru_title;
            if (message.apps && message.apps.length) {
                object.apps = [];
                for (var j = 0; j < message.apps.length; ++j)
                    object.apps[j] = $root.CMSgJumpListMRUApp.toObject(message.apps[j], options);
            }
            if (message.links && message.links.length) {
                object.links = [];
                for (var j = 0; j < message.links.length; ++j)
                    object.links[j] = $root.CMsgJumpListLink.toObject(message.links[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgSetJumpList to JSON.
         * @function toJSON
         * @memberof CMsgSetJumpList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSetJumpList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSetJumpList;
    })();
    
    $root.CMsgSetGameOverlayTargetPIDs = (function() {
    
        /**
         * Properties of a CMsgSetGameOverlayTargetPIDs.
         * @exports ICMsgSetGameOverlayTargetPIDs
         * @interface ICMsgSetGameOverlayTargetPIDs
         * @property {number|null} [browser_handle] CMsgSetGameOverlayTargetPIDs browser_handle
         * @property {Array.<number>|null} [target_pid] CMsgSetGameOverlayTargetPIDs target_pid
         */
    
        /**
         * Constructs a new CMsgSetGameOverlayTargetPIDs.
         * @exports CMsgSetGameOverlayTargetPIDs
         * @classdesc Represents a CMsgSetGameOverlayTargetPIDs.
         * @implements ICMsgSetGameOverlayTargetPIDs
         * @constructor
         * @param {ICMsgSetGameOverlayTargetPIDs=} [properties] Properties to set
         */
        function CMsgSetGameOverlayTargetPIDs(properties) {
            this.target_pid = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSetGameOverlayTargetPIDs browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgSetGameOverlayTargetPIDs
         * @instance
         */
        CMsgSetGameOverlayTargetPIDs.prototype.browser_handle = 0;
    
        /**
         * CMsgSetGameOverlayTargetPIDs target_pid.
         * @member {Array.<number>} target_pid
         * @memberof CMsgSetGameOverlayTargetPIDs
         * @instance
         */
        CMsgSetGameOverlayTargetPIDs.prototype.target_pid = $util.emptyArray;
    
        /**
         * Creates a new CMsgSetGameOverlayTargetPIDs instance using the specified properties.
         * @function create
         * @memberof CMsgSetGameOverlayTargetPIDs
         * @static
         * @param {ICMsgSetGameOverlayTargetPIDs=} [properties] Properties to set
         * @returns {CMsgSetGameOverlayTargetPIDs} CMsgSetGameOverlayTargetPIDs instance
         */
        CMsgSetGameOverlayTargetPIDs.create = function create(properties) {
            return new CMsgSetGameOverlayTargetPIDs(properties);
        };
    
        /**
         * Encodes the specified CMsgSetGameOverlayTargetPIDs message. Does not implicitly {@link CMsgSetGameOverlayTargetPIDs.verify|verify} messages.
         * @function encode
         * @memberof CMsgSetGameOverlayTargetPIDs
         * @static
         * @param {ICMsgSetGameOverlayTargetPIDs} message CMsgSetGameOverlayTargetPIDs message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSetGameOverlayTargetPIDs.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.target_pid != null && message.target_pid.length)
                for (var i = 0; i < message.target_pid.length; ++i)
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.target_pid[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSetGameOverlayTargetPIDs message, length delimited. Does not implicitly {@link CMsgSetGameOverlayTargetPIDs.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSetGameOverlayTargetPIDs
         * @static
         * @param {ICMsgSetGameOverlayTargetPIDs} message CMsgSetGameOverlayTargetPIDs message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSetGameOverlayTargetPIDs.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSetGameOverlayTargetPIDs message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSetGameOverlayTargetPIDs
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSetGameOverlayTargetPIDs} CMsgSetGameOverlayTargetPIDs
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSetGameOverlayTargetPIDs.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSetGameOverlayTargetPIDs();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    if (!(message.target_pid && message.target_pid.length))
                        message.target_pid = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.target_pid.push(reader.uint32());
                    } else
                        message.target_pid.push(reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSetGameOverlayTargetPIDs message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSetGameOverlayTargetPIDs
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSetGameOverlayTargetPIDs} CMsgSetGameOverlayTargetPIDs
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSetGameOverlayTargetPIDs.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSetGameOverlayTargetPIDs message.
         * @function verify
         * @memberof CMsgSetGameOverlayTargetPIDs
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSetGameOverlayTargetPIDs.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.target_pid != null && message.hasOwnProperty("target_pid")) {
                if (!Array.isArray(message.target_pid))
                    return "target_pid: array expected";
                for (var i = 0; i < message.target_pid.length; ++i)
                    if (!$util.isInteger(message.target_pid[i]))
                        return "target_pid: integer[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CMsgSetGameOverlayTargetPIDs message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSetGameOverlayTargetPIDs
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSetGameOverlayTargetPIDs} CMsgSetGameOverlayTargetPIDs
         */
        CMsgSetGameOverlayTargetPIDs.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSetGameOverlayTargetPIDs)
                return object;
            var message = new $root.CMsgSetGameOverlayTargetPIDs();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.target_pid) {
                if (!Array.isArray(object.target_pid))
                    throw TypeError(".CMsgSetGameOverlayTargetPIDs.target_pid: array expected");
                message.target_pid = [];
                for (var i = 0; i < object.target_pid.length; ++i)
                    message.target_pid[i] = object.target_pid[i] >>> 0;
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSetGameOverlayTargetPIDs message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSetGameOverlayTargetPIDs
         * @static
         * @param {CMsgSetGameOverlayTargetPIDs} message CMsgSetGameOverlayTargetPIDs
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSetGameOverlayTargetPIDs.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.target_pid = [];
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.target_pid && message.target_pid.length) {
                object.target_pid = [];
                for (var j = 0; j < message.target_pid.length; ++j)
                    object.target_pid[j] = message.target_pid[j];
            }
            return object;
        };
    
        /**
         * Converts this CMsgSetGameOverlayTargetPIDs to JSON.
         * @function toJSON
         * @memberof CMsgSetGameOverlayTargetPIDs
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSetGameOverlayTargetPIDs.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSetGameOverlayTargetPIDs;
    })();
    
    $root.CMsgGameOverlayTargetTextureID = (function() {
    
        /**
         * Properties of a CMsgGameOverlayTargetTextureID.
         * @exports ICMsgGameOverlayTargetTextureID
         * @interface ICMsgGameOverlayTargetTextureID
         * @property {number|null} [browser_handle] CMsgGameOverlayTargetTextureID browser_handle
         * @property {number|null} [target_pid] CMsgGameOverlayTargetTextureID target_pid
         * @property {number|null} [texture_handle] CMsgGameOverlayTargetTextureID texture_handle
         */
    
        /**
         * Constructs a new CMsgGameOverlayTargetTextureID.
         * @exports CMsgGameOverlayTargetTextureID
         * @classdesc Represents a CMsgGameOverlayTargetTextureID.
         * @implements ICMsgGameOverlayTargetTextureID
         * @constructor
         * @param {ICMsgGameOverlayTargetTextureID=} [properties] Properties to set
         */
        function CMsgGameOverlayTargetTextureID(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGameOverlayTargetTextureID browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgGameOverlayTargetTextureID
         * @instance
         */
        CMsgGameOverlayTargetTextureID.prototype.browser_handle = 0;
    
        /**
         * CMsgGameOverlayTargetTextureID target_pid.
         * @member {number} target_pid
         * @memberof CMsgGameOverlayTargetTextureID
         * @instance
         */
        CMsgGameOverlayTargetTextureID.prototype.target_pid = 0;
    
        /**
         * CMsgGameOverlayTargetTextureID texture_handle.
         * @member {number} texture_handle
         * @memberof CMsgGameOverlayTargetTextureID
         * @instance
         */
        CMsgGameOverlayTargetTextureID.prototype.texture_handle = 0;
    
        /**
         * Creates a new CMsgGameOverlayTargetTextureID instance using the specified properties.
         * @function create
         * @memberof CMsgGameOverlayTargetTextureID
         * @static
         * @param {ICMsgGameOverlayTargetTextureID=} [properties] Properties to set
         * @returns {CMsgGameOverlayTargetTextureID} CMsgGameOverlayTargetTextureID instance
         */
        CMsgGameOverlayTargetTextureID.create = function create(properties) {
            return new CMsgGameOverlayTargetTextureID(properties);
        };
    
        /**
         * Encodes the specified CMsgGameOverlayTargetTextureID message. Does not implicitly {@link CMsgGameOverlayTargetTextureID.verify|verify} messages.
         * @function encode
         * @memberof CMsgGameOverlayTargetTextureID
         * @static
         * @param {ICMsgGameOverlayTargetTextureID} message CMsgGameOverlayTargetTextureID message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGameOverlayTargetTextureID.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.target_pid != null && Object.hasOwnProperty.call(message, "target_pid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.target_pid);
            if (message.texture_handle != null && Object.hasOwnProperty.call(message, "texture_handle"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.texture_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGameOverlayTargetTextureID message, length delimited. Does not implicitly {@link CMsgGameOverlayTargetTextureID.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGameOverlayTargetTextureID
         * @static
         * @param {ICMsgGameOverlayTargetTextureID} message CMsgGameOverlayTargetTextureID message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGameOverlayTargetTextureID.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGameOverlayTargetTextureID message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGameOverlayTargetTextureID
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGameOverlayTargetTextureID} CMsgGameOverlayTargetTextureID
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGameOverlayTargetTextureID.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGameOverlayTargetTextureID();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.target_pid = reader.uint32();
                    break;
                case 3:
                    message.texture_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGameOverlayTargetTextureID message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGameOverlayTargetTextureID
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGameOverlayTargetTextureID} CMsgGameOverlayTargetTextureID
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGameOverlayTargetTextureID.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGameOverlayTargetTextureID message.
         * @function verify
         * @memberof CMsgGameOverlayTargetTextureID
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGameOverlayTargetTextureID.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.target_pid != null && message.hasOwnProperty("target_pid"))
                if (!$util.isInteger(message.target_pid))
                    return "target_pid: integer expected";
            if (message.texture_handle != null && message.hasOwnProperty("texture_handle"))
                if (!$util.isInteger(message.texture_handle))
                    return "texture_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGameOverlayTargetTextureID message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGameOverlayTargetTextureID
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGameOverlayTargetTextureID} CMsgGameOverlayTargetTextureID
         */
        CMsgGameOverlayTargetTextureID.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGameOverlayTargetTextureID)
                return object;
            var message = new $root.CMsgGameOverlayTargetTextureID();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.target_pid != null)
                message.target_pid = object.target_pid >>> 0;
            if (object.texture_handle != null)
                message.texture_handle = object.texture_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGameOverlayTargetTextureID message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGameOverlayTargetTextureID
         * @static
         * @param {CMsgGameOverlayTargetTextureID} message CMsgGameOverlayTargetTextureID
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGameOverlayTargetTextureID.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.target_pid = 0;
                object.texture_handle = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.target_pid != null && message.hasOwnProperty("target_pid"))
                object.target_pid = message.target_pid;
            if (message.texture_handle != null && message.hasOwnProperty("texture_handle"))
                object.texture_handle = message.texture_handle;
            return object;
        };
    
        /**
         * Converts this CMsgGameOverlayTargetTextureID to JSON.
         * @function toJSON
         * @memberof CMsgGameOverlayTargetTextureID
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGameOverlayTargetTextureID.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGameOverlayTargetTextureID;
    })();
    
    $root.CMsgDraggableRegionsChanged = (function() {
    
        /**
         * Properties of a CMsgDraggableRegionsChanged.
         * @exports ICMsgDraggableRegionsChanged
         * @interface ICMsgDraggableRegionsChanged
         * @property {number|null} [browser_handle] CMsgDraggableRegionsChanged browser_handle
         * @property {Array.<CMsgDraggableRegionsChanged.IDraggableRects>|null} [rects] CMsgDraggableRegionsChanged rects
         */
    
        /**
         * Constructs a new CMsgDraggableRegionsChanged.
         * @exports CMsgDraggableRegionsChanged
         * @classdesc Represents a CMsgDraggableRegionsChanged.
         * @implements ICMsgDraggableRegionsChanged
         * @constructor
         * @param {ICMsgDraggableRegionsChanged=} [properties] Properties to set
         */
        function CMsgDraggableRegionsChanged(properties) {
            this.rects = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgDraggableRegionsChanged browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgDraggableRegionsChanged
         * @instance
         */
        CMsgDraggableRegionsChanged.prototype.browser_handle = 0;
    
        /**
         * CMsgDraggableRegionsChanged rects.
         * @member {Array.<CMsgDraggableRegionsChanged.IDraggableRects>} rects
         * @memberof CMsgDraggableRegionsChanged
         * @instance
         */
        CMsgDraggableRegionsChanged.prototype.rects = $util.emptyArray;
    
        /**
         * Creates a new CMsgDraggableRegionsChanged instance using the specified properties.
         * @function create
         * @memberof CMsgDraggableRegionsChanged
         * @static
         * @param {ICMsgDraggableRegionsChanged=} [properties] Properties to set
         * @returns {CMsgDraggableRegionsChanged} CMsgDraggableRegionsChanged instance
         */
        CMsgDraggableRegionsChanged.create = function create(properties) {
            return new CMsgDraggableRegionsChanged(properties);
        };
    
        /**
         * Encodes the specified CMsgDraggableRegionsChanged message. Does not implicitly {@link CMsgDraggableRegionsChanged.verify|verify} messages.
         * @function encode
         * @memberof CMsgDraggableRegionsChanged
         * @static
         * @param {ICMsgDraggableRegionsChanged} message CMsgDraggableRegionsChanged message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgDraggableRegionsChanged.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.rects != null && message.rects.length)
                for (var i = 0; i < message.rects.length; ++i)
                    $root.CMsgDraggableRegionsChanged.DraggableRects.encode(message.rects[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgDraggableRegionsChanged message, length delimited. Does not implicitly {@link CMsgDraggableRegionsChanged.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgDraggableRegionsChanged
         * @static
         * @param {ICMsgDraggableRegionsChanged} message CMsgDraggableRegionsChanged message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgDraggableRegionsChanged.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgDraggableRegionsChanged message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgDraggableRegionsChanged
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgDraggableRegionsChanged} CMsgDraggableRegionsChanged
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgDraggableRegionsChanged.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgDraggableRegionsChanged();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    if (!(message.rects && message.rects.length))
                        message.rects = [];
                    message.rects.push($root.CMsgDraggableRegionsChanged.DraggableRects.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgDraggableRegionsChanged message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgDraggableRegionsChanged
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgDraggableRegionsChanged} CMsgDraggableRegionsChanged
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgDraggableRegionsChanged.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgDraggableRegionsChanged message.
         * @function verify
         * @memberof CMsgDraggableRegionsChanged
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgDraggableRegionsChanged.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.rects != null && message.hasOwnProperty("rects")) {
                if (!Array.isArray(message.rects))
                    return "rects: array expected";
                for (var i = 0; i < message.rects.length; ++i) {
                    var error = $root.CMsgDraggableRegionsChanged.DraggableRects.verify(message.rects[i]);
                    if (error)
                        return "rects." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgDraggableRegionsChanged message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgDraggableRegionsChanged
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgDraggableRegionsChanged} CMsgDraggableRegionsChanged
         */
        CMsgDraggableRegionsChanged.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgDraggableRegionsChanged)
                return object;
            var message = new $root.CMsgDraggableRegionsChanged();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.rects) {
                if (!Array.isArray(object.rects))
                    throw TypeError(".CMsgDraggableRegionsChanged.rects: array expected");
                message.rects = [];
                for (var i = 0; i < object.rects.length; ++i) {
                    if (typeof object.rects[i] !== "object")
                        throw TypeError(".CMsgDraggableRegionsChanged.rects: object expected");
                    message.rects[i] = $root.CMsgDraggableRegionsChanged.DraggableRects.fromObject(object.rects[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgDraggableRegionsChanged message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgDraggableRegionsChanged
         * @static
         * @param {CMsgDraggableRegionsChanged} message CMsgDraggableRegionsChanged
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgDraggableRegionsChanged.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.rects = [];
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.rects && message.rects.length) {
                object.rects = [];
                for (var j = 0; j < message.rects.length; ++j)
                    object.rects[j] = $root.CMsgDraggableRegionsChanged.DraggableRects.toObject(message.rects[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgDraggableRegionsChanged to JSON.
         * @function toJSON
         * @memberof CMsgDraggableRegionsChanged
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgDraggableRegionsChanged.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgDraggableRegionsChanged.DraggableRects = (function() {
    
            /**
             * Properties of a DraggableRects.
             * @memberof CMsgDraggableRegionsChanged
             * @interface IDraggableRects
             * @property {number|null} [x] DraggableRects x
             * @property {number|null} [y] DraggableRects y
             * @property {number|null} [width] DraggableRects width
             * @property {number|null} [height] DraggableRects height
             * @property {boolean|null} [draggable] DraggableRects draggable
             */
    
            /**
             * Constructs a new DraggableRects.
             * @memberof CMsgDraggableRegionsChanged
             * @classdesc Represents a DraggableRects.
             * @implements IDraggableRects
             * @constructor
             * @param {CMsgDraggableRegionsChanged.IDraggableRects=} [properties] Properties to set
             */
            function DraggableRects(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * DraggableRects x.
             * @member {number} x
             * @memberof CMsgDraggableRegionsChanged.DraggableRects
             * @instance
             */
            DraggableRects.prototype.x = 0;
    
            /**
             * DraggableRects y.
             * @member {number} y
             * @memberof CMsgDraggableRegionsChanged.DraggableRects
             * @instance
             */
            DraggableRects.prototype.y = 0;
    
            /**
             * DraggableRects width.
             * @member {number} width
             * @memberof CMsgDraggableRegionsChanged.DraggableRects
             * @instance
             */
            DraggableRects.prototype.width = 0;
    
            /**
             * DraggableRects height.
             * @member {number} height
             * @memberof CMsgDraggableRegionsChanged.DraggableRects
             * @instance
             */
            DraggableRects.prototype.height = 0;
    
            /**
             * DraggableRects draggable.
             * @member {boolean} draggable
             * @memberof CMsgDraggableRegionsChanged.DraggableRects
             * @instance
             */
            DraggableRects.prototype.draggable = false;
    
            /**
             * Creates a new DraggableRects instance using the specified properties.
             * @function create
             * @memberof CMsgDraggableRegionsChanged.DraggableRects
             * @static
             * @param {CMsgDraggableRegionsChanged.IDraggableRects=} [properties] Properties to set
             * @returns {CMsgDraggableRegionsChanged.DraggableRects} DraggableRects instance
             */
            DraggableRects.create = function create(properties) {
                return new DraggableRects(properties);
            };
    
            /**
             * Encodes the specified DraggableRects message. Does not implicitly {@link CMsgDraggableRegionsChanged.DraggableRects.verify|verify} messages.
             * @function encode
             * @memberof CMsgDraggableRegionsChanged.DraggableRects
             * @static
             * @param {CMsgDraggableRegionsChanged.IDraggableRects} message DraggableRects message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DraggableRects.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.x != null && Object.hasOwnProperty.call(message, "x"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.x);
                if (message.y != null && Object.hasOwnProperty.call(message, "y"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.y);
                if (message.width != null && Object.hasOwnProperty.call(message, "width"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.width);
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.height);
                if (message.draggable != null && Object.hasOwnProperty.call(message, "draggable"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.draggable);
                return writer;
            };
    
            /**
             * Encodes the specified DraggableRects message, length delimited. Does not implicitly {@link CMsgDraggableRegionsChanged.DraggableRects.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgDraggableRegionsChanged.DraggableRects
             * @static
             * @param {CMsgDraggableRegionsChanged.IDraggableRects} message DraggableRects message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DraggableRects.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a DraggableRects message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgDraggableRegionsChanged.DraggableRects
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgDraggableRegionsChanged.DraggableRects} DraggableRects
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DraggableRects.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgDraggableRegionsChanged.DraggableRects();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.x = reader.int32();
                        break;
                    case 2:
                        message.y = reader.int32();
                        break;
                    case 3:
                        message.width = reader.int32();
                        break;
                    case 4:
                        message.height = reader.int32();
                        break;
                    case 5:
                        message.draggable = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a DraggableRects message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgDraggableRegionsChanged.DraggableRects
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgDraggableRegionsChanged.DraggableRects} DraggableRects
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DraggableRects.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a DraggableRects message.
             * @function verify
             * @memberof CMsgDraggableRegionsChanged.DraggableRects
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DraggableRects.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.x != null && message.hasOwnProperty("x"))
                    if (!$util.isInteger(message.x))
                        return "x: integer expected";
                if (message.y != null && message.hasOwnProperty("y"))
                    if (!$util.isInteger(message.y))
                        return "y: integer expected";
                if (message.width != null && message.hasOwnProperty("width"))
                    if (!$util.isInteger(message.width))
                        return "width: integer expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height))
                        return "height: integer expected";
                if (message.draggable != null && message.hasOwnProperty("draggable"))
                    if (typeof message.draggable !== "boolean")
                        return "draggable: boolean expected";
                return null;
            };
    
            /**
             * Creates a DraggableRects message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgDraggableRegionsChanged.DraggableRects
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgDraggableRegionsChanged.DraggableRects} DraggableRects
             */
            DraggableRects.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgDraggableRegionsChanged.DraggableRects)
                    return object;
                var message = new $root.CMsgDraggableRegionsChanged.DraggableRects();
                if (object.x != null)
                    message.x = object.x | 0;
                if (object.y != null)
                    message.y = object.y | 0;
                if (object.width != null)
                    message.width = object.width | 0;
                if (object.height != null)
                    message.height = object.height | 0;
                if (object.draggable != null)
                    message.draggable = Boolean(object.draggable);
                return message;
            };
    
            /**
             * Creates a plain object from a DraggableRects message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgDraggableRegionsChanged.DraggableRects
             * @static
             * @param {CMsgDraggableRegionsChanged.DraggableRects} message DraggableRects
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DraggableRects.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.x = 0;
                    object.y = 0;
                    object.width = 0;
                    object.height = 0;
                    object.draggable = false;
                }
                if (message.x != null && message.hasOwnProperty("x"))
                    object.x = message.x;
                if (message.y != null && message.hasOwnProperty("y"))
                    object.y = message.y;
                if (message.width != null && message.hasOwnProperty("width"))
                    object.width = message.width;
                if (message.height != null && message.hasOwnProperty("height"))
                    object.height = message.height;
                if (message.draggable != null && message.hasOwnProperty("draggable"))
                    object.draggable = message.draggable;
                return object;
            };
    
            /**
             * Converts this DraggableRects to JSON.
             * @function toJSON
             * @memberof CMsgDraggableRegionsChanged.DraggableRects
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DraggableRects.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return DraggableRects;
        })();
    
        return CMsgDraggableRegionsChanged;
    })();
    
    $root.CMsgResizeGripChanged = (function() {
    
        /**
         * Properties of a CMsgResizeGripChanged.
         * @exports ICMsgResizeGripChanged
         * @interface ICMsgResizeGripChanged
         * @property {number|null} [browser_handle] CMsgResizeGripChanged browser_handle
         * @property {number|null} [width] CMsgResizeGripChanged width
         * @property {number|null} [height] CMsgResizeGripChanged height
         */
    
        /**
         * Constructs a new CMsgResizeGripChanged.
         * @exports CMsgResizeGripChanged
         * @classdesc Represents a CMsgResizeGripChanged.
         * @implements ICMsgResizeGripChanged
         * @constructor
         * @param {ICMsgResizeGripChanged=} [properties] Properties to set
         */
        function CMsgResizeGripChanged(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgResizeGripChanged browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgResizeGripChanged
         * @instance
         */
        CMsgResizeGripChanged.prototype.browser_handle = 0;
    
        /**
         * CMsgResizeGripChanged width.
         * @member {number} width
         * @memberof CMsgResizeGripChanged
         * @instance
         */
        CMsgResizeGripChanged.prototype.width = 0;
    
        /**
         * CMsgResizeGripChanged height.
         * @member {number} height
         * @memberof CMsgResizeGripChanged
         * @instance
         */
        CMsgResizeGripChanged.prototype.height = 0;
    
        /**
         * Creates a new CMsgResizeGripChanged instance using the specified properties.
         * @function create
         * @memberof CMsgResizeGripChanged
         * @static
         * @param {ICMsgResizeGripChanged=} [properties] Properties to set
         * @returns {CMsgResizeGripChanged} CMsgResizeGripChanged instance
         */
        CMsgResizeGripChanged.create = function create(properties) {
            return new CMsgResizeGripChanged(properties);
        };
    
        /**
         * Encodes the specified CMsgResizeGripChanged message. Does not implicitly {@link CMsgResizeGripChanged.verify|verify} messages.
         * @function encode
         * @memberof CMsgResizeGripChanged
         * @static
         * @param {ICMsgResizeGripChanged} message CMsgResizeGripChanged message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgResizeGripChanged.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.width != null && Object.hasOwnProperty.call(message, "width"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.width);
            if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.height);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgResizeGripChanged message, length delimited. Does not implicitly {@link CMsgResizeGripChanged.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgResizeGripChanged
         * @static
         * @param {ICMsgResizeGripChanged} message CMsgResizeGripChanged message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgResizeGripChanged.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgResizeGripChanged message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgResizeGripChanged
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgResizeGripChanged} CMsgResizeGripChanged
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgResizeGripChanged.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgResizeGripChanged();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.width = reader.int32();
                    break;
                case 3:
                    message.height = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgResizeGripChanged message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgResizeGripChanged
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgResizeGripChanged} CMsgResizeGripChanged
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgResizeGripChanged.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgResizeGripChanged message.
         * @function verify
         * @memberof CMsgResizeGripChanged
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgResizeGripChanged.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.width != null && message.hasOwnProperty("width"))
                if (!$util.isInteger(message.width))
                    return "width: integer expected";
            if (message.height != null && message.hasOwnProperty("height"))
                if (!$util.isInteger(message.height))
                    return "height: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgResizeGripChanged message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgResizeGripChanged
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgResizeGripChanged} CMsgResizeGripChanged
         */
        CMsgResizeGripChanged.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgResizeGripChanged)
                return object;
            var message = new $root.CMsgResizeGripChanged();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.width != null)
                message.width = object.width | 0;
            if (object.height != null)
                message.height = object.height | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgResizeGripChanged message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgResizeGripChanged
         * @static
         * @param {CMsgResizeGripChanged} message CMsgResizeGripChanged
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgResizeGripChanged.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.width = 0;
                object.height = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.width != null && message.hasOwnProperty("width"))
                object.width = message.width;
            if (message.height != null && message.hasOwnProperty("height"))
                object.height = message.height;
            return object;
        };
    
        /**
         * Converts this CMsgResizeGripChanged to JSON.
         * @function toJSON
         * @memberof CMsgResizeGripChanged
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgResizeGripChanged.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgResizeGripChanged;
    })();
    
    $root.CMsgSetWindowPosition = (function() {
    
        /**
         * Properties of a CMsgSetWindowPosition.
         * @exports ICMsgSetWindowPosition
         * @interface ICMsgSetWindowPosition
         * @property {number|null} [browser_handle] CMsgSetWindowPosition browser_handle
         * @property {number|null} [x] CMsgSetWindowPosition x
         * @property {number|null} [y] CMsgSetWindowPosition y
         * @property {number|null} [width] CMsgSetWindowPosition width
         * @property {number|null} [height] CMsgSetWindowPosition height
         * @property {number|null} [min_width] CMsgSetWindowPosition min_width
         * @property {number|null} [min_height] CMsgSetWindowPosition min_height
         */
    
        /**
         * Constructs a new CMsgSetWindowPosition.
         * @exports CMsgSetWindowPosition
         * @classdesc Represents a CMsgSetWindowPosition.
         * @implements ICMsgSetWindowPosition
         * @constructor
         * @param {ICMsgSetWindowPosition=} [properties] Properties to set
         */
        function CMsgSetWindowPosition(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSetWindowPosition browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgSetWindowPosition
         * @instance
         */
        CMsgSetWindowPosition.prototype.browser_handle = 0;
    
        /**
         * CMsgSetWindowPosition x.
         * @member {number} x
         * @memberof CMsgSetWindowPosition
         * @instance
         */
        CMsgSetWindowPosition.prototype.x = 0;
    
        /**
         * CMsgSetWindowPosition y.
         * @member {number} y
         * @memberof CMsgSetWindowPosition
         * @instance
         */
        CMsgSetWindowPosition.prototype.y = 0;
    
        /**
         * CMsgSetWindowPosition width.
         * @member {number} width
         * @memberof CMsgSetWindowPosition
         * @instance
         */
        CMsgSetWindowPosition.prototype.width = 0;
    
        /**
         * CMsgSetWindowPosition height.
         * @member {number} height
         * @memberof CMsgSetWindowPosition
         * @instance
         */
        CMsgSetWindowPosition.prototype.height = 0;
    
        /**
         * CMsgSetWindowPosition min_width.
         * @member {number} min_width
         * @memberof CMsgSetWindowPosition
         * @instance
         */
        CMsgSetWindowPosition.prototype.min_width = 0;
    
        /**
         * CMsgSetWindowPosition min_height.
         * @member {number} min_height
         * @memberof CMsgSetWindowPosition
         * @instance
         */
        CMsgSetWindowPosition.prototype.min_height = 0;
    
        /**
         * Creates a new CMsgSetWindowPosition instance using the specified properties.
         * @function create
         * @memberof CMsgSetWindowPosition
         * @static
         * @param {ICMsgSetWindowPosition=} [properties] Properties to set
         * @returns {CMsgSetWindowPosition} CMsgSetWindowPosition instance
         */
        CMsgSetWindowPosition.create = function create(properties) {
            return new CMsgSetWindowPosition(properties);
        };
    
        /**
         * Encodes the specified CMsgSetWindowPosition message. Does not implicitly {@link CMsgSetWindowPosition.verify|verify} messages.
         * @function encode
         * @memberof CMsgSetWindowPosition
         * @static
         * @param {ICMsgSetWindowPosition} message CMsgSetWindowPosition message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSetWindowPosition.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.x != null && Object.hasOwnProperty.call(message, "x"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.x);
            if (message.y != null && Object.hasOwnProperty.call(message, "y"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.y);
            if (message.width != null && Object.hasOwnProperty.call(message, "width"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.width);
            if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.height);
            if (message.min_width != null && Object.hasOwnProperty.call(message, "min_width"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.min_width);
            if (message.min_height != null && Object.hasOwnProperty.call(message, "min_height"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.min_height);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSetWindowPosition message, length delimited. Does not implicitly {@link CMsgSetWindowPosition.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSetWindowPosition
         * @static
         * @param {ICMsgSetWindowPosition} message CMsgSetWindowPosition message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSetWindowPosition.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSetWindowPosition message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSetWindowPosition
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSetWindowPosition} CMsgSetWindowPosition
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSetWindowPosition.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSetWindowPosition();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.x = reader.int32();
                    break;
                case 3:
                    message.y = reader.int32();
                    break;
                case 4:
                    message.width = reader.int32();
                    break;
                case 5:
                    message.height = reader.int32();
                    break;
                case 6:
                    message.min_width = reader.int32();
                    break;
                case 7:
                    message.min_height = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSetWindowPosition message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSetWindowPosition
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSetWindowPosition} CMsgSetWindowPosition
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSetWindowPosition.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSetWindowPosition message.
         * @function verify
         * @memberof CMsgSetWindowPosition
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSetWindowPosition.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.x != null && message.hasOwnProperty("x"))
                if (!$util.isInteger(message.x))
                    return "x: integer expected";
            if (message.y != null && message.hasOwnProperty("y"))
                if (!$util.isInteger(message.y))
                    return "y: integer expected";
            if (message.width != null && message.hasOwnProperty("width"))
                if (!$util.isInteger(message.width))
                    return "width: integer expected";
            if (message.height != null && message.hasOwnProperty("height"))
                if (!$util.isInteger(message.height))
                    return "height: integer expected";
            if (message.min_width != null && message.hasOwnProperty("min_width"))
                if (!$util.isInteger(message.min_width))
                    return "min_width: integer expected";
            if (message.min_height != null && message.hasOwnProperty("min_height"))
                if (!$util.isInteger(message.min_height))
                    return "min_height: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSetWindowPosition message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSetWindowPosition
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSetWindowPosition} CMsgSetWindowPosition
         */
        CMsgSetWindowPosition.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSetWindowPosition)
                return object;
            var message = new $root.CMsgSetWindowPosition();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.x != null)
                message.x = object.x | 0;
            if (object.y != null)
                message.y = object.y | 0;
            if (object.width != null)
                message.width = object.width | 0;
            if (object.height != null)
                message.height = object.height | 0;
            if (object.min_width != null)
                message.min_width = object.min_width | 0;
            if (object.min_height != null)
                message.min_height = object.min_height | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSetWindowPosition message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSetWindowPosition
         * @static
         * @param {CMsgSetWindowPosition} message CMsgSetWindowPosition
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSetWindowPosition.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.x = 0;
                object.y = 0;
                object.width = 0;
                object.height = 0;
                object.min_width = 0;
                object.min_height = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.x != null && message.hasOwnProperty("x"))
                object.x = message.x;
            if (message.y != null && message.hasOwnProperty("y"))
                object.y = message.y;
            if (message.width != null && message.hasOwnProperty("width"))
                object.width = message.width;
            if (message.height != null && message.hasOwnProperty("height"))
                object.height = message.height;
            if (message.min_width != null && message.hasOwnProperty("min_width"))
                object.min_width = message.min_width;
            if (message.min_height != null && message.hasOwnProperty("min_height"))
                object.min_height = message.min_height;
            return object;
        };
    
        /**
         * Converts this CMsgSetWindowPosition to JSON.
         * @function toJSON
         * @memberof CMsgSetWindowPosition
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSetWindowPosition.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSetWindowPosition;
    })();
    
    $root.CMsgShowWindow = (function() {
    
        /**
         * Properties of a CMsgShowWindow.
         * @exports ICMsgShowWindow
         * @interface ICMsgShowWindow
         * @property {number|null} [browser_handle] CMsgShowWindow browser_handle
         */
    
        /**
         * Constructs a new CMsgShowWindow.
         * @exports CMsgShowWindow
         * @classdesc Represents a CMsgShowWindow.
         * @implements ICMsgShowWindow
         * @constructor
         * @param {ICMsgShowWindow=} [properties] Properties to set
         */
        function CMsgShowWindow(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgShowWindow browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgShowWindow
         * @instance
         */
        CMsgShowWindow.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgShowWindow instance using the specified properties.
         * @function create
         * @memberof CMsgShowWindow
         * @static
         * @param {ICMsgShowWindow=} [properties] Properties to set
         * @returns {CMsgShowWindow} CMsgShowWindow instance
         */
        CMsgShowWindow.create = function create(properties) {
            return new CMsgShowWindow(properties);
        };
    
        /**
         * Encodes the specified CMsgShowWindow message. Does not implicitly {@link CMsgShowWindow.verify|verify} messages.
         * @function encode
         * @memberof CMsgShowWindow
         * @static
         * @param {ICMsgShowWindow} message CMsgShowWindow message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgShowWindow.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgShowWindow message, length delimited. Does not implicitly {@link CMsgShowWindow.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgShowWindow
         * @static
         * @param {ICMsgShowWindow} message CMsgShowWindow message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgShowWindow.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgShowWindow message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgShowWindow
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgShowWindow} CMsgShowWindow
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgShowWindow.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgShowWindow();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgShowWindow message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgShowWindow
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgShowWindow} CMsgShowWindow
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgShowWindow.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgShowWindow message.
         * @function verify
         * @memberof CMsgShowWindow
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgShowWindow.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgShowWindow message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgShowWindow
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgShowWindow} CMsgShowWindow
         */
        CMsgShowWindow.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgShowWindow)
                return object;
            var message = new $root.CMsgShowWindow();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgShowWindow message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgShowWindow
         * @static
         * @param {CMsgShowWindow} message CMsgShowWindow
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgShowWindow.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgShowWindow to JSON.
         * @function toJSON
         * @memberof CMsgShowWindow
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgShowWindow.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgShowWindow;
    })();
    
    $root.CMsgHideWindow = (function() {
    
        /**
         * Properties of a CMsgHideWindow.
         * @exports ICMsgHideWindow
         * @interface ICMsgHideWindow
         * @property {number|null} [browser_handle] CMsgHideWindow browser_handle
         */
    
        /**
         * Constructs a new CMsgHideWindow.
         * @exports CMsgHideWindow
         * @classdesc Represents a CMsgHideWindow.
         * @implements ICMsgHideWindow
         * @constructor
         * @param {ICMsgHideWindow=} [properties] Properties to set
         */
        function CMsgHideWindow(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgHideWindow browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgHideWindow
         * @instance
         */
        CMsgHideWindow.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgHideWindow instance using the specified properties.
         * @function create
         * @memberof CMsgHideWindow
         * @static
         * @param {ICMsgHideWindow=} [properties] Properties to set
         * @returns {CMsgHideWindow} CMsgHideWindow instance
         */
        CMsgHideWindow.create = function create(properties) {
            return new CMsgHideWindow(properties);
        };
    
        /**
         * Encodes the specified CMsgHideWindow message. Does not implicitly {@link CMsgHideWindow.verify|verify} messages.
         * @function encode
         * @memberof CMsgHideWindow
         * @static
         * @param {ICMsgHideWindow} message CMsgHideWindow message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgHideWindow.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgHideWindow message, length delimited. Does not implicitly {@link CMsgHideWindow.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgHideWindow
         * @static
         * @param {ICMsgHideWindow} message CMsgHideWindow message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgHideWindow.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgHideWindow message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgHideWindow
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgHideWindow} CMsgHideWindow
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgHideWindow.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgHideWindow();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgHideWindow message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgHideWindow
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgHideWindow} CMsgHideWindow
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgHideWindow.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgHideWindow message.
         * @function verify
         * @memberof CMsgHideWindow
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgHideWindow.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgHideWindow message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgHideWindow
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgHideWindow} CMsgHideWindow
         */
        CMsgHideWindow.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgHideWindow)
                return object;
            var message = new $root.CMsgHideWindow();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgHideWindow message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgHideWindow
         * @static
         * @param {CMsgHideWindow} message CMsgHideWindow
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgHideWindow.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgHideWindow to JSON.
         * @function toJSON
         * @memberof CMsgHideWindow
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgHideWindow.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgHideWindow;
    })();
    
    $root.CMsgBringWindowToFront = (function() {
    
        /**
         * Properties of a CMsgBringWindowToFront.
         * @exports ICMsgBringWindowToFront
         * @interface ICMsgBringWindowToFront
         * @property {number|null} [browser_handle] CMsgBringWindowToFront browser_handle
         */
    
        /**
         * Constructs a new CMsgBringWindowToFront.
         * @exports CMsgBringWindowToFront
         * @classdesc Represents a CMsgBringWindowToFront.
         * @implements ICMsgBringWindowToFront
         * @constructor
         * @param {ICMsgBringWindowToFront=} [properties] Properties to set
         */
        function CMsgBringWindowToFront(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgBringWindowToFront browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgBringWindowToFront
         * @instance
         */
        CMsgBringWindowToFront.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgBringWindowToFront instance using the specified properties.
         * @function create
         * @memberof CMsgBringWindowToFront
         * @static
         * @param {ICMsgBringWindowToFront=} [properties] Properties to set
         * @returns {CMsgBringWindowToFront} CMsgBringWindowToFront instance
         */
        CMsgBringWindowToFront.create = function create(properties) {
            return new CMsgBringWindowToFront(properties);
        };
    
        /**
         * Encodes the specified CMsgBringWindowToFront message. Does not implicitly {@link CMsgBringWindowToFront.verify|verify} messages.
         * @function encode
         * @memberof CMsgBringWindowToFront
         * @static
         * @param {ICMsgBringWindowToFront} message CMsgBringWindowToFront message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgBringWindowToFront.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgBringWindowToFront message, length delimited. Does not implicitly {@link CMsgBringWindowToFront.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgBringWindowToFront
         * @static
         * @param {ICMsgBringWindowToFront} message CMsgBringWindowToFront message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgBringWindowToFront.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgBringWindowToFront message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgBringWindowToFront
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgBringWindowToFront} CMsgBringWindowToFront
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgBringWindowToFront.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBringWindowToFront();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgBringWindowToFront message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgBringWindowToFront
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgBringWindowToFront} CMsgBringWindowToFront
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgBringWindowToFront.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgBringWindowToFront message.
         * @function verify
         * @memberof CMsgBringWindowToFront
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgBringWindowToFront.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgBringWindowToFront message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgBringWindowToFront
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgBringWindowToFront} CMsgBringWindowToFront
         */
        CMsgBringWindowToFront.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgBringWindowToFront)
                return object;
            var message = new $root.CMsgBringWindowToFront();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgBringWindowToFront message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgBringWindowToFront
         * @static
         * @param {CMsgBringWindowToFront} message CMsgBringWindowToFront
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgBringWindowToFront.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgBringWindowToFront to JSON.
         * @function toJSON
         * @memberof CMsgBringWindowToFront
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgBringWindowToFront.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgBringWindowToFront;
    })();
    
    $root.CMsgSetForegroundWindow = (function() {
    
        /**
         * Properties of a CMsgSetForegroundWindow.
         * @exports ICMsgSetForegroundWindow
         * @interface ICMsgSetForegroundWindow
         * @property {number|null} [browser_handle] CMsgSetForegroundWindow browser_handle
         */
    
        /**
         * Constructs a new CMsgSetForegroundWindow.
         * @exports CMsgSetForegroundWindow
         * @classdesc Represents a CMsgSetForegroundWindow.
         * @implements ICMsgSetForegroundWindow
         * @constructor
         * @param {ICMsgSetForegroundWindow=} [properties] Properties to set
         */
        function CMsgSetForegroundWindow(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSetForegroundWindow browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgSetForegroundWindow
         * @instance
         */
        CMsgSetForegroundWindow.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgSetForegroundWindow instance using the specified properties.
         * @function create
         * @memberof CMsgSetForegroundWindow
         * @static
         * @param {ICMsgSetForegroundWindow=} [properties] Properties to set
         * @returns {CMsgSetForegroundWindow} CMsgSetForegroundWindow instance
         */
        CMsgSetForegroundWindow.create = function create(properties) {
            return new CMsgSetForegroundWindow(properties);
        };
    
        /**
         * Encodes the specified CMsgSetForegroundWindow message. Does not implicitly {@link CMsgSetForegroundWindow.verify|verify} messages.
         * @function encode
         * @memberof CMsgSetForegroundWindow
         * @static
         * @param {ICMsgSetForegroundWindow} message CMsgSetForegroundWindow message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSetForegroundWindow.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSetForegroundWindow message, length delimited. Does not implicitly {@link CMsgSetForegroundWindow.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSetForegroundWindow
         * @static
         * @param {ICMsgSetForegroundWindow} message CMsgSetForegroundWindow message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSetForegroundWindow.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSetForegroundWindow message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSetForegroundWindow
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSetForegroundWindow} CMsgSetForegroundWindow
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSetForegroundWindow.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSetForegroundWindow();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSetForegroundWindow message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSetForegroundWindow
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSetForegroundWindow} CMsgSetForegroundWindow
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSetForegroundWindow.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSetForegroundWindow message.
         * @function verify
         * @memberof CMsgSetForegroundWindow
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSetForegroundWindow.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSetForegroundWindow message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSetForegroundWindow
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSetForegroundWindow} CMsgSetForegroundWindow
         */
        CMsgSetForegroundWindow.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSetForegroundWindow)
                return object;
            var message = new $root.CMsgSetForegroundWindow();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSetForegroundWindow message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSetForegroundWindow
         * @static
         * @param {CMsgSetForegroundWindow} message CMsgSetForegroundWindow
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSetForegroundWindow.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgSetForegroundWindow to JSON.
         * @function toJSON
         * @memberof CMsgSetForegroundWindow
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSetForegroundWindow.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSetForegroundWindow;
    })();
    
    $root.CMsgMaximizeRestoreWindow = (function() {
    
        /**
         * Properties of a CMsgMaximizeRestoreWindow.
         * @exports ICMsgMaximizeRestoreWindow
         * @interface ICMsgMaximizeRestoreWindow
         * @property {number|null} [browser_handle] CMsgMaximizeRestoreWindow browser_handle
         */
    
        /**
         * Constructs a new CMsgMaximizeRestoreWindow.
         * @exports CMsgMaximizeRestoreWindow
         * @classdesc Represents a CMsgMaximizeRestoreWindow.
         * @implements ICMsgMaximizeRestoreWindow
         * @constructor
         * @param {ICMsgMaximizeRestoreWindow=} [properties] Properties to set
         */
        function CMsgMaximizeRestoreWindow(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgMaximizeRestoreWindow browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgMaximizeRestoreWindow
         * @instance
         */
        CMsgMaximizeRestoreWindow.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgMaximizeRestoreWindow instance using the specified properties.
         * @function create
         * @memberof CMsgMaximizeRestoreWindow
         * @static
         * @param {ICMsgMaximizeRestoreWindow=} [properties] Properties to set
         * @returns {CMsgMaximizeRestoreWindow} CMsgMaximizeRestoreWindow instance
         */
        CMsgMaximizeRestoreWindow.create = function create(properties) {
            return new CMsgMaximizeRestoreWindow(properties);
        };
    
        /**
         * Encodes the specified CMsgMaximizeRestoreWindow message. Does not implicitly {@link CMsgMaximizeRestoreWindow.verify|verify} messages.
         * @function encode
         * @memberof CMsgMaximizeRestoreWindow
         * @static
         * @param {ICMsgMaximizeRestoreWindow} message CMsgMaximizeRestoreWindow message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgMaximizeRestoreWindow.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgMaximizeRestoreWindow message, length delimited. Does not implicitly {@link CMsgMaximizeRestoreWindow.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgMaximizeRestoreWindow
         * @static
         * @param {ICMsgMaximizeRestoreWindow} message CMsgMaximizeRestoreWindow message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgMaximizeRestoreWindow.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgMaximizeRestoreWindow message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgMaximizeRestoreWindow
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgMaximizeRestoreWindow} CMsgMaximizeRestoreWindow
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgMaximizeRestoreWindow.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgMaximizeRestoreWindow();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgMaximizeRestoreWindow message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgMaximizeRestoreWindow
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgMaximizeRestoreWindow} CMsgMaximizeRestoreWindow
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgMaximizeRestoreWindow.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgMaximizeRestoreWindow message.
         * @function verify
         * @memberof CMsgMaximizeRestoreWindow
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgMaximizeRestoreWindow.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgMaximizeRestoreWindow message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgMaximizeRestoreWindow
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgMaximizeRestoreWindow} CMsgMaximizeRestoreWindow
         */
        CMsgMaximizeRestoreWindow.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgMaximizeRestoreWindow)
                return object;
            var message = new $root.CMsgMaximizeRestoreWindow();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgMaximizeRestoreWindow message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgMaximizeRestoreWindow
         * @static
         * @param {CMsgMaximizeRestoreWindow} message CMsgMaximizeRestoreWindow
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgMaximizeRestoreWindow.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgMaximizeRestoreWindow to JSON.
         * @function toJSON
         * @memberof CMsgMaximizeRestoreWindow
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgMaximizeRestoreWindow.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgMaximizeRestoreWindow;
    })();
    
    $root.CMsgMinimizeWindow = (function() {
    
        /**
         * Properties of a CMsgMinimizeWindow.
         * @exports ICMsgMinimizeWindow
         * @interface ICMsgMinimizeWindow
         * @property {number|null} [browser_handle] CMsgMinimizeWindow browser_handle
         */
    
        /**
         * Constructs a new CMsgMinimizeWindow.
         * @exports CMsgMinimizeWindow
         * @classdesc Represents a CMsgMinimizeWindow.
         * @implements ICMsgMinimizeWindow
         * @constructor
         * @param {ICMsgMinimizeWindow=} [properties] Properties to set
         */
        function CMsgMinimizeWindow(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgMinimizeWindow browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgMinimizeWindow
         * @instance
         */
        CMsgMinimizeWindow.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgMinimizeWindow instance using the specified properties.
         * @function create
         * @memberof CMsgMinimizeWindow
         * @static
         * @param {ICMsgMinimizeWindow=} [properties] Properties to set
         * @returns {CMsgMinimizeWindow} CMsgMinimizeWindow instance
         */
        CMsgMinimizeWindow.create = function create(properties) {
            return new CMsgMinimizeWindow(properties);
        };
    
        /**
         * Encodes the specified CMsgMinimizeWindow message. Does not implicitly {@link CMsgMinimizeWindow.verify|verify} messages.
         * @function encode
         * @memberof CMsgMinimizeWindow
         * @static
         * @param {ICMsgMinimizeWindow} message CMsgMinimizeWindow message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgMinimizeWindow.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgMinimizeWindow message, length delimited. Does not implicitly {@link CMsgMinimizeWindow.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgMinimizeWindow
         * @static
         * @param {ICMsgMinimizeWindow} message CMsgMinimizeWindow message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgMinimizeWindow.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgMinimizeWindow message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgMinimizeWindow
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgMinimizeWindow} CMsgMinimizeWindow
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgMinimizeWindow.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgMinimizeWindow();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgMinimizeWindow message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgMinimizeWindow
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgMinimizeWindow} CMsgMinimizeWindow
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgMinimizeWindow.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgMinimizeWindow message.
         * @function verify
         * @memberof CMsgMinimizeWindow
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgMinimizeWindow.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgMinimizeWindow message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgMinimizeWindow
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgMinimizeWindow} CMsgMinimizeWindow
         */
        CMsgMinimizeWindow.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgMinimizeWindow)
                return object;
            var message = new $root.CMsgMinimizeWindow();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgMinimizeWindow message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgMinimizeWindow
         * @static
         * @param {CMsgMinimizeWindow} message CMsgMinimizeWindow
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgMinimizeWindow.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgMinimizeWindow to JSON.
         * @function toJSON
         * @memberof CMsgMinimizeWindow
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgMinimizeWindow.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgMinimizeWindow;
    })();
    
    $root.CMsgShowBrowserContextMenu = (function() {
    
        /**
         * Properties of a CMsgShowBrowserContextMenu.
         * @exports ICMsgShowBrowserContextMenu
         * @interface ICMsgShowBrowserContextMenu
         * @property {number|null} [browser_handle] CMsgShowBrowserContextMenu browser_handle
         */
    
        /**
         * Constructs a new CMsgShowBrowserContextMenu.
         * @exports CMsgShowBrowserContextMenu
         * @classdesc Represents a CMsgShowBrowserContextMenu.
         * @implements ICMsgShowBrowserContextMenu
         * @constructor
         * @param {ICMsgShowBrowserContextMenu=} [properties] Properties to set
         */
        function CMsgShowBrowserContextMenu(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgShowBrowserContextMenu browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgShowBrowserContextMenu
         * @instance
         */
        CMsgShowBrowserContextMenu.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgShowBrowserContextMenu instance using the specified properties.
         * @function create
         * @memberof CMsgShowBrowserContextMenu
         * @static
         * @param {ICMsgShowBrowserContextMenu=} [properties] Properties to set
         * @returns {CMsgShowBrowserContextMenu} CMsgShowBrowserContextMenu instance
         */
        CMsgShowBrowserContextMenu.create = function create(properties) {
            return new CMsgShowBrowserContextMenu(properties);
        };
    
        /**
         * Encodes the specified CMsgShowBrowserContextMenu message. Does not implicitly {@link CMsgShowBrowserContextMenu.verify|verify} messages.
         * @function encode
         * @memberof CMsgShowBrowserContextMenu
         * @static
         * @param {ICMsgShowBrowserContextMenu} message CMsgShowBrowserContextMenu message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgShowBrowserContextMenu.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgShowBrowserContextMenu message, length delimited. Does not implicitly {@link CMsgShowBrowserContextMenu.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgShowBrowserContextMenu
         * @static
         * @param {ICMsgShowBrowserContextMenu} message CMsgShowBrowserContextMenu message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgShowBrowserContextMenu.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgShowBrowserContextMenu message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgShowBrowserContextMenu
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgShowBrowserContextMenu} CMsgShowBrowserContextMenu
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgShowBrowserContextMenu.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgShowBrowserContextMenu();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgShowBrowserContextMenu message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgShowBrowserContextMenu
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgShowBrowserContextMenu} CMsgShowBrowserContextMenu
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgShowBrowserContextMenu.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgShowBrowserContextMenu message.
         * @function verify
         * @memberof CMsgShowBrowserContextMenu
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgShowBrowserContextMenu.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgShowBrowserContextMenu message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgShowBrowserContextMenu
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgShowBrowserContextMenu} CMsgShowBrowserContextMenu
         */
        CMsgShowBrowserContextMenu.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgShowBrowserContextMenu)
                return object;
            var message = new $root.CMsgShowBrowserContextMenu();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgShowBrowserContextMenu message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgShowBrowserContextMenu
         * @static
         * @param {CMsgShowBrowserContextMenu} message CMsgShowBrowserContextMenu
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgShowBrowserContextMenu.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgShowBrowserContextMenu to JSON.
         * @function toJSON
         * @memberof CMsgShowBrowserContextMenu
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgShowBrowserContextMenu.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgShowBrowserContextMenu;
    })();
    
    $root.CMsgImeSetComposition = (function() {
    
        /**
         * Properties of a CMsgImeSetComposition.
         * @exports ICMsgImeSetComposition
         * @interface ICMsgImeSetComposition
         * @property {number|null} [browser_handle] CMsgImeSetComposition browser_handle
         * @property {string|null} [text] CMsgImeSetComposition text
         */
    
        /**
         * Constructs a new CMsgImeSetComposition.
         * @exports CMsgImeSetComposition
         * @classdesc Represents a CMsgImeSetComposition.
         * @implements ICMsgImeSetComposition
         * @constructor
         * @param {ICMsgImeSetComposition=} [properties] Properties to set
         */
        function CMsgImeSetComposition(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgImeSetComposition browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgImeSetComposition
         * @instance
         */
        CMsgImeSetComposition.prototype.browser_handle = 0;
    
        /**
         * CMsgImeSetComposition text.
         * @member {string} text
         * @memberof CMsgImeSetComposition
         * @instance
         */
        CMsgImeSetComposition.prototype.text = "";
    
        /**
         * Creates a new CMsgImeSetComposition instance using the specified properties.
         * @function create
         * @memberof CMsgImeSetComposition
         * @static
         * @param {ICMsgImeSetComposition=} [properties] Properties to set
         * @returns {CMsgImeSetComposition} CMsgImeSetComposition instance
         */
        CMsgImeSetComposition.create = function create(properties) {
            return new CMsgImeSetComposition(properties);
        };
    
        /**
         * Encodes the specified CMsgImeSetComposition message. Does not implicitly {@link CMsgImeSetComposition.verify|verify} messages.
         * @function encode
         * @memberof CMsgImeSetComposition
         * @static
         * @param {ICMsgImeSetComposition} message CMsgImeSetComposition message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgImeSetComposition.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgImeSetComposition message, length delimited. Does not implicitly {@link CMsgImeSetComposition.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgImeSetComposition
         * @static
         * @param {ICMsgImeSetComposition} message CMsgImeSetComposition message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgImeSetComposition.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgImeSetComposition message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgImeSetComposition
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgImeSetComposition} CMsgImeSetComposition
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgImeSetComposition.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgImeSetComposition();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.text = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgImeSetComposition message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgImeSetComposition
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgImeSetComposition} CMsgImeSetComposition
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgImeSetComposition.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgImeSetComposition message.
         * @function verify
         * @memberof CMsgImeSetComposition
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgImeSetComposition.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.text != null && message.hasOwnProperty("text"))
                if (!$util.isString(message.text))
                    return "text: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgImeSetComposition message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgImeSetComposition
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgImeSetComposition} CMsgImeSetComposition
         */
        CMsgImeSetComposition.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgImeSetComposition)
                return object;
            var message = new $root.CMsgImeSetComposition();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.text != null)
                message.text = String(object.text);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgImeSetComposition message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgImeSetComposition
         * @static
         * @param {CMsgImeSetComposition} message CMsgImeSetComposition
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgImeSetComposition.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.text = "";
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = message.text;
            return object;
        };
    
        /**
         * Converts this CMsgImeSetComposition to JSON.
         * @function toJSON
         * @memberof CMsgImeSetComposition
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgImeSetComposition.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgImeSetComposition;
    })();
    
    $root.CMsgImeCommitText = (function() {
    
        /**
         * Properties of a CMsgImeCommitText.
         * @exports ICMsgImeCommitText
         * @interface ICMsgImeCommitText
         * @property {number|null} [browser_handle] CMsgImeCommitText browser_handle
         * @property {string|null} [text] CMsgImeCommitText text
         */
    
        /**
         * Constructs a new CMsgImeCommitText.
         * @exports CMsgImeCommitText
         * @classdesc Represents a CMsgImeCommitText.
         * @implements ICMsgImeCommitText
         * @constructor
         * @param {ICMsgImeCommitText=} [properties] Properties to set
         */
        function CMsgImeCommitText(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgImeCommitText browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgImeCommitText
         * @instance
         */
        CMsgImeCommitText.prototype.browser_handle = 0;
    
        /**
         * CMsgImeCommitText text.
         * @member {string} text
         * @memberof CMsgImeCommitText
         * @instance
         */
        CMsgImeCommitText.prototype.text = "";
    
        /**
         * Creates a new CMsgImeCommitText instance using the specified properties.
         * @function create
         * @memberof CMsgImeCommitText
         * @static
         * @param {ICMsgImeCommitText=} [properties] Properties to set
         * @returns {CMsgImeCommitText} CMsgImeCommitText instance
         */
        CMsgImeCommitText.create = function create(properties) {
            return new CMsgImeCommitText(properties);
        };
    
        /**
         * Encodes the specified CMsgImeCommitText message. Does not implicitly {@link CMsgImeCommitText.verify|verify} messages.
         * @function encode
         * @memberof CMsgImeCommitText
         * @static
         * @param {ICMsgImeCommitText} message CMsgImeCommitText message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgImeCommitText.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgImeCommitText message, length delimited. Does not implicitly {@link CMsgImeCommitText.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgImeCommitText
         * @static
         * @param {ICMsgImeCommitText} message CMsgImeCommitText message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgImeCommitText.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgImeCommitText message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgImeCommitText
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgImeCommitText} CMsgImeCommitText
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgImeCommitText.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgImeCommitText();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.text = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgImeCommitText message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgImeCommitText
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgImeCommitText} CMsgImeCommitText
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgImeCommitText.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgImeCommitText message.
         * @function verify
         * @memberof CMsgImeCommitText
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgImeCommitText.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.text != null && message.hasOwnProperty("text"))
                if (!$util.isString(message.text))
                    return "text: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgImeCommitText message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgImeCommitText
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgImeCommitText} CMsgImeCommitText
         */
        CMsgImeCommitText.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgImeCommitText)
                return object;
            var message = new $root.CMsgImeCommitText();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.text != null)
                message.text = String(object.text);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgImeCommitText message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgImeCommitText
         * @static
         * @param {CMsgImeCommitText} message CMsgImeCommitText
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgImeCommitText.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.text = "";
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = message.text;
            return object;
        };
    
        /**
         * Converts this CMsgImeCommitText to JSON.
         * @function toJSON
         * @memberof CMsgImeCommitText
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgImeCommitText.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgImeCommitText;
    })();
    
    $root.CMsgImeCancelComposition = (function() {
    
        /**
         * Properties of a CMsgImeCancelComposition.
         * @exports ICMsgImeCancelComposition
         * @interface ICMsgImeCancelComposition
         * @property {number|null} [browser_handle] CMsgImeCancelComposition browser_handle
         */
    
        /**
         * Constructs a new CMsgImeCancelComposition.
         * @exports CMsgImeCancelComposition
         * @classdesc Represents a CMsgImeCancelComposition.
         * @implements ICMsgImeCancelComposition
         * @constructor
         * @param {ICMsgImeCancelComposition=} [properties] Properties to set
         */
        function CMsgImeCancelComposition(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgImeCancelComposition browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgImeCancelComposition
         * @instance
         */
        CMsgImeCancelComposition.prototype.browser_handle = 0;
    
        /**
         * Creates a new CMsgImeCancelComposition instance using the specified properties.
         * @function create
         * @memberof CMsgImeCancelComposition
         * @static
         * @param {ICMsgImeCancelComposition=} [properties] Properties to set
         * @returns {CMsgImeCancelComposition} CMsgImeCancelComposition instance
         */
        CMsgImeCancelComposition.create = function create(properties) {
            return new CMsgImeCancelComposition(properties);
        };
    
        /**
         * Encodes the specified CMsgImeCancelComposition message. Does not implicitly {@link CMsgImeCancelComposition.verify|verify} messages.
         * @function encode
         * @memberof CMsgImeCancelComposition
         * @static
         * @param {ICMsgImeCancelComposition} message CMsgImeCancelComposition message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgImeCancelComposition.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgImeCancelComposition message, length delimited. Does not implicitly {@link CMsgImeCancelComposition.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgImeCancelComposition
         * @static
         * @param {ICMsgImeCancelComposition} message CMsgImeCancelComposition message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgImeCancelComposition.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgImeCancelComposition message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgImeCancelComposition
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgImeCancelComposition} CMsgImeCancelComposition
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgImeCancelComposition.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgImeCancelComposition();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgImeCancelComposition message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgImeCancelComposition
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgImeCancelComposition} CMsgImeCancelComposition
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgImeCancelComposition.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgImeCancelComposition message.
         * @function verify
         * @memberof CMsgImeCancelComposition
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgImeCancelComposition.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgImeCancelComposition message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgImeCancelComposition
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgImeCancelComposition} CMsgImeCancelComposition
         */
        CMsgImeCancelComposition.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgImeCancelComposition)
                return object;
            var message = new $root.CMsgImeCancelComposition();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgImeCancelComposition message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgImeCancelComposition
         * @static
         * @param {CMsgImeCancelComposition} message CMsgImeCancelComposition
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgImeCancelComposition.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.browser_handle = 0;
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            return object;
        };
    
        /**
         * Converts this CMsgImeCancelComposition to JSON.
         * @function toJSON
         * @memberof CMsgImeCancelComposition
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgImeCancelComposition.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgImeCancelComposition;
    })();
    
    $root.CMsgImeCompositionRangeChanged = (function() {
    
        /**
         * Properties of a CMsgImeCompositionRangeChanged.
         * @exports ICMsgImeCompositionRangeChanged
         * @interface ICMsgImeCompositionRangeChanged
         * @property {number|null} [browser_handle] CMsgImeCompositionRangeChanged browser_handle
         * @property {number|null} [x] CMsgImeCompositionRangeChanged x
         * @property {number|null} [y] CMsgImeCompositionRangeChanged y
         */
    
        /**
         * Constructs a new CMsgImeCompositionRangeChanged.
         * @exports CMsgImeCompositionRangeChanged
         * @classdesc Represents a CMsgImeCompositionRangeChanged.
         * @implements ICMsgImeCompositionRangeChanged
         * @constructor
         * @param {ICMsgImeCompositionRangeChanged=} [properties] Properties to set
         */
        function CMsgImeCompositionRangeChanged(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgImeCompositionRangeChanged browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgImeCompositionRangeChanged
         * @instance
         */
        CMsgImeCompositionRangeChanged.prototype.browser_handle = 0;
    
        /**
         * CMsgImeCompositionRangeChanged x.
         * @member {number} x
         * @memberof CMsgImeCompositionRangeChanged
         * @instance
         */
        CMsgImeCompositionRangeChanged.prototype.x = 0;
    
        /**
         * CMsgImeCompositionRangeChanged y.
         * @member {number} y
         * @memberof CMsgImeCompositionRangeChanged
         * @instance
         */
        CMsgImeCompositionRangeChanged.prototype.y = 0;
    
        /**
         * Creates a new CMsgImeCompositionRangeChanged instance using the specified properties.
         * @function create
         * @memberof CMsgImeCompositionRangeChanged
         * @static
         * @param {ICMsgImeCompositionRangeChanged=} [properties] Properties to set
         * @returns {CMsgImeCompositionRangeChanged} CMsgImeCompositionRangeChanged instance
         */
        CMsgImeCompositionRangeChanged.create = function create(properties) {
            return new CMsgImeCompositionRangeChanged(properties);
        };
    
        /**
         * Encodes the specified CMsgImeCompositionRangeChanged message. Does not implicitly {@link CMsgImeCompositionRangeChanged.verify|verify} messages.
         * @function encode
         * @memberof CMsgImeCompositionRangeChanged
         * @static
         * @param {ICMsgImeCompositionRangeChanged} message CMsgImeCompositionRangeChanged message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgImeCompositionRangeChanged.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.x != null && Object.hasOwnProperty.call(message, "x"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.x);
            if (message.y != null && Object.hasOwnProperty.call(message, "y"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.y);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgImeCompositionRangeChanged message, length delimited. Does not implicitly {@link CMsgImeCompositionRangeChanged.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgImeCompositionRangeChanged
         * @static
         * @param {ICMsgImeCompositionRangeChanged} message CMsgImeCompositionRangeChanged message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgImeCompositionRangeChanged.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgImeCompositionRangeChanged message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgImeCompositionRangeChanged
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgImeCompositionRangeChanged} CMsgImeCompositionRangeChanged
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgImeCompositionRangeChanged.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgImeCompositionRangeChanged();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.x = reader.uint32();
                    break;
                case 3:
                    message.y = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgImeCompositionRangeChanged message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgImeCompositionRangeChanged
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgImeCompositionRangeChanged} CMsgImeCompositionRangeChanged
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgImeCompositionRangeChanged.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgImeCompositionRangeChanged message.
         * @function verify
         * @memberof CMsgImeCompositionRangeChanged
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgImeCompositionRangeChanged.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.x != null && message.hasOwnProperty("x"))
                if (!$util.isInteger(message.x))
                    return "x: integer expected";
            if (message.y != null && message.hasOwnProperty("y"))
                if (!$util.isInteger(message.y))
                    return "y: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgImeCompositionRangeChanged message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgImeCompositionRangeChanged
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgImeCompositionRangeChanged} CMsgImeCompositionRangeChanged
         */
        CMsgImeCompositionRangeChanged.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgImeCompositionRangeChanged)
                return object;
            var message = new $root.CMsgImeCompositionRangeChanged();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.x != null)
                message.x = object.x >>> 0;
            if (object.y != null)
                message.y = object.y >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgImeCompositionRangeChanged message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgImeCompositionRangeChanged
         * @static
         * @param {CMsgImeCompositionRangeChanged} message CMsgImeCompositionRangeChanged
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgImeCompositionRangeChanged.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.x = 0;
                object.y = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.x != null && message.hasOwnProperty("x"))
                object.x = message.x;
            if (message.y != null && message.hasOwnProperty("y"))
                object.y = message.y;
            return object;
        };
    
        /**
         * Converts this CMsgImeCompositionRangeChanged to JSON.
         * @function toJSON
         * @memberof CMsgImeCompositionRangeChanged
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgImeCompositionRangeChanged.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgImeCompositionRangeChanged;
    })();
    
    $root.CMsgInspectElement = (function() {
    
        /**
         * Properties of a CMsgInspectElement.
         * @exports ICMsgInspectElement
         * @interface ICMsgInspectElement
         * @property {number|null} [browser_handle] CMsgInspectElement browser_handle
         * @property {number|null} [x] CMsgInspectElement x
         * @property {number|null} [y] CMsgInspectElement y
         */
    
        /**
         * Constructs a new CMsgInspectElement.
         * @exports CMsgInspectElement
         * @classdesc Represents a CMsgInspectElement.
         * @implements ICMsgInspectElement
         * @constructor
         * @param {ICMsgInspectElement=} [properties] Properties to set
         */
        function CMsgInspectElement(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgInspectElement browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgInspectElement
         * @instance
         */
        CMsgInspectElement.prototype.browser_handle = 0;
    
        /**
         * CMsgInspectElement x.
         * @member {number} x
         * @memberof CMsgInspectElement
         * @instance
         */
        CMsgInspectElement.prototype.x = 0;
    
        /**
         * CMsgInspectElement y.
         * @member {number} y
         * @memberof CMsgInspectElement
         * @instance
         */
        CMsgInspectElement.prototype.y = 0;
    
        /**
         * Creates a new CMsgInspectElement instance using the specified properties.
         * @function create
         * @memberof CMsgInspectElement
         * @static
         * @param {ICMsgInspectElement=} [properties] Properties to set
         * @returns {CMsgInspectElement} CMsgInspectElement instance
         */
        CMsgInspectElement.create = function create(properties) {
            return new CMsgInspectElement(properties);
        };
    
        /**
         * Encodes the specified CMsgInspectElement message. Does not implicitly {@link CMsgInspectElement.verify|verify} messages.
         * @function encode
         * @memberof CMsgInspectElement
         * @static
         * @param {ICMsgInspectElement} message CMsgInspectElement message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgInspectElement.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.x != null && Object.hasOwnProperty.call(message, "x"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.x);
            if (message.y != null && Object.hasOwnProperty.call(message, "y"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.y);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgInspectElement message, length delimited. Does not implicitly {@link CMsgInspectElement.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgInspectElement
         * @static
         * @param {ICMsgInspectElement} message CMsgInspectElement message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgInspectElement.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgInspectElement message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgInspectElement
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgInspectElement} CMsgInspectElement
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgInspectElement.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgInspectElement();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.x = reader.uint32();
                    break;
                case 3:
                    message.y = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgInspectElement message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgInspectElement
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgInspectElement} CMsgInspectElement
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgInspectElement.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgInspectElement message.
         * @function verify
         * @memberof CMsgInspectElement
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgInspectElement.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.x != null && message.hasOwnProperty("x"))
                if (!$util.isInteger(message.x))
                    return "x: integer expected";
            if (message.y != null && message.hasOwnProperty("y"))
                if (!$util.isInteger(message.y))
                    return "y: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgInspectElement message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgInspectElement
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgInspectElement} CMsgInspectElement
         */
        CMsgInspectElement.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgInspectElement)
                return object;
            var message = new $root.CMsgInspectElement();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.x != null)
                message.x = object.x >>> 0;
            if (object.y != null)
                message.y = object.y >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgInspectElement message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgInspectElement
         * @static
         * @param {CMsgInspectElement} message CMsgInspectElement
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgInspectElement.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.x = 0;
                object.y = 0;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.x != null && message.hasOwnProperty("x"))
                object.x = message.x;
            if (message.y != null && message.hasOwnProperty("y"))
                object.y = message.y;
            return object;
        };
    
        /**
         * Converts this CMsgInspectElement to JSON.
         * @function toJSON
         * @memberof CMsgInspectElement
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgInspectElement.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgInspectElement;
    })();
    
    $root.CMsgDisableF5 = (function() {
    
        /**
         * Properties of a CMsgDisableF5.
         * @exports ICMsgDisableF5
         * @interface ICMsgDisableF5
         * @property {number|null} [browser_handle] CMsgDisableF5 browser_handle
         * @property {boolean|null} [disable] CMsgDisableF5 disable
         */
    
        /**
         * Constructs a new CMsgDisableF5.
         * @exports CMsgDisableF5
         * @classdesc Represents a CMsgDisableF5.
         * @implements ICMsgDisableF5
         * @constructor
         * @param {ICMsgDisableF5=} [properties] Properties to set
         */
        function CMsgDisableF5(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgDisableF5 browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgDisableF5
         * @instance
         */
        CMsgDisableF5.prototype.browser_handle = 0;
    
        /**
         * CMsgDisableF5 disable.
         * @member {boolean} disable
         * @memberof CMsgDisableF5
         * @instance
         */
        CMsgDisableF5.prototype.disable = false;
    
        /**
         * Creates a new CMsgDisableF5 instance using the specified properties.
         * @function create
         * @memberof CMsgDisableF5
         * @static
         * @param {ICMsgDisableF5=} [properties] Properties to set
         * @returns {CMsgDisableF5} CMsgDisableF5 instance
         */
        CMsgDisableF5.create = function create(properties) {
            return new CMsgDisableF5(properties);
        };
    
        /**
         * Encodes the specified CMsgDisableF5 message. Does not implicitly {@link CMsgDisableF5.verify|verify} messages.
         * @function encode
         * @memberof CMsgDisableF5
         * @static
         * @param {ICMsgDisableF5} message CMsgDisableF5 message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgDisableF5.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.disable != null && Object.hasOwnProperty.call(message, "disable"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.disable);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgDisableF5 message, length delimited. Does not implicitly {@link CMsgDisableF5.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgDisableF5
         * @static
         * @param {ICMsgDisableF5} message CMsgDisableF5 message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgDisableF5.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgDisableF5 message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgDisableF5
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgDisableF5} CMsgDisableF5
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgDisableF5.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgDisableF5();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.disable = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgDisableF5 message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgDisableF5
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgDisableF5} CMsgDisableF5
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgDisableF5.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgDisableF5 message.
         * @function verify
         * @memberof CMsgDisableF5
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgDisableF5.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.disable != null && message.hasOwnProperty("disable"))
                if (typeof message.disable !== "boolean")
                    return "disable: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgDisableF5 message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgDisableF5
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgDisableF5} CMsgDisableF5
         */
        CMsgDisableF5.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgDisableF5)
                return object;
            var message = new $root.CMsgDisableF5();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.disable != null)
                message.disable = Boolean(object.disable);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgDisableF5 message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgDisableF5
         * @static
         * @param {CMsgDisableF5} message CMsgDisableF5
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgDisableF5.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.disable = false;
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.disable != null && message.hasOwnProperty("disable"))
                object.disable = message.disable;
            return object;
        };
    
        /**
         * Converts this CMsgDisableF5 to JSON.
         * @function toJSON
         * @memberof CMsgDisableF5
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgDisableF5.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgDisableF5;
    })();
    
    $root.CMsgStartDownload = (function() {
    
        /**
         * Properties of a CMsgStartDownload.
         * @exports ICMsgStartDownload
         * @interface ICMsgStartDownload
         * @property {number|null} [browser_handle] CMsgStartDownload browser_handle
         * @property {string|null} [url] CMsgStartDownload url
         */
    
        /**
         * Constructs a new CMsgStartDownload.
         * @exports CMsgStartDownload
         * @classdesc Represents a CMsgStartDownload.
         * @implements ICMsgStartDownload
         * @constructor
         * @param {ICMsgStartDownload=} [properties] Properties to set
         */
        function CMsgStartDownload(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgStartDownload browser_handle.
         * @member {number} browser_handle
         * @memberof CMsgStartDownload
         * @instance
         */
        CMsgStartDownload.prototype.browser_handle = 0;
    
        /**
         * CMsgStartDownload url.
         * @member {string} url
         * @memberof CMsgStartDownload
         * @instance
         */
        CMsgStartDownload.prototype.url = "";
    
        /**
         * Creates a new CMsgStartDownload instance using the specified properties.
         * @function create
         * @memberof CMsgStartDownload
         * @static
         * @param {ICMsgStartDownload=} [properties] Properties to set
         * @returns {CMsgStartDownload} CMsgStartDownload instance
         */
        CMsgStartDownload.create = function create(properties) {
            return new CMsgStartDownload(properties);
        };
    
        /**
         * Encodes the specified CMsgStartDownload message. Does not implicitly {@link CMsgStartDownload.verify|verify} messages.
         * @function encode
         * @memberof CMsgStartDownload
         * @static
         * @param {ICMsgStartDownload} message CMsgStartDownload message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgStartDownload.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.browser_handle != null && Object.hasOwnProperty.call(message, "browser_handle"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.browser_handle);
            if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgStartDownload message, length delimited. Does not implicitly {@link CMsgStartDownload.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgStartDownload
         * @static
         * @param {ICMsgStartDownload} message CMsgStartDownload message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgStartDownload.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgStartDownload message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgStartDownload
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgStartDownload} CMsgStartDownload
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgStartDownload.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgStartDownload();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.browser_handle = reader.uint32();
                    break;
                case 2:
                    message.url = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgStartDownload message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgStartDownload
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgStartDownload} CMsgStartDownload
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgStartDownload.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgStartDownload message.
         * @function verify
         * @memberof CMsgStartDownload
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgStartDownload.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                if (!$util.isInteger(message.browser_handle))
                    return "browser_handle: integer expected";
            if (message.url != null && message.hasOwnProperty("url"))
                if (!$util.isString(message.url))
                    return "url: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgStartDownload message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgStartDownload
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgStartDownload} CMsgStartDownload
         */
        CMsgStartDownload.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgStartDownload)
                return object;
            var message = new $root.CMsgStartDownload();
            if (object.browser_handle != null)
                message.browser_handle = object.browser_handle >>> 0;
            if (object.url != null)
                message.url = String(object.url);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgStartDownload message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgStartDownload
         * @static
         * @param {CMsgStartDownload} message CMsgStartDownload
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgStartDownload.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.browser_handle = 0;
                object.url = "";
            }
            if (message.browser_handle != null && message.hasOwnProperty("browser_handle"))
                object.browser_handle = message.browser_handle;
            if (message.url != null && message.hasOwnProperty("url"))
                object.url = message.url;
            return object;
        };
    
        /**
         * Converts this CMsgStartDownload to JSON.
         * @function toJSON
         * @memberof CMsgStartDownload
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgStartDownload.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgStartDownload;
    })();

    return $root;
});
